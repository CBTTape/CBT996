./ ADD NAME=$$LIB    0101-19004-19004-0953-00001-00001-00000-APLKS   17
     USERID().ASUTIL.COBOL
./ ADD NAME=$$UPDT01 0133-20028-21188-0910-00021-00001-00000-APLKS   37
     2020-04-28  ASTSRT2B chg add test cases
     2020-04-27  DTEB2G   new base day to gregorian date
     2020-04-28  VBINSRCH chg handle errors with RETURN-CODE
     2020-04-28  VBINSRH1 chg handle errors with RETURN-CODE
     2020-04-28  VHEAPSRT chg handle errors with RETURN-CODE
     2020-05-13  ASUMDHEX chg fix handling partial lines
     2020-06-05  DTEDOW1  new gregorian date to day of week
     2020-06-08  DTEDOW2  new gregorian date to ISO-8601 day of week
     2020-06-08  DTEG2B   new gregorian date to base day
     2020-06-08  DTEG2J   new gregorian date to julian date
     2020-06-08  DTEG2W   new gregorian date to ISO-8601 work week
     2020-06-08  DTEJ2G   new julian date to gregorian date
     2020-06-08  DTEW2G   new year & week to gregorian date
     2020-06-25  ASTSVC1B chg add test cases
     2020-08-24  AS5CFDTA new copybook for C/C++ FLDATA
     2020-08-27  AS5PODIR new copybook PDS/PDSE directory
     2020-09-01  ASTSVC2B chg add test cases
     2020-10-02  AS5ENVCA chg add some JSCB info
     2021-04-22  ASUMETXT chg follow LE messageing standards
     2021-07-07  ASUMDHEX chg print blank line prior to 1st heading
     2021-07-07  ASUMVHEX chg print blank line prior to 1st heading
./ ADD NAME=$DIR     0135-17264-21305-0923-00034-00011-00000-APLKS   23
*   CBT#... FILE...      Aritecture Services                  LKS

 LOADMEM   CMPJCL    EXECJCL
 --------  --------  --------
           COBBCL              compile/link individual pgm/sub-pgm(s)
           COBALL              compile/link all programs

 ASTDATEB  COBALL    ASTIVP06  test LE date callable svc(s)
 ASTMSG1B  COBALL    ASTIVP01  test ASU messages using LE svc(s)
 ASTSRT1B  COBALL    ASTIVP07  test ASU heap sort & binary search
                               ..& fibonaccian search
 ASTSRT2B  COBALL    ASTIVP07  test COBOL heap sort & binary search
 ASTSTR1B  COBALL    ASTIVP02  test ASU STRING svc(s)
 ASTSVC1B  COBALL    ASTIVP06  test LE callable svc(s)
 ASTSVC2B  COBALL    ASTIVP06  test use of C/C++ functions
 ASUDNOFB  COBALL    ASTIVP02  return number of find(s) BPOS
 ASUDN2TB  COBALL    ASTIVP02  convert nbr to text
 ASUMDHEX  COBALL    ASTIVP04  CEEMOUT horizontal hex
 ASUMETXT  COBALL              dispatch error message(s)
 ASUMVHEX  COBALL    ASTIVP04  CEEMOUT vertical hex
 ASUP2DSB  COBBCL    ASTIVP03  copy PARM= statement to QSAM
     -or-  COBALL              ..with resolved symbolic(s)

 DTEB2G    COBALL    ASTIVP06  base day to gregorian date
 DTEDOW1   COBALL    ASTIVP06  day of week (nbr & text)
 DTEDOW2   COBALL    ASTIVP06  ISO-8601 day of week (nbr & text)
 DTEG2B    COBALL    ASTIVP06  gregorian date to base day
 DTEG2J    COBALL    ASTIVP06  gregorian date to julian date
 DTEG2W    COBALL    ASTIVP06  gregorian date to ISO-8601 work week
 DTEJ2G    COBALL    ASTIVP06  julian date to gregorian date
 DTEW2G    COBALL    ASTIVP06  year & week to gregorian date
 VBINSRCH  COBALL    ASTIVP07  binary search (1st match)
 VBINSRH1  COBALL    ASTIVP07  binary search (>= srcharg)
 VHEAPSRT  COBALL    ASTIVP07  heap sort
./ ADD NAME=ASTBSZ1B 0104-22356-22361-1109-00332-00869-00000-APLKS   55
000100 PROCESS DATA(31),NODYN,NUMPROC(PFD),NOINVDATA,TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTBSZ1B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700* ------------------------------------------------------------ *
000800* ARCHITECTURE SERVICES FACILITY
000900* IVP TESTING
001000* COBOL MAIN ROUTINE
001100*
001200* PROGRAM ID: ASTBSZ1B
001300*      TITLE: Process the output of ASUBSZAB
001400*       DATE: 2022/12/22
001500*
001600*       DESC: read output of ASUBSZAB, generate simple report
001700*
001800* ------------------------------------------------------------ *
001900* MAINTENANCE HISTORY:
002000*
002100* YYYY/MM/DD
002200*
002300* ------------------------------------------------------------ *
002400     SKIP2
002500 INPUT-OUTPUT SECTION.
002600 FILE-CONTROL.
002700     SELECT BSZDATA     ASSIGN UT-S-SYSUT1.
002800     SKIP2
002900 DATA DIVISION.
003000 FILE SECTION.
003100
003200 FD  BSZDATA
003300     LABEL RECORDS ARE STANDARD
003400     RECORDING MODE IS F
003500     BLOCK CONTAINS 0 CHARACTERS.
003600 01  BSZDATA-T1-RECORD.
003700     05  BSZDATA-T1-TYPE     PIC X(01).
003800     05  BSZDATA-T1-AM       PIC X(01).
003900     05  FILLER              PIC X(01).
004000     05  BSZDATA-T1-FLAG     PIC X(01).
004100     05  FILLER              PIC X(04).
004200     05  BSZDATA-T1-SEQNO    PIC S9(9) COMP-5.
004300     05  BSZDATA-T1-LRECL    PIC S9(9) COMP-5.
004400     05  BSZDATA-T1-RECCNT   PIC S9(9) COMP-5.
004500     05  BSZDATA-T1-RCINO    PIC S9(9) COMP-5.
004600     05  BSZDATA-T1-XRBA     PIC X(08).
004700
004800 01  BSZDATA-T2-RECORD.
004900     05  BSZDATA-T2-TYPE     PIC X(01).
005000     05  BSZDATA-T2-AM       PIC X(01).
005100     05  BSZDATA-T2-ORG      PIC X(01).
005200     05  BSZDATA-T2-FLAG     PIC X(01).
005300     05  FILLER              PIC X(04).
005400     05  BSZDATA-T2-SEQNO    PIC S9(9) COMP-5.
005500     05  BSZDATA-T2-BLKSZ    PIC S9(9) COMP-5.
005600     05  BSZDATA-T2-BLKCNT   PIC S9(9) COMP-5.
005700     05  BSZDATA-T2-RCINO    PIC S9(9) COMP-5.
005800     05  BSZDATA-T2-XRBA     PIC X(08).
005900
006000 01  BSZDATA-T3-RECORD.
006100     05  BSZDATA-T3-TYPE     PIC X(01).
006200     05  BSZDATA-T3-AM       PIC X(01).
006300     05  BSZDATA-T3-ORG      PIC X(01).
006400     05  BSZDATA-T3-FLAG     PIC X(01).
006500     05  FILLER              PIC X(04).
006600     05  BSZDATA-T3-SEQNO    PIC S9(9) COMP-5.
006700     05  BSZDATA-T3-CIGAP    PIC S9(9) COMP-5.
006800     05  BSZDATA-T3-GAPCNT   PIC S9(9) COMP-5.
006900     05  BSZDATA-T3-RCINO    PIC S9(9) COMP-5.
007000     05  BSZDATA-T3-XRBA     PIC X(08).
007100     SKIP2
007200 WORKING-STORAGE SECTION.
007300 01  FILLER.
007400     03  WS-EYE-CATCHER PIC X(25)
007500              VALUE "BUZZARD CREEK TECH, INC. ".
007600     SKIP1
007700     03  WS-PGMID       PIC X(08) VALUE "ASTBSZ1B".
007800     03  WS-PARM-LENGTH      PIC S9(9) BINARY.
007900     03  WS-PARM-STMT.
008000         05  WS-PARM-LEN     PIC  9(4) BINARY.
008100         05  WS-PARM-TEXT    PIC X(256).
008200     03  WS-PARM-POS         PIC  9(4) BINARY.
008300     03  WS-STR-LEN          PIC  9(4) BINARY.
008400
008500 01  WS-HDLNE-001.
008600     03  FILLER         PIC X(32) VALUE SPACE.
008700     03  FILLER         PIC X(03) VALUE "GAP".
008800     03  FILLER         PIC X(07) VALUE SPACE.
008900     03  FILLER         PIC X(06) VALUE "GAPCNT".
009000     03  FILLER         PIC X(05) VALUE SPACE.
009100     03  FILLER         PIC X(08) VALUE "RELATIVE".
009200
009300 01  WS-HDLNE-002.
009400     03  FILLER         PIC X(30) VALUE SPACE.
009500     03  FILLER         PIC X(05) VALUE "BLKSZ".
009600     03  FILLER         PIC X(07) VALUE SPACE.
009700     03  FILLER         PIC X(06) VALUE "BLKCNT".
009800     03  FILLER         PIC X(11) VALUE SPACE.
009900     03  FILLER         PIC X(02) VALUE "CI".
010000
010100 01  WS-HDLNE-003.
010200     03  FILLER         PIC X(01) VALUE SPACE.
010300     03  FILLER         PIC X(04) VALUE "TYPE".
010400     03  FILLER         PIC X(03) VALUE SPACE.
010500     03  FILLER         PIC X(02) VALUE "AM".
010600     03  FILLER         PIC X(08) VALUE SPACE.
010700     03  FILLER         PIC X(05) VALUE "SEQNO".
010800     03  FILLER         PIC X(07) VALUE SPACE.
010900     03  FILLER         PIC X(05) VALUE "LRECL".
011000     03  FILLER         PIC X(07) VALUE SPACE.
011100     03  FILLER         PIC X(06) VALUE "RECCNT".
011200     03  FILLER         PIC X(10) VALUE SPACE.
011300     03  FILLER         PIC X(03) VALUE "NBR".
011400     03  FILLER         PIC X(17) VALUE SPACE.
011500     03  FILLER         PIC X(04) VALUE "XRBA".
011600
011700 01  WS-DTLNE-001 VALUE SPACE.
011800     03  FILLER              PIC X(03).
011900     03  WS-DTLNE-TYPE       PIC X(01).
012000     03  FILLER              PIC X(03).
012100     03  WS-DTLNE-AM         PIC X(04).
012200     03  FILLER              PIC X(02).
012300     03  WS-DTLNE-SEQNO      PIC Z(9)9(1).
012400     03  FILLER              PIC X(02).
012500     03  WS-DTLNE-LRECL      PIC Z(9)9(1)-.
012600     03  FILLER              PIC X(02).
012700     03  WS-DTLNE-RECCNT     PIC Z(9)9(1).
012800     03  FILLER              PIC X(03).
012900     03  WS-DTLNE-RCINO      PIC Z(9)9(1).
013000     03  FILLER              PIC X(03).
013100     03  WS-DTLNE-LIT1       PIC X(02).
013200     03  WS-DTLNE-XRBA       PIC X(16).
013300     03  WS-DTLNE-LIT2       PIC X(01).
013400     SKIP2
013500 LOCAL-STORAGE SECTION.
013600 01  FILLER.
013700     03  LS-BSZDATA-FLAG     PIC X(01).
013800       88  BSZDATA-EOF          VALUE "Y".
013900     03  LS-REPORT-MODE      PIC X(02).
014000     03  LS-LEMODULE         PIC X(08).
014100     EJECT
014200 PROCEDURE DIVISION.
014300     SKIP2
014400 DECLARATIVES.
014500 0010-00-DEBUG SECTION.
014600     USE FOR DEBUGGING ON ALL PROCEDURES.
014700     SKIP1
014800 0010-10-DEBUG.
014900     DISPLAY DEBUG-ITEM
015000     SKIP1
015100     CONTINUE.
015200*0020-00-DEBUG SECTION.
015300**   USE FOR DEBUGGING ON PARAGRAPH_NAME
015400     SKIP1
015500*0020-10-DEBUG.
015600*    STATEMENTS ...
015700     SKIP1
015800     CONTINUE.
015900*0030-00-DEBUG SECTION.
016000**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
016100     SKIP1
016200*0030-10-DEBUG.
016300*    STATEMENTS ...
016400     SKIP2
016500     CONTINUE.
016600 END DECLARATIVES.
016700     SKIP2
016800     CONTINUE.
016900 0000-00-INITIALIZATION.
017000     MOVE SPACE TO LS-REPORT-MODE
017100*    CALL CEE3PR2 - Query PARM string long
017200     MOVE +258      TO WS-PARM-LENGTH
017300     MOVE "CEE3PR2" TO LS-LEMODULE
017400     CALL LS-LEMODULE
017500          USING WS-PARM-LENGTH
017600                WS-PARM-STMT
017700                OMITTED
017800     END-CALL
017900
018000     IF WS-PARM-LENGTH = ZERO
018100       DISPLAY WS-PGMID
018200            " - PARM STATEMENT NOT SPECIFIED"
018300     END-IF
018400
018500     IF WS-PARM-LENGTH > ZERO AND <= +3
018600       IF NOT (WS-PARM-TEXT (1:2) = "T1" OR "T2" OR "T3")
018700         DISPLAY WS-PGMID
018800              " - INVALID REPORT MODE " WS-PARM-TEXT (1:2)
018900         GO TO 9000-00-RETURN
019000       ELSE
019100         MOVE WS-PARM-TEXT (1:2) TO LS-REPORT-MODE
019200       END-IF
019300     END-IF
019400
019500     DISPLAY WS-PGMID
019600          " - REPORT MODE IS " LS-REPORT-MODE
019700
019800     OPEN INPUT BSZDATA
019900
020000     MOVE "N" TO LS-BSZDATA-FLAG
020100
020200     DISPLAY WS-PGMID
020300          ": IVP for ASTBSZ1B, block size analysis"
020400     DISPLAY " "
020500     DISPLAY WS-PGMID
020600          ": Process output of ASUBSZAB"
020700     DISPLAY " "
020800     DISPLAY WS-PGMID
020900          ": "
021000          WS-HDLNE-001
021100     DISPLAY WS-PGMID
021200          ": "
021300          WS-HDLNE-002
021400     DISPLAY WS-PGMID
021500          ": "
021600          WS-HDLNE-003
021700
021800     CONTINUE.
021900 0100-00-MAINLINE.
022000
022100     READ BSZDATA
022200          AT END
022300            SET BSZDATA-EOF TO TRUE
022400     END-READ
022500D    DISPLAY WS-PGMID
022600D         ": JUST READ SYSUT1 " LS-BSZDATA-FLAG
022700D    DISPLAY WS-PGMID
022800D         ": TYPE=" BSZDATA-T1-TYPE
022900D         "  AM=" BSZDATA-T1-AM
023000D         "  FLAG=" BSZDATA-T1-FLAG
023100     IF BSZDATA-EOF
023200       CLOSE BSZDATA
023300       GO TO 8000-00-ROUTINES
023400     END-IF
023500D    DISPLAY WS-PGMID
023600D         ": PAST THE READ OF SYSUT1 "
023700
023800     IF BSZDATA-T1-FLAG = "E"
023900       GO TO 0100-00-MAINLINE
024000     END-IF
024100D    DISPLAY WS-PGMID
024200D         ": PAST CHECKING THE FLAG "
024300
024400     MOVE SPACE TO WS-DTLNE-001
024500
024600     EVALUATE BSZDATA-T1-TYPE
024700       WHEN "1"
024800         IF LS-REPORT-MODE = "T1" OR SPACE
024900           MOVE BSZDATA-T1-TYPE     TO WS-DTLNE-TYPE
025000           IF BSZDATA-T1-AM = "Q"
025100             MOVE "QSAM"            TO WS-DTLNE-AM
025200           END-IF
025300           IF BSZDATA-T1-AM = "V"
025400             MOVE "VSAM"            TO WS-DTLNE-AM
025500             MOVE BSZDATA-T1-RCINO  TO WS-DTLNE-RCINO
025600             MOVE "x'"              TO WS-DTLNE-LIT1
025700             MOVE FUNCTION HEX-OF(BSZDATA-T1-XRBA)
025800                  TO WS-DTLNE-XRBA
025900             MOVE "'"               TO WS-DTLNE-LIT2
026000           END-IF
026100           MOVE BSZDATA-T1-SEQNO    TO WS-DTLNE-SEQNO
026200           MOVE BSZDATA-T1-LRECL    TO WS-DTLNE-LRECL
026300           MOVE BSZDATA-T1-RECCNT   TO WS-DTLNE-RECCNT
026400           DISPLAY WS-PGMID
026500                ": "
026600                WS-DTLNE-001
026700         END-IF
026800       WHEN "2"
026900         IF LS-REPORT-MODE = "T2" OR SPACE
027000           MOVE BSZDATA-T2-TYPE     TO WS-DTLNE-TYPE
027100           IF BSZDATA-T2-AM = "Q"
027200             MOVE "QSAM"            TO WS-DTLNE-AM
027300           END-IF
027400           IF BSZDATA-T2-AM = "V"
027500             MOVE "VSAM"            TO WS-DTLNE-AM
027600             MOVE BSZDATA-T2-RCINO  TO WS-DTLNE-RCINO
027700             MOVE "x'"              TO WS-DTLNE-LIT1
027800             MOVE FUNCTION HEX-OF(BSZDATA-T2-XRBA)
027900                  TO WS-DTLNE-XRBA
028000             MOVE "'"               TO WS-DTLNE-LIT2
028100           END-IF
028200           MOVE BSZDATA-T2-SEQNO    TO WS-DTLNE-SEQNO
028300           MOVE BSZDATA-T2-BLKSZ    TO WS-DTLNE-LRECL
028400           MOVE BSZDATA-T2-BLKCNT   TO WS-DTLNE-RECCNT
028500           DISPLAY WS-PGMID
028600                ": "
028700                WS-DTLNE-001
028800         END-IF
028900       WHEN "3"
029000         IF LS-REPORT-MODE = "T3" OR SPACE
029100           MOVE BSZDATA-T3-TYPE     TO WS-DTLNE-TYPE
029200           IF BSZDATA-T3-AM = "Q"
029300             MOVE "QSAM"            TO WS-DTLNE-AM
029400           END-IF
029500           IF BSZDATA-T3-AM = "V"
029600             MOVE "VSAM"            TO WS-DTLNE-AM
029700             MOVE BSZDATA-T3-RCINO  TO WS-DTLNE-RCINO
029800             MOVE "x'"              TO WS-DTLNE-LIT1
029900             MOVE FUNCTION HEX-OF(BSZDATA-T3-XRBA)
030000                  TO WS-DTLNE-XRBA
030100             MOVE "'"               TO WS-DTLNE-LIT2
030200           END-IF
030300           MOVE BSZDATA-T3-SEQNO    TO WS-DTLNE-SEQNO
030400           MOVE BSZDATA-T3-CIGAP    TO WS-DTLNE-LRECL
030500           MOVE BSZDATA-T3-GAPCNT   TO WS-DTLNE-RECCNT
030600           DISPLAY WS-PGMID
030700                ": "
030800                WS-DTLNE-001
030900         END-IF
031000       WHEN OTHER
031100         DISPLAY WS-PGMID
031200              ": INVALID RECORD TYPE " BSZDATA-T1-TYPE
031300     END-EVALUATE
031400
031500     GO TO 0100-00-MAINLINE
031600
031700     CONTINUE.
031800 8000-00-ROUTINES.
031900
032000     SKIP2
032100     CONTINUE.
032200 9000-00-RETURN.
032300*    * ------------------------------------------------------- *
032400*    * RETURN TO CALLER
032500*    * ------------------------------------------------------- *
032600
032700     DISPLAY " "
032800     DISPLAY WS-PGMID
032900          " FINISHED WITH ASTBSZ1B"
033000
033100     EXIT PROGRAM.
033200     GOBACK.
./ ADD NAME=ASTDATEB 0121-14180-21272-1411-01268-01252-00000-APLKS   33
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTDATEB.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700*--------------------------------------------------------------*
000800*               ** PROGRAM DESCRIPTION **                      *
000900*                                                              *
001000*    NAME: ASTDATEB                                            *
001100*    APPL: Architecture Services Utility                       *
001200*    DESC: Test sub-program to access LE date services.        *
001300* PURPOSE: Sub-program to drive the LE date services.          *
001400*                                                              *
001500* Called Routine(s):                                           *
001600*    ASUMETXT                                                  *
001700*    CEEDATE                                                   *
001800*    CEEDAYS                                                   *
001900*    CEEDYWK                                                   *
002000*    CEEFTDS                                                   *
002100*    CEESIABS                                                  *
002200*                                                              *
002300* INPUT: CALL 'ASTDATEB'                                       *
002400*             USING ASCA-COMMAREA                              *
002500*                   ASUDATE-ACTION                             *
002600*                   ASUDATE-INPUT                              *
002700*                   ASUDATE-OUTPUT                             *
002800*                   AS5FDBK-COND-AREA                          *
002900*                                                              *
003000*--------------------------------------------------------------*
003100     SKIP2
003200*--------------------------------------------------------------*
003300*               ** HISTORY OF REVISIONS **                     *
003400* DESCRIPTION                                           CHNGID *
003500* ____________________________________________________  _______*
003600*                                                              *
003700* 10/17/01 NEW                                                 *
003800*                                                              *
003900*--------------------------------------------------------------*
004000     SKIP2
004100 DATA DIVISION.
004200
004300 WORKING-STORAGE SECTION.
004400*    PERSISTENT DATA
004500
004600 01  FILLER.
004700     03  WS-EYE-CATCHER PIC X(25)
004800              VALUE "BUZZARD CREEK TECH, INC. ".
004900     03  WS-PGMID       PIC X(08) VALUE "ASTDATEB".
005000
005100 01  FILLER.
005200     03  WS-LILIAN-DAYS      PIC S9(9) BINARY SYNC VALUE ZERO.
005300     03  WS-LILIAN-SEC                 COMP-2      VALUE ZERO.
005400     03  WS-GREGORIAN-DT     PIC X(17) VALUE ZERO.
005500*        FORMAT: YYYYMMDDHHMISS999
005600
005700 01  FILLER.
005800     03  LE-MSG-DEST         PIC S9(9) BINARY VALUE +2.
005900     03  DFLT-DATE-FULL-MASK.
006000         05  DFLT-DATE-FULL-MASK-VLEN  PIC S9(4)
006100                                       BINARY VALUE +24.
006200         05  DFLT-DATE-FULL-MASK-VTXT  PIC X(80)
006300             VALUE '%A %B %d, %Y %x %X %j %U'.
006400     03  DFLT-DATE-ABBR-MASK.
006500         05  DFLT-DATE-ABBR-MASK-VLEN  PIC S9(4)
006600                                       BINARY VALUE +12.
006700         05  DFLT-DATE-ABBR-MASK-VTXT  PIC X(80)
006800             VALUE '%a %b %e, %Y'.
006900
007000 01  WS-MONTH-TITLE-TABLE.
007100     03  FILLER.
007200         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
007300         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
007400         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
007500     03  FILLER.
007600         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
007700         05  FILLER     PIC S9(3) COMP-3 VALUE +28.
007800         05  FILLER     PIC S9(3) COMP-3 VALUE +29.
007900     03  FILLER.
008000         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008100         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
008200         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
008300     03  FILLER.
008400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008600         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008700     03  FILLER.
008800         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
008900         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009000         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009100     03  FILLER.
009200         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009500     03  FILLER.
009600         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
009700         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
009800         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
009900     03  FILLER.
010000         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010100         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
010200         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
010300     03  FILLER.
010400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010500         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010600         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010700     03  FILLER.
010800         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
010900         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011000         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011100     03  FILLER.
011200         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011300         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011400         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011500     03  FILLER.
011600         05  FILLER     PIC S9(3) COMP-3 VALUE +30.
011700         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011800         05  FILLER     PIC S9(3) COMP-3 VALUE +31.
011900 01  FILLER REDEFINES WS-MONTH-TITLE-TABLE.
012000     03  WS-MONTH-TABLE-ENTRY OCCURS 12 TIMES.
012100         05  WS-MONTH-DAYS-360    PIC S9(3) COMP-3.
012200         05  WS-MONTH-DAYS-365    PIC S9(3) COMP-3.
012300         05  WS-MONTH-DAYS-366    PIC S9(3) COMP-3.
012400
012500 LOCAL-STORAGE SECTION.
012600*    TRANSIENT DATA
012700
012800     COPY CEEIGZTD.
012900
013000     COPY AS5MSGRB.
013100
013200 01  LS-MISC-STORAGE.
013300     03  LS-FIELD1-PTR  POINTER.
013400     03  LS-FWORD       PIC S9(9) BINARY.
013500     03  LS-FWORD1      PIC S9(9) BINARY.
013600     03  LS-FWORD2      PIC S9(9) BINARY.
013700     03  LS-FWORD3      PIC S9(9) BINARY.
013800     03  LS-2BYTES      PIC  9(2).
013900     03  LS-2BYTES1     PIC  9(2).
014000     03  LS-3BYTES      PIC  9(3).
014100     03  LS-4BYTES      PIC  9(4).
014200     03  LS-4BYTES1     PIC  9(4).
014300     03  LS-PDEC1       PIC S9(5) COMP-3.
014400     03  LS-PDEC2       PIC S9(5) COMP-3.
014500     03  ASU-MODULE     PIC X(08).
014600     03  LS-TIME        PIC X(06).
014700**   03  LS-DTTM        PIC X(14).
014800     03  LS-DATE-FORMAT      PIC S9(2) BINARY.
014900       88 LS-FORMAT-YYDDD        VALUE +01.
015000       88 LS-FORMAT-YYYYDDD      VALUE +02.
015100       88 LS-FORMAT-DDDYY        VALUE +03.
015200       88 LS-FORMAT-DDDYYYY      VALUE +04.
015300       88 LS-FORMAT-YYMMDD       VALUE +10.
015400       88 LS-FORMAT-YYYYMMDD     VALUE +11.
015500       88 LS-FORMAT-MMDDYY       VALUE +12.
015600       88 LS-FORMAT-MMDDYYYY     VALUE +13.
015700       88 LS-FORMAT-DDMMYY       VALUE +14.
015800       88 LS-FORMAT-DDMMYYYY     VALUE +15.
015900     03  LS-VSTR1.
016000         05  LS-V1LEN        PIC S9(2) BINARY.
016100         05  LS-V1DATA       PIC X(80).
016200     03  LS-VSTR2.
016300         05  LS-V2LEN        PIC S9(2) BINARY.
016400         05  LS-V2DATA       PIC X(80).
016500     03  LS-DATE-A           PIC 9(08).
016600     03  LS-DATE-B           PIC 9(08).
016700     03  LS-DATE-C           PIC 9(08).
016800     SKIP2
016900 LINKAGE SECTION.
017000     SKIP1
017100     COPY AS5CA.
017200     SKIP1
017300 01  ASUDATE-ACTION.
017400     03  I-DATE-ACTION       PIC S9(9) BINARY.
017500       88 I-ACTION-QUERY         VALUE +002.
017600       88 I-ACTION-DIFF          VALUE +005.
017700       88 I-ACTION-INCR          VALUE +006.
017800       88 I-ACTION-DECR          VALUE +007.
017900       88 I-ACTION-FORMAT        VALUE +008.
018000     SKIP1
018100 01  ASUDATE-INPUT.
018200     03  I-DATE-CALENDAR     PIC X(01).
018300       88 I-CALENDAR-DEFAULT     VALUE ' '.
018400       88 I-CALENDAR-ACTUAL      VALUE 'A'.
018500       88 I-CALENDAR-BUSINESS    VALUE 'B'.
018600       88 I-CALENDAR-360         VALUE 'C'.
018700     03  I-DATE-FLDMOD       PIC X(01).
018800       88 I-FLDMOD-DEFAULT       VALUE ' '.
018900       88 I-FLDMOD-DAY           VALUE 'D'.
019000       88 I-FLDMOD-MONTH         VALUE 'M'.
019100       88 I-FLDMOD-WEEK          VALUE 'W'.
019200     03  I-DATE-INCLUDE      PIC X(01).
019300       88 I-INCLUDE-DEFAULT      VALUE ' '.
019400       88 I-INCLUDE-BOTH         VALUE 'B'.
019500       88 I-INCLUDE-FIRST        VALUE 'F'.
019600       88 I-INCLUDE-LAST         VALUE 'L'.
019700       88 I-INCLUDE-NONE         VALUE 'N'.
019800     03  I-DTTM-A            PIC X(14).
019900     03  I-DATE-A-FORMAT     PIC S9(2) BINARY.
020000       88 I-A-FORMAT-YYDDD       VALUE +01.
020100       88 I-A-FORMAT-YYYYDDD     VALUE +02.
020200       88 I-A-FORMAT-DDDYY       VALUE +03.
020300       88 I-A-FORMAT-DDDYYYY     VALUE +04.
020400       88 I-A-FORMAT-YYMMDD      VALUE +10.
020500       88 I-A-FORMAT-YYYYMMDD    VALUE +11.
020600       88 I-A-FORMAT-MMDDYY      VALUE +12.
020700       88 I-A-FORMAT-MMDDYYYY    VALUE +13.
020800       88 I-A-FORMAT-DDMMYY      VALUE +14.
020900       88 I-A-FORMAT-DDMMYYYY    VALUE +15.
021000     03  I-DTTM-B            PIC X(14).
021100     03  I-DATE-B-FORMAT     PIC S9(2) BINARY.
021200       88 I-B-FORMAT-YYDDD       VALUE +01.
021300       88 I-B-FORMAT-YYYYDDD     VALUE +02.
021400       88 I-B-FORMAT-DDDYY       VALUE +03.
021500       88 I-B-FORMAT-DDDYYYY     VALUE +04.
021600       88 I-B-FORMAT-YYMMDD      VALUE +10.
021700       88 I-B-FORMAT-YYYYMMDD    VALUE +11.
021800       88 I-B-FORMAT-MMDDYY      VALUE +12.
021900       88 I-B-FORMAT-MMDDYYYY    VALUE +13.
022000       88 I-B-FORMAT-DDMMYY      VALUE +14.
022100       88 I-B-FORMAT-DDMMYYYY    VALUE +15.
022200     03  I-DATE-INCR-DECR    PIC S9(9) BINARY.
022300     03  I-DATE-FULL-MASK.
022400         05  I-DATE-FULL-MASK-VLEN     PIC S9(4) BINARY.
022500         05  I-DATE-FULL-MASK-VTXT     PIC X(80).
022600     03  I-DATE-ABBR-MASK.
022700         05  I-DATE-ABBR-MASK-VLEN     PIC S9(4) BINARY.
022800         05  I-DATE-ABBR-MASK-VTXT     PIC X(80).
022900     SKIP1
023000 01  ASUDATE-OUTPUT.
023100     03  O-DATE         PIC X(10).
023200     03  O-DATE-CMPR-FLAG    PIC X(02).
023300       88 O-CMPR-FLAG-LT         VALUE 'LT'.
023400       88 O-CMPR-FLAG-EQ         VALUE 'EQ'.
023500       88 O-CMPR-FLAG-GT         VALUE 'GT'.
023600     03  O-DATE-DIFF    PIC S9(9) BINARY.
023700     03  O-DOW          PIC S9(9) BINARY.
023800     03  O-DOW-OCCUR    PIC S9(9) BINARY.
023900     03  O-DATE-FULL-STR.
024000         05  O-DATE-FULL-VLEN     PIC S9(4) BINARY.
024100         05  O-DATE-FULL-VTXT     PIC X(80).
024200     03  O-DATE-ABBR-STR.
024300         05  O-DATE-ABBR-VLEN     PIC S9(4) BINARY.
024400         05  O-DATE-ABBR-VTXT     PIC X(80).
024500     SKIP1
024600     COPY AS5FDBK.
024700     EJECT
024800 PROCEDURE DIVISION USING
024900     ASCA-COMMAREA
025000     ASUDATE-ACTION
025100     ASUDATE-INPUT
025200     ASUDATE-OUTPUT
025300     AS5FDBK-COND-AREA.
025400     SKIP2
025500 DECLARATIVES.
025600 0010-00-DEBUG SECTION.
025700     USE FOR DEBUGGING ON ALL PROCEDURES.
025800     SKIP1
025900 0010-10-DEBUG.
026000     DISPLAY DEBUG-ITEM
026100     SKIP1
026200     CONTINUE.
026300*0020-00-DEBUG SECTION.
026400**   USE FOR DEBUGGING ON PARAGRAPH_NAME
026500     SKIP1
026600*0020-10-DEBUG.
026700*    STATEMENTS ...
026800     SKIP1
026900     CONTINUE.
027000*0030-00-DEBUG SECTION.
027100**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
027200     SKIP1
027300*0030-10-DEBUG.
027400*    STATEMENTS ...
027500     SKIP2
027600     CONTINUE.
027700 END DECLARATIVES.
027800     SKIP2
027900 0100-0000-MAINLINE.
028000     INITIALIZE LS-MISC-STORAGE
028100     INITIALIZE ASUDATE-OUTPUT
028200
028300     DISPLAY WS-PGMID
028400          ' Testing date processing'
028500
028600     EVALUATE TRUE
028700       WHEN I-ACTION-QUERY
028800         PERFORM 2000-0000-DATE-QUERY
028900              THRU 2000-0999-END
029000       WHEN I-ACTION-DIFF
029100         PERFORM 5000-0000-DATE-DIFF
029200              THRU 5000-0999-END
029300       WHEN I-ACTION-INCR
029400         PERFORM 6000-0000-DATE-INCR
029500              THRU 6000-0999-END
029600       WHEN I-ACTION-DECR
029700         PERFORM 7000-0000-DATE-DECR
029800              THRU 7000-0999-END
029900       WHEN I-ACTION-FORMAT
030000         DISPLAY WS-PGMID
030100              ' CODE NOT AVAILABLE FOR ACTION=FORMAT'
030200         PERFORM 80103-0001-TEXT
030300              THRU 89000-0999-END
030400       WHEN OTHER
030500         DISPLAY WS-PGMID
030600              ' INVALID VALUE FOR ACTION, '
030700              I-DATE-ACTION
030800         PERFORM 80101-0001-TEXT
030900              THRU 89000-0999-END
031000     END-EVALUATE
031100
031200     GOBACK
031300
031400     CONTINUE.
031500 0100-0999-END.
031600     EXIT.
031700
031800 2000-0000-DATE-QUERY.
031900* --------------------------------------------------- *
032000* RETURN INFO ABOUT REQUESTED DATE
032100* --------------------------------------------------- *
032200
032300     IF I-DTTM-A = SPACE
032400***    IF ASCA-APPL-DTTM = SPACE OR ZERO
032500***      CALL 'CEELOCT' USING WS-LILIAN-DAYS WS-LILIAN-SEC
032600***           WS-GREGORIAN-DT WSLE-FEEDBACK (1)
032700***      END-CALL
032800***      IF NOT CEE000 (1)
032900***        MOVE ASCA-CUR-DTTM      TO I-DTTM-A
033000***      ELSE
033100***        MOVE WS-GREGORIAN-DT TO I-DTTM-A
033200***      END-IF
033300***    ELSE
033400***      MOVE ASCA-APPL-DTTM      TO I-DTTM-A
033500***    END-IF
033600       SET  I-A-FORMAT-YYYYMMDD TO TRUE
033700     END-IF
033800     MOVE I-DTTM-A        TO LS-V1DATA
033900     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
034000     PERFORM 11000-0000-CONVERT-TO-DAYS
034100*    GET DAY OF WEEK
034200     CALL 'CEEDYWK'
034300          USING LS-FWORD
034400                O-DOW
034500                OMITTED
034600     SET LS-FORMAT-YYYYMMDD TO TRUE
034700     PERFORM 12000-0000-CONVERT-TO-DATE
034800*    GENERATE DATE INFO STRING
034900     MOVE LS-TIME (5:2)   TO LS-2BYTES
035000     MOVE LS-2BYTES       TO TM-SEC
035100     MOVE LS-TIME (3:2)   TO LS-2BYTES
035200     MOVE LS-2BYTES       TO TM-MIN
035300     MOVE LS-TIME (1:2)   TO LS-2BYTES
035400     MOVE LS-2BYTES       TO TM-HOUR
035500     MOVE LS-V1DATA (7:2) TO LS-2BYTES
035600     MOVE LS-2BYTES       TO TM-DAY
035700     MOVE LS-V1DATA (5:2) TO LS-2BYTES
035800     SUBTRACT +1 FROM LS-2BYTES
035900     MOVE LS-2BYTES       TO TM-MON
036000     MOVE LS-V1DATA (1:4) TO LS-4BYTES
036100     SUBTRACT +1900 FROM LS-4BYTES GIVING TM-YEAR
036200     SUBTRACT +1 FROM O-DOW GIVING TM-WDAY
036300     MOVE LS-V1DATA (7:2) TO LS-2BYTES
036400     DIVIDE LS-2BYTES BY 7 GIVING O-DOW-OCCUR
036500          REMAINDER LS-FWORD1
036600     IF LS-FWORD1 > ZERO
036700       ADD +1 TO O-DOW-OCCUR
036800     END-IF
036900*    GET DAY OF YEAR
037000     SET LS-FORMAT-YYYYDDD  TO TRUE
037100     PERFORM 12000-0000-CONVERT-TO-DATE
037200     MOVE LS-V1DATA (5:3) TO LS-3BYTES
037300     SUBTRACT +1 FROM LS-3BYTES
037400     MOVE LS-3BYTES       TO TM-YDAY
037500     MOVE -1              TO TM-IS-DLST
037600     MOVE +80             TO LS-FWORD1
037700     DISPLAY WS-PGMID
037800          ' TM-DAY: '
037900          TM-DAY
038000          ' TM-MON: '
038100          TM-MON
038200          ' TM-YEAR: '
038300          TM-YEAR
038400          ' TM-YDAY: '
038500          TM-YDAY
038600
038700     SET LS-FIELD1-PTR TO ADDRESS OF TD-STRUCT
038800     IF I-DATE-FULL-MASK-VLEN = ZERO
038900       MOVE DFLT-DATE-FULL-MASK TO I-DATE-FULL-MASK
039000     END-IF
039100     CALL 'CEEFTDS'
039200          USING OMITTED
039300                LS-FIELD1-PTR
039400                LS-FWORD1
039500                I-DATE-FULL-MASK
039600                O-DATE-FULL-STR
039700                OMITTED
039800
039900     IF I-DATE-ABBR-MASK-VLEN = ZERO
040000       MOVE DFLT-DATE-ABBR-MASK TO I-DATE-ABBR-MASK
040100     END-IF
040200     CALL 'CEEFTDS'
040300          USING OMITTED
040400                LS-FIELD1-PTR
040500                LS-FWORD1
040600                I-DATE-ABBR-MASK
040700                O-DATE-ABBR-STR
040800                OMITTED
040900
041000     CONTINUE.
041100 2000-0999-END.
041200     EXIT.
041300
041400 5000-0000-DATE-DIFF.
041500* --------------------------------------------------- *
041600* COMPUTE THE DIFFERENCE BETWEEN 2 DATES
041700* --------------------------------------------------- *
041800     EVALUATE TRUE              ALSO TRUE
041900       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
042000         PERFORM 5000-0100-ACTUAL-DIFF-DA
042100              THRU 5000-0199-END
042200       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
042300         PERFORM 5000-0200-ACTUAL-DIFF-MO
042400              THRU 5000-0299-END
042500**     WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-WEEK
042600**       PERFORM 5000-0300-ACTUAL-DIFF-WK
042700**            THRU 5000-0399-END
042800       WHEN I-CALENDAR-BUSINESS ALSO ANY
042900         DISPLAY WS-PGMID
043000              ' CODE NOT AVAILABLE FOR BUSINESS DATE DIFF'
043100       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
043200         PERFORM 5000-0400-BUSINESS-DIFF-DA
043300              THRU 5000-0499-END
043400       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
043500         PERFORM 5000-0500-BUSINESS-DIFF-MO
043600              THRU 5000-0599-END
043700       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
043800         PERFORM 5000-0700-V360-DIFF-DA
043900              THRU 5000-0799-END
044000       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
044100         PERFORM 5000-0800-V360-DIFF-MO
044200              THRU 5000-0899-END
044300       WHEN OTHER
044400         PERFORM 80105-0001-TEXT
044500              THRU 89000-0999-END
044600         DISPLAY WS-PGMID
044700              ' INVALID DATE DIFF OPTION '
044800              I-DATE-CALENDAR
044900              ' '
045000              I-DATE-FLDMOD
045100     END-EVALUATE
045200     GO TO 5000-0999-END
045300
045400     CONTINUE.
045500 5000-0100-ACTUAL-DIFF-DA.
045600* --------------------------------------------------- *
045700* COMPUTE NBR OF DAYS BETWEEN 2 DATES (365/366)
045800* --------------------------------------------------- *
045900     MOVE I-DTTM-A        TO LS-V1DATA
046000     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
046100     PERFORM 11000-0000-CONVERT-TO-DAYS
046200     MOVE LS-FWORD        TO LS-FWORD1
046300
046400     IF I-DTTM-B = SPACE
046500       SET I-B-FORMAT-YYYYMMDD TO TRUE
046600     END-IF
046700     MOVE I-DTTM-B        TO LS-V1DATA
046800     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
046900     PERFORM 11000-0000-CONVERT-TO-DAYS
047000     MOVE LS-FWORD        TO LS-FWORD2
047100
047200     COMPUTE LS-FWORD3 = LS-FWORD2 - LS-FWORD1
047300     IF LS-FWORD3 < ZERO
047400       SET O-CMPR-FLAG-GT TO TRUE
047500       CALL 'CEESIABS'
047600            USING LS-FWORD3
047700                  OMITTED
047800                  LS-FWORD3
047900     END-IF
048000     IF LS-FWORD3 = ZERO
048100       SET O-CMPR-FLAG-EQ TO TRUE
048200     END-IF
048300     IF LS-FWORD3 > ZERO
048400       SET O-CMPR-FLAG-LT TO TRUE
048500     END-IF
048600     MOVE LS-FWORD3 TO O-DATE-DIFF
048700     EVALUATE TRUE
048800       WHEN I-INCLUDE-BOTH
048900         ADD +1 TO O-DATE-DIFF
049000       WHEN I-INCLUDE-FIRST
049100         IF O-DATE-DIFF = ZERO
049200           ADD +1 TO O-DATE-DIFF
049300         END-IF
049400       WHEN I-INCLUDE-LAST
049500         CONTINUE
049600       WHEN I-INCLUDE-NONE
049700         IF O-DATE-DIFF > ZERO
049800           SUBTRACT +1 FROM O-DATE-DIFF
049900         END-IF
050000       WHEN OTHER
050100         PERFORM 80105-0002-TEXT
050200              THRU 89000-0999-END
050300         DISPLAY WS-PGMID
050400              ' INVALID INCLUDE OPTION '
050500              I-DATE-INCLUDE
050600     END-EVALUATE
050700
050800     CONTINUE.
050900 5000-0199-END.
051000     EXIT.
051100
051200 5000-0200-ACTUAL-DIFF-MO.
051300* --------------------------------------------------- *
051400* COMPUTE NBR OF MONTHS BETWEEN 2 DATES (365/366)
051500* --------------------------------------------------- *
051600     MOVE I-DTTM-A        TO LS-V1DATA
051700     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
051800     PERFORM 11000-0000-CONVERT-TO-DAYS
051900
052000     SET LS-FORMAT-YYYYMMDD TO TRUE
052100     PERFORM 12000-0000-CONVERT-TO-DATE
052200     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-A) TO LS-DATE-A
052300
052400     IF I-DTTM-B = SPACE
052500       SET I-B-FORMAT-YYYYMMDD TO TRUE
052600     END-IF
052700     MOVE I-DTTM-B        TO LS-V1DATA
052800     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
052900     PERFORM 11000-0000-CONVERT-TO-DAYS
053000
053100     SET LS-FORMAT-YYYYMMDD TO TRUE
053200     PERFORM 12000-0000-CONVERT-TO-DATE
053300     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-B) TO LS-DATE-B
053400
053500     IF LS-DATE-B = LS-DATE-A
053600       SET O-CMPR-FLAG-EQ TO TRUE
053700     END-IF
053800     IF LS-DATE-B > LS-DATE-A
053900       SET O-CMPR-FLAG-LT TO TRUE
054000     END-IF
054100     IF LS-DATE-B < LS-DATE-A
054200       SET O-CMPR-FLAG-GT TO TRUE
054300       MOVE LS-DATE-A TO LS-DATE-C
054400       MOVE LS-DATE-B TO LS-DATE-A
054500       MOVE LS-DATE-C TO LS-DATE-B
054600     END-IF
054700     MOVE LS-DATE-A (1:4) TO LS-4BYTES
054800     MOVE LS-DATE-B (1:4) TO LS-4BYTES1
054900     COMPUTE LS-FWORD2 = (LS-4BYTES1 - LS-4BYTES) * 12
055000     MOVE LS-DATE-A (5:2) TO LS-2BYTES
055100     MOVE LS-DATE-B (5:2) TO LS-2BYTES1
055200     COMPUTE O-DATE-DIFF = LS-FWORD2 + LS-DATE-B - LS-DATE-A
055300     MOVE LS-DATE-A (7:2) TO LS-2BYTES
055400     MOVE LS-DATE-B (7:2) TO LS-2BYTES1
055500     IF LS-2BYTES1 < LS-2BYTES
055600       SUBTRACT +1 FROM O-DATE-DIFF
055700     END-IF
055800
055900     CONTINUE.
056000 5000-0299-END.
056100     EXIT.
056200
056300 5000-0400-BUSINESS-DIFF-DA.
056400* --------------------------------------------------- *
056500*
056600* --------------------------------------------------- *
056700*    CODE
056800
056900     CONTINUE.
057000 5000-0499-END.
057100     EXIT.
057200
057300 5000-0500-BUSINESS-DIFF-MO.
057400* --------------------------------------------------- *
057500*
057600* --------------------------------------------------- *
057700     SKIP1
057800*    CODE
057900
058000     CONTINUE.
058100 5000-0599-END.
058200     EXIT.
058300
058400 5000-0700-V360-DIFF-DA.
058500* --------------------------------------------------- *
058600* COMPUTE NBR OF DAYS BETWEEN TWO DATES (360)
058700* --------------------------------------------------- *
058800     MOVE I-DTTM-A        TO LS-V1DATA
058900     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
059000     PERFORM 11000-0000-CONVERT-TO-DAYS
059100
059200     SET LS-FORMAT-YYYYMMDD TO TRUE
059300     PERFORM 12000-0000-CONVERT-TO-DATE
059400     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-A) TO LS-DATE-A
059500
059600     IF I-DTTM-B = SPACE
059700*      MOVE ASCA-CUR-DTTM      TO I-DTTM-B
059800       SET I-B-FORMAT-YYYYMMDD TO TRUE
059900     END-IF
060000     MOVE I-DTTM-B        TO LS-V1DATA
060100     MOVE I-DATE-B-FORMAT TO LS-DATE-FORMAT
060200     PERFORM 11000-0000-CONVERT-TO-DAYS
060300
060400     SET LS-FORMAT-YYYYMMDD TO TRUE
060500     PERFORM 12000-0000-CONVERT-TO-DATE
060600     MOVE LS-V1DATA (1:LENGTH OF LS-DATE-B) TO LS-DATE-B
060700
060800     IF LS-DATE-B < LS-DATE-A
060900       MOVE LS-DATE-A TO LS-DATE-C
061000       MOVE LS-DATE-B TO LS-DATE-A
061100       MOVE LS-DATE-C TO LS-DATE-B
061200     END-IF
061300     MOVE LS-DATE-A (7:2) TO LS-2BYTES
061400     MOVE LS-DATE-B (7:2) TO LS-2BYTES1
061500     IF LS-DATE-B (7:2) > LS-DATE-A (7:2)
061600       COMPUTE LS-FWORD3 = LS-2BYTES1 - LS-2BYTES
061700     ELSE
061800       COMPUTE LS-FWORD3 = 30 + LS-2BYTES1 - LS-2BYTES
061900       SUBTRACT 1 FROM LS-2BYTES1
062000     END-IF
062100     IF LS-DATE-B (5:2) > LS-DATE-A (5:2)
062200       COMPUTE LS-FWORD2 = LS-2BYTES1 - LS-2BYTES
062300     ELSE
062400       COMPUTE LS-FWORD2 = 12 + LS-2BYTES1 -
062500            LS-2BYTES
062600       SUBTRACT 1 FROM LS-2BYTES1
062700     END-IF
062800     COMPUTE LS-FWORD1 = LS-2BYTES1 - LS-2BYTES
062900     COMPUTE O-DATE-DIFF = (360 * LS-FWORD1) +
063000          (12 * LS-FWORD2) + LS-FWORD3
063100     END-COMPUTE
063200     EVALUATE TRUE
063300       WHEN I-INCLUDE-BOTH
063400         ADD +1 TO O-DATE-DIFF
063500       WHEN I-INCLUDE-FIRST
063600         IF O-DATE-DIFF = ZERO
063700           ADD +1 TO O-DATE-DIFF
063800         END-IF
063900       WHEN I-INCLUDE-LAST
064000         CONTINUE
064100       WHEN I-INCLUDE-NONE
064200         IF O-DATE-DIFF > ZERO
064300           SUBTRACT +1 FROM O-DATE-DIFF
064400         END-IF
064500       WHEN OTHER
064600         PERFORM 80105-0002-TEXT
064700              THRU 89000-0999-END
064800         DISPLAY WS-PGMID
064900              ' INVALID INCLUDE OPTION '
065000              I-DATE-INCLUDE
065100     END-EVALUATE
065200
065300     CONTINUE.
065400 5000-0799-END.
065500     EXIT.
065600
065700 5000-0800-V360-DIFF-MO.
065800* --------------------------------------------------- *
065900* COMPUTE NBR OF MONTHS BETWEEN TWO DATES (360)
066000* --------------------------------------------------- *
066100     PERFORM 5000-0700-V360-DIFF-DA
066200          THRU 5000-0799-END
066300     DIVIDE O-DATE-DIFF BY 30 GIVING O-DATE-DIFF
066400
066500     CONTINUE.
066600 5000-0899-END.
066700     EXIT.
066800
066900 5000-0999-END.
067000     EXIT.
067100
067200 6000-0000-DATE-INCR.
067300* --------------------------------------------------- *
067400* COMPUTE NEW DATE GIVEN DATE AND INCREMENT
067500* --------------------------------------------------- *
067600     EVALUATE TRUE              ALSO TRUE
067700       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
067800         PERFORM 6000-0100-ACTUAL-INCR-DA
067900              THRU 6000-0199-END
068000       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
068100         PERFORM 6000-0200-ACTUAL-INCR-MO
068200              THRU 6000-0299-END
068300       WHEN I-CALENDAR-BUSINESS ALSO ANY
068400         DISPLAY WS-PGMID
068500              ' CODE NOT AVAILABLE FOR BUSINESS DATE INCR'
068600       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
068700         PERFORM 6000-0400-BUSINESS-INCR-DA
068800              THRU 6000-0499-END
068900       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
069000         PERFORM 6000-0500-BUSINESS-INCR-MO
069100              THRU 6000-0599-END
069200       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
069300         PERFORM 6000-0700-V360-INCR-DA
069400              THRU 6000-0799-END
069500       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
069600         PERFORM 6000-0800-V360-INCR-MO
069700              THRU 6000-0899-END
069800       WHEN OTHER
069900         PERFORM 80105-0001-TEXT
070000              THRU 89000-0999-END
070100         DISPLAY WS-PGMID
070200              ' INVALID DATE INCR OPTION, '
070300              I-DATE-CALENDAR
070400              ' '
070500              I-DATE-FLDMOD
070600     END-EVALUATE
070700
070800     GO TO 6000-0999-END
070900
071000     CONTINUE.
071100 6000-0100-ACTUAL-INCR-DA.
071200* --------------------------------------------------- *
071300* COMPUTE NEW DATE GIVEN DATE AND DAY INCREMENT
071400*         (365/366)
071500* --------------------------------------------------- *
071600     MOVE I-DTTM-A        TO LS-V1DATA
071700     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
071800     PERFORM 11000-0000-CONVERT-TO-DAYS
071900     ADD I-DATE-INCR-DECR TO LS-FWORD
072000
072100     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
072200     PERFORM 12000-0000-CONVERT-TO-DATE
072300     MOVE LS-V1DATA (1:LS-V1LEN) TO O-DATE
072400
072500     CONTINUE.
072600 6000-0199-END.
072700     EXIT.
072800
072900 6000-0200-ACTUAL-INCR-MO.
073000* --------------------------------------------------- *
073100* COMPUTE NEW DATE GIVEN DATE AND MONTH INCREMENT
073200*         (365/366)
073300* --------------------------------------------------- *
073400     MOVE I-DTTM-A        TO LS-V1DATA
073500     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
073600     PERFORM 11000-0000-CONVERT-TO-DAYS
073700
073800     SET LS-FORMAT-YYYYMMDD TO TRUE
073900     PERFORM 12000-0000-CONVERT-TO-DATE
074000     MOVE LS-V1DATA (1:4) TO LS-4BYTES
074100     MOVE LS-V1DATA (5:2) TO LS-2BYTES
074200     PERFORM I-DATE-INCR-DECR TIMES
074300       IF LS-4BYTES (3:2) = ZERO
074400         DIVIDE LS-4BYTES BY 400 GIVING LS-PDEC1
074500             REMAINDER LS-PDEC2
074600         IF LS-PDEC2 = 0
074700           ADD WS-MONTH-DAYS-366 (LS-2BYTES) TO LS-FWORD
074800         ELSE
074900           ADD WS-MONTH-DAYS-365 (LS-2BYTES) TO LS-FWORD
075000         END-IF
075100       ELSE
075200         DIVIDE LS-4BYTES BY 4 GIVING LS-PDEC1
075300             REMAINDER LS-PDEC2
075400         IF LS-PDEC2 = 0
075500           ADD WS-MONTH-DAYS-366 (LS-2BYTES) TO LS-FWORD
075600         ELSE
075700           ADD WS-MONTH-DAYS-365 (LS-2BYTES) TO LS-FWORD
075800         END-IF
075900       END-IF
076000       ADD +1 TO LS-2BYTES
076100       IF LS-2BYTES > 12
076200         MOVE +1 TO LS-2BYTES
076300         ADD  +1 TO LS-4BYTES
076400       END-IF
076500     END-PERFORM
076600     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
076700     PERFORM 12000-0000-CONVERT-TO-DATE
076800     MOVE LS-V1DATA       TO O-DATE
076900
077000     CONTINUE.
077100 6000-0299-END.
077200     EXIT.
077300
077400 6000-0400-BUSINESS-INCR-DA.
077500* --------------------------------------------------- *
077600*
077700* --------------------------------------------------- *
077800*    CODE
077900
078000     CONTINUE.
078100 6000-0499-END.
078200     EXIT.
078300
078400 6000-0500-BUSINESS-INCR-MO.
078500* --------------------------------------------------- *
078600*
078700* --------------------------------------------------- *
078800*    CODE
078900
079000     CONTINUE.
079100 6000-0599-END.
079200     EXIT.
079300
079400 6000-0700-V360-INCR-DA.
079500* --------------------------------------------------- *
079600* COMPUTE NEW DATE GIVEN DATE AND DAY INCREMENT
079700*         (360)
079800* --------------------------------------------------- *
079900*    CODE
080000
080100     CONTINUE.
080200 6000-0799-END.
080300     EXIT.
080400
080500 6000-0800-V360-INCR-MO.
080600* --------------------------------------------------- *
080700* COMPUTE NEW DATE GIVEN DATE AND MONTH INCREMENT
080800*         (360)
080900* --------------------------------------------------- *
081000*    CODE
081100
081200     CONTINUE.
081300 6000-0899-END.
081400     EXIT.
081500
081600 6000-0999-END.
081700     EXIT.
081800
081900 7000-0000-DATE-DECR.
082000* --------------------------------------------------- *
082100* COMPUTE NEW DATE GIVEN DATE AND DECREMENT
082200* --------------------------------------------------- *
082300     EVALUATE TRUE              ALSO TRUE
082400       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-DAY
082500         PERFORM 7000-0100-ACTUAL-DECR-DA
082600              THRU 7000-0199-END
082700       WHEN I-CALENDAR-ACTUAL   ALSO I-FLDMOD-MONTH
082800         PERFORM 7000-0200-ACTUAL-DECR-MO
082900              THRU 7000-0299-END
083000       WHEN I-CALENDAR-BUSINESS ALSO ANY
083100         DISPLAY WS-PGMID
083200              ' CODE NOT AVAILABLE FOR BUSINESS DATE DECR'
083300       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-DAY
083400         PERFORM 7000-0400-BUSINESS-DECR-DA
083500              THRU 7000-0499-END
083600       WHEN I-CALENDAR-BUSINESS ALSO I-FLDMOD-MONTH
083700         PERFORM 7000-0500-BUSINESS-DECR-MO
083800              THRU 7000-0599-END
083900       WHEN I-CALENDAR-360      ALSO ANY
084000         DISPLAY WS-PGMID
084100              ' CODE NOT AVAILABLE FOR 360 DATE DECR'
084200       WHEN I-CALENDAR-360      ALSO I-FLDMOD-DAY
084300         PERFORM 7000-0700-V360-DECR-DA
084400              THRU 7000-0799-END
084500       WHEN I-CALENDAR-360      ALSO I-FLDMOD-MONTH
084600         PERFORM 7000-0800-V360-DECR-MO
084700              THRU 7000-0899-END
084800       WHEN OTHER
084900         PERFORM 80105-0001-TEXT
085000              THRU 89000-0999-END
085100         DISPLAY WS-PGMID
085200              ' INVALID DATE DECR OPTION '
085300              I-DATE-CALENDAR
085400              ' '
085500              I-DATE-FLDMOD
085600     END-EVALUATE
085700
085800     GO TO 7000-0999-END
085900
086000     CONTINUE.
086100 7000-0100-ACTUAL-DECR-DA.
086200* --------------------------------------------------- *
086300* COMPUTE NEW DATE GIVEN DATE AND DAY DECREMENT
086400*         (365/366)
086500* --------------------------------------------------- *
086600     MOVE I-DTTM-A        TO LS-V1DATA
086700     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
086800     PERFORM 11000-0000-CONVERT-TO-DAYS
086900     SUBTRACT I-DATE-INCR-DECR FROM LS-FWORD
087000
087100     MOVE I-DTTM-A        TO LS-V1DATA
087200     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
087300     PERFORM 12000-0000-CONVERT-TO-DATE
087400     MOVE LS-V1DATA       TO O-DATE
087500
087600     CONTINUE.
087700 7000-0199-END.
087800     EXIT.
087900
088000 7000-0200-ACTUAL-DECR-MO.
088100* --------------------------------------------------- *
088200* COMPUTE NEW DATE GIVEN DATE AND MONTH DECREMENT
088300*         (365/366)
088400* --------------------------------------------------- *
088500     MOVE I-DTTM-A        TO LS-V1DATA
088600     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
088700     PERFORM 11000-0000-CONVERT-TO-DAYS
088800
088900     SET LS-FORMAT-YYYYMMDD TO TRUE
089000     PERFORM 12000-0000-CONVERT-TO-DATE
089100     MOVE LS-V1DATA (1:4) TO LS-4BYTES
089200     MOVE LS-V1DATA (5:2) TO LS-2BYTES
089300     PERFORM I-DATE-INCR-DECR TIMES
089400       IF LS-4BYTES (3:2) = ZERO
089500         DIVIDE LS-4BYTES BY 400 GIVING LS-PDEC1
089600              REMAINDER LS-PDEC2
089700         IF LS-PDEC2 = 0
089800           SUBTRACT WS-MONTH-DAYS-366 (LS-2BYTES) FROM LS-FWORD
089900         ELSE
090000           SUBTRACT WS-MONTH-DAYS-365 (LS-2BYTES) FROM LS-FWORD
090100         END-IF
090200       ELSE
090300         DIVIDE LS-4BYTES BY 4 GIVING LS-PDEC1
090400              REMAINDER LS-PDEC2
090500         IF LS-PDEC2 = 0
090600           SUBTRACT WS-MONTH-DAYS-366 (LS-2BYTES) FROM LS-FWORD
090700         ELSE
090800           SUBTRACT WS-MONTH-DAYS-365 (LS-2BYTES) FROM LS-FWORD
090900         END-IF
091000       END-IF
091100       SUBTRACT +1 FROM LS-2BYTES
091200       IF LS-2BYTES < 1
091300         MOVE +12 TO LS-2BYTES
091400         SUBTRACT +1 FROM LS-4BYTES
091500       END-IF
091600     END-PERFORM
091700     MOVE I-DATE-A-FORMAT TO LS-DATE-FORMAT
091800     PERFORM 12000-0000-CONVERT-TO-DATE
091900     MOVE LS-V1DATA       TO O-DATE
092000
092100     CONTINUE.
092200 7000-0299-END.
092300     EXIT.
092400
092500 7000-0400-BUSINESS-DECR-DA.
092600* --------------------------------------------------- *
092700*
092800* --------------------------------------------------- *
092900*    CODE
093000
093100     CONTINUE.
093200 7000-0499-END.
093300     EXIT.
093400
093500 7000-0500-BUSINESS-DECR-MO.
093600* --------------------------------------------------- *
093700*
093800* --------------------------------------------------- *
093900*    CODE
094000
094100     CONTINUE.
094200 7000-0599-END.
094300     EXIT.
094400
094500 7000-0700-V360-DECR-DA.
094600* --------------------------------------------------- *
094700* COMPUTE NEW DATE GIVEN DATE AND DAY DECREMENT
094800*         (360)
094900* --------------------------------------------------- *
095000*    CODE
095100
095200     CONTINUE.
095300 7000-0799-END.
095400     EXIT.
095500
095600 7000-0800-V360-DECR-MO.
095700* --------------------------------------------------- *
095800* COMPUTE NEW DATE GIVEN DATE AND MONTH DECREMENT
095900*         (360)
096000* --------------------------------------------------- *
096100*    CODE
096200
096300     CONTINUE.
096400 7000-0899-END.
096500     EXIT.
096600
096700 7000-0999-END.
096800     EXIT.
096900
097000 11000-0000-CONVERT-TO-DAYS.
097100* ------------------------------------------------------------ *
097200*     INPUT: LS-DATE-FORMAT (DATE FORMAT CODE)
097300*            LS-VSTR1       (INPUT DATE)
097400*            LS-VSTR2       (INPUT DATE MASK)
097500*    OUTPUT: LS-FWORD       (OUTPUT DAYS)
097600*            LS-TIME        (OUTPUT TIME)
097700* ------------------------------------------------------------ *
097800     EVALUATE TRUE
097900       WHEN LS-FORMAT-YYDDD
098000         MOVE +5         TO LS-V1LEN LS-V2LEN
098100         MOVE 'YYDDD'    TO LS-V2DATA
098200         MOVE LS-V1DATA (6:6) TO LS-TIME
098300       WHEN LS-FORMAT-YYYYDDD
098400         MOVE +7         TO LS-V1LEN LS-V2LEN
098500         MOVE 'YYYYDDD'  TO LS-V2DATA
098600         MOVE LS-V1DATA (8:6) TO LS-TIME
098700       WHEN LS-FORMAT-DDDYY
098800         MOVE +5         TO LS-V1LEN LS-V2LEN
098900         MOVE 'DDDYY'    TO LS-V2DATA
099000         MOVE LS-V1DATA (6:6) TO LS-TIME
099100       WHEN LS-FORMAT-DDDYYYY
099200         MOVE +7         TO LS-V1LEN LS-V2LEN
099300         MOVE 'DDDYYYY'  TO LS-V2DATA
099400         MOVE LS-V1DATA (8:6) TO LS-TIME
099500       WHEN LS-FORMAT-YYMMDD
099600         MOVE +6         TO LS-V1LEN LS-V2LEN
099700         MOVE 'YYMMDD'   TO LS-V2DATA
099800         MOVE LS-V1DATA (7:6) TO LS-TIME
099900       WHEN LS-FORMAT-YYYYMMDD
100000         MOVE +8         TO LS-V1LEN LS-V2LEN
100100         MOVE 'YYYYMMDD' TO LS-V2DATA
100200         MOVE LS-V1DATA (9:6) TO LS-TIME
100300       WHEN LS-FORMAT-MMDDYY
100400         MOVE +6         TO LS-V1LEN LS-V2LEN
100500         MOVE 'MMDDYY'   TO LS-V2DATA
100600         MOVE LS-V1DATA (7:6) TO LS-TIME
100700       WHEN LS-FORMAT-MMDDYYYY
100800         MOVE +8         TO LS-V1LEN LS-V2LEN
100900         MOVE 'MMDDYYYY' TO LS-V2DATA
101000         MOVE LS-V1DATA (9:6) TO LS-TIME
101100       WHEN LS-FORMAT-DDMMYY
101200         MOVE +6         TO LS-V1LEN LS-V2LEN
101300         MOVE 'DDMMYY'   TO LS-V2DATA
101400         MOVE LS-V1DATA (7:6) TO LS-TIME
101500       WHEN LS-FORMAT-DDMMYYYY
101600         MOVE +8         TO LS-V1LEN LS-V2LEN
101700         MOVE 'DDMMYYYY' TO LS-V2DATA
101800         MOVE LS-V1DATA (9:6) TO LS-TIME
101900       WHEN OTHER
102000         PERFORM 80105-0003-TEXT
102100              THRU 89000-0999-END
102200         DISPLAY WS-PGMID
102300              ' INVALID DATE FORMAT '
102400              LS-DATE-FORMAT
102500     END-EVALUATE
102600     CALL 'CEEDAYS'
102700          USING LS-VSTR1
102800                LS-VSTR2
102900                LS-FWORD
103000                OMITTED
103100     IF LS-TIME = SPACE
103200       MOVE ZERO TO LS-TIME
103300     END-IF
103400     IF LS-TIME NOT NUMERIC
103500       IF LS-TIME (5:2) NOT NUMERIC
103600         MOVE ZERO TO LS-TIME (5:2)
103700       END-IF
103800       IF LS-TIME (1:4) NOT NUMERIC
103900         MOVE ZERO TO LS-TIME (1:4)
104000       END-IF
104100     END-IF
104200
104300     CONTINUE.
104400 11000-0999-END.
104500     EXIT.
104600
104700 12000-0000-CONVERT-TO-DATE.
104800* ------------------------------------------------------------ *
104900*     INPUT: LS-DATE-FORMAT (DATE FORMAT CODE)
105000*            LS-FWORD       (INPUT DAYS)
105100*    OUTPUT: LS-VSTR1       (OUTPUT DATE)
105200*            LS-VSTR2       (OUTPUT DATE MASK)
105300* ------------------------------------------------------------ *
105400     EVALUATE TRUE
105500       WHEN LS-FORMAT-YYDDD
105600         MOVE +5         TO LS-V1LEN LS-V2LEN
105700         MOVE 'YYDDD'    TO LS-V2DATA
105800       WHEN LS-FORMAT-YYYYDDD
105900         MOVE +7         TO LS-V1LEN LS-V2LEN
106000         MOVE 'YYYYDDD'  TO LS-V2DATA
106100       WHEN LS-FORMAT-DDDYY
106200         MOVE +5         TO LS-V1LEN LS-V2LEN
106300         MOVE 'DDDYY'    TO LS-V2DATA
106400       WHEN LS-FORMAT-DDDYYYY
106500         MOVE +7         TO LS-V1LEN LS-V2LEN
106600         MOVE 'DDDYYYY'  TO LS-V2DATA
106700       WHEN LS-FORMAT-YYMMDD
106800         MOVE +6         TO LS-V1LEN LS-V2LEN
106900         MOVE 'YYMMDD'   TO LS-V2DATA
107000       WHEN LS-FORMAT-YYYYMMDD
107100         MOVE +8         TO LS-V1LEN LS-V2LEN
107200         MOVE 'YYYYMMDD' TO LS-V2DATA
107300       WHEN LS-FORMAT-MMDDYY
107400         MOVE +6         TO LS-V1LEN LS-V2LEN
107500         MOVE 'MMDDYY'   TO LS-V2DATA
107600       WHEN LS-FORMAT-MMDDYYYY
107700         MOVE +8         TO LS-V1LEN LS-V2LEN
107800         MOVE 'MMDDYYYY' TO LS-V2DATA
107900       WHEN LS-FORMAT-DDMMYY
108000         MOVE +6         TO LS-V1LEN LS-V2LEN
108100         MOVE 'DDMMYY'   TO LS-V2DATA
108200       WHEN LS-FORMAT-DDMMYYYY
108300         MOVE +8         TO LS-V1LEN LS-V2LEN
108400         MOVE 'DDMMYYYY' TO LS-V2DATA
108500       WHEN OTHER
108600         PERFORM 80105-0003-TEXT
108700              THRU 89000-0999-END
108800         DISPLAY WS-PGMID
108900              ' INVALID DATE FORMAT '
109000              LS-DATE-FORMAT
109100     END-EVALUATE
109200     CALL 'CEEDATE'
109300          USING LS-FWORD
109400                LS-VSTR2
109500                LS-V1DATA
109600                OMITTED
109700
109800     CONTINUE.
109900 12000-0999-END.
110000     EXIT.
110100
110200* ------------------------------------------------------------ *
110300* ALL ERROR MESSAGE PROCESSING FOLLOWS
110400* ------------------------------------------------------------ *
110500
110600 80101-0001-TEXT.
110700* ------------------------------------------------------------ *
110800* 0101: V1 V2 V3 ACTION V4 IS INVALID
110900* ------------------------------------------------------------ *
111000     MOVE ZERO TO AS5MSGRB-ISI (1)
111100     SET ASU035_0002 (1) TO TRUE
111200
111300     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
111400     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
111500     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
111600     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
111700     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
111800     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
111900     MOVE I-DATE-ACTION  TO LS-4BYTES
112000     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 4)
112100     MOVE LS-4BYTES      TO AS5MSGRB-ISI-VTXT (1 4)
112200
112300     CONTINUE.
112400 80102-0001-TEXT.
112500* ------------------------------------------------------------ *
112600* 0102: V1 V2 V3 VALID ACTIONS ARE V7
112700* ------------------------------------------------------------ *
112800     MOVE ZERO TO AS5MSGRB-ISI (2)
112900     SET ASU036 (2)      TO TRUE
113000
113100     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 1)
113200     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 1)
113300     MOVE +11            TO AS5MSGRB-ISI-VLEN (2 2)
113400     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (2 2)
113500     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 3)
113600     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 3)
113700     MOVE +5             TO AS5MSGRB-ISI-VLEN (2 7)
113800     MOVE '2,5:9'        TO AS5MSGRB-ISI-VTXT (2 7)
113900
114000     GO TO 88000-0000-MSG
114100
114200     CONTINUE.
114300 80103-0001-TEXT.
114400* ------------------------------------------------------------ *
114500* 0103: V1 V2 V3 ACTION V4 IS NOT SUPPORTED
114600* ------------------------------------------------------------ *
114700     MOVE ZERO TO AS5MSGRB-ISI (1)
114800     SET ASU037_0001 (1) TO TRUE
114900
115000     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
115100     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
115200     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
115300     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
115400     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
115500     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
115600     MOVE I-DATE-ACTION  TO LS-4BYTES
115700     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 4)
115800     MOVE LS-4BYTES      TO AS5MSGRB-ISI-VTXT (1 4)
115900
116000     CONTINUE.
116100 80104-0001-TEXT.
116200* ------------------------------------------------------------ *
116300* 0104: V1 V2 V3 SUPPORTED ACTIONS ARE V7
116400* ------------------------------------------------------------ *
116500     MOVE ZERO TO AS5MSGRB-ISI (2)
116600     SET ASU038 (2)      TO TRUE
116700
116800     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 1)
116900     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 1)
117000     MOVE +11            TO AS5MSGRB-ISI-VLEN (2 2)
117100     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (2 2)
117200     MOVE +8             TO AS5MSGRB-ISI-VLEN (2 3)
117300     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (2 3)
117400     MOVE +5             TO AS5MSGRB-ISI-VLEN (2 7)
117500     MOVE '2,5:7'        TO AS5MSGRB-ISI-VTXT (2 7)
117600
117700     GO TO 88000-0000-MSG
117800
117900     CONTINUE.
118000 80105-0001-TEXT.
118100* ------------------------------------------------------------ *
118200* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
118300* ------------------------------------------------------------ *
118400     MOVE ZERO TO AS5MSGRB-ISI (1)
118500     SET ASU039_0002 (1) TO TRUE
118600
118700     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
118800     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
118900     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
119000     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
119100     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
119200     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
119300     MOVE +23            TO AS5MSGRB-ISI-VLEN (1 5)
119400     MOVE '2-CALENDAR & FIELD TYPE'
119500                         TO AS5MSGRB-ISI-VTXT (1 5)
119600
119700     GO TO 88000-0000-MSG
119800
119900     CONTINUE.
120000 80105-0002-TEXT.
120100* ------------------------------------------------------------ *
120200* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
120300* ------------------------------------------------------------ *
120400     MOVE ZERO TO AS5MSGRB-ISI (1)
120500     SET ASU039_0002 (1) TO TRUE
120600
120700     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
120800     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
120900     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
121000     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
121100     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
121200     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
121300     MOVE +14            TO AS5MSGRB-ISI-VLEN (1 5)
121400     MOVE '2-INCLUDE TYPE'
121500                         TO AS5MSGRB-ISI-VTXT (1 5)
121600
121700     GO TO 88000-0000-MSG
121800
121900     CONTINUE.
122000 80105-0003-TEXT.
122100* ------------------------------------------------------------ *
122200* 0105: V1 V2 V3 ARGUMENT (V5) IS INVALID
122300* ------------------------------------------------------------ *
122400     MOVE ZERO TO AS5MSGRB-ISI (1)
122500     SET ASU039_0002 (1) TO TRUE
122600
122700     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
122800     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
122900     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
123000     MOVE 'SUB-ROUTINE'  TO AS5MSGRB-ISI-VTXT (1 2)
123100     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
123200     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 3)
123300     MOVE +13            TO AS5MSGRB-ISI-VLEN (1 5)
123400     MOVE '2-DATE FORMAT'
123500                         TO AS5MSGRB-ISI-VTXT (1 5)
123600
123700     GO TO 88000-0000-MSG
123800
123900     CONTINUE.
124000 88000-0000-MSG.
124100     DISPLAY WS-PGMID
124200          ' ABOUT TO CALL ASUMETXT'
124300
124400     MOVE 'ASUMETXT' TO ASU-MODULE
124500     CALL ASU-MODULE
124600          USING ASCA-COMMAREA
124700                AS5MSGRB-REQUEST-BLOCK
124800**              AS5FDBK-COND-AREA
124900                OMITTED
125000
125100     IF ADDRESS OF AS5FDBK-COND-AREA = NULL
125200       DISPLAY WS-PGMID
125300            ' ABOUT TO CALL CEESGL'
125400       CALL 'CEESGL'
125500            USING AS5FDBK-COND-AREA
125600                  OMITTED
125700     ELSE
125800       DISPLAY WS-PGMID
125900            ' ABOUT TO CALL CEEMSG'
126000       CALL 'CEEMSG'
126100            USING AS5FDBK-COND-AREA
126200                  LE-MSG-DEST
126300                  OMITTED
126400     END-IF
126500
126600     CONTINUE.
126700 89000-0999-END.
126800     EXIT.
./ ADD NAME=ASTMSG1B 0170-17363-21272-1411-01516-01324-00000-APLKS   47
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTMSG1B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700* ------------------------------------------------------------ *
000800* ARCHITECTURE SERVICES FACILITY
000900* UNIT TESTING
001000* COBOL ROUTINE
001100*
001200* PROGRAM ID: ASTMSG1B
001300*      TITLE: TEST LE MESSAGE SERVICES
001400*       DATE: 2015/03/03
001500*
001600*       DESC:
001700*
001800* ------------------------------------------------------------ *
001900* MAINTENANCE HISTORY:
002000*
002100* 2018/05/17 ADDED NEW MESSAGES TO AS LE MESSAGE TABLE
002200*
002300* ------------------------------------------------------------ *
002400     SKIP2
002500 DATA DIVISION.
002600     SKIP2
002700 WORKING-STORAGE SECTION.
002800 01  FILLER.
002900     03  WS-EYE-CATCHER PIC X(25)
003000              VALUE "BUZZARD CREEK TECH, INC. ".
003100     03  WS-PGMID       PIC X(08) VALUE "ASTMSG1B".
003200
003300 01  WS-LAST-FDBK         PIC X(12) VALUE LOW-VALUE.
003400 01  WS-DATE-PATTERN.
003500     03  FILLER           PIC S9(4) BINARY VALUE 10.
003600     03  FILLER           PIC X(10) VALUE "MM/DD/YYYY".
003700 01  WS-DATE-TIME-PATTERN.
003800     03  FILLER           PIC S9(4) BINARY VALUE 24.
003900     03  FILLER           PIC X(24)
004000     VALUE "WWW, MM/DD/YYYY HH:MI AP".
004100 01  WS-DAY-VALUES.
004200     03  FILLER           PIC X(09) VALUE "SUNDAY".
004300     03  FILLER           PIC X(09) VALUE "MONDAY".
004400     03  FILLER           PIC X(09) VALUE "TUESDAY".
004500     03  FILLER           PIC X(09) VALUE "WEDNESDAY".
004600     03  FILLER           PIC X(09) VALUE "THURSDAY".
004700     03  FILLER           PIC X(09) VALUE "FRIDAY".
004800     03  FILLER           PIC X(09) VALUE "SATURDAY".
004900 01  FILLER REDEFINES WS-DAY-VALUES.
005000     03  FILLER OCCURS 7 TIMES.
005100         05  WS-DOW-TITLE PIC X(09).
005200     SKIP1
005300     COPY AS5ENVCA.
005400     SKIP1
005500     COPY AS5FDBK.
005600     SKIP2
005700 LOCAL-STORAGE SECTION.
005800 01  FILLER.
005900     03  LS-ASMODULE         PIC X(08).
006000     03  LS-ASCA-PTR         POINTER.
006100     03  LS-LEFUNCT          PIC S9(9) BINARY SYNC.
006200     03  LS-LEMSGDEST        PIC S9(9) BINARY SYNC.
006300     03  LS-LEISIVAR         PIC S9(9) BINARY SYNC.
006400     03  LS-SYS-SUBSYS-MASK  PIC  9(9) BINARY SYNC.
006500     03  LS-LEENV-MASK       PIC  9(9) BINARY SYNC.
006600     03  LS-LEMBRID-MASK     PIC  9(9) BINARY SYNC.
006700     03  LS-LEGPID           PIC  9(9) BINARY SYNC.
006800     03  FILLER REDEFINES LS-LEGPID.
006900         05  LS-LEGPID-BYTE  PIC  X(1) OCCURS 4.
007000
007100     03  LS-BIT-NBR          PIC S9(9) BINARY SYNC.
007200     03  LS-BIT-RSLT         PIC S9(9) BINARY SYNC.
007300
007400     03  LS-WORK             PIC  9(9) BINARY SYNC.
007500     03  FILLER REDEFINES LS-WORK.
007600         05  FILLER          PIC  X(3).
007700         05  LS-WORK-4       PIC  X(1).
007800     03  LS-WORK-UNPK-1      PIC  Z99.
007900     03  LS-WORK-UNPK-2      PIC  Z99.
008000     03  LS-WORK-UNPK-3      PIC  Z99.
008100     03  LS-WORK-UNPK-4      PIC  Z99.
008200     03  LS-VSTRING          PIC  X(80).
008300     SKIP1
008400     COPY AS5DMPRB.
008500     SKIP1
008600     COPY AS5MSGRB.
008700     SKIP2
008800 LINKAGE SECTION.
008900     COPY AS5CA.
009000     EJECT
009100 PROCEDURE DIVISION USING
009200     ASCA-COMMAREA.
009300     SKIP2
009400 DECLARATIVES.
009500 0010-00-DEBUG SECTION.
009600     USE FOR DEBUGGING ON ALL PROCEDURES.
009700     SKIP1
009800 0010-10-DEBUG.
009900     DISPLAY DEBUG-ITEM
010000     SKIP1
010100     CONTINUE.
010200*0020-00-DEBUG SECTION.
010300**   USE FOR DEBUGGING ON PARAGRAPH_NAME
010400     SKIP1
010500*0020-10-DEBUG.
010600*    STATEMENTS ...
010700     SKIP1
010800     CONTINUE.
010900*0030-00-DEBUG SECTION.
011000**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
011100     SKIP1
011200*0030-10-DEBUG.
011300*    STATEMENTS ...
011400     SKIP2
011500     CONTINUE.
011600 END DECLARATIVES.
011700     SKIP2
011800     CONTINUE.
011900 0100-00-MAINLINE.
012000     DISPLAY WS-PGMID
012100          " Testing ASU messages"
012200     SKIP2
012300*    * ------------------------------------------------------- *
012400*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
012500*    * ------------------------------------------------------- *
012600
012700     SET LS-ASCA-PTR TO NULL
012800     MOVE "ASU3I01B" TO LS-ASMODULE
012900     CALL LS-ASMODULE
013000          USING LS-ASCA-PTR
013100**              AS5FDBK-COND-AREA
013200                OMITTED
013300
013400     IF LS-ASCA-PTR = NULL
013500       DISPLAY WS-PGMID
013600            " ASU3I01B failed to create the ASCA"
013700       GOBACK
013800     END-IF
013900
014000     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
014100     MOVE +2 TO LS-LEMSGDEST
014200     DISPLAY " "
014300
014400*    DUMP AS5CA COMMUNICATION AREA
014500     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
014600     MOVE +1 TO AS5DMPRB-NUMBER
014700     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
014800     MOVE "ASUMDHEX" TO LS-ASMODULE
014900     CALL LS-ASMODULE
015000          USING ASCA-COMMAREA
015100                AS5DMPRB-REQUEST-BLOCK
015200                ASCA-COMMAREA
015300**              AS5FDBK-COND-AREA
015400                OMITTED
015500
015600*    QUERY LE ENCLAVE INFORMATION
015700     DISPLAY " "
015800     CALL 'CEE3INF'
015900          USING LS-SYS-SUBSYS-MASK
016000                LS-LEENV-MASK
016100                LS-LEMBRID-MASK
016200                LS-LEGPID
016300**              AS5FDBK-COND-AREA
016400                OMITTED
016500
016600*    TEST BIT SETTINGS
016700     MOVE ZERO TO LS-BIT-RSLT
016800     PERFORM
016900          VARYING LS-BIT-NBR FROM +0 BY +1
017000          UNTIL LS-BIT-NBR > +31
017100       CALL 'CEESITST'
017200            USING LS-SYS-SUBSYS-MASK
017300                  LS-BIT-NBR
017400                  OMITTED
017500                  LS-BIT-RSLT
017600       IF LS-BIT-NBR = (31 - 0) AND LS-BIT-RSLT = +1
017700         DISPLAY WS-PGMID
017800              " EXECUTING IN A CICS ENVIRONMENT"
017900       END-IF
018000       IF LS-BIT-NBR = (31 - 1) AND LS-BIT-RSLT = +1
018100         DISPLAY WS-PGMID
018200              " EXECUTING IN A CICS_PIPI ENVIRONMENT"
018300       END-IF
018400       IF LS-BIT-NBR = (31 - 4) AND LS-BIT-RSLT = +1
018500         DISPLAY WS-PGMID
018600              " EXECUTING IN A TSO ENVIRONMENT"
018700       END-IF
018800       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
018900         DISPLAY WS-PGMID
019000              " EXECUTING IN A BATCH ENVIRONMENT"
019100       END-IF
019200       IF LS-BIT-NBR = (31 - 6) AND LS-BIT-RSLT = +1
019300         DISPLAY WS-PGMID
019400              " EXECUTING IN A z/OS UNIX ENVIRONMENT"
019500       END-IF
019600       IF LS-BIT-NBR = (31 - 29) AND LS-BIT-RSLT = +1
019700         DISPLAY WS-PGMID
019800              " EXECUTING ON z/VSE"
019900       END-IF
020000       IF LS-BIT-NBR = (31 - 30) AND LS-BIT-RSLT = +1
020100         DISPLAY WS-PGMID
020200              " EXECUTING ON z/ZOS"
020300       END-IF
020400     END-PERFORM
020500
020600*    TEST BIT SETTINGS
020700     MOVE ZERO TO LS-BIT-RSLT
020800     PERFORM
020900          VARYING LS-BIT-NBR FROM +0 BY +1
021000          UNTIL LS-BIT-NBR > +31
021100       CALL 'CEESITST'
021200            USING LS-LEENV-MASK
021300                  LS-BIT-NBR
021400                  OMITTED
021500                  LS-BIT-RSLT
021600       IF LS-BIT-NBR = (31 - 0) AND LS-BIT-RSLT = +1
021700         DISPLAY WS-PGMID
021800              " EXECUTING IN A PIPI ENVIRONMENT"
021900       END-IF
022000       IF LS-BIT-NBR = (31 - 1) AND LS-BIT-RSLT = +1
022100         DISPLAY WS-PGMID
022200              " EXECUTING IN A PIPI-MAIN ENVIRONMENT"
022300       END-IF
022400       IF LS-BIT-NBR = (31 - 2) AND LS-BIT-RSLT = +1
022500         DISPLAY WS-PGMID
022600              " EXECUTING IN A PIPI-SUB ENVIRONMENT"
022700       END-IF
022800       IF LS-BIT-NBR = (31 - 3) AND LS-BIT-RSLT = +1
022900         DISPLAY WS-PGMID
023000              " EXECUTING IN A PIPI-SUBDP ENVIRONMENT"
023100       END-IF
023200       IF LS-BIT-NBR = (31 - 4) AND LS-BIT-RSLT = +1
023300         DISPLAY WS-PGMID
023400              " EXECUTING IN A PICI ENVIRONMENT"
023500       END-IF
023600       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
023700         DISPLAY WS-PGMID
023800              " EXECUTING IN A NESTED ENCLAVE"
023900       END-IF
024000       IF LS-BIT-NBR = (31 - 6) AND LS-BIT-RSLT = +1
024100         DISPLAY WS-PGMID
024200              " LRR IS ACTIVE IN CURRENT ENCLAVE"
024300       END-IF
024400       IF LS-BIT-NBR = (31 - 7) AND LS-BIT-RSLT = +1
024500         DISPLAY WS-PGMID
024600              " RUNTIME REUSE IS ACTIVE"
024700       END-IF
024800       IF LS-BIT-NBR = (31 - 8) AND LS-BIT-RSLT = +1
024900         DISPLAY WS-PGMID
025000              " XPLINK(ON) IS IN EFFECT"
025100       END-IF
025200       IF LS-BIT-NBR = (31 - 9) AND LS-BIT-RSLT = +1
025300         DISPLAY WS-PGMID
025400              " POSIX(ON) RTO IS IN EFFECT"
025500       END-IF
025600       IF LS-BIT-NBR = (31 - 10) AND LS-BIT-RSLT = +1
025700         DISPLAY WS-PGMID
025800              " PTHREAD > 0"
025900       END-IF
026000       IF LS-BIT-NBR = (31 - 11) AND LS-BIT-RSLT = +1
026100         DISPLAY WS-PGMID
026200              " EXECUTING ON THE IPT"
026300       END-IF
026400       IF LS-BIT-NBR = (31 - 12) AND LS-BIT-RSLT = +1
026500         DISPLAY WS-PGMID
026600              " MULTITHREADED FORK IS IN EFFECT"
026700       END-IF
026800       IF LS-BIT-NBR = (31 - 13)
026900         IF LS-BIT-RSLT = +1
027000           DISPLAY WS-PGMID
027100                " AMODE 31"
027200         ELSE
027300           DISPLAY WS-PGMID
027400                " AMODE 24"
027500         END-IF
027600       END-IF
027700       IF LS-BIT-NBR = (31 - 15) AND LS-BIT-RSLT = +1
027800         DISPLAY WS-PGMID
027900              " EXECUTING IN A PIPI-MAINDP ENVIRONMENT"
028000       END-IF
028100     END-PERFORM
028200
028300*    TEST BIT SETTINGS
028400     MOVE ZERO TO LS-BIT-RSLT
028500     PERFORM
028600          VARYING LS-BIT-NBR FROM +0 BY +1
028700          UNTIL LS-BIT-NBR > +31
028800       CALL 'CEESITST'
028900            USING LS-LEMBRID-MASK
029000                  LS-BIT-NBR
029100                  OMITTED
029200                  LS-BIT-RSLT
029300       IF LS-BIT-NBR = (31 - 3) AND LS-BIT-RSLT = +1
029400         DISPLAY WS-PGMID
029500              " MEMBER LANGUAGE IS C/C++"
029600       END-IF
029700       IF LS-BIT-NBR = (31 - 5) AND LS-BIT-RSLT = +1
029800         DISPLAY WS-PGMID
029900              " MEMBER LANGAUGE IS COBOL"
030000       END-IF
030100       IF LS-BIT-NBR = (31 - 7) AND LS-BIT-RSLT = +1
030200         DISPLAY WS-PGMID
030300              " MEMBER LANGUAGE IS FORTRAN"
030400       END-IF
030500       IF LS-BIT-NBR = (31 - 10) AND LS-BIT-RSLT = +1
030600         DISPLAY WS-PGMID
030700              " MEMBER LANGUAGE IS PL/I"
030800       END-IF
030900       IF LS-BIT-NBR = (31 - 11) AND LS-BIT-RSLT = +1
031000         DISPLAY WS-PGMID
031100              " MEMBER LANGUAGE IS ENTERPRISE PL/I"
031200       END-IF
031300     END-PERFORM
031400
031500*    UNPACK PRODUCT VRM
031600     MOVE ZERO TO LS-WORK
031700     MOVE LS-LEGPID-BYTE (1) TO LS-WORK-4
031800     MOVE LS-WORK   TO LS-WORK-UNPK-1
031900     MOVE LS-LEGPID-BYTE (2) TO LS-WORK-4
032000     MOVE LS-WORK   TO LS-WORK-UNPK-2
032100     MOVE LS-LEGPID-BYTE (3) TO LS-WORK-4
032200     MOVE LS-WORK   TO LS-WORK-UNPK-3
032300     MOVE LS-LEGPID-BYTE (4) TO LS-WORK-4
032400     MOVE LS-WORK   TO LS-WORK-UNPK-4
032500     DISPLAY WS-PGMID
032600          " LE VERSION INFO PP/VV/RR/MM: "
032700          LS-WORK-UNPK-1 (2:2) "/"
032800          LS-WORK-UNPK-2 (2:2) "/"
032900          LS-WORK-UNPK-3 (2:2) "/"
033000          LS-WORK-UNPK-4 (2:2)
033100
033200     DISPLAY " "
033300*    QUERY UTC/GMT
033400***  CALL 'CEEGMT'
033500***       USING ASCA-GMT-LDAYS
033600***             ASCA-GMT-LSEC
033700**              AS5FDBK-COND-AREA
033800***             OMITTED
033900     MOVE SPACE TO LS-VSTRING
034000     CALL 'CEEDATE'
034100          USING ASCA-GMT-LDAYS
034200                WS-DATE-PATTERN
034300                LS-VSTRING
034400**              AS5FDBK-COND-AREA
034500                OMITTED
034600     DISPLAY WS-PGMID
034700          " UTC/GMT DATE: "
034800          LS-VSTRING
034900     MOVE SPACE TO LS-VSTRING
035000     CALL 'CEEDATM'
035100          USING ASCA-GMT-LSEC
035200                WS-DATE-TIME-PATTERN
035300                LS-VSTRING
035400**              AS5FDBK-COND-AREA
035500                OMITTED
035600     DISPLAY WS-PGMID
035700          " UTC/GMT TIMESTAMP: "
035800          LS-VSTRING
035900
036000*    QUERY LOCAL DATE/TIME
036100***  CALL 'CEELOCT'
036200***       USING ASCA-CUR-LDAYS
036300***             ASCA-CUR-LSEC
036400***             ASCA-CUR-DTTM
036500**              AS5FDBK-COND-AREA
036600***             OMITTED
036700     DISPLAY WS-PGMID
036800          " LOCAL DATE/TIME YYYYMMDDHHMISS999: "
036900          ASCA-CUR-DTTM
037000     MOVE SPACE TO LS-VSTRING
037100     CALL 'CEEDATE'
037200          USING ASCA-CUR-LDAYS
037300                WS-DATE-PATTERN
037400                LS-VSTRING
037500**              AS5FDBK-COND-AREA
037600                OMITTED
037700     DISPLAY WS-PGMID
037800          " LOCAL DATE: "
037900          LS-VSTRING
038000     MOVE SPACE TO LS-VSTRING
038100     CALL 'CEEDATM'
038200          USING ASCA-CUR-LSEC
038300                WS-DATE-TIME-PATTERN
038400                LS-VSTRING
038500**              AS5FDBK-COND-AREA
038600                           OMITTED
038700     DISPLAY WS-PGMID
038800          " LOCAL TIMESTAMP: "
038900          LS-VSTRING
039000
039100*    QUERY DAY OF WEEK NUMBER (1:7) (SUN:SAT)
039200***  CALL 'CEEDYWK'
039300***       USING ASCA-CUR-LDAYS
039400***             ASCA-CUR-DOWNBR
039500**              AS5FDBK-COND-AREA
039600***             OMITTED
039700     MOVE ASCA-CUR-DOWNBR TO LS-WORK-UNPK-1
039800     DISPLAY WS-PGMID
039900          " DAY OF WEEK NUMBER: "
040000          LS-WORK-UNPK-1
040100          " "
040200          WS-DOW-TITLE (ASCA-CUR-DOWNBR)
040300
040400*    QUERY LE LANGUAGE
040500***  MOVE +2 TO LS-LEFUNCT
040600***  CALL 'CEE3LNG'
040700***       USING LS-LEFUNCT
040800***             ASCA-NATL-LANG
040900**              AS5FDBK-COND-AREA
041000***             OMITTED
041100     DISPLAY WS-PGMID
041200          " LANGUAGE: "
041300          ASCA-NATL-LANG
041400
041500*    QUERY LE COUNTRY CODE
041600***  MOVE +2 TO LS-LEFUNCT
041700***  CALL 'CEE3CTY'
041800***       USING LS-LEFUNCT
041900***             ASCA-CNTRY
042000**              AS5FDBK-COND-AREA
042100***             OMITTED
042200     DISPLAY WS-PGMID
042300          " COUNTRY CODE: "
042400          ASCA-CNTRY
042500
042600*    QUERY DECIMAL SEPARATOR
042700***  CALL 'CEE3MDS'
042800***       USING ASCA-CNTRY
042900***             ASCA-CNTRY-MDS
043000**              AS5FDBK-COND-AREA
043100***             OMITTED
043200     DISPLAY WS-PGMID
043300          " DECIMAL SEPARATOR: "
043400          ASCA-CNTRY-MDS
043500
043600*    QUERY THOUSANDS SEPARATOR
043700***  CALL 'CEE3MTS'
043800***       USING ASCA-CNTRY
043900***             ASCA-CNTRY-MTS
044000**              AS5FDBK-COND-AREA
044100***             OMITTED
044200     DISPLAY WS-PGMID
044300          " THOUSANDS SEPARATOR: "
044400          ASCA-CNTRY-MTS
044500
044600*    QUERY CURRENCY SYMBOL
044700***  CALL 'CEE3MC2'
044800***       USING ASCA-CNTRY
044900***             ASCA-CNTRY-MCS
045000***             ASCA-INTL-MCS
045100**              AS5FDBK-COND-AREA
045200***             OMITTED
045300     DISPLAY WS-PGMID
045400          " CURRENCY SYMBOL: "
045500          ASCA-CNTRY-MCS
045600          "  INTL: "
045700          ASCA-INTL-MCS
045800
045900*    QUERY TIME STAMP FORMAT
046000***  CALL 'CEEFMDT'
046100***       USING ASCA-CNTRY
046200***             ASCA-TS-FORMAT
046300**              AS5FDBK-COND-AREA
046400***             OMITTED
046500     DISPLAY WS-PGMID
046600          " TIMESTAMP FORMAT: "
046700          ASCA-TS-FORMAT
046800     DISPLAY WS-PGMID
046900          " TIMESTAMP LENGTH: "
047000          ASCA-TS-LEN
047100     DISPLAY " "
047200     SKIP2
047300*    * ------------------------------------------------------- *
047400*    * CALL ASU3QEIB TO COLLECT ALL OF THE ENVIRONMENT DATA
047500*    * ------------------------------------------------------- *
047600
047700     MOVE LOW-VALUE TO AS5ENVCA-COMMAREA
047800     INITIALIZE AS5ENVCA-COMMAREA
047900*    QUERY ENVIRONMENT INFORMATION
048000     MOVE WS-PGMID TO AS5ENVCA-CSV-IPGM
048100     MOVE +2 TO LS-LEFUNCT
048200     MOVE "ASU3QEIB" TO LS-ASMODULE
048300     CALL LS-ASMODULE
048400          USING ASCA-COMMAREA
048500                LS-LEFUNCT
048600                AS5ENVCA-COMMAREA
048700**              AS5FDBK-COND-AREA
048800                OMITTED
048900
049000*    DUMP ASU3QEIB COMMUNICATION AREA
049100     MOVE LENGTH OF AS5ENVCA-COMMAREA TO AS5DMPRB-DATA-LEN
049200     MOVE +2 TO AS5DMPRB-NUMBER
049300     MOVE 'ENVIRONMENT INFORMATION' TO AS5DMPRB-TITLE
049400     MOVE "ASUMDHEX" TO LS-ASMODULE
049500     CALL LS-ASMODULE
049600          USING ASCA-COMMAREA
049700                AS5DMPRB-REQUEST-BLOCK
049800                AS5ENVCA-COMMAREA
049900**              AS5FDBK-COND-AREA
050000                OMITTED
050100
050200     DISPLAY " "
050300     SKIP2
050400*    * ------------------------------------------------------- *
050500*    * CALL ASU3QEIB TO PRINT ALL OF THE ENVIRONMENT DATA
050600*    * ------------------------------------------------------- *
050700
050800*    PRINT ENVIRONMENT INFORMATION
050900     MOVE +5 TO LS-LEFUNCT
051000     MOVE "ASU3QEIB" TO LS-ASMODULE
051100     CALL LS-ASMODULE
051200          USING ASCA-COMMAREA
051300                LS-LEFUNCT
051400                AS5ENVCA-COMMAREA
051500**              AS5FDBK-COND-AREA
051600                OMITTED
051700     SKIP2
051800*    * ------------------------------------------------------- *
051900*    * PRODUCE ALL OF THE ASU DEFINED MESSAGES
052000*    * ------------------------------------------------------- *
052100
052200     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 1)
052300                            AS5MSGRB-ISI-VLEN (2 1)
052400                            AS5MSGRB-ISI-VLEN (3 1)
052500     MOVE WS-PGMID       TO AS5MSGRB-ISI-VTXT (1 1)
052600                            AS5MSGRB-ISI-VTXT (2 1)
052700                            AS5MSGRB-ISI-VTXT (3 1)
052800
052900     MOVE +11            TO AS5MSGRB-ISI-VLEN (1 2)
053000                            AS5MSGRB-ISI-VLEN (2 2)
053100                            AS5MSGRB-ISI-VLEN (3 2)
053200     MOVE "SUB-ROUTINE"  TO AS5MSGRB-ISI-VTXT (1 2)
053300                            AS5MSGRB-ISI-VTXT (2 2)
053400                            AS5MSGRB-ISI-VTXT (3 2)
053500
053600     MOVE +8             TO AS5MSGRB-ISI-VLEN (1 3)
053700                            AS5MSGRB-ISI-VLEN (2 3)
053800                            AS5MSGRB-ISI-VLEN (3 3)
053900     MOVE "ASUDAPND"     TO AS5MSGRB-ISI-VTXT (1 3)
054000                            AS5MSGRB-ISI-VTXT (2 3)
054100                            AS5MSGRB-ISI-VTXT (3 3)
054200
054300     MOVE +2             TO AS5MSGRB-ISI-VLEN (1 4)
054400     MOVE "00"           TO AS5MSGRB-ISI-VTXT (1 4)
054500
054600     MOVE +1             TO AS5MSGRB-ISI-VLEN (1 5)
054700     MOVE "3"            TO AS5MSGRB-ISI-VTXT (1 5)
054800
054900     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 6)
055000     MOVE "1024"         TO AS5MSGRB-ISI-VTXT (1 6)
055100
055200     MOVE +4             TO AS5MSGRB-ISI-VLEN (1 7)
055300     MOVE "JUNK"         TO AS5MSGRB-ISI-VTXT (1 7)
055400
055500     MOVE +10            TO AS5MSGRB-ISI-VLEN (2 7)
055600     MOVE "5,7,8,9,10"   TO AS5MSGRB-ISI-VTXT (2 7)
055700
055800     MOVE +9             TO AS5MSGRB-ISI-VLEN (3 8)
055900     MOVE "MORE INFO"    TO AS5MSGRB-ISI-VTXT (3 8)
056000
056100     DISPLAY " "
056200
056300*    GO TO MESSAGE-0108.
056400*    GO TO MESSAGE-0109.
056500*    GO TO MESSAGE-0110.
056600*    GO TO MESSAGE-0111.
056700*    GO TO MESSAGE-0112.
056800*    GO TO MESSAGE-0113.
056900*    GO TO MESSAGE-0114.
057000*    GO TO MESSAGE-0115.
057100*    GO TO MESSAGE-0116.
057200*    GO TO MESSAGE-0117.
057300*    GO TO MESSAGE-0118.
057400*    GO TO MESSAGE-0119.
057500*    GO TO MESSAGE-0120.
057600*    GO TO MESSAGE-0121.
057700
057800*    0101 - VAR1:VAR2 VAR3 ACTION VAR4 IS INVALID
057900     SET ASU035_0001 (1) TO TRUE
058000     MOVE ZERO           TO AS5MSGRB-ISI (1)
058100
058200     MOVE +1             TO LS-LEISIVAR
058300     CALL 'CEECMI'
058400          USING AS5MSGRB-CTOKEN (1)
058500                LS-LEISIVAR
058600                AS5MSGRB-ISI-VSTR (1 1)
058700**              AS5FDBK-COND-AREA
058800                OMITTED
058900
059000     MOVE +2             TO LS-LEISIVAR
059100     CALL 'CEECMI'
059200          USING AS5MSGRB-CTOKEN (1)
059300                LS-LEISIVAR
059400                AS5MSGRB-ISI-VSTR (1 2)
059500**              AS5FDBK-COND-AREA
059600                OMITTED
059700
059800     MOVE +3             TO LS-LEISIVAR
059900     CALL 'CEECMI'
060000          USING AS5MSGRB-CTOKEN (1)
060100                LS-LEISIVAR
060200                AS5MSGRB-ISI-VSTR (1 3)
060300**              AS5FDBK-COND-AREA
060400                OMITTED
060500
060600     MOVE +4             TO LS-LEISIVAR
060700     CALL 'CEECMI'
060800          USING AS5MSGRB-CTOKEN (1)
060900                LS-LEISIVAR
061000                AS5MSGRB-ISI-VSTR (1 4)
061100**              AS5FDBK-COND-AREA
061200                OMITTED
061300
061400     CALL 'CEEMSG'
061500          USING AS5MSGRB-CTOKEN (1)
061600                LS-LEMSGDEST
061700**              AS5FDBK-COND-AREA
061800                OMITTED
061900
062000*    0102 - VAR1:VAR2 VAR3 VALID ACTIONS ARE: VAR7
062100     SET ASU036 (2)      TO TRUE
062200     MOVE ZERO           TO AS5MSGRB-ISI (2)
062300
062400     MOVE +1             TO LS-LEISIVAR
062500     CALL 'CEECMI'
062600          USING AS5MSGRB-CTOKEN (2)
062700                LS-LEISIVAR
062800                AS5MSGRB-ISI-VSTR (2 1)
062900**              AS5FDBK-COND-AREA
063000                OMITTED
063100
063200     MOVE +2             TO LS-LEISIVAR
063300     CALL 'CEECMI'
063400          USING AS5MSGRB-CTOKEN (2)
063500                LS-LEISIVAR
063600                AS5MSGRB-ISI-VSTR (2 2)
063700**              AS5FDBK-COND-AREA
063800                OMITTED
063900
064000     MOVE +3             TO LS-LEISIVAR
064100     CALL 'CEECMI'
064200          USING AS5MSGRB-CTOKEN (2)
064300                LS-LEISIVAR
064400                AS5MSGRB-ISI-VSTR (2 3)
064500**              AS5FDBK-COND-AREA
064600                OMITTED
064700
064800     MOVE +7             TO LS-LEISIVAR
064900     CALL 'CEECMI'
065000          USING AS5MSGRB-CTOKEN (2)
065100                LS-LEISIVAR
065200                AS5MSGRB-ISI-VSTR (2 7)
065300**              AS5FDBK-COND-AREA
065400                OMITTED
065500
065600     CALL 'CEEMSG'
065700          USING AS5MSGRB-CTOKEN (2)
065800                LS-LEMSGDEST
065900**              AS5FDBK-COND-AREA
066000                OMITTED
066100
066200*    0103 - VAR1:VAR2 VAR3 ACTION VAR4 IS NOT SUPPORTED
066300     SET ASU037_0001 (1) TO TRUE
066400     MOVE ZERO           TO AS5MSGRB-ISI (1)
066500
066600     MOVE +1             TO LS-LEISIVAR
066700     CALL 'CEECMI'
066800          USING AS5MSGRB-CTOKEN (1)
066900                LS-LEISIVAR
067000                AS5MSGRB-ISI-VSTR (1 1)
067100**              AS5FDBK-COND-AREA
067200                OMITTED
067300
067400     MOVE +2             TO LS-LEISIVAR
067500     CALL 'CEECMI'
067600          USING AS5MSGRB-CTOKEN (1)
067700                LS-LEISIVAR
067800                AS5MSGRB-ISI-VSTR (1 2)
067900**              AS5FDBK-COND-AREA
068000                OMITTED
068100
068200     MOVE +3             TO LS-LEISIVAR
068300     CALL 'CEECMI'
068400          USING AS5MSGRB-CTOKEN (1)
068500                LS-LEISIVAR
068600                AS5MSGRB-ISI-VSTR (1 3)
068700**              AS5FDBK-COND-AREA
068800                OMITTED
068900
069000     MOVE +4             TO LS-LEISIVAR
069100     CALL 'CEECMI'
069200          USING AS5MSGRB-CTOKEN (1)
069300                LS-LEISIVAR
069400                AS5MSGRB-ISI-VSTR (1 4)
069500**              AS5FDBK-COND-AREA
069600                OMITTED
069700
069800     CALL 'CEEMSG'
069900          USING AS5MSGRB-CTOKEN (1)
070000                LS-LEMSGDEST
070100**              AS5FDBK-COND-AREA
070200                OMITTED
070300
070400*    0104 - VAR1:VAR2 VAR3 SUPORTED ACTIONS ARE: VAR7
070500     SET ASU038 (2)      TO TRUE
070600     MOVE ZERO           TO AS5MSGRB-ISI (2)
070700
070800     MOVE +1             TO LS-LEISIVAR
070900     CALL 'CEECMI'
071000          USING AS5MSGRB-CTOKEN (2)
071100                LS-LEISIVAR
071200                AS5MSGRB-ISI-VSTR (2 1)
071300**              AS5FDBK-COND-AREA
071400                OMITTED
071500
071600     MOVE +2             TO LS-LEISIVAR
071700     CALL 'CEECMI'
071800          USING AS5MSGRB-CTOKEN (2)
071900                LS-LEISIVAR
072000                AS5MSGRB-ISI-VSTR (2 2)
072100**              AS5FDBK-COND-AREA
072200                OMITTED
072300
072400     MOVE +3             TO LS-LEISIVAR
072500     CALL 'CEECMI'
072600          USING AS5MSGRB-CTOKEN (2)
072700                LS-LEISIVAR
072800                AS5MSGRB-ISI-VSTR (2 3)
072900**              AS5FDBK-COND-AREA
073000                OMITTED
073100
073200     MOVE +7             TO LS-LEISIVAR
073300     CALL 'CEECMI'
073400          USING AS5MSGRB-CTOKEN (2)
073500                LS-LEISIVAR
073600                AS5MSGRB-ISI-VSTR (2 7)
073700**              AS5FDBK-COND-AREA
073800                OMITTED
073900
074000     CALL 'CEEMSG'
074100          USING AS5MSGRB-CTOKEN (2)
074200                LS-LEMSGDEST
074300**              AS5FDBK-COND-AREA
074400                OMITTED
074500
074600*    0105 VAR1:VAR2 VAR3 ARGUMENT (VAR5) IS INVALID
074700     SET ASU039_0001 (1) TO TRUE
074800     MOVE ZERO           TO AS5MSGRB-ISI (1)
074900
075000     MOVE +1             TO LS-LEISIVAR
075100     CALL 'CEECMI'
075200          USING AS5MSGRB-CTOKEN (1)
075300                LS-LEISIVAR
075400                AS5MSGRB-ISI-VSTR (1 1)
075500**              AS5FDBK-COND-AREA
075600                OMITTED
075700
075800     MOVE +2             TO LS-LEISIVAR
075900     CALL 'CEECMI'
076000          USING AS5MSGRB-CTOKEN (1)
076100                LS-LEISIVAR
076200                AS5MSGRB-ISI-VSTR (1 2)
076300**              AS5FDBK-COND-AREA
076400                OMITTED
076500
076600     MOVE +3             TO LS-LEISIVAR
076700     CALL 'CEECMI'
076800          USING AS5MSGRB-CTOKEN (1)
076900                LS-LEISIVAR
077000                AS5MSGRB-ISI-VSTR (1 3)
077100**              AS5FDBK-COND-AREA
077200                OMITTED
077300
077400     MOVE +5             TO LS-LEISIVAR
077500     CALL 'CEECMI'
077600          USING AS5MSGRB-CTOKEN (1)
077700                LS-LEISIVAR
077800                AS5MSGRB-ISI-VSTR (1 5)
077900**              AS5FDBK-COND-AREA
078000                OMITTED
078100
078200     CALL 'CEEMSG'
078300          USING AS5MSGRB-CTOKEN (1)
078400                LS-LEMSGDEST
078500**              AS5FDBK-COND-AREA
078600                OMITTED
078700
078800*    0106 VAR1:VAR2 VAR3 VALID ARGUMENT VALUES ARE: VAR7
078900     SET ASU03A (2)      TO TRUE
079000     MOVE ZERO           TO AS5MSGRB-ISI (2)
079100
079200     MOVE +1             TO LS-LEISIVAR
079300     CALL 'CEECMI'
079400          USING AS5MSGRB-CTOKEN (2)
079500                LS-LEISIVAR
079600                AS5MSGRB-ISI-VSTR (2 1)
079700**              AS5FDBK-COND-AREA
079800                OMITTED
079900
080000     MOVE +2             TO LS-LEISIVAR
080100     CALL 'CEECMI'
080200          USING AS5MSGRB-CTOKEN (2)
080300                LS-LEISIVAR
080400                AS5MSGRB-ISI-VSTR (2 2)
080500**              AS5FDBK-COND-AREA
080600                OMITTED
080700
080800     MOVE +3             TO LS-LEISIVAR
080900     CALL 'CEECMI'
081000          USING AS5MSGRB-CTOKEN (2)
081100                LS-LEISIVAR
081200                AS5MSGRB-ISI-VSTR (2 3)
081300**              AS5FDBK-COND-AREA
081400                OMITTED
081500
081600     MOVE +7             TO LS-LEISIVAR
081700     CALL 'CEECMI'
081800          USING AS5MSGRB-CTOKEN (2)
081900                LS-LEISIVAR
082000                AS5MSGRB-ISI-VSTR (2 7)
082100**              AS5FDBK-COND-AREA
082200                OMITTED
082300
082400     CALL 'CEEMSG'
082500          USING AS5MSGRB-CTOKEN (2)
082600                LS-LEMSGDEST
082700**              AS5FDBK-COND-AREA
082800                OMITTED
082900
083000*    0107 VAR1:VAR2 VAR3 FAILED WITH R15=VAR5 REASON=VAR6
083100     SET ASU03B_0001 (1) TO TRUE
083200     MOVE ZERO           TO AS5MSGRB-ISI (1)
083300
083400     MOVE +1             TO LS-LEISIVAR
083500     CALL 'CEECMI'
083600          USING AS5MSGRB-CTOKEN (1)
083700                LS-LEISIVAR
083800                AS5MSGRB-ISI-VSTR (1 1)
083900**              AS5FDBK-COND-AREA
084000                OMITTED
084100
084200     MOVE +2             TO LS-LEISIVAR
084300     CALL 'CEECMI'
084400          USING AS5MSGRB-CTOKEN (1)
084500                LS-LEISIVAR
084600                AS5MSGRB-ISI-VSTR (1 2)
084700**              AS5FDBK-COND-AREA
084800                OMITTED
084900
085000     MOVE +3             TO LS-LEISIVAR
085100     CALL 'CEECMI'
085200          USING AS5MSGRB-CTOKEN (1)
085300                LS-LEISIVAR
085400                AS5MSGRB-ISI-VSTR (1 3)
085500**              AS5FDBK-COND-AREA
085600                OMITTED
085700
085800     MOVE +5             TO LS-LEISIVAR
085900     CALL 'CEECMI'
086000          USING AS5MSGRB-CTOKEN (1)
086100                LS-LEISIVAR
086200                AS5MSGRB-ISI-VSTR (1 5)
086300**              AS5FDBK-COND-AREA
086400                OMITTED
086500
086600     MOVE +6             TO LS-LEISIVAR
086700     CALL 'CEECMI'
086800          USING AS5MSGRB-CTOKEN (1)
086900                LS-LEISIVAR
087000                AS5MSGRB-ISI-VSTR (1 6)
087100**              AS5FDBK-COND-AREA
087200                OMITTED
087300
087400     CALL 'CEEMSG'
087500          USING AS5MSGRB-CTOKEN (1)
087600                LS-LEMSGDEST
087700**              AS5FDBK-COND-AREA
087800                OMITTED
087900
088000     CONTINUE.
088100 MESSAGE-0108.
088200
088300*    0108 VAR1:VAR2 VAR3 CONTAINS INVALID DATA VAR7
088400     SET ASU03C_0001 (1) TO TRUE
088500     MOVE ZERO           TO AS5MSGRB-ISI (1)
088600
088700     MOVE +1             TO LS-LEISIVAR
088800     CALL 'CEECMI'
088900          USING AS5MSGRB-CTOKEN (1)
089000                LS-LEISIVAR
089100                AS5MSGRB-ISI-VSTR (1 1)
089200**              AS5FDBK-COND-AREA
089300                OMITTED
089400
089500     MOVE +2             TO LS-LEISIVAR
089600     CALL 'CEECMI'
089700          USING AS5MSGRB-CTOKEN (1)
089800                LS-LEISIVAR
089900                AS5MSGRB-ISI-VSTR (1 2)
090000**              AS5FDBK-COND-AREA
090100                OMITTED
090200
090300     MOVE +3             TO LS-LEISIVAR
090400     CALL 'CEECMI'
090500          USING AS5MSGRB-CTOKEN (1)
090600                LS-LEISIVAR
090700                AS5MSGRB-ISI-VSTR (1 3)
090800**              AS5FDBK-COND-AREA
090900                OMITTED
091000
091100     MOVE +7             TO LS-LEISIVAR
091200     CALL 'CEECMI'
091300          USING AS5MSGRB-CTOKEN (1)
091400                LS-LEISIVAR
091500                AS5MSGRB-ISI-VSTR (1 7)
091600**              AS5FDBK-COND-AREA
091700                OMITTED
091800
091900     CALL 'CEEMSG'
092000          USING AS5MSGRB-CTOKEN (1)
092100                LS-LEMSGDEST
092200**              AS5FDBK-COND-AREA
092300                OMITTED
092400
092500     CONTINUE.
092600 MESSAGE-0109.
092700
092800*    0109 VAR1:VAR2 VAR3 BRANCH INDEX (VAR5) IS INVALID
092900     SET ASU03D_0001 (1) TO TRUE
093000     MOVE ZERO           TO AS5MSGRB-ISI (1)
093100
093200     MOVE +1             TO LS-LEISIVAR
093300     CALL 'CEECMI'
093400          USING AS5MSGRB-CTOKEN (1)
093500                LS-LEISIVAR
093600                AS5MSGRB-ISI-VSTR (1 1)
093700**              AS5FDBK-COND-AREA
093800                OMITTED
093900
094000     MOVE +2             TO LS-LEISIVAR
094100     CALL 'CEECMI'
094200          USING AS5MSGRB-CTOKEN (1)
094300                LS-LEISIVAR
094400                AS5MSGRB-ISI-VSTR (1 2)
094500**              AS5FDBK-COND-AREA
094600                OMITTED
094700
094800     MOVE +3             TO LS-LEISIVAR
094900     CALL 'CEECMI'
095000          USING AS5MSGRB-CTOKEN (1)
095100                LS-LEISIVAR
095200                AS5MSGRB-ISI-VSTR (1 3)
095300**              AS5FDBK-COND-AREA
095400                OMITTED
095500
095600     MOVE +5             TO LS-LEISIVAR
095700     CALL 'CEECMI'
095800          USING AS5MSGRB-CTOKEN (1)
095900                LS-LEISIVAR
096000                AS5MSGRB-ISI-VSTR (1 5)
096100**              AS5FDBK-COND-AREA
096200                OMITTED
096300
096400     CALL 'CEEMSG'
096500          USING AS5MSGRB-CTOKEN (1)
096600                LS-LEMSGDEST
096700**              AS5FDBK-COND-AREA
096800                OMITTED
096900
097000     CONTINUE.
097100 MESSAGE-0110.
097200
097300*    0110 VAR1:VAR2 VAR3 VAR7 NOT FOUND
097400     SET ASU03E_0001 (1) TO TRUE
097500     MOVE ZERO           TO AS5MSGRB-ISI (1)
097600
097700     MOVE +1             TO LS-LEISIVAR
097800     CALL 'CEECMI'
097900          USING AS5MSGRB-CTOKEN (1)
098000                LS-LEISIVAR
098100                AS5MSGRB-ISI-VSTR (1 1)
098200**              AS5FDBK-COND-AREA
098300                OMITTED
098400
098500     MOVE +2             TO LS-LEISIVAR
098600     CALL 'CEECMI'
098700          USING AS5MSGRB-CTOKEN (1)
098800                LS-LEISIVAR
098900                AS5MSGRB-ISI-VSTR (1 2)
099000**              AS5FDBK-COND-AREA
099100                OMITTED
099200
099300     MOVE +3             TO LS-LEISIVAR
099400     CALL 'CEECMI'
099500          USING AS5MSGRB-CTOKEN (1)
099600                LS-LEISIVAR
099700                AS5MSGRB-ISI-VSTR (1 3)
099800**              AS5FDBK-COND-AREA
099900                OMITTED
100000
100100     MOVE +7             TO LS-LEISIVAR
100200     CALL 'CEECMI'
100300          USING AS5MSGRB-CTOKEN (1)
100400                LS-LEISIVAR
100500                AS5MSGRB-ISI-VSTR (1 7)
100600**              AS5FDBK-COND-AREA
100700                OMITTED
100800
100900     CALL 'CEEMSG'
101000          USING AS5MSGRB-CTOKEN (1)
101100                LS-LEMSGDEST
101200**              AS5FDBK-COND-AREA
101300                OMITTED
101400
101500     CONTINUE.
101600 MESSAGE-0111.
101700
101800*    0111 VAR1:VAR2 VAR3 ACTION VAR4 PREMATURELY
101900*          TERMINATED DUE TO DATA TRUNC
102000     SET ASU03F_0001 (1) TO TRUE
102100     MOVE ZERO           TO AS5MSGRB-ISI (1)
102200
102300     MOVE +1             TO LS-LEISIVAR
102400     CALL 'CEECMI'
102500          USING AS5MSGRB-CTOKEN (1)
102600                LS-LEISIVAR
102700                AS5MSGRB-ISI-VSTR (1 1)
102800**              AS5FDBK-COND-AREA
102900                OMITTED
103000
103100     MOVE +2             TO LS-LEISIVAR
103200     CALL 'CEECMI'
103300          USING AS5MSGRB-CTOKEN (1)
103400                LS-LEISIVAR
103500                AS5MSGRB-ISI-VSTR (1 2)
103600**              AS5FDBK-COND-AREA
103700                OMITTED
103800
103900     MOVE +3             TO LS-LEISIVAR
104000     CALL 'CEECMI'
104100          USING AS5MSGRB-CTOKEN (1)
104200                LS-LEISIVAR
104300                AS5MSGRB-ISI-VSTR (1 3)
104400**              AS5FDBK-COND-AREA
104500                OMITTED
104600
104700     MOVE +4             TO LS-LEISIVAR
104800     CALL 'CEECMI'
104900          USING AS5MSGRB-CTOKEN (1)
105000                LS-LEISIVAR
105100                AS5MSGRB-ISI-VSTR (1 4)
105200**              AS5FDBK-COND-AREA
105300                OMITTED
105400
105500     CALL 'CEEMSG'
105600          USING AS5MSGRB-CTOKEN (1)
105700                LS-LEMSGDEST
105800**              AS5FDBK-COND-AREA
105900                OMITTED
106000
106100     CONTINUE.
106200 MESSAGE-0112.
106300
106400*    0112 VAR1:VAR2 VAR3 IS NOT NUMERIC
106500     SET ASU03G_0001 (1) TO TRUE
106600     MOVE ZERO           TO AS5MSGRB-ISI (1)
106700
106800     MOVE +1             TO LS-LEISIVAR
106900     CALL 'CEECMI'
107000          USING AS5MSGRB-CTOKEN (1)
107100                LS-LEISIVAR
107200                AS5MSGRB-ISI-VSTR (1 1)
107300**              AS5FDBK-COND-AREA
107400                OMITTED
107500
107600     MOVE +2             TO LS-LEISIVAR
107700     CALL 'CEECMI'
107800          USING AS5MSGRB-CTOKEN (1)
107900                LS-LEISIVAR
108000                AS5MSGRB-ISI-VSTR (1 2)
108100**              AS5FDBK-COND-AREA
108200                OMITTED
108300
108400     MOVE +3             TO LS-LEISIVAR
108500     CALL 'CEECMI'
108600          USING AS5MSGRB-CTOKEN (1)
108700                LS-LEISIVAR
108800                AS5MSGRB-ISI-VSTR (1 3)
108900**              AS5FDBK-COND-AREA
109000                OMITTED
109100
109200     CALL 'CEEMSG'
109300          USING AS5MSGRB-CTOKEN (1)
109400                LS-LEMSGDEST
109500**              AS5FDBK-COND-AREA
109600                OMITTED
109700
109800     CONTINUE.
109900 MESSAGE-0113.
110000
110100*    0113 VAR1:VAR2 VAR3 WAS PASSED TOO MANY ARGUMENTS
110200     SET ASU03H_0001 (1) TO TRUE
110300     MOVE ZERO           TO AS5MSGRB-ISI (1)
110400
110500     MOVE +1             TO LS-LEISIVAR
110600     CALL 'CEECMI'
110700          USING AS5MSGRB-CTOKEN (1)
110800                LS-LEISIVAR
110900                AS5MSGRB-ISI-VSTR (1 1)
111000**              AS5FDBK-COND-AREA
111100                OMITTED
111200
111300     MOVE +2             TO LS-LEISIVAR
111400     CALL 'CEECMI'
111500          USING AS5MSGRB-CTOKEN (1)
111600                LS-LEISIVAR
111700                AS5MSGRB-ISI-VSTR (1 2)
111800**              AS5FDBK-COND-AREA
111900                OMITTED
112000
112100     MOVE +3             TO LS-LEISIVAR
112200     CALL 'CEECMI'
112300          USING AS5MSGRB-CTOKEN (1)
112400                LS-LEISIVAR
112500                AS5MSGRB-ISI-VSTR (1 3)
112600**              AS5FDBK-COND-AREA
112700                OMITTED
112800
112900     CALL 'CEEMSG'
113000          USING AS5MSGRB-CTOKEN (1)
113100                LS-LEMSGDEST
113200**              AS5FDBK-COND-AREA
113300                OMITTED
113400
113500     CONTINUE.
113600 MESSAGE-0114.
113700
113800*    0114 VAR1:VAR2 VAR3 WAS PASSED TOO FEW ARGUMENTS
113900     SET ASU03I_0001 (1) TO TRUE
114000     MOVE ZERO           TO AS5MSGRB-ISI (1)
114100
114200     MOVE +1             TO LS-LEISIVAR
114300     CALL 'CEECMI'
114400          USING AS5MSGRB-CTOKEN (1)
114500                LS-LEISIVAR
114600                AS5MSGRB-ISI-VSTR (1 1)
114700**              AS5FDBK-COND-AREA
114800                OMITTED
114900
115000     MOVE +2             TO LS-LEISIVAR
115100     CALL 'CEECMI'
115200          USING AS5MSGRB-CTOKEN (1)
115300                LS-LEISIVAR
115400                AS5MSGRB-ISI-VSTR (1 2)
115500**              AS5FDBK-COND-AREA
115600                OMITTED
115700
115800     MOVE +3             TO LS-LEISIVAR
115900     CALL 'CEECMI'
116000          USING AS5MSGRB-CTOKEN (1)
116100                LS-LEISIVAR
116200                AS5MSGRB-ISI-VSTR (1 3)
116300**              AS5FDBK-COND-AREA
116400                OMITTED
116500
116600     CALL 'CEEMSG'
116700          USING AS5MSGRB-CTOKEN (1)
116800                LS-LEMSGDEST
116900**              AS5FDBK-COND-AREA
117000                OMITTED
117100
117200     CONTINUE.
117300 MESSAGE-0115.
117400
117500*    0115 VAR1:VAR2 VAR3 NUMERIC DATA (VAR5)
117600*         IS OUT OF RANGE (VAR7)
117700     SET ASU03J_0001 (1) TO TRUE
117800     MOVE ZERO           TO AS5MSGRB-ISI (1)
117900
118000     MOVE +1             TO LS-LEISIVAR
118100     CALL 'CEECMI'
118200          USING AS5MSGRB-CTOKEN (1)
118300                LS-LEISIVAR
118400                AS5MSGRB-ISI-VSTR (1 1)
118500**              AS5FDBK-COND-AREA
118600                OMITTED
118700
118800     MOVE +2             TO LS-LEISIVAR
118900     CALL 'CEECMI'
119000          USING AS5MSGRB-CTOKEN (1)
119100                LS-LEISIVAR
119200                AS5MSGRB-ISI-VSTR (1 2)
119300**              AS5FDBK-COND-AREA
119400                OMITTED
119500
119600     MOVE +3             TO LS-LEISIVAR
119700     CALL 'CEECMI'
119800          USING AS5MSGRB-CTOKEN (1)
119900                LS-LEISIVAR
120000                AS5MSGRB-ISI-VSTR (1 3)
120100**              AS5FDBK-COND-AREA
120200                OMITTED
120300
120400     MOVE +5             TO LS-LEISIVAR
120500     CALL 'CEECMI'
120600          USING AS5MSGRB-CTOKEN (1)
120700                LS-LEISIVAR
120800                AS5MSGRB-ISI-VSTR (1 5)
120900**              AS5FDBK-COND-AREA
121000                OMITTED
121100
121200     MOVE +7             TO LS-LEISIVAR
121300     CALL 'CEECMI'
121400          USING AS5MSGRB-CTOKEN (1)
121500                LS-LEISIVAR
121600                AS5MSGRB-ISI-VSTR (1 7)
121700**              AS5FDBK-COND-AREA
121800                OMITTED
121900
122000     CALL 'CEEMSG'
122100          USING AS5MSGRB-CTOKEN (1)
122200                LS-LEMSGDEST
122300**              AS5FDBK-COND-AREA
122400                OMITTED
122500
122600     CONTINUE.
122700 MESSAGE-0116.
122800
122900*    0116 VAR1:VAR2 VAR3 UNDERFLOW
123000     SET ASU03K_0001 (1) TO TRUE
123100     MOVE ZERO           TO AS5MSGRB-ISI (1)
123200
123300     MOVE +1             TO LS-LEISIVAR
123400     CALL 'CEECMI'
123500          USING AS5MSGRB-CTOKEN (1)
123600                LS-LEISIVAR
123700                AS5MSGRB-ISI-VSTR (1 1)
123800**              AS5FDBK-COND-AREA
123900                OMITTED
124000
124100     MOVE +2             TO LS-LEISIVAR
124200     CALL 'CEECMI'
124300          USING AS5MSGRB-CTOKEN (1)
124400                LS-LEISIVAR
124500                AS5MSGRB-ISI-VSTR (1 2)
124600**              AS5FDBK-COND-AREA
124700                OMITTED
124800
124900     MOVE +3             TO LS-LEISIVAR
125000     CALL 'CEECMI'
125100          USING AS5MSGRB-CTOKEN (1)
125200                LS-LEISIVAR
125300                AS5MSGRB-ISI-VSTR (1 3)
125400**              AS5FDBK-COND-AREA
125500                OMITTED
125600
125700     CALL 'CEEMSG'
125800          USING AS5MSGRB-CTOKEN (1)
125900                LS-LEMSGDEST
126000**              AS5FDBK-COND-AREA
126100                OMITTED
126200
126300     CONTINUE.
126400 MESSAGE-0117.
126500
126600*    0117 VAR1:VAR2 VAR3 OVERFLOW
126700     SET ASU03L_0001 (1) TO TRUE
126800     MOVE ZERO           TO AS5MSGRB-ISI (1)
126900
127000     MOVE +1             TO LS-LEISIVAR
127100     CALL 'CEECMI'
127200          USING AS5MSGRB-CTOKEN (1)
127300                LS-LEISIVAR
127400                AS5MSGRB-ISI-VSTR (1 1)
127500**              AS5FDBK-COND-AREA
127600                OMITTED
127700
127800     MOVE +2             TO LS-LEISIVAR
127900     CALL 'CEECMI'
128000          USING AS5MSGRB-CTOKEN (1)
128100                LS-LEISIVAR
128200                AS5MSGRB-ISI-VSTR (1 2)
128300**              AS5FDBK-COND-AREA
128400                OMITTED
128500
128600     MOVE +3             TO LS-LEISIVAR
128700     CALL 'CEECMI'
128800          USING AS5MSGRB-CTOKEN (1)
128900                LS-LEISIVAR
129000                AS5MSGRB-ISI-VSTR (1 3)
129100**              AS5FDBK-COND-AREA
129200                OMITTED
129300
129400     CALL 'CEEMSG'
129500          USING AS5MSGRB-CTOKEN (1)
129600                LS-LEMSGDEST
129700**              AS5FDBK-COND-AREA
129800                OMITTED
129900
130000     CONTINUE.
130100 MESSAGE-0118.
130200
130300*    0118 VAR1:VAR2 VAR3 ACTION VAR4 FAILED
130400*         WITH R15=VAR5 REASON=VAR6
130500     SET ASU03M_0001 (1) TO TRUE
130600     MOVE ZERO           TO AS5MSGRB-ISI (1)
130700
130800     MOVE +1             TO LS-LEISIVAR
130900     CALL 'CEECMI'
131000          USING AS5MSGRB-CTOKEN (1)
131100                LS-LEISIVAR
131200                AS5MSGRB-ISI-VSTR (1 1)
131300**              AS5FDBK-COND-AREA
131400                OMITTED
131500
131600     MOVE +2             TO LS-LEISIVAR
131700     CALL 'CEECMI'
131800          USING AS5MSGRB-CTOKEN (1)
131900                LS-LEISIVAR
132000                AS5MSGRB-ISI-VSTR (1 2)
132100**              AS5FDBK-COND-AREA
132200                OMITTED
132300
132400     MOVE +3             TO LS-LEISIVAR
132500     CALL 'CEECMI'
132600          USING AS5MSGRB-CTOKEN (1)
132700                LS-LEISIVAR
132800                AS5MSGRB-ISI-VSTR (1 3)
132900**              AS5FDBK-COND-AREA
133000                OMITTED
133100
133200     MOVE +4             TO LS-LEISIVAR
133300     CALL 'CEECMI'
133400          USING AS5MSGRB-CTOKEN (1)
133500                LS-LEISIVAR
133600                AS5MSGRB-ISI-VSTR (1 4)
133700**              AS5FDBK-COND-AREA
133800                OMITTED
133900
134000     MOVE +5             TO LS-LEISIVAR
134100     CALL 'CEECMI'
134200          USING AS5MSGRB-CTOKEN (1)
134300                LS-LEISIVAR
134400                AS5MSGRB-ISI-VSTR (1 5)
134500**              AS5FDBK-COND-AREA
134600                OMITTED
134700
134800     MOVE +6             TO LS-LEISIVAR
134900     CALL 'CEECMI'
135000          USING AS5MSGRB-CTOKEN (1)
135100                LS-LEISIVAR
135200                AS5MSGRB-ISI-VSTR (1 6)
135300**              AS5FDBK-COND-AREA
135400                OMITTED
135500
135600     CALL 'CEEMSG'
135700          USING AS5MSGRB-CTOKEN (1)
135800                LS-LEMSGDEST
135900**              AS5FDBK-COND-AREA
136000                OMITTED
136100
136200     CONTINUE.
136300 MESSAGE-0119.
136400
136500*    0119 VAR1:VAR2 VAR3 VAR7
136600     SET ASU03N      (2) TO TRUE
136700     MOVE ZERO           TO AS5MSGRB-ISI (2)
136800
136900     MOVE +1             TO LS-LEISIVAR
137000     CALL 'CEECMI'
137100          USING AS5MSGRB-CTOKEN (2)
137200                LS-LEISIVAR
137300                AS5MSGRB-ISI-VSTR (2 1)
137400**              AS5FDBK-COND-AREA
137500                OMITTED
137600
137700     MOVE +2             TO LS-LEISIVAR
137800     CALL 'CEECMI'
137900          USING AS5MSGRB-CTOKEN (2)
138000                LS-LEISIVAR
138100                AS5MSGRB-ISI-VSTR (2 2)
138200**              AS5FDBK-COND-AREA
138300                OMITTED
138400
138500     MOVE +3             TO LS-LEISIVAR
138600     CALL 'CEECMI'
138700          USING AS5MSGRB-CTOKEN (2)
138800                LS-LEISIVAR
138900                AS5MSGRB-ISI-VSTR (2 3)
139000**              AS5FDBK-COND-AREA
139100                OMITTED
139200
139300     MOVE +7             TO LS-LEISIVAR
139400     CALL 'CEECMI'
139500          USING AS5MSGRB-CTOKEN (2)
139600                LS-LEISIVAR
139700                AS5MSGRB-ISI-VSTR (2 7)
139800**              AS5FDBK-COND-AREA
139900                OMITTED
140000
140100     CALL 'CEEMSG'
140200          USING AS5MSGRB-CTOKEN (2)
140300                LS-LEMSGDEST
140400**              AS5FDBK-COND-AREA
140500                OMITTED
140600
140700     CONTINUE.
140800 MESSAGE-0120.
140900
141000*    0120 VAR1:VAR2 VAR3 VAR8
141100     SET ASU03O      (3) TO TRUE
141200     MOVE ZERO           TO AS5MSGRB-ISI (3)
141300
141400     MOVE +1             TO LS-LEISIVAR
141500     CALL 'CEECMI'
141600          USING AS5MSGRB-CTOKEN (3)
141700                LS-LEISIVAR
141800                AS5MSGRB-ISI-VSTR (3 1)
141900**              AS5FDBK-COND-AREA
142000                OMITTED
142100
142200     MOVE +2             TO LS-LEISIVAR
142300     CALL 'CEECMI'
142400          USING AS5MSGRB-CTOKEN (3)
142500                LS-LEISIVAR
142600                AS5MSGRB-ISI-VSTR (3 2)
142700**              AS5FDBK-COND-AREA
142800                OMITTED
142900
143000     MOVE +3             TO LS-LEISIVAR
143100     CALL 'CEECMI'
143200          USING AS5MSGRB-CTOKEN (3)
143300                LS-LEISIVAR
143400                AS5MSGRB-ISI-VSTR (3 3)
143500**              AS5FDBK-COND-AREA
143600                OMITTED
143700
143800     MOVE +8             TO LS-LEISIVAR
143900     CALL 'CEECMI'
144000          USING AS5MSGRB-CTOKEN (3)
144100                LS-LEISIVAR
144200                AS5MSGRB-ISI-VSTR (3 8)
144300**              AS5FDBK-COND-AREA
144400                OMITTED
144500
144600     CALL 'CEEMSG'
144700          USING AS5MSGRB-CTOKEN (3)
144800                LS-LEMSGDEST
144900**              AS5FDBK-COND-AREA
145000                OMITTED
145100
145200     CONTINUE.
145300 MESSAGE-0121.
145400
145500*    0121 VAR1:VAR2 VAR3 SYNTAX ERROR POS=VAR5 VAR7
145600     SET ASU03P_0001 (1) TO TRUE
145700     MOVE ZERO           TO AS5MSGRB-ISI (1)
145800
145900     MOVE +1             TO LS-LEISIVAR
146000     CALL 'CEECMI'
146100          USING AS5MSGRB-CTOKEN (1)
146200                LS-LEISIVAR
146300                AS5MSGRB-ISI-VSTR (1 1)
146400**              AS5FDBK-COND-AREA
146500                OMITTED
146600
146700     MOVE +2             TO LS-LEISIVAR
146800     CALL 'CEECMI'
146900          USING AS5MSGRB-CTOKEN (1)
147000                LS-LEISIVAR
147100                AS5MSGRB-ISI-VSTR (1 2)
147200**              AS5FDBK-COND-AREA
147300                OMITTED
147400
147500     MOVE +3             TO LS-LEISIVAR
147600     CALL 'CEECMI'
147700          USING AS5MSGRB-CTOKEN (1)
147800                LS-LEISIVAR
147900                AS5MSGRB-ISI-VSTR (1 3)
148000**              AS5FDBK-COND-AREA
148100                OMITTED
148200
148300     MOVE +5             TO LS-LEISIVAR
148400     CALL 'CEECMI'
148500          USING AS5MSGRB-CTOKEN (1)
148600                LS-LEISIVAR
148700                AS5MSGRB-ISI-VSTR (1 5)
148800**              AS5FDBK-COND-AREA
148900                OMITTED
149000
149100     MOVE +7             TO LS-LEISIVAR
149200     CALL 'CEECMI'
149300          USING AS5MSGRB-CTOKEN (1)
149400                LS-LEISIVAR
149500                AS5MSGRB-ISI-VSTR (1 7)
149600**              AS5FDBK-COND-AREA
149700                OMITTED
149800
149900     CALL 'CEEMSG'
150000          USING AS5MSGRB-CTOKEN (1)
150100                LS-LEMSGDEST
150200**              AS5FDBK-COND-AREA
150300                OMITTED
150400
150500     SKIP2
150600     CONTINUE.
150700 9000-00-RETURN.
150800*    * ------------------------------------------------------- *
150900*    * RETURN TO CALLER
151000*    * ------------------------------------------------------- *
151100
151200     DISPLAY WS-PGMID
151300          " DONE WITH ASTMSG1B"
151400
151500     EXIT PROGRAM.
151600     GOBACK.
./ ADD NAME=ASTSRT1B 0126-18171-21272-1411-00869-01487-00000-APLKS   58
000100 PROCESS DATA(31),NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSRT1B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700* ------------------------------------------------------------ *
000800* ARCHITECTURE SERVICES FACILITY
000900* UNIT TESTING
001000* COBOL ROUTINE
001100*
001200* PROGRAM ID: ASTSRT1B
001300*      TITLE: TEST ASU Heap Sort,
001400*             Binary Search (1st occurance),
001500*             Fibonaccian Search, all written in HLASM.
001600*       DATE: 2018/07/17
001700*
001800*       DESC:
001900*
002000* ------------------------------------------------------------ *
002100* MAINTENANCE HISTORY:
002200*
002300* YYYY/MM/DD
002400*
002500* ------------------------------------------------------------ *
002600     SKIP2
002700 DATA DIVISION.
002800     SKIP2
002900 WORKING-STORAGE SECTION.
003000 01  FILLER.
003100     03  WS-EYE-CATCHER PIC X(25)
003200              VALUE "BUZZARD CREEK TECH, INC. ".
003300     03  WS-PGMID       PIC X(08) VALUE "ASTSRT1B".
003400
003500 01  WS-LAST-FDBK       PIC X(12) VALUE LOW-VALUE.
003600     SKIP1
003700 01  WS-NBRS-VECTOR.
003800     03  WS-NBRS-NTRYCNT     PIC S9(9) BINARY VALUE +15.
003900     03  WS-NBRS-NTRYPOS     PIC S9(9) BINARY VALUE +21.
004000     03  WS-NBRS-NTRYLEN     PIC S9(9) BINARY VALUE +3.
004100     03  WS-NBRS-KEYPOS      PIC S9(9) BINARY VALUE +1.
004200     03  WS-NBRS-KEYLEN      PIC S9(9) BINARY VALUE +2.
004300     03  WS-NBRS-VALUES.
004400         05  FILLER     PIC X(03) VALUE '00 '.
004500         05  FILLER     PIC X(03) VALUE '05 '.
004600         05  FILLER     PIC X(03) VALUE '10 '.
004700         05  FILLER     PIC X(03) VALUE '15 '.
004800         05  FILLER     PIC X(03) VALUE '20 '.
004900         05  FILLER     PIC X(03) VALUE '25 '.
005000         05  FILLER     PIC X(03) VALUE '30 '.
005100         05  FILLER     PIC X(03) VALUE '35 '.
005200         05  FILLER     PIC X(03) VALUE '40 '.
005300         05  FILLER     PIC X(03) VALUE '45 '.
005400         05  FILLER     PIC X(03) VALUE '50 '.
005500         05  FILLER     PIC X(03) VALUE '55 '.
005600         05  FILLER     PIC X(03) VALUE '60 '.
005700         05  FILLER     PIC X(03) VALUE '65 '.
005800         05  FILLER     PIC X(03) VALUE '70 '.
005900     03  FILLER REDEFINES WS-NBRS-VALUES.
006000         05  WS-NBRS OCCURS 15 TIMES
006100                  INDEXED BY WS-NBRS-IDX1.
006200             07  WS-NBR      PIC X(02).
006300             07  FILLER      PIC X(01).
006400     SKIP1
006500 01  WS-STATE-VECTOR.
006600     03  WS-STATE-NTRYCNT    PIC S9(9) BINARY VALUE 50.
006700     03  WS-STATE-NTRYPOS    PIC S9(9) BINARY VALUE 29.
006800     03  WS-STATE-NTRYLEN    PIC S9(9) BINARY VALUE 26.
006900     03  WS-STATE-KEY1POS    PIC S9(9) BINARY VALUE 01.
007000     03  WS-STATE-KEY1LEN    PIC S9(9) BINARY VALUE 15.
007100     03  WS-STATE-KEY2POS    PIC S9(9) BINARY VALUE 16.
007200     03  WS-STATE-KEY2LEN    PIC S9(9) BINARY VALUE 08.
007300     03  WS-STATE-VALUES.
007400         05  FILLER PIC X(26) VALUE "DELAWARE       17871207 08".
007500         05  FILLER PIC X(26) VALUE "PENNSYLVANIA   17871212 38".
007600         05  FILLER PIC X(26) VALUE "NEW JERSEY     17871218 30".
007700         05  FILLER PIC X(26) VALUE "GEORGIA        17880102 10".
007800         05  FILLER PIC X(26) VALUE "CONNECTICUT    17880109 07".
007900         05  FILLER PIC X(26) VALUE "MASSACHUSETTS  17880206 21".
008000         05  FILLER PIC X(26) VALUE "MARYLAND       17880428 20".
008100         05  FILLER PIC X(26) VALUE "SOUTH CAROLINA 17880523 40".
008200         05  FILLER PIC X(26) VALUE "NEW HAMPSHIRE  17880621 29".
008300         05  FILLER PIC X(26) VALUE "VIRGINA        17880625 46".
008400         05  FILLER PIC X(26) VALUE "NEW YORK       17880726 32".
008500         05  FILLER PIC X(26) VALUE "NORTH CAROLINA 17891121 33".
008600         05  FILLER PIC X(26) VALUE "RHODE ISLAND   17900529 39".
008700         05  FILLER PIC X(26) VALUE "VERMONT        17910304 45".
008800         05  FILLER PIC X(26) VALUE "KENTUCKY       17920601 17".
008900         05  FILLER PIC X(26) VALUE "TENNESSEE      17960601 42".
009000         05  FILLER PIC X(26) VALUE "OHIO           18030301 35".
009100         05  FILLER PIC X(26) VALUE "LOUISIANA      18120430 18".
009200         05  FILLER PIC X(26) VALUE "INDIANA        18161211 14".
009300         05  FILLER PIC X(26) VALUE "MISSISSIPPI    18171210 24".
009400         05  FILLER PIC X(26) VALUE "ILLINOIS       18181203 13".
009500         05  FILLER PIC X(26) VALUE "ALABAMA        18191214 01".
009600         05  FILLER PIC X(26) VALUE "MAINE          18200315 19".
009700         05  FILLER PIC X(26) VALUE "MISSOURI       18210810 25".
009800         05  FILLER PIC X(26) VALUE "ARKANSAS       18360615 04".
009900         05  FILLER PIC X(26) VALUE "MICHIGAN       18370126 22".
010000         05  FILLER PIC X(26) VALUE "FLORIDA        18450303 09".
010100         05  FILLER PIC X(26) VALUE "TEXAS          18451229 43".
010200         05  FILLER PIC X(26) VALUE "IOWA           18461228 15".
010300         05  FILLER PIC X(26) VALUE "WISCONSIN      18480529 49".
010400         05  FILLER PIC X(26) VALUE "CALIFORNIA     18500909 05".
010500         05  FILLER PIC X(26) VALUE "MINNESOTA      18580511 23".
010600         05  FILLER PIC X(26) VALUE "OREGON         18590214 37".
010700         05  FILLER PIC X(26) VALUE "KANSAS         18610129 16".
010800         05  FILLER PIC X(26) VALUE "WEST VIRGINA   18630620 48".
010900         05  FILLER PIC X(26) VALUE "NEVADA         18641031 28".
011000         05  FILLER PIC X(26) VALUE "NEBRASKA       18670301 27".
011100         05  FILLER PIC X(26) VALUE "COLORADO       18760801 06".
011200         05  FILLER PIC X(26) VALUE "NORTH DAKOTA   18891102 34".
011300         05  FILLER PIC X(26) VALUE "SOUTH DAKOTA   18891102 41".
011400         05  FILLER PIC X(26) VALUE "MONTANA        18891108 26".
011500         05  FILLER PIC X(26) VALUE "WASHINGTON     18891111 47".
011600         05  FILLER PIC X(26) VALUE "IDAHO          18900703 12".
011700         05  FILLER PIC X(26) VALUE "WYOMING        18900710 50".
011800         05  FILLER PIC X(26) VALUE "UTAH           18960104 44".
011900         05  FILLER PIC X(26) VALUE "OKLAHOMA       19071116 36".
012000         05  FILLER PIC X(26) VALUE "NEW MEXICO     19120106 31".
012100         05  FILLER PIC X(26) VALUE "ARIZONA        19120214 03".
012200         05  FILLER PIC X(26) VALUE "ALASKA         19590103 02".
012300         05  FILLER PIC X(26) VALUE "HAWAII         19590821 11".
012400     03  FILLER REDEFINES WS-STATE-VALUES.
012500         05  WS-STATE OCCURS 50 TIMES
012600                  ASCENDING KEY IS WS-STATEHOOD-YEAR
012700                  INDEXED BY WS-STATE-IDX1.
012800             07  WS-STATE-NAME    PIC X(15).
012900             07  WS-STATEHOOD-DATE.
013000                 09  WS-STATEHOOD-YEAR PIC X(04).
013100                 09  FILLER            PIC X(04).
013200             07  FILLER           PIC X(03).
013300     SKIP1
013400     COPY AS5FDBK.
013500     SKIP2
013600 LOCAL-STORAGE SECTION.
013700 01  FILLER.
013800     03  LS-ASMODULE         PIC X(08).
013900     03  LS-ASCA-PTR         POINTER.
014000     03  LS-LEFUNCT          PIC S9(9) BINARY SYNC.
014100     03  LS-LEMSGDEST        PIC S9(9) BINARY SYNC.
014200     03  LS-ENCLAVE-RC       PIC S9(9) BINARY SYNC.
014300     03  LS-KEYLEN           PIC S9(9) BINARY SYNC.
014400     03  LS-FIBSUB           PIC S9(9) BINARY SYNC.
014500     03  LS-SUB              PIC S9(9) BINARY SYNC.
014600     03  FILLER REDEFINES LS-SUB.
014700         05  LS-SUB-1        PIC S9(4) BINARY.
014800         05  LS-SUB-2        PIC S9(4) BINARY.
014900     03  LS-SRCHARG          PIC X(15).
015000     SKIP1
015100 01  LS-STATE-VECTOR.
015200     03  LS-STATE-NTRYCNT    PIC S9(9) BINARY.
015300     03  LS-STATE-NTRYPOS    PIC S9(9) BINARY.
015400     03  LS-STATE-NTRYLEN    PIC S9(9) BINARY.
015500     03  LS-STATE-KEY1POS    PIC S9(9) BINARY.
015600     03  LS-STATE-KEY1LEN    PIC S9(9) BINARY.
015700     03  LS-STATE-KEY2POS    PIC S9(9) BINARY.
015800     03  LS-STATE-KEY2LEN    PIC S9(9) BINARY.
015900     03  LS-STATE-VALUES.
016000         05  LS-STATE OCCURS 50 TIMES
016100                  INDEXED BY LS-STATE-IDX1.
016200             07  LS-STATE-NAME    PIC X(15).
016300             07  LS-STATEHOOD-DATE.
016400                 09  LS-STATEHOOD-YEAR PIC X(04).
016500                 09  FILLER            PIC X(04).
016600             07  FILLER           PIC X(03).
016700     SKIP1
016800     COPY AS5DMPRB.
016900     SKIP1
017000     COPY AS5MSGRB.
017100     SKIP2
017200 LINKAGE SECTION.
017300     COPY AS5CA.
017400     EJECT
017500 PROCEDURE DIVISION USING
017600     ASCA-COMMAREA.
017700     SKIP2
017800 DECLARATIVES.
017900 0010-00-DEBUG SECTION.
018000     USE FOR DEBUGGING ON ALL PROCEDURES.
018100     SKIP1
018200 0010-10-DEBUG.
018300     DISPLAY DEBUG-ITEM
018400     SKIP1
018500     CONTINUE.
018600*0020-00-DEBUG SECTION.
018700**   USE FOR DEBUGGING ON PARAGRAPH_NAME
018800     SKIP1
018900*0020-10-DEBUG.
019000*    STATEMENTS ...
019100     SKIP1
019200     CONTINUE.
019300*0030-00-DEBUG SECTION.
019400**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
019500     SKIP1
019600*0030-10-DEBUG.
019700*    STATEMENTS ...
019800     SKIP2
019900     CONTINUE.
020000 END DECLARATIVES.
020100     SKIP2
020200     CONTINUE.
020300 0000-00-INITIALIZATION.
020400     DISPLAY WS-PGMID
020500          " Testing ASU HeapSort & BinSearch & FibSearch"
020600     SKIP2
020700*    * ------------------------------------------------------- *
020800*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
020900*    * ------------------------------------------------------- *
021000
021100     SET LS-ASCA-PTR TO NULL
021200     MOVE "ASU3I01B" TO LS-ASMODULE
021300     CALL LS-ASMODULE
021400          USING LS-ASCA-PTR
021500**              AS5FDBK-COND-AREA
021600                OMITTED
021700
021800     IF LS-ASCA-PTR = NULL
021900       DISPLAY WS-PGMID
022000            " ASU3I01B failed to create the ASCA"
022100       GOBACK
022200     END-IF
022300
022400     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
022500     MOVE +2 TO LS-LEMSGDEST
022600     DISPLAY " "
022700
022800*    DUMP AS5CA COMMUNICATION AREA
022900     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
023000     MOVE +1 TO AS5DMPRB-NUMBER
023100     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
023200     MOVE "ASUMDHEX" TO LS-ASMODULE
023300     CALL LS-ASMODULE
023400          USING ASCA-COMMAREA
023500                AS5DMPRB-REQUEST-BLOCK
023600                ASCA-COMMAREA
023700**              AS5FDBK-COND-AREA
023800                OMITTED
023900
024000*    PRINT STATE TABLE BEFORE SORT
024100     DISPLAY " "
024200     DISPLAY WS-PGMID
024300           " Print states in statehood date order"
024400     PERFORM
024500          VARYING WS-STATE-IDX1 FROM +1 BY +1
024600          UNTIL WS-STATE-IDX1 > WS-STATE-NTRYCNT
024700       SET LS-SUB TO WS-STATE-IDX1
024800       DISPLAY WS-PGMID
024900            " "
025000            LS-SUB-2
025100            " "
025200            WS-STATE (WS-STATE-IDX1)
025300     END-PERFORM
025400     SKIP2
025500     CONTINUE.
025600 0100-00-MAINLINE.
025700     DISPLAY " "
025800     DISPLAY WS-PGMID
025900          " Use COBOL SEARCH ALL to locate states by year"
026000     DISPLAY " "
026100     DISPLAY WS-PGMID
026200          " Find year 1787: DELAWARE, PENNSYLVANIA, NEW JERSEY"
026300     MOVE "1787" TO LS-SRCHARG
026400     SEARCH ALL WS-STATE
026500          AT END
026600            DISPLAY WS-PGMID
026700                 " can not find STATEHOOD date 1787"
026800            GO TO 0100-10-MAINLINE
026900       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
027000         SET LS-SUB TO WS-STATE-IDX1
027100         DISPLAY WS-PGMID
027200              "   "
027300              LS-SUB-2
027400              " "
027500              WS-STATE (WS-STATE-IDX1)
027600     END-SEARCH
027700     SET WS-STATE-IDX1 UP BY +1
027800     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
027900          NOT = LS-SRCHARG
028000       SET LS-SUB TO WS-STATE-IDX1
028100       DISPLAY WS-PGMID
028200            "   "
028300            LS-SUB-2
028400            " "
028500            WS-STATE (WS-STATE-IDX1)
028600       SET WS-STATE-IDX1 UP BY +1
028700     END-PERFORM
028800
028900     CONTINUE.
029000 0100-10-MAINLINE.
029100     DISPLAY " "
029200     DISPLAY WS-PGMID
029300          " Find year 1889: NORTH DAKAOTA, SOUTH DAKAOTA,"
029400          " MONTANA, WASHINGTON"
029500     MOVE "1889" TO LS-SRCHARG
029600     SEARCH ALL WS-STATE
029700          AT END
029800            DISPLAY WS-PGMID
029900                 " can not find STATEHOOD date 1889"
030000            GO TO 0100-20-MAINLINE
030100       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
030200         SET LS-SUB TO WS-STATE-IDX1
030300         DISPLAY WS-PGMID
030400              "   "
030500              LS-SUB-2
030600              " "
030700              WS-STATE (WS-STATE-IDX1)
030800     END-SEARCH
030900     SET WS-STATE-IDX1 UP BY +1
031000     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
031100          NOT = LS-SRCHARG
031200       SET LS-SUB TO WS-STATE-IDX1
031300       DISPLAY WS-PGMID
031400            "   "
031500            LS-SUB-2
031600            " "
031700            WS-STATE (WS-STATE-IDX1)
031800       SET WS-STATE-IDX1 UP BY +1
031900     END-PERFORM
032000
032100     CONTINUE.
032200 0100-20-MAINLINE.
032300     DISPLAY " "
032400     DISPLAY WS-PGMID
032500          " Find year 1890: IDAHO, WYOMING"
032600     MOVE "1890" TO LS-SRCHARG
032700     SEARCH ALL WS-STATE
032800          AT END
032900            DISPLAY WS-PGMID
033000                 " CAN NOT FIND STATEHOOD DATE 1890"
033100            GO TO 0100-30-MAINLINE
033200       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
033300         SET LS-SUB TO WS-STATE-IDX1
033400         DISPLAY WS-PGMID
033500              "   "
033600              LS-SUB-2
033700              " "
033800              WS-STATE (WS-STATE-IDX1)
033900     END-SEARCH
034000     SET WS-STATE-IDX1 UP BY +1
034100     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
034200          NOT = LS-SRCHARG
034300       SET LS-SUB TO WS-STATE-IDX1
034400       DISPLAY WS-PGMID
034500            "   "
034600            LS-SUB-2
034700            " "
034800            WS-STATE (WS-STATE-IDX1)
034900       SET WS-STATE-IDX1 UP BY +1
035000     END-PERFORM
035100
035200     CONTINUE.
035300 0100-30-MAINLINE.
035400     DISPLAY " "
035500     DISPLAY WS-PGMID
035600          " Find year 1959: ALASKA, HAWAII"
035700     MOVE "1959" TO LS-SRCHARG
035800     SEARCH ALL WS-STATE
035900          AT END
036000            DISPLAY WS-PGMID
036100                 " can not find STATEHOOD date 1959"
036200            GO TO 0100-40-MAINLINE
036300       WHEN WS-STATEHOOD-YEAR (WS-STATE-IDX1) = LS-SRCHARG
036400         SET LS-SUB TO WS-STATE-IDX1
036500         DISPLAY WS-PGMID
036600              "   "
036700              LS-SUB-2
036800              " "
036900              WS-STATE (WS-STATE-IDX1)
037000     END-SEARCH
037100     SET WS-STATE-IDX1 UP BY +1
037200     PERFORM UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
037300          NOT = LS-SRCHARG
037400       SET LS-SUB TO WS-STATE-IDX1
037500       DISPLAY WS-PGMID
037600            "   "
037700            LS-SUB-2
037800            " "
037900            WS-STATE (WS-STATE-IDX1)
038000       SET WS-STATE-IDX1 UP BY +1
038100     END-PERFORM
038200
038300     CONTINUE.
038400 0100-40-MAINLINE.
038500     CONTINUE.
038600 0200-00-MAINLINE.
038700     DISPLAY " "
038800     DISPLAY WS-PGMID
038900          " Use ASU BinSearch to locate States by year"
039000     DISPLAY " "
039100     DISPLAY WS-PGMID
039200          " Find year 1787: DELAWARE, PENNSYLVANIA, NEW JERSEY"
039300     MOVE "1787" TO LS-SRCHARG
039400     MOVE +4 TO LS-KEYLEN
039500     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
039600
039700     CONTINUE.
039800 0200-10-MAINLINE.
039900     DISPLAY " "
040000     DISPLAY WS-PGMID
040100          " Find year 1889: NORTH DAKAOTA, SOUTH DAKAOTA,"
040200          " MONTANA, WASHINGTON"
040300     MOVE "1889" TO LS-SRCHARG
040400     MOVE +4 TO LS-KEYLEN
040500     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
040600
040700     CONTINUE.
040800 0200-20-MAINLINE.
040900     DISPLAY " "
041000     DISPLAY WS-PGMID
041100          " Find year 1890: IDAHO, WYOMING"
041200     MOVE "1890" TO LS-SRCHARG
041300     MOVE +4 TO LS-KEYLEN
041400     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
041500
041600     CONTINUE.
041700 0200-30-MAINLINE.
041800     DISPLAY " "
041900     DISPLAY WS-PGMID
042000          " Find year 1959: ALASKA, HAWAII"
042100     MOVE "1959" TO LS-SRCHARG
042200     MOVE +4 TO LS-KEYLEN
042300     PERFORM 8100-00-BINSRCH THRU 8100-99-EXIT
042400
042500     CONTINUE.
042600 0200-40-MAINLINE.
042700     CONTINUE.
042800 0300-00-MAINLINE.
042900     MOVE WS-STATE-VECTOR TO LS-STATE-VECTOR
043000     DISPLAY " "
043100     DISPLAY WS-PGMID
043200          " Use ASU HeapSort to order states by name"
043300     MOVE "ASUHSRTB" TO LS-ASMODULE
043400     CALL LS-ASMODULE
043500          USING ASCA-COMMAREA
043600                LS-STATE-VECTOR
043700                LS-STATE-NTRYCNT
043800                LS-STATE-NTRYPOS
043900                LS-STATE-NTRYLEN
044000                LS-STATE-KEY1POS
044100                LS-STATE-KEY1LEN
044200**              AS5FDBK-COND-AREA
044300                OMITTED
044400
044500     CALL 'CEE3GRC'
044600          USING LS-ENCLAVE-RC
044700                OMITTED
044800     EVALUATE LS-ENCLAVE-RC
044900       WHEN ZERO
045000         CONTINUE
045100       WHEN +8
045200         DISPLAY WS-PGMID " " LS-ASMODULE
045300              " invalid parameters"
045400       WHEN OTHER
045500         DISPLAY WS-PGMID " " LS-ASMODULE
045600              " unknown return code:" LS-ENCLAVE-RC
045700     END-EVALUATE
045800
045900*    PRINT STATE TABLE AFTER SORT
046000     PERFORM
046100          VARYING LS-STATE-IDX1 FROM +1 BY +1
046200          UNTIL LS-STATE-IDX1 > LS-STATE-NTRYCNT
046300       SET LS-SUB TO LS-STATE-IDX1
046400       DISPLAY WS-PGMID
046500            " "
046600            LS-SUB-2
046700            " "
046800            LS-STATE (LS-STATE-IDX1)
046900     END-PERFORM
047000
047100     CONTINUE.
047200 0400-00-MAINLINE.
047300     DISPLAY " "
047400     DISPLAY WS-PGMID
047500          " Use ASU Binary search to locate states by name"
047600
047700     CONTINUE.
047800 0400-10-MAINLINE.
047900     DISPLAY " "
048000     MOVE "ALABAMA" TO LS-SRCHARG
048100     DISPLAY WS-PGMID
048200          " Find state: " LS-SRCHARG " 01"
048300     MOVE +15 TO LS-KEYLEN
048400     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
048500
048600     CONTINUE.
048700 0400-20-MAINLINE.
048800     DISPLAY " "
048900     MOVE "KENTUCKY" TO LS-SRCHARG
049000     DISPLAY WS-PGMID
049100          " Find state: " LS-SRCHARG " 17"
049200     MOVE +15 TO LS-KEYLEN
049300     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
049400
049500     CONTINUE.
049600 0400-30-MAINLINE.
049700     DISPLAY " "
049800     MOVE "MONTANA" TO LS-SRCHARG
049900     DISPLAY WS-PGMID
050000          " Find state: " LS-SRCHARG " 26"
050100     MOVE +15 TO LS-KEYLEN
050200     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
050300
050400     CONTINUE.
050500 0400-40-MAINLINE.
050600     DISPLAY " "
050700     MOVE "OREGON" TO LS-SRCHARG
050800     DISPLAY WS-PGMID
050900          " Find state: " LS-SRCHARG " 37"
051000     MOVE +15 TO LS-KEYLEN
051100     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
051200
051300     CONTINUE.
051400 0400-50-MAINLINE.
051500     DISPLAY " "
051600     MOVE "WYOMING" TO LS-SRCHARG
051700     DISPLAY WS-PGMID
051800          " Find state: " LS-SRCHARG " 50"
051900     MOVE +15 TO LS-KEYLEN
052000     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
052100
052200     CONTINUE.
052300 0400-60-MAINLINE.
052400     DISPLAY " "
052500     MOVE "ZOOLULAND" TO LS-SRCHARG
052600     DISPLAY WS-PGMID
052700          " Find state: " LS-SRCHARG " Not found"
052800     MOVE +15 TO LS-KEYLEN
052900     PERFORM 8200-00-BINSRCH THRU 8200-99-EXIT
053000
053100     CONTINUE.
053200 0500-00-MAINLINE.
053300     DISPLAY " "
053400     DISPLAY WS-PGMID
053500          " Use ASU Fibonaccian search to locate states by name"
053600
053700     CONTINUE.
053800 0500-10-MAINLINE.
053900     MOVE ZERO TO LS-FIBSUB
054000     MOVE "ALABAMA" TO LS-SRCHARG
054100     DISPLAY " "
054200     DISPLAY WS-PGMID
054300          " Find: " LS-SRCHARG " 01"
054400     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
054500
054600     CONTINUE.
054700 0500-20-MAINLINE.
054800     MOVE "KENTUCKY" TO LS-SRCHARG
054900     DISPLAY " "
055000     DISPLAY WS-PGMID
055100          " Find: " LS-SRCHARG " 17"
055200     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
055300
055400     CONTINUE.
055500 0500-30-MAINLINE.
055600     MOVE "MONTANA" TO LS-SRCHARG
055700     DISPLAY " "
055800     DISPLAY WS-PGMID
055900          " Find: " LS-SRCHARG " 26"
056000     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
056100
056200     CONTINUE.
056300 0500-40-MAINLINE.
056400     MOVE "OREGON" TO LS-SRCHARG
056500     DISPLAY " "
056600     DISPLAY WS-PGMID
056700          " Find: " LS-SRCHARG " 37"
056800     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
056900
057000     CONTINUE.
057100 0500-50-MAINLINE.
057200     MOVE "WYOMING" TO LS-SRCHARG
057300     DISPLAY " "
057400     DISPLAY WS-PGMID
057500          " Find: " LS-SRCHARG " 50"
057600     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
057700
057800     CONTINUE.
057900 0500-60-MAINLINE.
058000     MOVE "ZOOLULAND" TO LS-SRCHARG
058100     DISPLAY " "
058200     DISPLAY WS-PGMID
058300          " Find: " LS-SRCHARG " Not found"
058400     PERFORM 8300-00-FIBLOOKUP THRU 8300-99-EXIT
058500
058600     CONTINUE.
058700 0600-00-MAINLINE.
058800     DISPLAY " "
058900     DISPLAY WS-PGMID
059000          " Use ASU Fibonaccian search to locate numbers"
059100
059200     CONTINUE.
059300 0600-10-MAINLINE.
059400     MOVE ZERO TO LS-FIBSUB
059500     MOVE "00" TO LS-SRCHARG
059600     DISPLAY " "
059700     DISPLAY WS-PGMID
059800          " Find: " LS-SRCHARG " 01"
059900     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
060000
060100     CONTINUE.
060200 0600-20-MAINLINE.
060300     MOVE "15" TO LS-SRCHARG
060400     DISPLAY " "
060500     DISPLAY WS-PGMID
060600          " Find: " LS-SRCHARG " 04"
060700     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
060800
060900     CONTINUE.
061000 0600-30-MAINLINE.
061100     MOVE "35" TO LS-SRCHARG
061200     DISPLAY " "
061300     DISPLAY WS-PGMID
061400          " Find: " LS-SRCHARG " 08"
061500     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
061600
061700     CONTINUE.
061800 0600-40-MAINLINE.
061900     MOVE "55" TO LS-SRCHARG
062000     DISPLAY " "
062100     DISPLAY WS-PGMID
062200          " Find: " LS-SRCHARG " 12"
062300     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
062400
062500     CONTINUE.
062600 0600-50-MAINLINE.
062700     MOVE "60" TO LS-SRCHARG
062800     DISPLAY " "
062900     DISPLAY WS-PGMID
063000          " Find: " LS-SRCHARG " 13"
063100     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
063200
063300     CONTINUE.
063400 0600-60-MAINLINE.
063500     MOVE "65" TO LS-SRCHARG
063600     DISPLAY " "
063700     DISPLAY WS-PGMID
063800          " Find: " LS-SRCHARG " 14"
063900     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
064000
064100     CONTINUE.
064200 0600-70-MAINLINE.
064300     MOVE "70" TO LS-SRCHARG
064400     DISPLAY " "
064500     DISPLAY WS-PGMID
064600          " Find: " LS-SRCHARG  " 15"
064700     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
064800
064900     CONTINUE.
065000 0600-80-MAINLINE.
065100     MOVE "99" TO LS-SRCHARG
065200     DISPLAY " "
065300     DISPLAY WS-PGMID
065400          " Find: " LS-SRCHARG  " Not found"
065500     PERFORM 8400-00-FIBLOOKUP THRU 8400-99-EXIT
065600
065700     GO TO 9000-00-RETURN
065800
065900     SKIP2
066000     CONTINUE.
066100*8000-00-ROUTINES.
066200
066300 8100-00-BINSRCH.
066400     MOVE ZERO TO LS-SUB
066500     MOVE "ASUBSRHB" TO LS-ASMODULE
066600     CALL LS-ASMODULE
066700          USING ASCA-COMMAREA
066800                WS-STATE-VECTOR
066900                WS-STATE-NTRYCNT
067000                WS-STATE-NTRYPOS
067100                WS-STATE-NTRYLEN
067200                WS-STATE-KEY2POS
067300                LS-KEYLEN
067400                LS-SRCHARG
067500                LS-SUB
067600**              AS5FDBK-COND-AREA
067700                OMITTED
067800
067900     CALL 'CEE3GRC'
068000          USING LS-ENCLAVE-RC
068100                OMITTED
068200     EVALUATE LS-ENCLAVE-RC
068300       WHEN ZERO
068400         CONTINUE
068500       WHEN +4
068600         DISPLAY WS-PGMID " " LS-ASMODULE
068700              " not found"
068800       WHEN +8
068900         DISPLAY WS-PGMID " " LS-ASMODULE
069000              " invalid parameters"
069100       WHEN OTHER
069200         DISPLAY WS-PGMID " " LS-ASMODULE
069300              " unknown return code:" LS-ENCLAVE-RC
069400     END-EVALUATE
069500
069600     IF LS-SUB = ZERO
069700       DISPLAY WS-PGMID
069800            " can not find STATEHOOD date " LS-SRCHARG
069900     ELSE
070000       SET WS-STATE-IDX1 TO LS-SUB
070100       PERFORM
070200            UNTIL WS-STATEHOOD-YEAR (WS-STATE-IDX1)
070300            NOT = LS-SRCHARG
070400         SET LS-SUB TO WS-STATE-IDX1
070500         DISPLAY WS-PGMID
070600              "   "
070700              LS-SUB-2
070800              " "
070900              WS-STATE (WS-STATE-IDX1)
071000         SET WS-STATE-IDX1 UP BY +1
071100       END-PERFORM
071200     END-IF
071300
071400     CONTINUE.
071500 8100-99-EXIT.
071600     EXIT.
071700
071800 8200-00-BINSRCH.
071900     MOVE ZERO TO LS-SUB
072000     MOVE "ASUBSRHB" TO LS-ASMODULE
072100     CALL LS-ASMODULE
072200          USING ASCA-COMMAREA
072300                LS-STATE-VECTOR
072400                LS-STATE-NTRYCNT
072500                LS-STATE-NTRYPOS
072600                LS-STATE-NTRYLEN
072700                LS-STATE-KEY1POS
072800                LS-KEYLEN
072900                LS-SRCHARG
073000                LS-SUB
073100**              AS5FDBK-COND-AREA
073200                OMITTED
073300
073400     CALL 'CEE3GRC'
073500          USING LS-ENCLAVE-RC
073600                OMITTED
073700     EVALUATE LS-ENCLAVE-RC
073800       WHEN ZERO
073900         CONTINUE
074000       WHEN +4
074100         DISPLAY WS-PGMID " " LS-ASMODULE
074200              " not found"
074300       WHEN +8
074400         DISPLAY WS-PGMID " " LS-ASMODULE
074500              " invalid parameters"
074600       WHEN OTHER
074700         DISPLAY WS-PGMID " " LS-ASMODULE
074800              " unknown return code:" LS-ENCLAVE-RC
074900     END-EVALUATE
075000
075100     IF LS-SUB = ZERO
075200       DISPLAY WS-PGMID
075300            " can not find state " LS-SRCHARG
075400     ELSE
075500       DISPLAY WS-PGMID
075600            " Found: " LS-STATE (LS-SUB) " in pos " LS-SUB-2
075700     END-IF
075800
075900     CONTINUE.
076000 8200-99-EXIT.
076100     EXIT.
076200
076300 8300-00-FIBLOOKUP.
076400     MOVE ZERO TO LS-SUB
076500     MOVE "ASUFSRHB" TO LS-ASMODULE
076600     CALL LS-ASMODULE
076700          USING ASCA-COMMAREA
076800                LS-STATE-VECTOR
076900                LS-STATE-NTRYCNT
077000                LS-STATE-NTRYPOS
077100                LS-STATE-NTRYLEN
077200                LS-STATE-KEY1POS
077300                LS-STATE-KEY1LEN
077400                LS-SRCHARG
077500                LS-FIBSUB
077600                LS-SUB
077700**              AS5FDBK-COND-AREA
077800                OMITTED
077900
078000     CALL 'CEE3GRC'
078100          USING LS-ENCLAVE-RC
078200                OMITTED
078300     EVALUATE LS-ENCLAVE-RC
078400       WHEN ZERO
078500         CONTINUE
078600       WHEN +4
078700         DISPLAY WS-PGMID " " LS-ASMODULE
078800              " not found"
078900       WHEN +8
079000         DISPLAY WS-PGMID " " LS-ASMODULE
079100              " invalid parameters"
079200       WHEN OTHER
079300         DISPLAY WS-PGMID " " LS-ASMODULE
079400              " unknown return code:" LS-ENCLAVE-RC
079500     END-EVALUATE
079600
079700     IF LS-SUB = ZERO
079800       DISPLAY WS-PGMID
079900            " can not find STATE " LS-SRCHARG
080000       GO TO 8300-99-EXIT
080100     ELSE
080200       DISPLAY WS-PGMID
080300            " Found: " LS-STATE (LS-SUB) " in pos " LS-SUB-2
080400     END-IF
080500
080600     CONTINUE.
080700 8300-99-EXIT.
080800     EXIT.
080900
081000     CONTINUE.
081100 8400-00-FIBLOOKUP.
081200     MOVE ZERO TO LS-SUB
081300     MOVE "ASUFSRHB" TO LS-ASMODULE
081400     CALL LS-ASMODULE
081500          USING ASCA-COMMAREA
081600                WS-NBRS-VECTOR
081700                WS-NBRS-NTRYCNT
081800                WS-NBRS-NTRYPOS
081900                WS-NBRS-NTRYLEN
082000                WS-NBRS-KEYPOS
082100                WS-NBRS-KEYLEN
082200                LS-SRCHARG
082300                LS-FIBSUB
082400                LS-SUB
082500**              AS5FDBK-COND-AREA
082600                OMITTED
082700
082800     CALL 'CEE3GRC'
082900          USING LS-ENCLAVE-RC
083000                OMITTED
083100     EVALUATE LS-ENCLAVE-RC
083200       WHEN ZERO
083300         CONTINUE
083400       WHEN +4
083500         DISPLAY WS-PGMID " " LS-ASMODULE
083600              " not found"
083700       WHEN +8
083800         DISPLAY WS-PGMID " " LS-ASMODULE
083900              " invalid parameters"
084000       WHEN OTHER
084100         DISPLAY WS-PGMID " " LS-ASMODULE
084200              " unknown return code:" LS-ENCLAVE-RC
084300     END-EVALUATE
084400
084500     IF LS-SUB = ZERO
084600       DISPLAY WS-PGMID
084700            " can not find NBR " LS-SRCHARG
084800       GO TO 8400-99-EXIT
084900     ELSE
085000       DISPLAY WS-PGMID
085100            " Found: " WS-NBR (LS-SUB) " in pos " LS-SUB-2
085200     END-IF
085300
085400     CONTINUE.
085500 8400-99-EXIT.
085600     EXIT.
085700     SKIP2
085800     CONTINUE.
085900 9000-00-RETURN.
086000*    * ------------------------------------------------------- *
086100*    * RETURN TO CALLER
086200*    * ------------------------------------------------------- *
086300
086400     DISPLAY " "
086500     DISPLAY WS-PGMID
086600          " DONE WITH ASTSRT1B"
086700
086800     EXIT PROGRAM.
086900     GOBACK.
./ ADD NAME=ASTSRT2B 0115-18198-21272-1412-00680-01252-00000-APLKS   13
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSRT2B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700* ------------------------------------------------------------ *
000800* ARCHITECTURE SERVICES FACILITY
000900* UNIT TESTING
001000* COBOL ROUTINE
001100*
001200* PROGRAM ID: TEST
001300*
001400* ------------------------------------------------------------ *
001500* MAINTENANCE HISTORY:
001600*
001700* YYYY/MM/DD
001800*
001900* ------------------------------------------------------------ *
002000     SKIP2
002100 DATA DIVISION.
002200     SKIP2
002300 WORKING-STORAGE SECTION.
002400 01  FILLER.
002500     03  WS-EYE-CATCHER PIC X(25)
002600              VALUE "BUZZARD CREEK TECH, INC. ".
002700     03  WS-PGMID       PIC X(08) VALUE "ASTSRT2B".
002800 01  WS-VBINSRCH        PIC X(08) VALUE "VBINSRCH".
002900 01  WS-VBINSRH1        PIC X(08) VALUE "VBINSRH1".
003000 01  WS-VHEAPSRT        PIC X(08) VALUE "VHEAPSRT".
003100
003200     SKIP1
003300 01  WS-NBRS-VECTOR.
003400     03  WS-NBRS-NTRYCNT     PIC S9(9) BINARY VALUE +6.
003500     03  WS-NBRS-NTRYLEN     PIC S9(9) BINARY VALUE +8.
003600     03  WS-NBRS-KEY1POS     PIC S9(9) BINARY VALUE +1.
003700     03  WS-NBRS-KEY1LEN     PIC S9(9) BINARY VALUE +2.
003800     03  WS-NBRS-KEY2POS     PIC S9(9) BINARY VALUE +4.
003900     03  WS-NBRS-KEY2LEN     PIC S9(9) BINARY VALUE +5.
004000     03  WS-NBRS-VALUES.
004100         05  FILLER     PIC X(08) VALUE '01 ONE'.
004200         05  FILLER     PIC X(08) VALUE '05 FIVE'.
004300         05  FILLER     PIC X(08) VALUE '03 THREE'.
004400         05  FILLER     PIC X(08) VALUE '02 TWO'.
004500         05  FILLER     PIC X(08) VALUE '06 SIX'.
004600         05  FILLER     PIC X(08) VALUE '04 FOUR'.
004700     03  FILLER REDEFINES WS-NBRS-VALUES.
004800         05  WS-NBRS OCCURS 6 TIMES
004900                  INDEXED BY WS-NBRS-IDX1.
005000             07  WS-NBR      PIC X(02).
005100             07  FILLER      PIC X(06).
005200     SKIP2
005300 LOCAL-STORAGE SECTION.
005400 01  FILLER.
005500     03  LS-KEYLEN           PIC S9(9) BINARY SYNC.
005600     03  LS-SUB              PIC S9(9) BINARY SYNC.
005700     03  FILLER REDEFINES LS-SUB.
005800         05  LS-SUB-1        PIC S9(4) BINARY.
005900         05  LS-SUB-2        PIC S9(4) BINARY.
006000     03  LS-SRCHARG          PIC X(05).
006100     SKIP1
006200 01  LS-NBRS-VECTOR.
006300     03  LS-NBRS-NTRYCNT     PIC S9(9) BINARY.
006400     03  LS-NBRS-NTRYLEN     PIC S9(9) BINARY.
006500     03  LS-NBRS-KEY1POS     PIC S9(9) BINARY.
006600     03  LS-NBRS-KEY1LEN     PIC S9(9) BINARY.
006700     03  LS-NBRS-KEY2POS     PIC S9(9) BINARY.
006800     03  LS-NBRS-KEY2LEN     PIC S9(9) BINARY.
006900     03  LS-NBRS-VALUES.
007000         05  LS-NBRS OCCURS 6 TIMES
007100                  INDEXED BY LS-NBRS-IDX1.
007200             07  LS-NBR      PIC X(02).
007300             07  LS-TEXT     PIC X(06).
007400     EJECT
007500 PROCEDURE DIVISION.
007600     SKIP2
007700 DECLARATIVES.
007800 0010-00-DEBUG SECTION.
007900     USE FOR DEBUGGING ON ALL PROCEDURES.
008000     SKIP1
008100 0010-10-DEBUG.
008200     DISPLAY DEBUG-ITEM
008300     SKIP1
008400     CONTINUE.
008500*0020-00-DEBUG SECTION.
008600**   USE FOR DEBUGGING ON PARAGRAPH_NAME
008700     SKIP1
008800*0020-10-DEBUG.
008900*    STATEMENTS ...
009000     SKIP1
009100     CONTINUE.
009200*0030-00-DEBUG SECTION.
009300**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
009400     SKIP1
009500*0030-10-DEBUG.
009600*    STATEMENTS ...
009700     SKIP2
009800     CONTINUE.
009900 END DECLARATIVES.
010000     SKIP2
010100     CONTINUE.
010200 0000-00-INITIALIZATION.
010300     DISPLAY WS-PGMID
010400          " Testing Heap Sort written in COBOL"
010500     SKIP2
010600*    PRINT TABLE BEFORE SORT
010700     DISPLAY " "
010800     DISPLAY WS-PGMID
010900           " Print table before sort"
011000     PERFORM
011100          VARYING WS-NBRS-IDX1 FROM +1 BY +1
011200          UNTIL WS-NBRS-IDX1 > WS-NBRS-NTRYCNT
011300       SET LS-SUB TO WS-NBRS-IDX1
011400       DISPLAY WS-PGMID
011500            " "
011600            LS-SUB-2
011700            " "
011800            WS-NBRS (WS-NBRS-IDX1)
011900     END-PERFORM
012000     SKIP2
012100     CONTINUE.
012200 0100-00-MAINLINE.
012300
012400     CONTINUE.
012500 0200-00-MAINLINE.
012600     MOVE WS-NBRS-VECTOR TO LS-NBRS-VECTOR
012700     DISPLAY " "
012800     DISPLAY WS-PGMID
012900          " Use VHEAPSRT Heap Sort, ascending order by nbr"
013000
013100     CONTINUE.
013200 0200-10-MAINLINE.
013300     CALL WS-VHEAPSRT
013400          USING LS-NBRS-NTRYCNT
013500                LS-NBRS-NTRYLEN
013600                LS-NBRS-KEY1POS
013700                LS-NBRS-KEY1LEN
013800                LS-NBRS-VALUES
013900     DISPLAY WS-PGMID " " WS-VHEAPSRT
014000          "  COBOL RETURN-CODE = " RETURN-CODE
014100
014200*    PRINT TABLE AFTER SORT
014300     DISPLAY " "
014400     DISPLAY WS-PGMID
014500           " Print table after sort by nbr"
014600     PERFORM
014700          VARYING LS-NBRS-IDX1 FROM +1 BY +1
014800          UNTIL LS-NBRS-IDX1 > LS-NBRS-NTRYCNT
014900       SET LS-SUB TO LS-NBRS-IDX1
015000       DISPLAY WS-PGMID
015100            " "
015200            LS-SUB-2
015300            " "
015400            LS-NBRS (LS-NBRS-IDX1)
015500     END-PERFORM
015600
015700     CONTINUE.
015800 0300-00-MAINLINE.
015900     DISPLAY " "
016000     DISPLAY WS-PGMID
016100          " Use VBINSRCH Binary search to locate nbr"
016200
016300     CONTINUE.
016400 0300-10-MAINLINE.
016500     DISPLAY " "
016600     DISPLAY WS-PGMID
016700          " Find 01 in pos 1"
016800     MOVE -1 TO LS-SUB
016900     MOVE "01" TO LS-SRCHARG
017000     MOVE ZERO TO LS-SUB
017100     CALL WS-VBINSRCH
017200          USING LS-SUB
017300                LS-NBRS-NTRYCNT
017400                LS-NBRS-NTRYLEN
017500                LS-NBRS-KEY1POS
017600                LS-NBRS-KEY1LEN
017700                LS-SRCHARG
017800                LS-NBRS-VALUES
017900     DISPLAY WS-PGMID " " WS-VBINSRCH
018000          "  COBOL RETURN-CODE = " RETURN-CODE
018100
018200     IF LS-SUB = ZERO
018300       DISPLAY WS-PGMID
018400            "  can not find: " LS-SRCHARG
018500       GO TO 0300-20-MAINLINE
018600     END-IF
018700
018800     DISPLAY WS-PGMID
018900          "  Found: " LS-SRCHARG " in pos: " LS-SUB
019000
019100     CONTINUE.
019200 0300-20-MAINLINE.
019300     DISPLAY " "
019400     DISPLAY WS-PGMID
019500          " Find 06 in pos 6"
019600     MOVE "06" TO LS-SRCHARG
019700     MOVE ZERO TO LS-SUB
019800     CALL WS-VBINSRCH
019900          USING LS-SUB
020000                LS-NBRS-NTRYCNT
020100                LS-NBRS-NTRYLEN
020200                LS-NBRS-KEY1POS
020300                LS-NBRS-KEY1LEN
020400                LS-SRCHARG
020500                LS-NBRS-VALUES
020600     DISPLAY WS-PGMID " " WS-VBINSRCH
020700          "  COBOL RETURN-CODE = " RETURN-CODE
020800
020900     IF LS-SUB = ZERO
021000       DISPLAY WS-PGMID
021100            "  can not find: " LS-SRCHARG
021200       GO TO 0300-30-MAINLINE
021300     END-IF
021400
021500     DISPLAY WS-PGMID
021600          "  Found: " LS-SRCHARG " in pos: " LS-SUB
021700
021800     CONTINUE.
021900 0300-30-MAINLINE.
022000     DISPLAY " "
022100     DISPLAY WS-PGMID
022200          " Find 03 in pos 3"
022300     MOVE "03" TO LS-SRCHARG
022400     MOVE ZERO TO LS-SUB
022500     CALL WS-VBINSRCH
022600          USING LS-SUB
022700                LS-NBRS-NTRYCNT
022800                LS-NBRS-NTRYLEN
022900                LS-NBRS-KEY1POS
023000                LS-NBRS-KEY1LEN
023100                LS-SRCHARG
023200                LS-NBRS-VALUES
023300     DISPLAY WS-PGMID " " WS-VBINSRCH
023400          "  COBOL RETURN-CODE = " RETURN-CODE
023500
023600     IF LS-SUB = ZERO
023700       DISPLAY WS-PGMID
023800            "  can not find: " LS-SRCHARG
023900       GO TO 0300-40-MAINLINE
024000     END-IF
024100
024200     DISPLAY WS-PGMID
024300          "  Found: " LS-SRCHARG " in pos: " LS-SUB
024400
024500     CONTINUE.
024600 0300-40-MAINLINE.
024700     DISPLAY " "
024800     DISPLAY WS-PGMID
024900          " Find 04 in pos 4"
025000     MOVE "04" TO LS-SRCHARG
025100     MOVE ZERO TO LS-SUB
025200     CALL WS-VBINSRCH
025300          USING LS-SUB
025400                LS-NBRS-NTRYCNT
025500                LS-NBRS-NTRYLEN
025600                LS-NBRS-KEY1POS
025700                LS-NBRS-KEY1LEN
025800                LS-SRCHARG
025900                LS-NBRS-VALUES
026000     DISPLAY WS-PGMID " " WS-VBINSRCH
026100          "  COBOL RETURN-CODE = " RETURN-CODE
026200
026300     IF LS-SUB = ZERO
026400       DISPLAY WS-PGMID
026500            "  can not find: " LS-SRCHARG
026600       GO TO 0300-50-MAINLINE
026700     END-IF
026800
026900     DISPLAY WS-PGMID
027000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
027100
027200     CONTINUE.
027300 0300-50-MAINLINE.
027400     DISPLAY " "
027500     DISPLAY WS-PGMID
027600          " Find 99 in pos 0 not found"
027700     MOVE "99" TO LS-SRCHARG
027800     MOVE ZERO TO LS-SUB
027900     CALL WS-VBINSRCH
028000          USING LS-SUB
028100                LS-NBRS-NTRYCNT
028200                LS-NBRS-NTRYLEN
028300                LS-NBRS-KEY1POS
028400                LS-NBRS-KEY1LEN
028500                LS-SRCHARG
028600                LS-NBRS-VALUES
028700     DISPLAY WS-PGMID " " WS-VBINSRCH
028800          "  COBOL RETURN-CODE = " RETURN-CODE
028900
029000     IF LS-SUB = ZERO
029100       DISPLAY WS-PGMID
029200            "  can not find: " LS-SRCHARG
029300       GO TO 0400-00-MAINLINE
029400     END-IF
029500
029600     DISPLAY WS-PGMID
029700          "  Found: " LS-SRCHARG " in pos: " LS-SUB
029800
029900     CONTINUE.
030000 0400-00-MAINLINE.
030100     DISPLAY " "
030200     DISPLAY WS-PGMID
030300          " Use VHEAPSRT Heap Sort, ascending order by text"
030400
030500     CONTINUE.
030600 0400-10-MAINLINE.
030700     CALL WS-VHEAPSRT
030800          USING LS-NBRS-NTRYCNT
030900                LS-NBRS-NTRYLEN
031000                LS-NBRS-KEY2POS
031100                LS-NBRS-KEY2LEN
031200                LS-NBRS-VALUES
031300     DISPLAY WS-PGMID " " WS-VHEAPSRT
031400          "  COBOL RETURN-CODE = " RETURN-CODE
031500
031600*    PRINT TABLE AFTER SORT
031700     DISPLAY " "
031800     DISPLAY WS-PGMID
031900           " Print table after sort by text"
032000     PERFORM
032100          VARYING LS-NBRS-IDX1 FROM +1 BY +1
032200          UNTIL LS-NBRS-IDX1 > LS-NBRS-NTRYCNT
032300       SET LS-SUB TO LS-NBRS-IDX1
032400       DISPLAY WS-PGMID
032500            " "
032600            LS-SUB-2
032700            " "
032800            LS-NBRS (LS-NBRS-IDX1)
032900     END-PERFORM
033000
033100     CONTINUE.
033200 0500-00-MAINLINE.
033300     DISPLAY " "
033400     DISPLAY WS-PGMID
033500          " Use VBINSRCH Binary search to locate text"
033600
033700     CONTINUE.
033800 0500-10-MAINLINE.
033900     DISPLAY " "
034000     DISPLAY WS-PGMID
034100          " Find FIVE in pos 1"
034200     MOVE -1 TO LS-SUB
034300     MOVE "FIVE" TO LS-SRCHARG
034400     CALL WS-VBINSRCH
034500          USING LS-SUB
034600                LS-NBRS-NTRYCNT
034700                LS-NBRS-NTRYLEN
034800                LS-NBRS-KEY2POS
034900                LS-NBRS-KEY2LEN
035000                LS-SRCHARG
035100                LS-NBRS-VALUES
035200     DISPLAY WS-PGMID " " WS-VBINSRCH
035300          "  COBOL RETURN-CODE = " RETURN-CODE
035400
035500     IF LS-SUB = ZERO
035600       DISPLAY WS-PGMID
035700            "  can not find: " LS-SRCHARG
035800       GO TO 0500-20-MAINLINE
035900     END-IF
036000
036100     DISPLAY WS-PGMID
036200          "  Found: " LS-SRCHARG " in pos: " LS-SUB
036300
036400     CONTINUE.
036500 0500-20-MAINLINE.
036600     DISPLAY " "
036700     DISPLAY WS-PGMID
036800          " Find TWO in pos 6"
036900     MOVE "TWO" TO LS-SRCHARG
037000     MOVE ZERO TO LS-SUB
037100     CALL WS-VBINSRCH
037200          USING LS-SUB
037300                LS-NBRS-NTRYCNT
037400                LS-NBRS-NTRYLEN
037500                LS-NBRS-KEY2POS
037600                LS-NBRS-KEY2LEN
037700                LS-SRCHARG
037800                LS-NBRS-VALUES
037900     DISPLAY WS-PGMID " " WS-VBINSRCH
038000          "  COBOL RETURN-CODE = " RETURN-CODE
038100
038200     IF LS-SUB = ZERO
038300       DISPLAY WS-PGMID
038400            "  can not find: " LS-SRCHARG
038500       GO TO 0500-30-MAINLINE
038600     END-IF
038700
038800     DISPLAY WS-PGMID
038900          "  Found: " LS-SRCHARG " in pos: " LS-SUB
039000
039100     CONTINUE.
039200 0500-30-MAINLINE.
039300     DISPLAY " "
039400     DISPLAY WS-PGMID
039500          " Find ONE in pos 3"
039600     MOVE "ONE" TO LS-SRCHARG
039700     MOVE ZERO TO LS-SUB
039800     CALL WS-VBINSRCH
039900          USING LS-SUB
040000                LS-NBRS-NTRYCNT
040100                LS-NBRS-NTRYLEN
040200                LS-NBRS-KEY2POS
040300                LS-NBRS-KEY2LEN
040400                LS-SRCHARG
040500                LS-NBRS-VALUES
040600     DISPLAY WS-PGMID " " WS-VBINSRCH
040700          "  COBOL RETURN-CODE = " RETURN-CODE
040800
040900     IF LS-SUB = ZERO
041000       DISPLAY WS-PGMID
041100            "  can not find: " LS-SRCHARG
041200       GO TO 0500-40-MAINLINE
041300     END-IF
041400
041500     DISPLAY WS-PGMID
041600          "  Found: " LS-SRCHARG " in pos: " LS-SUB
041700
041800     CONTINUE.
041900 0500-40-MAINLINE.
042000     DISPLAY " "
042100     DISPLAY WS-PGMID
042200          " Find SIX in pos 4"
042300     MOVE "SIX" TO LS-SRCHARG
042400     MOVE ZERO TO LS-SUB
042500     CALL WS-VBINSRCH
042600          USING LS-SUB
042700                LS-NBRS-NTRYCNT
042800                LS-NBRS-NTRYLEN
042900                LS-NBRS-KEY2POS
043000                LS-NBRS-KEY2LEN
043100                LS-SRCHARG
043200                LS-NBRS-VALUES
043300     DISPLAY WS-PGMID " " WS-VBINSRCH
043400          "  COBOL RETURN-CODE = " RETURN-CODE
043500
043600     IF LS-SUB = ZERO
043700       DISPLAY WS-PGMID
043800            "  can not find: " LS-SRCHARG
043900       GO TO 0500-50-MAINLINE
044000     END-IF
044100
044200     DISPLAY WS-PGMID
044300          "  Found: " LS-SRCHARG " in pos: " LS-SUB
044400
044500     CONTINUE.
044600 0500-50-MAINLINE.
044700     DISPLAY " "
044800     DISPLAY WS-PGMID
044900          " Find ZERO in pos 0 not found"
045000     MOVE "ZERO" TO LS-SRCHARG
045100     MOVE ZERO TO LS-SUB
045200     CALL WS-VBINSRCH
045300          USING LS-SUB
045400                LS-NBRS-NTRYCNT
045500                LS-NBRS-NTRYLEN
045600                LS-NBRS-KEY2POS
045700                LS-NBRS-KEY2LEN
045800                LS-SRCHARG
045900                LS-NBRS-VALUES
046000     DISPLAY WS-PGMID " " WS-VBINSRCH
046100          "  COBOL RETURN-CODE = " RETURN-CODE
046200
046300     IF LS-SUB = ZERO
046400       DISPLAY WS-PGMID
046500            "  can not find: " LS-SRCHARG
046600       GO TO 0600-00-MAINLINE
046700     END-IF
046800
046900     DISPLAY WS-PGMID
047000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
047100
047200     CONTINUE.
047300 0600-00-MAINLINE.
047400     DISPLAY " "
047500     DISPLAY WS-PGMID
047600          " Use VBINSRH1 Binary search to locate text"
047700
047800     CONTINUE.
047900 0600-10-MAINLINE.
048000     DISPLAY " "
048100     DISPLAY WS-PGMID
048200          " Find FIVE in pos 1"
048300     MOVE -1 TO LS-SUB
048400     MOVE "FIVE" TO LS-SRCHARG
048500     CALL WS-VBINSRH1
048600          USING LS-SUB
048700                LS-NBRS-NTRYCNT
048800                LS-NBRS-NTRYLEN
048900                LS-NBRS-KEY2POS
049000                LS-NBRS-KEY2LEN
049100                LS-SRCHARG
049200                LS-NBRS-VALUES
049300     DISPLAY WS-PGMID " " WS-VBINSRH1
049400          " COBOL RETURN-CODE = " RETURN-CODE
049500
049600     IF LS-SUB = ZERO
049700       DISPLAY WS-PGMID
049800            "  can not find: " LS-SRCHARG
049900       GO TO 0600-20-MAINLINE
050000     END-IF
050100
050200     DISPLAY WS-PGMID
050300          "  Found: " LS-SRCHARG " in pos: " LS-SUB
050400
050500     CONTINUE.
050600 0600-20-MAINLINE.
050700     DISPLAY " "
050800     DISPLAY WS-PGMID
050900          " Find TWO in pos 6"
051000     MOVE "TWO" TO LS-SRCHARG
051100     MOVE ZERO TO LS-SUB
051200     CALL WS-VBINSRH1
051300          USING LS-SUB
051400                LS-NBRS-NTRYCNT
051500                LS-NBRS-NTRYLEN
051600                LS-NBRS-KEY2POS
051700                LS-NBRS-KEY2LEN
051800                LS-SRCHARG
051900                LS-NBRS-VALUES
052000     DISPLAY WS-PGMID " " WS-VBINSRH1
052100          "  COBOL RETURN-CODE = " RETURN-CODE
052200
052300     IF LS-SUB = ZERO
052400       DISPLAY WS-PGMID
052500            "  can not find: " LS-SRCHARG
052600       GO TO 0600-30-MAINLINE
052700     END-IF
052800
052900     DISPLAY WS-PGMID
053000          "  Found: " LS-SRCHARG " in pos: " LS-SUB
053100
053200     CONTINUE.
053300 0600-30-MAINLINE.
053400     DISPLAY " "
053500     DISPLAY WS-PGMID
053600          " Find ONE in pos 3"
053700     MOVE "ONE" TO LS-SRCHARG
053800     MOVE ZERO TO LS-SUB
053900     CALL WS-VBINSRH1
054000          USING LS-SUB
054100                LS-NBRS-NTRYCNT
054200                LS-NBRS-NTRYLEN
054300                LS-NBRS-KEY2POS
054400                LS-NBRS-KEY2LEN
054500                LS-SRCHARG
054600                LS-NBRS-VALUES
054700     DISPLAY WS-PGMID " " WS-VBINSRH1
054800          "  COBOL RETURN-CODE = " RETURN-CODE
054900
055000     IF LS-SUB = ZERO
055100       DISPLAY WS-PGMID
055200            "  can not find: " LS-SRCHARG
055300       GO TO 0600-40-MAINLINE
055400     END-IF
055500
055600     DISPLAY WS-PGMID
055700          "  Found: " LS-SRCHARG " in pos: " LS-SUB
055800
055900     CONTINUE.
056000 0600-40-MAINLINE.
056100     DISPLAY " "
056200     DISPLAY WS-PGMID
056300          " Find SIX in pos 4"
056400     MOVE "SIX" TO LS-SRCHARG
056500     MOVE ZERO TO LS-SUB
056600     CALL WS-VBINSRH1
056700          USING LS-SUB
056800                LS-NBRS-NTRYCNT
056900                LS-NBRS-NTRYLEN
057000                LS-NBRS-KEY2POS
057100                LS-NBRS-KEY2LEN
057200                LS-SRCHARG
057300                LS-NBRS-VALUES
057400     DISPLAY WS-PGMID " " WS-VBINSRH1
057500          "  COBOL RETURN-CODE = " RETURN-CODE
057600
057700     IF LS-SUB = ZERO
057800       DISPLAY WS-PGMID
057900            "  can not find: " LS-SRCHARG
058000       GO TO 0600-50-MAINLINE
058100     END-IF
058200
058300     DISPLAY WS-PGMID
058400          "  Found: " LS-SRCHARG " in pos: " LS-SUB
058500
058600     CONTINUE.
058700 0600-50-MAINLINE.
058800     DISPLAY " "
058900     DISPLAY WS-PGMID
059000          " Find ZERO in pos 0 not found"
059100     MOVE "ZERO" TO LS-SRCHARG
059200     MOVE ZERO TO LS-SUB
059300     CALL WS-VBINSRH1
059400          USING LS-SUB
059500                LS-NBRS-NTRYCNT
059600                LS-NBRS-NTRYLEN
059700                LS-NBRS-KEY2POS
059800                LS-NBRS-KEY2LEN
059900                LS-SRCHARG
060000                LS-NBRS-VALUES
060100     DISPLAY WS-PGMID " " WS-VBINSRH1
060200          "  COBOL RETURN-CODE = " RETURN-CODE
060300
060400     IF LS-SUB = ZERO
060500       DISPLAY WS-PGMID
060600            "  can not find: " LS-SRCHARG
060700       GO TO 0600-60-MAINLINE
060800     END-IF
060900
061000     DISPLAY WS-PGMID
061100          "  Found: " LS-SRCHARG " in pos: " LS-SUB
061200
061300     CONTINUE.
061400 0600-60-MAINLINE.
061500     DISPLAY " "
061600     DISPLAY WS-PGMID
061700          " Find AAAAA in pos 1 FIVE"
061800     MOVE "AAAAA" TO LS-SRCHARG
061900     MOVE ZERO TO LS-SUB
062000     CALL WS-VBINSRH1
062100          USING LS-SUB
062200                LS-NBRS-NTRYCNT
062300                LS-NBRS-NTRYLEN
062400                LS-NBRS-KEY2POS
062500                LS-NBRS-KEY2LEN
062600                LS-SRCHARG
062700                LS-NBRS-VALUES
062800     DISPLAY WS-PGMID " " WS-VBINSRH1
062900          "  COBOL RETURN-CODE = " RETURN-CODE
063000
063100     IF LS-SUB = ZERO
063200       DISPLAY WS-PGMID
063300            "  can not find: " LS-SRCHARG
063400       GO TO 0600-70-MAINLINE
063500     END-IF
063600
063700     DISPLAY WS-PGMID
063800          "  Found: " LS-SRCHARG " in pos: " LS-SUB
063900
064000     CONTINUE.
064100 0600-70-MAINLINE.
064200     DISPLAY " "
064300     DISPLAY WS-PGMID
064400          " Find KKKKK in pos 3 ONE"
064500     MOVE "KKKKK" TO LS-SRCHARG
064600     MOVE ZERO TO LS-SUB
064700     CALL WS-VBINSRH1
064800          USING LS-SUB
064900                LS-NBRS-NTRYCNT
065000                LS-NBRS-NTRYLEN
065100                LS-NBRS-KEY2POS
065200                LS-NBRS-KEY2LEN
065300                LS-SRCHARG
065400                LS-NBRS-VALUES
065500     DISPLAY WS-PGMID " " WS-VBINSRH1
065600          "  COBOL RETURN-CODE = " RETURN-CODE
065700
065800     IF LS-SUB = ZERO
065900       DISPLAY WS-PGMID
066000            "  can not find: " LS-SRCHARG
066100       GO TO 0700-00-MAINLINE
066200     END-IF
066300
066400     DISPLAY WS-PGMID
066500          "  Found: " LS-SRCHARG " in pos: " LS-SUB
066600
066700     CONTINUE.
066800 0700-00-MAINLINE.
066900     SKIP2
067000     CONTINUE.
067100 9000-00-RETURN.
067200*    * ------------------------------------------------------- *
067300*    * RETURN TO CALLER
067400*    * ------------------------------------------------------- *
067500
067600     DISPLAY WS-PGMID
067700          " DONE WITH ASTSRT2B"
067800
067900     EXIT PROGRAM.
068000     GOBACK.
./ ADD NAME=ASTSTR1B 0199-18037-21306-1304-09553-03954-00000-APLKS   20
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSTR1B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000500* ------------------------------------------------------------ *
000600* ARCHITECTURE SERVICES FACILITY
000700* STRING SERVICES
000800* COBOL ROUTINE
000900*
001000* PROGRAM ID: ASTSTR1B
001100*      TITLE: STRING SERVICES BATCH TEST PROGRAM
001200*
001300* ------------------------------------------------------------ *
001400* MAINTENANCE HISTORY:
001500*
001600* 01/01/2007
001700* 03/11/2015 made more test friendly
001800* 02/06/2018 match test case number up with the action code
001801* 09/28/2019 more clean up
001802* 11/02/2021 just a little more clean up
001900* ------------------------------------------------------------ *
002000     SKIP2
002100 DATA DIVISION.
002200     SKIP2
002300 WORKING-STORAGE SECTION.
002400 01  FILLER.
002500     03  WS-EYE-CATCHER PIC X(25)
002600              VALUE "BUZZARD CREEK TECH, INC. ".
002700     03  WS-PGMID       PIC X(08) VALUE "ASTSTR1B".
002800
002900 01  WS-PARM.
003000     03  WS-PARM-LENGTH      PIC S9(9) BINARY.
003100     03  WS-PARM-STMT.
003200         05  WS-PARM-LEN     PIC  9(4) BINARY.
003300         05  WS-PARM-TEXT    PIC X(256).
003400
003500     COPY AS5FDBK.
003600
003700 01  AS-REQUEST-OPTIONS.
003800*    CONTROL BLOCK NAME ASU9LA02
003900     05  RO-DFLT-STRIP-CHR   PIC X(01) VALUE "+".
004000     05  RO-DFLT-DELIM-CHR   PIC X(01) VALUE "+".
004100     05  RO-DFLT-PAD-CHR     PIC X(01) VALUE "*".
004200     05  RO-OPTION-FLAG      PIC X(01) VALUE LOW-VALUE.
004300       88  RO-FLAG-NONE          VALUE X'00'.
004400       88  RO-FLAG-UC            VALUE X'80'.
004500       88  RO-FLAG-CASE          VALUE X'40'.
004600       88  RO-FLAG-CASE-CONT     VALUE X'41'.
004700       88  RO-FLAG-BOTH          VALUE X'30'.
004800       88  RO-FLAG-LEAD          VALUE X'20'.
004900       88  RO-FLAG-TRAIL         VALUE X'10'.
005000       88  RO-FLAG-CONT          VALUE X'01'.
005100     05  FILLER VALUE LOW-VALUE.
005200         07  FILLER          PIC X(03).
005300         07  RO-PSTATE       PIC X(01).
005400     05  RO-START            PIC  9(4) COMP VALUE ZERO.
005500     05  RO-COUNT            PIC  9(4) COMP VALUE ZERO.
005600     05  FILLER              PIC X(06) VALUE LOW-VALUE.
005700     05  RO-PSA-LEN          PIC  9(4) COMP VALUE ZERO.
005800     05  FILLER.
005900         07  RO-PSA-LFUCHR   PIC X(01)  VALUE LOW-VALUE.
006000         07  RO-PSA-LFUOFF   PIC X(01)  VALUE LOW-VALUE.
006100         07  RO-PSA-NXTPOS   PIC  9(4)  COMP VALUE ZERO.
006200         07  FILLER          PIC X(28)  VALUE LOW-VALUE.
006300         07  FILLER          PIC X(256) VALUE LOW-VALUE.
006400
006500 01  WS-SOURCE-STRING-1.
006600*    CONTROL BLOCK NAME ASU9LA03
006700     05  FILLER              PIC S9(4) COMP VALUE +51.
006800     05  FILLER              PIC X(51)
006900     VALUE "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++".
007000**   VALUE "Now is the time for all good men MEN MEMMEN men    ".
007100     05  FILLER              PIC X(5) VALUE "#####".
007200
007300 01  WS-SOURCE-STRING-2.
007400     05  FILLER           PIC S9(4) COMP VALUE +20.
007500     05  FILLER           PIC X(20)
007600     VALUE "+How+now+brown+cow++".
007700     05  FILLER           PIC X(5) VALUE "#####".
007800
007900 01  WS-SOURCE-STRING-3.
008000     05  FILLER           PIC S9(4) COMP VALUE +17.
008100     05  FILLER           PIC X(17) VALUE "1st National Bank".
008200     05  FILLER           PIC X(5) VALUE "#####".
008300
008400 01  WS-SOURCE-STRING-4.
008500     05  FILLER           PIC S9(4) COMP VALUE +27.
008600     05  FILLER           PIC X(27)
008700     VALUE "+++++1ST+NATIONAL+BANK+++++".
008800     05  FILLER           PIC X(5) VALUE "#####".
008900
009000 01  WS-SOURCE-STRING-5.
009100     05  FILLER           PIC S9(4) COMP VALUE +26.
009200     05  FILLER           PIC X(26)
009300     VALUE "++TO++BE,+OR+NOT+TO+BE++++".
009400     05  FILLER           PIC X(5) VALUE "#####".
009500
009600 01  WS-SOURCE-STRING-6.
009700     05  FILLER           PIC S9(4) COMP VALUE +09.
009800     05  FILLER           PIC X(09)
009900     VALUE "123456789".
010000     05  FILLER           PIC X(5) VALUE "#####".
010100
010200 01  WS-SOURCE-STRING-7.
010300     05  FILLER           PIC S9(4) COMP VALUE +07.
010400     05  FILLER           PIC X(7) VALUE "$234.56".
010500     05  FILLER           PIC X(5) VALUE "#####".
010600
010700 01  WS-SOURCE-STRING-8.
010800     05  FILLER           PIC S9(4) COMP VALUE +09.
010900     05  FILLER           PIC X(9) VALUE "-1,234.56".
011000     05  FILLER           PIC X(5) VALUE "#####".
011100
011200 01  WS-SOURCE-STRING-9.
011300     05  FILLER           PIC S9(4) COMP VALUE +09.
011400     05  FILLER           PIC X(9) VALUE "$-,--4.56".
011500     05  FILLER           PIC X(5) VALUE "#####".
011600
011700 01  WS-SOURCE-STRING-10.
011800     05  FILLER           PIC S9(4) COMP VALUE +09.
011900     05  FILLER           PIC X(9) VALUE "0123,456 ".
012000     05  FILLER           PIC X(5) VALUE "#####".
012100
012200 01  WS-SOURCE-STRING-11.
012300     05  FILLER           PIC S9(4) COMP VALUE +86.
012400     05  FILLER           PIC X(86)
012500         VALUE 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
012600-              'YZ0123456789.<(+|&!$*);¬-/,%_>?:#@="'.
012700     05  FILLER           PIC X(5) VALUE "#####".
012800
012900 01  WS-SOURCE-STRING-12.
013000     05  FILLER           PIC S9(4) COMP VALUE +3.
013100     05  FILLER           PIC X(3) VALUE "abc".
013200     05  FILLER           PIC X(5) VALUE "#####".
013300
013400 01  WS-SOURCE-STRING-13.
013500     05  FILLER           PIC S9(4) COMP VALUE +3.
013600     05  FILLER           PIC X(3) VALUE "DEF".
013700     05  FILLER           PIC X(5) VALUE "#####".
013800
013900 01  WS-SOURCE-STRING-14.
014000     05  FILLER           PIC S9(4) COMP VALUE +3.
014100     05  FILLER           PIC X(3) VALUE "ghi".
014200     05  FILLER           PIC X(5) VALUE "#####".
014300
014400 01  WS-SOURCE-STRING-15.
014500     05  FILLER           PIC S9(4) COMP VALUE +3.
014600     05  FILLER           PIC X(3) VALUE "JKL".
014700     05  FILLER           PIC X(5) VALUE "#####".
014800
014900 01  WS-SOURCE-STRING-16.
015000     05  FILLER           PIC S9(4) COMP VALUE +03.
015100     05  FILLER           PIC X(3) VALUE "64K".
015200     05  FILLER           PIC X(5) VALUE "#####".
015300
015400 01  WS-SOURCE-STRING-17.
015500     05  FILLER           PIC S9(4) COMP VALUE +011.
015600     05  FILLER           PIC X(11) VALUE "123.456E+12".
015700     05  FILLER           PIC X(5) VALUE "#####".
015800
015900 01  WS-SOURCE-STRING-18.
016000     05  FILLER           PIC S9(4) COMP VALUE +012.
016100     05  FILLER           PIC X(12) VALUE "0.123456E+15".
016200     05  FILLER           PIC X(5) VALUE "#####".
016300
016400 01  WS-SOURCE-STRING-19.
016500     05  FILLER           PIC S9(4) COMP VALUE +011.
016600     05  FILLER           PIC X(11) VALUE "-123.456E-3".
016700     05  FILLER           PIC X(5) VALUE "#####".
016800
016900 01  WS-SOURCE-STRING-20.
017000     05  FILLER           PIC S9(4) COMP VALUE +11.
017100     05  FILLER           PIC S9(9)V99
017200                   VALUE 1321321.77.
017300     05  FILLER           PIC X(5) VALUE "#####".
017400
017500 01  WS-SOURCE-STRING-21.
017600     05  FILLER           PIC S9(4) COMP VALUE +11.
017700     05  FILLER           PIC S9(8)V999
017800                   VALUE 1321321.888.
017900     05  FILLER           PIC X(5) VALUE "#####".
018000
018100 01  WS-SOURCE-STRING-22.
018200     05  FILLER           PIC S9(4) COMP VALUE +18.
018300     05  FILLER           PIC S9(10)V9(8)
018400                   VALUE 1321321321.87654321.
018500     05  FILLER           PIC X(5) VALUE "#####".
018600
018700 01  WS-SOURCE-STRING-23.
018800     05  FILLER           PIC S9(4) COMP VALUE +18.
018900     05  FILLER           PIC S9(10)V9(8)
019000                   VALUE 1321321321.00004321.
019100     05  FILLER           PIC X(5) VALUE "#####".
019200
019300 01  WS-SOURCE-STRING-24.
019400     05  FILLER           PIC S9(4) COMP VALUE +18.
019500     05  FILLER           PIC S9(12)V9(6)
019600                   VALUE 1000021001.000543.
019700     05  FILLER           PIC X(5) VALUE "#####".
019800
019900 01  WS-SOURCE-STRING-25.
020000     05  FILLER           PIC S9(4) COMP VALUE +5.
020100     05  FILLER           PIC S9(5) VALUE -10200.
020200     05  FILLER           PIC X(5) VALUE "#####".
020300
020400 01  WS-SOURCE-STRING-26.
020500     05  FILLER           PIC S9(4) COMP VALUE +6.
020600     05  FILLER           PIC S9(9)V99 COMP-3
020700                   VALUE 1321321.77.
020800     05  FILLER           PIC X(5) VALUE "#####".
020900
021000 01  WS-SOURCE-STRING-27.
021100     05  FILLER           PIC S9(4) COMP VALUE +6.
021200     05  FILLER           PIC S9(8)V999 COMP-3
021300                   VALUE 1321321.888.
021400     05  FILLER           PIC X(5) VALUE "#####".
021500
021600 01  WS-SOURCE-STRING-28.
021700     05  FILLER           PIC S9(4) COMP VALUE +10.
021800     05  FILLER           PIC S9(10)V9(8) COMP-3
021900                   VALUE 1321321321.87654321.
022000     05  FILLER           PIC X(5) VALUE "#####".
022100
022200 01  WS-SOURCE-STRING-29.
022300     05  FILLER           PIC S9(4) COMP VALUE +10.
022400     05  FILLER           PIC S9(10)V9(8) COMP-3
022500                   VALUE 1321321321.00004321.
022600     05  FILLER           PIC X(5) VALUE "#####".
022700
022800 01  WS-SOURCE-STRING-30.
022900     05  FILLER           PIC S9(4) COMP VALUE +9.
023000     05  FILLER           PIC S9(10)V9(6) COMP-3
023100                   VALUE 1000021001.000543.
023200     05  FILLER           PIC X(5) VALUE "#####".
023300
023400 01  WS-SOURCE-STRING-31.
023500     05  FILLER           PIC S9(4) COMP VALUE +3.
023600     05  FILLER           PIC S9(5) COMP-3
023700                   VALUE -10200.
023800     05  FILLER           PIC X(5) VALUE "#####".
023900
024000 01  WS-SOURCE-STRING-32.
024100     05  FILLER           PIC S9(4) COMP VALUE +10.
024200     05  FILLER           PIC S9(9)V9(9) COMP-3
024300                   VALUE 100000001.100000001.
024400     05  FILLER           PIC X(5) VALUE "#####".
024500
024600 01  WS-SOURCE-STRING-33.
024700     05  FILLER           PIC S9(4) COMP VALUE +04.
024800     05  FILLER           PIC X(11) VALUE '0.75'.
024900     05  FILLER           PIC X(5) VALUE "#####".
025000
025100 01  WS-SOURCE-STRING-34.
025200     05  FILLER           PIC S9(4) COMP VALUE +05.
025300     05  FILLER           PIC S9(3)V9(2)
025400                   VALUE 0.75.
025500     05  FILLER           PIC X(5) VALUE "#####".
025600
025700 01  WS-SOURCE-STRING-35.
025800     05  FILLER           PIC S9(4) COMP VALUE +03.
025900     05  FILLER           PIC S9(3)V9(2) COMP-3
026000                   VALUE 0.75.
026100     05  FILLER           PIC X(5) VALUE "#####".
026200
026300 01  TEMPLATE-0.
026400     05  TOKEN-0-TYPE        PIC X(01) VALUE X'01'.
026500     05  TMPLT-0-LEN         PIC S9(4) COMP VALUE 1.
026600     05  TMPLT-0-TXT         PIC X(1)  VALUE ",".
026700     05  TMPLT-0-TXT-Z       PIC X(5)  VALUE "$$$$$".
026800
026900 01  TEMPLATE-1.
027000     05  TOKEN-1-TYPE        PIC X(01) VALUE X'04'.
027100     05  TOKEN-1-SIZE        PIC S9(4) COMP VALUE +12.
027200     05  TMPLT-1-LEN         PIC S9(4) COMP VALUE ZERO.
027300     05  TMPLT-1-TXT-A       PIC S9(9) COMP.
027400     05  TMPLT-1-TXT-B       PIC S9(9) COMP.
027500     05  TMPLT-1-TXT-C       PIC S9(9) COMP.
027600     05  TMPLT-1-TXT-Z       PIC X(5)  VALUE "$$$$$".
027700
027800 01  TEMPLATE-2.
027900     05  TOKEN-2-TYPE        PIC X(01) VALUE X'04'.
028000     05  TOKEN-2-SIZE        PIC S9(4) COMP VALUE +4.
028100     05  TMPLT-2-LEN         PIC S9(4) COMP VALUE ZERO.
028200     05  TMPLT-2-TXT         PIC S9(9) COMP VALUE ZERO.
028300     05  TMPLT-2-TXT-Z       PIC X(5)  VALUE "$$$$$".
028400
028500 01  TEMPLATE-3.
028600     05  TOKEN-3-TYPE        PIC X(01) VALUE X'04'.
028700     05  TOKEN-3-SIZE        PIC S9(4) COMP VALUE +80.
028800     05  TMPLT-3-LEN         PIC S9(4) COMP VALUE ZERO.
028900     05  TMPLT-3-TXT         PIC X(80) VALUE LOW-VALUE.
029000     05  TMPLT-3-TXT-Z       PIC X(5)  VALUE "$$$$$".
029100
029200 01  TEMPLATE-4.
029300     05  TOKEN-4-TYPE        PIC X(01) VALUE X'02'.
029400     05  TMPLT-4-LEN         PIC S9(4) COMP VALUE +3.
029500     05  TMPLT-4-TXT.
029600         07  FILLER          PIC X(3)  VALUE "MEN".
029700         07  FILLER          PIC X(5)  VALUE "@@@@@".
029800
029900 01  TEMPLATE-5.
030000     05  TOKEN-5-TYPE        PIC X(01) VALUE X'04'.
030100     05  TOKEN-5-SIZE        PIC S9(4) COMP VALUE +80.
030200     05  TMPLT-5-LEN         PIC S9(4) COMP VALUE ZERO.
030300     05  TMPLT-5-TXT         PIC X(80) VALUE LOW-VALUE.
030400     05  TMPLT-5-TXT-Z       PIC X(5)  VALUE "$$$$$".
030500
030600 01  TEMPLATE-6.
030700     05  TOKEN-6-TYPE        PIC X(01) VALUE X'04'.
030800     05  TOKEN-6-SIZE        PIC S9(4) COMP VALUE +55.
030900     05  TMPLT-6-LEN         PIC S9(4) COMP VALUE ZERO.
031000     05  TMPLT-6-TXT         PIC X(55) VALUE LOW-VALUE.
031100     05  TMPLT-6-TXT-Z       PIC X(5)  VALUE "$$$$$".
031200
031300 01  TEMPLATE-7.
031400     05  TOKEN-7-TYPE        PIC X(01) VALUE X'04'.
031500     05  TOKEN-7-SIZE        PIC S9(4) COMP VALUE +26.
031600     05  TMPLT-7-LEN         PIC S9(4) COMP VALUE ZERO.
031700     05  TMPLT-7-TXT         PIC X(26) VALUE LOW-VALUE.
031800     05  TMPLT-7-TXT-Z       PIC X(5)  VALUE "$$$$$".
031900
032000 01  TEMPLATE-8.
032100     05  TOKEN-8-TYPE        PIC X(01) VALUE X'02'.
032200     05  TMPLT-8-LEN         PIC S9(4) COMP VALUE +5.
032300     05  TMPLT-8-TXT.
032400         07  FILLER          PIC X(5)  VALUE "GOOD+".
032500         07  FILLER          PIC X(5)  VALUE "@@@@@".
032600
032700 01  TEMPLATE-11.
032800     05  TOKEN-11-TYPE       PIC X(01) VALUE X'04'.
032900     05  TOKEN-11-SIZE       PIC S9(4) COMP VALUE +50.
033000     05  TMPLT-11-LEN        PIC S9(4) COMP VALUE ZERO.
033100     05  TMPLT-11-TXT.
033200         07  TMPLT-11-TOK-TYPE  PIC X(01).
033300         07  TMPLT-11-TOK-STYPE PIC X(01).
033400         07  TMPLT-11-TOK-LEN   PIC S9(4) COMP.
033500         07  FILLER.
033600             09  TMPLT-11-TOK-DIGIT PIC S9(4) COMP.
033700             09  TMPLT-11-TOK-SCALE PIC S9(4) COMP.
033800             09  TMPLT-11-TOK-EXP   PIC S9(4) COMP.
033900             09  TMPLT-11-TOK-NBR   PIC X(40).
034000     05  TMPLT-11-TXT-Z      PIC X(5)  VALUE "$$$$$".
034100
034200 01  TEMPLATE-12.
034300     05  TOKEN-12-TYPE       PIC X(01) VALUE X'04'.
034400     05  TOKEN-12-SIZE       PIC S9(4) COMP VALUE +80.
034500     05  TMPLT-12-LEN        PIC S9(4) COMP VALUE ZERO.
034600     05  TMPLT-12-TXT        PIC X(80) VALUE LOW-VALUE.
034700     05  TMPLT-12-TXT-Z      PIC X(5)  VALUE "$$$$$".
034800
034900 01  TEMPLATE-13.
035000     05  TOKEN-13-TYPE       PIC X(01) VALUE X'04'.
035100     05  TOKEN-13-SIZE       PIC S9(4) COMP VALUE +8.
035200     05  TMPLT-13-LEN        PIC S9(4) COMP VALUE ZERO.
035300     05  TMPLT-13-TXT        PIC X(8)  VALUE LOW-VALUE.
035400     05  TMPLT-13-TXT-Z      PIC X(5)  VALUE "$$$$$".
035500
035600 01  TEMPLATE-DUMMY.
035700     05  TOKEN-14-TYPE       PIC X(01) VALUE X'04'.
035800     05  TOKEN-14-SIZE       PIC S9(4) COMP VALUE ZERO.
035900     05  TMPLT-14-LEN        PIC S9(4) COMP VALUE ZERO.
036000     05  TMPLT-14-TXT        PIC X(01) VALUE LOW-VALUE.
036100     05  TMPLT-14-TXT-Z      PIC X(05) VALUE "$$$$$".
036200
036300 01  TEMPLATE-15.
036400     05  TOKEN-15-TYPE       PIC X(01) VALUE X'04'.
036500     05  TOKEN-15-SIZE       PIC S9(4) COMP VALUE +86.
036600     05  TMPLT-15-LEN        PIC S9(4) COMP VALUE ZERO.
036700     05  TMPLT-15-TXT        PIC X(86) VALUE LOW-VALUE.
036800     05  TMPLT-15-TXT-Z      PIC X(5)  VALUE "$$$$$".
036900
037000 01  TEMPLATE-16.
037100     05  TOKEN-16-TYPE       PIC X(01) VALUE X'04'.
037200     05  TOKEN-16-SIZE       PIC S9(4) COMP VALUE +86.
037300     05  TMPLT-16-LEN        PIC S9(4) COMP VALUE ZERO.
037400     05  TMPLT-16-TXT        PIC X(86) VALUE LOW-VALUE.
037500     05  TMPLT-16-TXT-Z      PIC X(5)  VALUE "$$$$$".
037600
037700 01  TEMPLATE-17.
037800     05  TOKEN-17-TYPE       PIC X(01) VALUE X'04'.
037900     05  TOKEN-17-SIZE       PIC S9(4) COMP VALUE +86.
038000     05  TMPLT-17-LEN        PIC S9(4) COMP VALUE ZERO.
038100     05  TMPLT-17-TXT        PIC X(86) VALUE LOW-VALUE.
038200     05  TMPLT-17-TXT-Z      PIC X(5)  VALUE "$$$$$".
038300
038400 01  TEMPLATE-18.
038500     05  TOKEN-18-TYPE       PIC X(01) VALUE X'02'.
038600     05  TMPLT-18-LEN        PIC S9(4) COMP VALUE +4.
038700     05  TMPLT-18-TXT.
038800         07  FILLER          PIC X(4)  VALUE "+How".
038900         07  FILLER          PIC X(5)  VALUE "@@@@@".
039000
039100 01  TEMPLATE-19.
039200     05  TOKEN-19-TYPE       PIC X(01) VALUE X'02'.
039300     05  TMPLT-19-LEN        PIC S9(4) COMP VALUE +5.
039400     05  TMPLT-19-TXT.
039500         07  FILLER          PIC X(5)  VALUE "brown".
039600         07  FILLER          PIC X(5)  VALUE "@@@@@".
039700
039800 01  TEMPLATE-20.
039900     05  TOKEN-20-TYPE       PIC X(01) VALUE X'02'.
040000     05  TMPLT-20-LEN        PIC S9(4) COMP VALUE +4.
040100     05  TMPLT-20-TXT.
040200         07  FILLER          PIC X(4)  VALUE "cow+".
040300         07  FILLER          PIC X(5)  VALUE "@@@@@".
040400
040500 01  TEMPLATE-21.
040600     05  TOKEN-21-TYPE       PIC X(01) VALUE X'02'.
040700     05  TMPLT-21-LEN        PIC S9(4) COMP VALUE +5.
040800     05  TMPLT-21-TXT.
040900         07  FILLER          PIC X(5)  VALUE "+How+".
041000         07  FILLER          PIC X(5)  VALUE "@@@@@".
041100
041200 01  TEMPLATE-22.
041300     05  TOKEN-22-TYPE       PIC X(01) VALUE X'02'.
041400     05  TMPLT-22-LEN        PIC S9(4) COMP VALUE +6.
041500     05  TMPLT-22-TXT.
041600         07  FILLER          PIC X(6)  VALUE "+cow++".
041700         07  FILLER          PIC X(5)  VALUE "@@@@@".
041800
041900 01  TEMPLATE-23.
042000     05  TOKEN-23-TYPE       PIC X(01) VALUE X'02'.
042100     05  TMPLT-23-LEN        PIC S9(4) COMP VALUE +1.
042200     05  TMPLT-23-TXT.
042300         07  FILLER          PIC X(1)  VALUE "c".
042400         07  FILLER          PIC X(5)  VALUE "@@@@@".
042500
042600 01  TEMPLATE-24.
042700     05  TOKEN-24-TYPE       PIC X(01) VALUE X'02'.
042800     05  TMPLT-24-LEN        PIC S9(4) COMP VALUE +3.
042900     05  TMPLT-24-TXT.
043000         07  FILLER          PIC X(3)  VALUE "now".
043100         07  FILLER          PIC X(5)  VALUE "@@@@@".
043200
043300 01  TEMPLATE-25.
043400     05  TOKEN-25-TYPE       PIC X(01) VALUE X'04'.
043500     05  TOKEN-25-SIZE       PIC S9(4) COMP VALUE +260.
043600     05  TMPLT-25-LEN        PIC S9(4) COMP VALUE ZERO.
043700     05  TMPLT-25-TXT        PIC X(260) VALUE LOW-VALUE.
043800     05  FILLER REDEFINES TMPLT-25-TXT.
043900         07  TMPLT-25-POS    PIC S9(4) COMP-5 OCCURS 127.
044000     05  TMPLT-25-TXT-Z      PIC X(5)  VALUE "$$$$$".
044100
044200     SKIP2
044300 LOCAL-STORAGE SECTION.
044400 01  FILLER.
044500     03  LS-ASMODULE    PIC X(08).
044600     03  LS-LEMODULE    PIC X(08).
044700     03  LS-ASCA-PTR    POINTER.
044800     03  LS-ENCLAVE-RC  PIC S9(9) COMP SYNC.
044900     03  LE-MSG-DEST    PIC S9(9) COMP SYNC.
045000     03  LS-OPT         PIC X(01).
045100       88  INDIV-CALL       VALUE 'I'.
045200       88  PACKAGE-CALL     VALUE 'P'.
045300
045400 01  ACTION             PIC S9(9) COMP SYNC.
045500   88  ACTION-APPEND        VALUE +5.
045600   88  ACTION-CENTER        VALUE +6.
045700   88  ACTION-COUNT         VALUE +7.
045800   88  ACTION-DEEDIT        VALUE +8.
045900   88  ACTION-EDIT          VALUE +9.
046000   88  ACTION-JUSTIFY       VALUE +10.
046100   88  ACTION-LEFT          VALUE +11.
046200   88  ACTION-LEX           VALUE +12.
046300   88  ACTION-RIGHT         VALUE +13.
046400   88  ACTION-SPACE         VALUE +14.
046500   88  ACTION-STRDEL        VALUE +15.
046600   88  ACTION-STRFPOS       VALUE +16.
046700   88  ACTION-STRIP         VALUE +17.
046800   88  ACTION-STRISRT       VALUE +18.
046900   88  ACTION-STRLPOS       VALUE +19.
047000   88  ACTION-BMFPOS        VALUE +20.
047100   88  ACTION-STRREPL       VALUE +21.
047200   88  ACTION-SUBSTR        VALUE +22.
047300   88  ACTION-VAR           VALUE +23.
047400   88  ACTION-VHEX          VALUE +24.
047500   88  ACTION-WORDDEL       VALUE +25.
047600   88  ACTION-WORDFND       VALUE +26.
047700   88  ACTION-WORDPOS       VALUE +27.
047800   88  ACTION-HHEX          VALUE +28.
047900
048000 01  TEMPLATE-COUNT     PIC S9(9) COMP SYNC.
048100 01  FILLER.
048200     05  TEMPLATE-9 OCCURS 8 TIMES.
048300         07  TOKEN-9-TYPE    PIC X(01).
048400         07  TOKEN-9-SIZE    PIC S9(4) COMP.
048500         07  TMPLT-9-LEN     PIC S9(4) COMP.
048600         07  TMPLT-9-TXT     PIC X(25).
048700         07  TMPLT-9-TXT-Z   PIC X(5).
048800     05  TEMPLATE-10 OCCURS 8 TIMES.
048900         07  TOKEN-10-TYPE   PIC X(01).
049000         07  TMPLT-10-LEN    PIC S9(4) COMP.
049100         07  TMPLT-10-TXT    PIC X(25).
049200         07  TMPLT-10-TXT-A REDEFINES TMPLT-10-TXT PIC S9(1).
049300         07  TMPLT-10-TXT-B REDEFINES TMPLT-10-TXT PIC S9(2).
049400
049500 01  SOURCE-STRING.
049600     05  SRC-LEN             PIC S9(4) COMP.
049700     05  SRC-TXT             PIC X(100).
049800
049900 01  TEMP-FIELD.
050000     05  FW-BINARY           PIC  9(9) COMP.
050100
050200 01  LOOP-COUNT              PIC 9(4).
050300
050400 01  CTL-CARD.
050500     03 TEST-CASE            PIC X(03).
050600     03 FILLER               PIC X(77).
050700
050800     COPY AS5DMPRB.
050900     SKIP2
051000 LINKAGE SECTION.
051100     COPY AS5CA.
051200     EJECT
051300 PROCEDURE DIVISION USING
051400     ASCA-COMMAREA.
           SKIP2
       DECLARATIVES.
       0010-00-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL PROCEDURES.
           SKIP1
       0010-10-DEBUG.
           DISPLAY DEBUG-ITEM
           SKIP1
           CONTINUE.
      *0020-00-DEBUG SECTION.
      **   USE FOR DEBUGGING ON PARAGRAPH_NAME
           SKIP1
      *0020-10-DEBUG.
      *    STATEMENTS ...
           SKIP1
           CONTINUE.
      *0030-00-DEBUG SECTION.
      **   USE FOR DEBUGGING ON ALL VARIABLE_NAME
           SKIP1
      *0030-10-DEBUG.
      *    STATEMENTS ...
           SKIP2
           CONTINUE.
       END DECLARATIVES.
           SKIP2
051600 0090-00-INITIAL.
051700     DISPLAY WS-PGMID
051800          " Testing AS String services"
051900
052000*    CALL CEE3PR2 - Query PARM string long
052100     MOVE +258      TO WS-PARM-LENGTH
052200     MOVE "CEE3PR2" TO LS-LEMODULE
052300     CALL LS-LEMODULE
052400          USING WS-PARM-LENGTH
052500                WS-PARM-STMT
052600**              AS5FDBK-COND-AREA
052700                OMITTED
052800     END-CALL
052900
053000     IF WS-PARM-LENGTH = ZERO
053100       DISPLAY WS-PGMID
053200            " - PARM STATEMENT NOT SPECIFIED"
053300       MOVE +10 TO WS-PARM-LENGTH
053400       MOVE "INDIVIDUAL" TO WS-PARM-TEXT
053500       SET INDIV-CALL TO TRUE
053600     END-IF
053700
053800     IF WS-PARM-LENGTH > ZERO AND <= +10
053900       IF WS-PARM-TEXT (1:1) = "P"
054000         MOVE +10 TO WS-PARM-LENGTH
054100         MOVE "PACKAGE" TO WS-PARM-TEXT
054200         SET PACKAGE-CALL TO TRUE
054300       END-IF
054400     END-IF
054500
054600     DISPLAY WS-PGMID
054700          " - PROCESSING MODE IS " WS-PARM-TEXT
054800
054900     MOVE +2 TO LE-MSG-DEST
055000     SKIP2
055100*    * ------------------------------------------------------- *
055200*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
055300*    * ------------------------------------------------------- *
055400
055500     SET LS-ASCA-PTR TO NULL
055600     MOVE "ASU3I01B" TO LS-ASMODULE
055700     CALL LS-ASMODULE
055800          USING LS-ASCA-PTR
055900**              AS5FDBK-COND-AREA
056000                OMITTED
056100
056200     IF LS-ASCA-PTR = NULL
056300       DISPLAY WS-PGMID
056400            " ASU3I01B failed to create the ASCA"
056500       GOBACK
056600     END-IF
056700
056800     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
056900
057000     DISPLAY " "
057100
057200*    DUMP AS5CA COMMUNICATION AREA
057300     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
057400     MOVE +1 TO AS5DMPRB-NUMBER
057500     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
057600     MOVE "ASUMDHEX" TO LS-ASMODULE
057700     CALL LS-ASMODULE
057800          USING ASCA-COMMAREA
057900                AS5DMPRB-REQUEST-BLOCK
058000                ASCA-COMMAREA
058100**              AS5FDBK-COND-AREA
058200                OMITTED
058300
058400     DISPLAY " "
058500
058600     CONTINUE.
058700 0100-00-MAINLINE.
058800     SKIP2
058900     CONTINUE.
059000 0200-00-INPUT.
059100     ACCEPT CTL-CARD FROM SYSIN
059200     IF TEST-CASE = "999" OR "***" OR "END"
059300       DISPLAY WS-PGMID
059400            " NO MORE INPUT"
059500       GO TO 9000-00-RETURN
059600     END-IF
059700
059800     IF TEST-CASE NUMERIC
059900       GO TO TEST-CASE-005
060000     ELSE
060100       IF TEST-CASE = "ALL"
060200         GO TO TEST-CASE-005
060300       ELSE
060400         DISPLAY WS-PGMID
060500              " NO VALID INPUT"
060600         GO TO 9000-00-RETURN
060700       END-IF
060800     END-IF
060900     SKIP2
061000     CONTINUE.
061100 TEST-CASE-005.
061200
061300     IF NOT (TEST-CASE = "ALL" OR "005")
061400       GO TO TEST-CASE-006
061500     END-IF
061600
061700*    * ------------------------------------------------------- *
061800*    * CALL STRING SERVICE APPEND
061900*    * ------------------------------------------------------- *
062000     SKIP1
062100     MOVE ZERO TO RO-START
062200                  RO-COUNT
062300                  RO-PSA-LEN
062400     SET RO-FLAG-NONE  TO TRUE
062500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
062600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
062700     MOVE +1   TO TEMPLATE-COUNT
062800     MOVE ZERO TO TMPLT-12-LEN
062900     MOVE LOW-VALUE TO TMPLT-12-TXT
063000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
063100     IF PACKAGE-CALL
063200*      CALL ASUDAPND TO PERFORM SERVICE STRING APPEND
063300       SET ACTION-APPEND TO TRUE
063400       MOVE "ASUSSVCB" TO LS-ASMODULE
063500       CALL LS-ASMODULE
063600            USING ASCA-COMMAREA
063700                  ACTION
063800                  AS-REQUEST-OPTIONS
063900                  SOURCE-STRING
064000                  TEMPLATE-COUNT
064100                  TEMPLATE-12
064200                  AS5FDBK-COND-AREA
064300     ELSE
064400       MOVE "ASUDAPND" TO LS-ASMODULE
064500       CALL LS-ASMODULE
064600            USING ASCA-COMMAREA
064700                  AS-REQUEST-OPTIONS
064800                  SOURCE-STRING
064900                  TEMPLATE-COUNT
065000                  TEMPLATE-12
065100                  AS5FDBK-COND-AREA
065200     END-IF
065300
065400     IF AS5FDBK-SEVNBR > ZERO
065500       DISPLAY WS-PGMID
065600            " RETURN CODE: " AS5FDBK-SEVNBR
065700            " MESSAGE NBR: " AS5FDBK-MSGNBR
065800     END-IF
065900
066000     DISPLAY WS-PGMID
066100          " TEST CASE 005.A - APPEND"
066200     DISPLAY WS-PGMID
066300          " MIXED CASE / NO CASE"
066400     DISPLAY WS-PGMID
066500          " COUNT:" RO-COUNT
066600     DISPLAY WS-PGMID
066700          " SOURCE:" SRC-TXT
066800     DISPLAY WS-PGMID
066900          " OUTPUT LEN (51):" TMPLT-12-LEN
067000     DISPLAY WS-PGMID
067100          " RESULT:" TMPLT-12-TXT
067200     DISPLAY WS-PGMID
067300          " "
067400          TMPLT-12-TXT-Z
067500     DISPLAY " "
067600     SKIP2
067700*    * ------------------------------------------------------- *
067800*    * CALL STRING SERVICE APPEND
067900*    * ------------------------------------------------------- *
068000     SKIP1
068100     MOVE ZERO TO RO-START
068200                  RO-COUNT
068300                  RO-PSA-LEN
068400     SET RO-FLAG-NONE  TO TRUE
068500     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
068600*    "++TO++BE,+OR+NOT+TO+BE++++"
068700     MOVE +1   TO TEMPLATE-COUNT
068800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
068900     IF PACKAGE-CALL
069000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
069100       SET ACTION-APPEND TO TRUE
069200       MOVE "ASUSSVCB" TO LS-ASMODULE
069300       CALL LS-ASMODULE
069400            USING ASCA-COMMAREA
069500                  ACTION
069600                  AS-REQUEST-OPTIONS
069700                  SOURCE-STRING
069800                  TEMPLATE-COUNT
069900                  TEMPLATE-12
070000                  AS5FDBK-COND-AREA
070100     ELSE
070200       MOVE "ASUDAPND" TO LS-ASMODULE
070300       CALL LS-ASMODULE
070400            USING ASCA-COMMAREA
070500                  AS-REQUEST-OPTIONS
070600                  SOURCE-STRING
070700                  TEMPLATE-COUNT
070800                  TEMPLATE-12
070900                  AS5FDBK-COND-AREA
071000     END-IF
071100
071200     IF AS5FDBK-SEVNBR > ZERO
071300       DISPLAY WS-PGMID
071400            " RETURN CODE: " AS5FDBK-SEVNBR
071500            " MESSAGE NBR: " AS5FDBK-MSGNBR
071600     END-IF
071700
071800     DISPLAY WS-PGMID
071900          " TEST CASE 005.B - APPEND"
072000     DISPLAY WS-PGMID
072100          " UPPER CASE / NO CASE"
072200     DISPLAY WS-PGMID
072300          " COUNT:" RO-COUNT
072400     DISPLAY WS-PGMID
072500          " SOURCE:" SRC-TXT
072600     DISPLAY WS-PGMID
072700          " OUTPUT LEN (77):" TMPLT-12-LEN
072800     DISPLAY WS-PGMID
072900          " RESULT:" TMPLT-12-TXT
073000     DISPLAY WS-PGMID
073100          " "
073200          TMPLT-12-TXT-Z
073300     DISPLAY " "
073400     SKIP2
073500*    * ------------------------------------------------------- *
073600*    * CALL STRING SERVICE APPEND
073700*    * ------------------------------------------------------- *
073800     SKIP1
073900     MOVE ZERO TO RO-START
074000                  RO-COUNT
074100                  RO-PSA-LEN
074200     SET RO-FLAG-NONE  TO TRUE
074300     MOVE WS-SOURCE-STRING-12 TO SOURCE-STRING
074400*    "abc"
074500     MOVE +1   TO TEMPLATE-COUNT
074600     MOVE ZERO TO TMPLT-7-LEN
074700     MOVE LOW-VALUE TO TMPLT-7-TXT
074800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
074900     IF PACKAGE-CALL
075000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
075100       SET ACTION-APPEND TO TRUE
075200       MOVE "ASUSSVCB" TO LS-ASMODULE
075300       CALL LS-ASMODULE
075400            USING ASCA-COMMAREA
075500                  ACTION
075600                  AS-REQUEST-OPTIONS
075700                  SOURCE-STRING
075800                  TEMPLATE-COUNT
075900                  TEMPLATE-7
076000                  AS5FDBK-COND-AREA
076100     ELSE
076200       MOVE "ASUDAPND" TO LS-ASMODULE
076300       CALL LS-ASMODULE
076400            USING ASCA-COMMAREA
076500                  AS-REQUEST-OPTIONS
076600                  SOURCE-STRING
076700                  TEMPLATE-COUNT
076800                  TEMPLATE-7
076900                  AS5FDBK-COND-AREA
077000     END-IF
077100
077200     IF AS5FDBK-SEVNBR > ZERO
077300       DISPLAY WS-PGMID
077400            " RETURN CODE: " AS5FDBK-SEVNBR
077500            " MESSAGE NBR: " AS5FDBK-MSGNBR
077600     END-IF
077700
077800     DISPLAY WS-PGMID
077900          " TEST CASE 005.C - APPEND"
078000     DISPLAY WS-PGMID
078100          " MIXED CASE / NO CASE"
078200     DISPLAY WS-PGMID
078300          " COUNT:" RO-COUNT
078400     DISPLAY WS-PGMID
078500          " SOURCE:" SRC-TXT
078600     DISPLAY WS-PGMID
078700          " OUTPUT LEN (3):" TMPLT-7-LEN
078800     DISPLAY WS-PGMID
078900          " RESULT:" TMPLT-7-TXT
079000     DISPLAY WS-PGMID
079100          " "
079200          TMPLT-7-TXT-Z
079300     DISPLAY " "
079400     SKIP2
079500*    * ------------------------------------------------------- *
079600*    * CALL STRING SERVICE APPEND
079700*    * ------------------------------------------------------- *
079800     SKIP1
079900     MOVE ZERO TO RO-START
080000                  RO-COUNT
080100                  RO-PSA-LEN
080200     SET RO-FLAG-NONE  TO TRUE
080300     MOVE WS-SOURCE-STRING-13 TO SOURCE-STRING
080400*    "DEF"
080500     MOVE +1   TO TEMPLATE-COUNT
080600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
080700     IF PACKAGE-CALL
080800*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
080900       SET ACTION-APPEND TO TRUE
081000       MOVE "ASUSSVCB" TO LS-ASMODULE
081100       CALL LS-ASMODULE
081200            USING ASCA-COMMAREA
081300                  ACTION
081400                  AS-REQUEST-OPTIONS
081500                  SOURCE-STRING
081600                  TEMPLATE-COUNT
081700                  TEMPLATE-7
081800                  AS5FDBK-COND-AREA
081900     ELSE
082000       MOVE "ASUDAPND" TO LS-ASMODULE
082100       CALL LS-ASMODULE
082200            USING ASCA-COMMAREA
082300                  AS-REQUEST-OPTIONS
082400                  SOURCE-STRING
082500                  TEMPLATE-COUNT
082600                  TEMPLATE-7
082700                  AS5FDBK-COND-AREA
082800     END-IF
082900
083000     IF AS5FDBK-SEVNBR > ZERO
083100       DISPLAY WS-PGMID
083200            " RETURN CODE: " AS5FDBK-SEVNBR
083300            " MESSAGE NBR: " AS5FDBK-MSGNBR
083400     END-IF
083500
083600     DISPLAY WS-PGMID
083700          " TEST CASE 005.D - APPEND"
083800     DISPLAY WS-PGMID
083900          " MIXED CASE / NO CASE"
084000     DISPLAY WS-PGMID
084100          " COUNT:" RO-COUNT
084200     DISPLAY WS-PGMID
084300         " SOURCE:" SRC-TXT
084400     DISPLAY WS-PGMID
084500          " OUTPUT LEN (6):" TMPLT-7-LEN
084600     DISPLAY WS-PGMID
084700          " RESULT:" TMPLT-7-TXT
084800     DISPLAY WS-PGMID
084900          " "
085000          TMPLT-7-TXT-Z
085100     DISPLAY " "
085200     SKIP2
085300*    * ------------------------------------------------------- *
085400*    * CALL STRING SERVICE APPEND
085500*    * ------------------------------------------------------- *
085600     SKIP1
085700     MOVE ZERO TO RO-START
085800                  RO-COUNT
085900                  RO-PSA-LEN
086000     SET RO-FLAG-NONE  TO TRUE
086100     MOVE WS-SOURCE-STRING-14 TO SOURCE-STRING
086200*    "ghi"
086300     MOVE +1   TO TEMPLATE-COUNT
086400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
086500     IF PACKAGE-CALL
086600*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
086700       SET ACTION-APPEND TO TRUE
086800       MOVE "ASUSSVCB" TO LS-ASMODULE
086900       CALL LS-ASMODULE
087000            USING ASCA-COMMAREA
087100                  ACTION
087200                  AS-REQUEST-OPTIONS
087300                  SOURCE-STRING
087400                  TEMPLATE-COUNT
087500                  TEMPLATE-7
087600                  AS5FDBK-COND-AREA
087700     ELSE
087800       MOVE "ASUDAPND" TO LS-ASMODULE
087900       CALL LS-ASMODULE
088000            USING ASCA-COMMAREA
088100                  AS-REQUEST-OPTIONS
088200                  SOURCE-STRING
088300                  TEMPLATE-COUNT
088400                  TEMPLATE-7
088500                  AS5FDBK-COND-AREA
088600     END-IF
088700
088800     IF AS5FDBK-SEVNBR > ZERO
088900       DISPLAY WS-PGMID
089000            " RETURN CODE: " AS5FDBK-SEVNBR
089100            " MESSAGE NBR: " AS5FDBK-MSGNBR
089200     END-IF
089300
089400     DISPLAY WS-PGMID
089500          " TEST CASE 005.E - APPEND"
089600     DISPLAY WS-PGMID
089700          " MIXED CASE / NO CASE"
089800     DISPLAY WS-PGMID
089900          " COUNT:" RO-COUNT
090000     DISPLAY WS-PGMID
090100          " SOURCE:" SRC-TXT
090200     DISPLAY WS-PGMID
090300          " OUTPUT LEN (9):" TMPLT-7-LEN
090400     DISPLAY WS-PGMID
090500          " RESULT:" TMPLT-7-TXT
090600     DISPLAY WS-PGMID
090700          " "
090800          TMPLT-7-TXT-Z
090900     DISPLAY " "
091000     SKIP2
091100*    * ------------------------------------------------------- *
091200*    * CALL STRING SERVICE APPEND
091300*    * ------------------------------------------------------- *
091400     SKIP1
091500     MOVE ZERO TO RO-START
091600                  RO-COUNT
091700                  RO-PSA-LEN
091800     SET RO-FLAG-NONE  TO TRUE
091900     MOVE WS-SOURCE-STRING-15 TO SOURCE-STRING
092000*    "JKL"
092100     MOVE +1   TO TEMPLATE-COUNT
092200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
092300     IF PACKAGE-CALL
092400*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
092500       SET ACTION-APPEND TO TRUE
092600       MOVE "ASUSSVCB" TO LS-ASMODULE
092700       CALL LS-ASMODULE
092800            USING ASCA-COMMAREA
092900                  ACTION
093000                  AS-REQUEST-OPTIONS
093100                  SOURCE-STRING
093200                  TEMPLATE-COUNT
093300                  TEMPLATE-7
093400                  AS5FDBK-COND-AREA
093500     ELSE
093600       MOVE "ASUDAPND" TO LS-ASMODULE
093700       CALL LS-ASMODULE
093800            USING ASCA-COMMAREA
093900                  AS-REQUEST-OPTIONS
094000                  SOURCE-STRING
094100                  TEMPLATE-COUNT
094200                  TEMPLATE-7
094300                  AS5FDBK-COND-AREA
094400     END-IF
094500
094600     IF AS5FDBK-SEVNBR > ZERO
094700       DISPLAY WS-PGMID
094800            " RETURN CODE: " AS5FDBK-SEVNBR
094900            " MESSAGE NBR: " AS5FDBK-MSGNBR
095000     END-IF
095100
095200     DISPLAY WS-PGMID
095300          " TEST CASE 005.F - APPEND"
095400     DISPLAY WS-PGMID
095500          " UPPER CASE / NO CASE"
095600     DISPLAY WS-PGMID
095700          " COUNT:" RO-COUNT
095800     DISPLAY WS-PGMID
095900          " SOURCE:" SRC-TXT
096000     DISPLAY WS-PGMID
096100          " OUTPUT LEN (12):" TMPLT-7-LEN
096200     DISPLAY WS-PGMID
096300          " RESULT:" TMPLT-7-TXT
096400     DISPLAY WS-PGMID
096500          " "
096600          TMPLT-7-TXT-Z
096700     DISPLAY " "
096800     SKIP2
096900*    * ------------------------------------------------------- *
097000*    * CALL STRING SERVICE APPEND
097100*    * ------------------------------------------------------- *
097200     SKIP1
097300     MOVE ZERO TO RO-START
097400                  RO-COUNT
097500                  RO-PSA-LEN
097600     SET RO-FLAG-NONE  TO TRUE
097700     MOVE WS-SOURCE-STRING-12 TO SOURCE-STRING
097800*    "abc"
097900     MOVE +1   TO TEMPLATE-COUNT
098000     MOVE ZERO TO TMPLT-7-LEN
098100     MOVE LOW-VALUE TO TMPLT-7-TXT
098200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
098300     IF PACKAGE-CALL
098400*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
098500       SET ACTION-APPEND TO TRUE
098600       MOVE "ASUSSVCB" TO LS-ASMODULE
098700       CALL LS-ASMODULE
098800            USING ASCA-COMMAREA
098900                  ACTION
099000                  AS-REQUEST-OPTIONS
099100                  SOURCE-STRING
099200                  TEMPLATE-COUNT
099300                  TEMPLATE-7
099400                  AS5FDBK-COND-AREA
099500     ELSE
099600       MOVE "ASUDAPND" TO LS-ASMODULE
099700       CALL LS-ASMODULE
099800            USING ASCA-COMMAREA
099900                  AS-REQUEST-OPTIONS
100000                  SOURCE-STRING
100100                  TEMPLATE-COUNT
100200                  TEMPLATE-7
100300                  AS5FDBK-COND-AREA
100400     END-IF
100500
100600     IF AS5FDBK-SEVNBR > ZERO
100700       DISPLAY WS-PGMID
100800            " RETURN CODE: " AS5FDBK-SEVNBR
100900            " MESSAGE NBR: " AS5FDBK-MSGNBR
101000     END-IF
101100
101200     DISPLAY WS-PGMID
101300          " TEST CASE 005.G - APPEND"
101400     DISPLAY WS-PGMID
101500          " MIXED CASE / NO CASE"
101600     DISPLAY WS-PGMID
101700          " COUNT:" RO-COUNT
101800     DISPLAY WS-PGMID
101900          " SOURCE:" SRC-TXT
102000     DISPLAY WS-PGMID
102100          " OUTPUT LEN (3):" TMPLT-7-LEN
102200     DISPLAY WS-PGMID
102300          " RESULT:" TMPLT-7-TXT
102400     DISPLAY WS-PGMID
102500          " "
102600          TMPLT-7-TXT-Z
102700     DISPLAY " "
102800     SKIP2
102900*    * ------------------------------------------------------- *
103000*    * CALL STRING SERVICE APPEND
103100*    * ------------------------------------------------------- *
103200     SKIP1
103300     MOVE ZERO TO RO-START
103400                  RO-COUNT
103500                  RO-PSA-LEN
103600     MOVE +3   TO RO-COUNT
103700     SET RO-FLAG-NONE  TO TRUE
103800     MOVE WS-SOURCE-STRING-13 TO SOURCE-STRING
103900*    "DEF"
104000     MOVE +1   TO TEMPLATE-COUNT
104100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
104200     IF PACKAGE-CALL
104300*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
104400       SET ACTION-APPEND TO TRUE
104500       MOVE "ASUSSVCB" TO LS-ASMODULE
104600       CALL LS-ASMODULE
104700            USING ASCA-COMMAREA
104800                  ACTION
104900                  AS-REQUEST-OPTIONS
105000                  SOURCE-STRING
105100                  TEMPLATE-COUNT
105200                  TEMPLATE-7
105300                  AS5FDBK-COND-AREA
105400     ELSE
105500       MOVE "ASUDAPND" TO LS-ASMODULE
105600       CALL LS-ASMODULE
105700            USING ASCA-COMMAREA
105800                  AS-REQUEST-OPTIONS
105900                  SOURCE-STRING
106000                  TEMPLATE-COUNT
106100                  TEMPLATE-7
106200                  AS5FDBK-COND-AREA
106300     END-IF
106400
106500     IF AS5FDBK-SEVNBR > ZERO
106600       DISPLAY WS-PGMID
106700            " RETURN CODE: " AS5FDBK-SEVNBR
106800            " MESSAGE NBR: " AS5FDBK-MSGNBR
106900     END-IF
107000
107100     DISPLAY WS-PGMID
107200          " TEST CASE 005.H - APPEND"
107300     DISPLAY WS-PGMID
107400          " MIXED CASE / NO CASE"
107500     DISPLAY WS-PGMID
107600          " COUNT:" RO-COUNT
107700     DISPLAY WS-PGMID
107800          " SOURCE:" SRC-TXT
107900     DISPLAY WS-PGMID
108000          " OUTPUT LEN (9):" TMPLT-7-LEN
108100     DISPLAY WS-PGMID
108200          " RESULT:" TMPLT-7-TXT
108300     DISPLAY WS-PGMID
108400          " "
108500          TMPLT-7-TXT-Z
108600     DISPLAY " "
108700     SKIP2
108800*    * ------------------------------------------------------- *
108900*    * CALL STRING SERVICE APPEND
109000*    * ------------------------------------------------------- *
109100     SKIP1
109200     MOVE ZERO TO RO-START
109300                  RO-COUNT
109400                  RO-PSA-LEN
109500     SET RO-FLAG-NONE  TO TRUE
109600     MOVE +3   TO RO-COUNT
109700     MOVE WS-SOURCE-STRING-14 TO SOURCE-STRING
109800*    "ghi"
109900     MOVE +1   TO TEMPLATE-COUNT
110000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
110100     IF PACKAGE-CALL
110200*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
110300       SET ACTION-APPEND TO TRUE
110400       MOVE "ASUSSVCB" TO LS-ASMODULE
110500       CALL LS-ASMODULE
110600            USING ASCA-COMMAREA
110700                  ACTION
110800                  AS-REQUEST-OPTIONS
110900                  SOURCE-STRING
111000                  TEMPLATE-COUNT
111100                  TEMPLATE-7
111200                  AS5FDBK-COND-AREA
111300     ELSE
111400       MOVE "ASUDAPND" TO LS-ASMODULE
111500       CALL LS-ASMODULE
111600            USING ASCA-COMMAREA
111700                  AS-REQUEST-OPTIONS
111800                  SOURCE-STRING
111900                  TEMPLATE-COUNT
112000                  TEMPLATE-7
112100                  AS5FDBK-COND-AREA
112200     END-IF
112300
112400     IF AS5FDBK-SEVNBR > ZERO
112500       DISPLAY WS-PGMID
112600            " RETURN CODE: " AS5FDBK-SEVNBR
112700            " MESSAGE NBR: " AS5FDBK-MSGNBR
112800     END-IF
112900
113000     DISPLAY WS-PGMID
113100          " TEST CASE 005.I - APPEND"
113200     DISPLAY WS-PGMID
113300          " MIXED CASE / NO CASE"
113400     DISPLAY WS-PGMID
113500          " COUNT:" RO-COUNT
113600     DISPLAY WS-PGMID
113700          " SOURCE:" SRC-TXT
113800     DISPLAY WS-PGMID
113900          " OUTPUT LEN (15):" TMPLT-7-LEN
114000     DISPLAY WS-PGMID
114100          " RESULT:" TMPLT-7-TXT
114200     DISPLAY WS-PGMID
114300          " "
114400          TMPLT-7-TXT-Z
114500     DISPLAY " "
114600     SKIP2
114700*    * ------------------------------------------------------- *
114800*    * CALL STRING SERVICE APPEND
114900*    * ------------------------------------------------------- *
115000     SKIP1
115100     MOVE ZERO TO RO-START
115200                  RO-COUNT
115300                  RO-PSA-LEN
115400     SET RO-FLAG-NONE  TO TRUE
115500     MOVE +3   TO RO-COUNT
115600     MOVE WS-SOURCE-STRING-15 TO SOURCE-STRING
115700*    "JKL"
115800     MOVE +1   TO TEMPLATE-COUNT
115900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
116000     IF PACKAGE-CALL
116100*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
116200       SET ACTION-APPEND TO TRUE
116300       MOVE "ASUSSVCB" TO LS-ASMODULE
116400       CALL LS-ASMODULE
116500            USING ASCA-COMMAREA
116600                  ACTION
116700                  AS-REQUEST-OPTIONS
116800                  SOURCE-STRING
116900                  TEMPLATE-COUNT
117000                  TEMPLATE-7
117100                  AS5FDBK-COND-AREA
117200     ELSE
117300       MOVE "ASUDAPND" TO LS-ASMODULE
117400       CALL LS-ASMODULE
117500            USING ASCA-COMMAREA
117600                  AS-REQUEST-OPTIONS
117700                  SOURCE-STRING
117800                  TEMPLATE-COUNT
117900                  TEMPLATE-7
118000                  AS5FDBK-COND-AREA
118100     END-IF
118200
118300     IF AS5FDBK-SEVNBR > ZERO
118400       DISPLAY WS-PGMID
118500            " RETURN CODE: " AS5FDBK-SEVNBR
118600            " MESSAGE NBR: " AS5FDBK-MSGNBR
118700     END-IF
118800
118900     DISPLAY WS-PGMID
119000          " TEST CASE 005.J - APPEND"
119100     DISPLAY WS-PGMID
119200          " UPPER CASE / NO CASE"
119300     DISPLAY WS-PGMID
119400          " COUNT:" RO-COUNT
119500     DISPLAY WS-PGMID
119600          " SOURCE:" SRC-TXT
119700     DISPLAY WS-PGMID
119800          " OUTPUT LEN (21):" TMPLT-7-LEN
119900     DISPLAY WS-PGMID
120000          " RESULT:" TMPLT-7-TXT
120100     DISPLAY WS-PGMID
120200          " "
120300          TMPLT-7-TXT-Z
120400     DISPLAY " "
120500     SKIP2
120600*    * ------------------------------------------------------- *
120700*    * CALL STRING SERVICE APPEND (OVERFLOW)
120800*    * ------------------------------------------------------- *
120900     SKIP1
121000     MOVE ZERO TO RO-START
121100                  RO-COUNT
121200                  RO-PSA-LEN
121300     SET RO-FLAG-NONE  TO TRUE
121400     MOVE +3   TO RO-COUNT
121500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
121600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
121700     MOVE +1   TO TEMPLATE-COUNT
121800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
121900     IF PACKAGE-CALL
122000*      CALL ASUSSVCB TO PERFORM SERVICE STRING APPEND
122100       SET ACTION-APPEND TO TRUE
122200       MOVE "ASUSSVCB" TO LS-ASMODULE
122300       CALL LS-ASMODULE
122400            USING ASCA-COMMAREA
122500                  ACTION
122600                  AS-REQUEST-OPTIONS
122700                  SOURCE-STRING
122800                  TEMPLATE-COUNT
122900                  TEMPLATE-7
123000                  AS5FDBK-COND-AREA
123100     ELSE
123200       MOVE "ASUDAPND" TO LS-ASMODULE
123300       CALL LS-ASMODULE
123400            USING ASCA-COMMAREA
123500                  AS-REQUEST-OPTIONS
123600                  SOURCE-STRING
123700                  TEMPLATE-COUNT
123800                  TEMPLATE-7
123900                  AS5FDBK-COND-AREA
124000     END-IF
124100
124200     IF AS5FDBK-SEVNBR > ZERO
124300       DISPLAY WS-PGMID
124400            " RETURN CODE: " AS5FDBK-SEVNBR
124500            " MESSAGE NBR: " AS5FDBK-MSGNBR
124600     END-IF
124700
124800     DISPLAY WS-PGMID
124900          " TEST CASE 005.K - APPEND (OVERFLOW)"
125000     DISPLAY WS-PGMID
125100          " MIXED CASE / NO CASE"
125200     DISPLAY WS-PGMID
125300          " COUNT:" RO-COUNT
125400     DISPLAY WS-PGMID
125500          " SOURCE:" SRC-TXT
125600     DISPLAY WS-PGMID
125700          " OUTPUT LEN (21):" TMPLT-7-LEN
125800     DISPLAY WS-PGMID
125900          " RESULT:" TMPLT-7-TXT
126000     DISPLAY WS-PGMID
126100          " "
126200          TMPLT-7-TXT-Z
126300     DISPLAY " "
126400     SKIP2.
126500     CONTINUE.
126600 TEST-CASE-006.
126700
126800     IF NOT (TEST-CASE = "ALL" OR "006")
126900       GO TO TEST-CASE-007
127000     END-IF
127100
127200*    * ------------------------------------------------------- *
127300*    * CALL STRING SERVICE CENTER
127400*    * ------------------------------------------------------- *
127500     SKIP1
127600     MOVE ZERO TO RO-START
127700                  RO-COUNT
127800                  RO-PSA-LEN
127900     SET RO-FLAG-UC TO TRUE
128000     MOVE WS-SOURCE-STRING-3 TO SOURCE-STRING
128100*    "1st National Bank"
128200     MOVE +1   TO TEMPLATE-COUNT
128300     MOVE ZERO TO TMPLT-6-LEN
128400     MOVE LOW-VALUE TO TMPLT-6-TXT
128500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
128600     IF PACKAGE-CALL
128700*      CALL ASUSSVCB TO PERFORM SERVICE CENTER
128800       SET ACTION-CENTER TO TRUE
128900       MOVE "ASUSSVCB" TO LS-ASMODULE
129000       CALL LS-ASMODULE
129100            USING ASCA-COMMAREA
129200                  ACTION
129300                  AS-REQUEST-OPTIONS
129400                  SOURCE-STRING
129500                  TEMPLATE-COUNT
129600                  TEMPLATE-6
129700                  AS5FDBK-COND-AREA
129800     ELSE
129900       MOVE "ASUDCNTR" TO LS-ASMODULE
130000       CALL LS-ASMODULE
130100            USING ASCA-COMMAREA
130200                  AS-REQUEST-OPTIONS
130300                  SOURCE-STRING
130400                  TEMPLATE-COUNT
130500                  TEMPLATE-6
130600                  AS5FDBK-COND-AREA
130700     END-IF
130800
130900     IF AS5FDBK-SEVNBR > ZERO
131000       DISPLAY WS-PGMID
131100            " RETURN CODE: " AS5FDBK-SEVNBR
131200            " MESSAGE NBR: " AS5FDBK-MSGNBR
131300     END-IF
131400
131500     DISPLAY WS-PGMID
131600          " TEST CASE 006 - CENTER (19 PADS IN FRONT)"
131700     DISPLAY WS-PGMID
131800          " MIXED CASE / UPPER CASE"
131900     DISPLAY WS-PGMID
132000          " SOURCE:" SRC-TXT
132100     DISPLAY WS-PGMID
132200          " OUTPUT LEN (55):" TMPLT-6-LEN
132300     DISPLAY WS-PGMID
132400          " RESULT:" TMPLT-6-TXT
132500     DISPLAY WS-PGMID
132600          " "
132700          TMPLT-6-TXT-Z
132800     DISPLAY " "
132900     SKIP2.
133000     CONTINUE.
133100 TEST-CASE-007.
133200
133300     IF NOT (TEST-CASE = "ALL" OR "007")
133400       GO TO TEST-CASE-008
133500     END-IF
133600
133700*    * ------------------------------------------------------- *
133800*    * CALL STRING SERVICE - COUNT
133900*    * ------------------------------------------------------- *
134000     SKIP1
134100     MOVE ZERO TO RO-START
134200                  RO-COUNT
134300                  RO-PSA-LEN
134400     SET RO-FLAG-NONE TO TRUE
134500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
134600*    "+HOW+NOW+BROWN+COW++"
134700     MOVE +2   TO TEMPLATE-COUNT
134800     MOVE ZERO TO TMPLT-1-LEN
134900     MOVE ZERO TO TMPLT-1-TXT-A
135000                  TMPLT-1-TXT-B
135100                  TMPLT-1-TXT-C
135200     MOVE ZERO TO TMPLT-3-LEN
135300     MOVE LOW-VALUE TO TMPLT-3-TXT
135400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
135500     IF PACKAGE-CALL
135600*      CALL ASUSSVCB TO PERFORM SERVICE COUNT
135700       SET ACTION-COUNT TO TRUE
135800       MOVE "ASUSSVCB" TO LS-ASMODULE
135900       CALL LS-ASMODULE
136000            USING ASCA-COMMAREA
136100                  ACTION
136200                  AS-REQUEST-OPTIONS
136300                  SOURCE-STRING
136400                  TEMPLATE-COUNT
136500                  TEMPLATE-1
136600                  TEMPLATE-3
136700                  AS5FDBK-COND-AREA
136800     ELSE
136900       MOVE "ASUDSCNT" TO LS-ASMODULE
137000       CALL LS-ASMODULE
137100            USING ASCA-COMMAREA
137200                  AS-REQUEST-OPTIONS
137300                  SOURCE-STRING
137400                  TEMPLATE-COUNT
137500                  TEMPLATE-1
137600                  TEMPLATE-3
137700                  AS5FDBK-COND-AREA
137800     END-IF
137900
138000     IF AS5FDBK-SEVNBR > ZERO
138100       DISPLAY WS-PGMID
138200            " RETURN CODE: " AS5FDBK-SEVNBR
138300            " MESSAGE NBR: " AS5FDBK-MSGNBR
138400     END-IF
138500
138600     DISPLAY WS-PGMID
138700          " TEST CASE 007.A - COUNT"
138800     DISPLAY WS-PGMID
138900          " MIXED CASE / MIXED CASE"
139000     DISPLAY WS-PGMID
139100          " SOURCE:" SRC-TXT
139200     DISPLAY WS-PGMID
139300          " SOURCE LEN (18):" TMPLT-1-TXT-A
139400     DISPLAY WS-PGMID
139500          " CHAR COUNT (14):" TMPLT-1-TXT-B
139600     DISPLAY WS-PGMID
139700          " WORD COUNT  (4):" TMPLT-1-TXT-C
139800     DISPLAY WS-PGMID
139900          " "
140000          TMPLT-1-TXT-Z
140100     DISPLAY " "
140200     SKIP2
140300*    * ------------------------------------------------------- *
140400*    * CALL STRING SERVICE COUNT
140500*    * ------------------------------------------------------- *
140600     SKIP1
140700     MOVE ZERO TO RO-START
140800                  RO-COUNT
140900                  RO-PSA-LEN
141000     SET RO-FLAG-NONE TO TRUE
141100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
141200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
141300     MOVE +2   TO TEMPLATE-COUNT
141400     MOVE ZERO TO TMPLT-1-LEN
141500     MOVE ZERO TO TMPLT-1-TXT-A
141600                  TMPLT-1-TXT-B
141700                  TMPLT-1-TXT-C
141800     MOVE ZERO TO TMPLT-3-LEN
141900     MOVE LOW-VALUE TO TMPLT-3-TXT
142000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
142100     IF PACKAGE-CALL
142200*      CALL ASUSSVCB TO PERFORM SERVICE COUNT
142300       SET ACTION-COUNT TO TRUE
142400       MOVE "ASUSSVCB" TO LS-ASMODULE
142500       CALL LS-ASMODULE
142600            USING ASCA-COMMAREA
142700                  ACTION
142800                  AS-REQUEST-OPTIONS
142900                  SOURCE-STRING
143000                  TEMPLATE-COUNT
143100                  TEMPLATE-1
143200                  TEMPLATE-3
143300                  AS5FDBK-COND-AREA
143400     ELSE
143500       MOVE "ASUDSCNT" TO LS-ASMODULE
143600       CALL LS-ASMODULE
143700            USING ASCA-COMMAREA
143800                  AS-REQUEST-OPTIONS
143900                  SOURCE-STRING
144000                  TEMPLATE-COUNT
144100                  TEMPLATE-1
144200                  TEMPLATE-3
144300                  AS5FDBK-COND-AREA
144400     END-IF
144500
144600     IF AS5FDBK-SEVNBR > ZERO
144700       DISPLAY WS-PGMID
144800            " RETURN CODE: " AS5FDBK-SEVNBR
144900            " MESSAGE NBR: " AS5FDBK-MSGNBR
145000     END-IF
145100
145200     DISPLAY WS-PGMID
145300          " TEST CASE 007.B - COUNT"
145400     DISPLAY WS-PGMID
145500          " MIXED CASE / MIXED CASE"
145600     DISPLAY WS-PGMID
145700          " SOURCE:" SRC-TXT
145800     DISPLAY WS-PGMID
145900          " SOURCE LEN (47):" TMPLT-1-TXT-A
146000     DISPLAY WS-PGMID
146100          " CHAR COUNT (37):" TMPLT-1-TXT-B
146200     DISPLAY WS-PGMID
146300          " WORD COUNT (11):" TMPLT-1-TXT-C
146400     DISPLAY WS-PGMID
146500          " "
146600          TMPLT-1-TXT-Z
146700     DISPLAY " "
146800     SKIP2
146900     CONTINUE.
147000 TEST-CASE-008.
147100
147200     IF NOT (TEST-CASE = "ALL" OR "008")
147300       GO TO TEST-CASE-009
147400     END-IF
147500
147600*    * ------------------------------------------------------- *
147700*    * CALL STRING SERVICE DE-EDIT (123456789)
147800*    * ------------------------------------------------------- *
147900     SKIP1
148000     MOVE ZERO TO RO-START
148100                  RO-COUNT
148200                  RO-PSA-LEN
148300     SET RO-FLAG-NONE  TO TRUE
148400     MOVE WS-SOURCE-STRING-6 TO SOURCE-STRING
148500*    "123456789"
148600     MOVE +1   TO TEMPLATE-COUNT
148700     MOVE ZERO TO TMPLT-11-LEN
148800     MOVE LOW-VALUE TO TMPLT-11-TXT
148900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
149000     IF PACKAGE-CALL
149100*      CALL ASUSSVCB TO PERFORM SERVICE STRING DE-EDIT
149200       SET ACTION-DEEDIT TO TRUE
149300       MOVE "ASUSSVCB" TO LS-ASMODULE
149400       CALL LS-ASMODULE
149500            USING ASCA-COMMAREA
149600                  ACTION
149700                  AS-REQUEST-OPTIONS
149800                  SOURCE-STRING
149900                  TEMPLATE-COUNT
150000                  TEMPLATE-11
150100                  AS5FDBK-COND-AREA
150200     ELSE
150300       MOVE "ASUDDEDT" TO LS-ASMODULE
150400       CALL LS-ASMODULE
150500            USING ASCA-COMMAREA
150600                  AS-REQUEST-OPTIONS
150700                  SOURCE-STRING
150800                  TEMPLATE-COUNT
150900                  TEMPLATE-11
151000                  AS5FDBK-COND-AREA
151100     END-IF
151200
151300     IF AS5FDBK-SEVNBR > ZERO
151400       DISPLAY WS-PGMID
151500            " RETURN CODE: " AS5FDBK-SEVNBR
151600            " MESSAGE NBR: " AS5FDBK-MSGNBR
151700     END-IF
151800
151900     DISPLAY WS-PGMID
152000          " TEST CASE 008.A - DE-EDIT (123456789)"
152100     DISPLAY WS-PGMID
152200          " NUMERIC / NO CASE"
152300     DISPLAY WS-PGMID
152400          " SOURCE:" SRC-TXT
152500     DISPLAY WS-PGMID
152600          " OUTPUT LEN (19):" TMPLT-11-LEN
152700     DISPLAY WS-PGMID
152800          " RESULT:" TMPLT-11-TXT
152900     DISPLAY WS-PGMID
153000          "    TYPE (Z):" TMPLT-11-TOK-TYPE
153100          "     STYPE (1):" TMPLT-11-TOK-STYPE
153200          "     LEN (15):" TMPLT-11-TOK-LEN
153300     DISPLAY WS-PGMID
153400          "   DIGIT (9):" TMPLT-11-TOK-DIGIT
153500          "  SCALE (0):" TMPLT-11-TOK-SCALE
153600          "  EXP (0):" TMPLT-11-TOK-EXP
153700     DISPLAY WS-PGMID
153800          "     NBR (123456789):" TMPLT-11-TOK-NBR
153900     DISPLAY WS-PGMID
154000          " "
154100          TMPLT-11-TXT-Z
154200     DISPLAY " "
154300     SKIP2
154400*    * ------------------------------------------------------- *
154500*    * CALL STRING SERVICE DE-EDIT ($234.56)
154600*    * ------------------------------------------------------- *
154700     SKIP1
154800     MOVE ZERO TO RO-START
154900                  RO-COUNT
155000                  RO-PSA-LEN
155100     SET RO-FLAG-NONE  TO TRUE
155200     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
155300*    "$234.56"
155400     MOVE +1   TO TEMPLATE-COUNT
155500     MOVE ZERO TO TMPLT-11-LEN
155600     MOVE LOW-VALUE TO TMPLT-11-TXT
155700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
155800     IF PACKAGE-CALL
155900*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
156000       SET ACTION-DEEDIT TO TRUE
156100       MOVE "ASUSSVCB" TO LS-ASMODULE
156200       CALL LS-ASMODULE
156300            USING ASCA-COMMAREA
156400                  ACTION
156500                  AS-REQUEST-OPTIONS
156600                  SOURCE-STRING
156700                  TEMPLATE-COUNT
156800                  TEMPLATE-11
156900                  AS5FDBK-COND-AREA
157000     ELSE
157100       MOVE "ASUDDEDT" TO LS-ASMODULE
157200       CALL LS-ASMODULE
157300            USING ASCA-COMMAREA
157400                  AS-REQUEST-OPTIONS
157500                  SOURCE-STRING
157600                  TEMPLATE-COUNT
157700                  TEMPLATE-11
157800                  AS5FDBK-COND-AREA
157900     END-IF
158000
158100     IF AS5FDBK-SEVNBR > ZERO
158200       DISPLAY WS-PGMID
158300            " RETURN CODE: " AS5FDBK-SEVNBR
158400            " MESSAGE NBR: " AS5FDBK-MSGNBR
158500     END-IF
158600
158700     DISPLAY WS-PGMID
158800          " TEST CASE 008.B - DE-EDIT ($234.56)"
158900     DISPLAY WS-PGMID
159000          " NUMERIC / NO CASE"
159100     DISPLAY WS-PGMID
159200          " SOURCE:" SRC-TXT
159300     DISPLAY WS-PGMID
159400          " OUTPUT LEN (15):" TMPLT-11-LEN
159500     DISPLAY WS-PGMID
159600          " RESULT:" TMPLT-11-TXT
159700     DISPLAY WS-PGMID
159800          "    TYPE (R):" TMPLT-11-TOK-TYPE
159900          "     STYPE (1):" TMPLT-11-TOK-STYPE
160000          "     LEN (11):" TMPLT-11-TOK-LEN
160100     DISPLAY WS-PGMID
160200          "   DIGIT (5):" TMPLT-11-TOK-DIGIT
160300          "  SCALE (2):" TMPLT-11-TOK-SCALE
160400          "  EXP (0):" TMPLT-11-TOK-EXP
160500     DISPLAY WS-PGMID
160600          "     NBR (23456):" TMPLT-11-TOK-NBR
160700     DISPLAY WS-PGMID
160800          " "
160900          TMPLT-11-TXT-Z
161000     DISPLAY " "
161100     SKIP2
161200*    * ------------------------------------------------------- *
161300*    * CALL STRING SERVICE DE-EDIT (-1,234.56)
161400*    * ------------------------------------------------------- *
161500     SKIP1
161600     MOVE ZERO TO RO-START
161700                  RO-COUNT
161800                  RO-PSA-LEN
161900     SET RO-FLAG-NONE  TO TRUE
162000     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
162100*    "-1,234.56"
162200     MOVE +1   TO TEMPLATE-COUNT
162300     MOVE ZERO TO TMPLT-11-LEN
162400     MOVE LOW-VALUE TO TMPLT-11-TXT
162500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
162600     IF PACKAGE-CALL
162700*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
162800       SET ACTION-DEEDIT TO TRUE
162900       MOVE "ASUSSVCB" TO LS-ASMODULE
163000       CALL LS-ASMODULE
163100            USING ASCA-COMMAREA
163200                  ACTION
163300                  AS-REQUEST-OPTIONS
163400                  SOURCE-STRING
163500                  TEMPLATE-COUNT
163600                  TEMPLATE-11
163700                  AS5FDBK-COND-AREA
163800     ELSE
163900       MOVE "ASUDDEDT" TO LS-ASMODULE
164000       CALL LS-ASMODULE
164100            USING ASCA-COMMAREA
164200                  AS-REQUEST-OPTIONS
164300                  SOURCE-STRING
164400                  TEMPLATE-COUNT
164500                  TEMPLATE-11
164600                  AS5FDBK-COND-AREA
164700     END-IF
164800
164900     IF AS5FDBK-SEVNBR > ZERO
165000       DISPLAY WS-PGMID
165100            " RETURN CODE: " AS5FDBK-SEVNBR
165200            " MESSAGE NBR: " AS5FDBK-MSGNBR
165300     END-IF
165400
165500     DISPLAY WS-PGMID
165600          " TEST CASE 008.C - DE-EDIT (-1,234.56)"
165700     DISPLAY WS-PGMID
165800          " NUMERIC / NO CASE"
165900     DISPLAY WS-PGMID
166000          " SOURCE:" SRC-TXT
166100     DISPLAY WS-PGMID
166200          " OUTPUT LEN (16):" TMPLT-11-LEN
166300     DISPLAY WS-PGMID
166400          " RESULT:" TMPLT-11-TXT
166500     DISPLAY WS-PGMID
166600          "    TYPE (R):" TMPLT-11-TOK-TYPE
166700          "     STYPE (1):" TMPLT-11-TOK-STYPE
166800          "     LEN (12):" TMPLT-11-TOK-LEN
166900     DISPLAY WS-PGMID
167000          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
167100          "  SCALE (2):" TMPLT-11-TOK-SCALE
167200          "  EXP (0):" TMPLT-11-TOK-EXP
167300     DISPLAY WS-PGMID
167400          "     NBR (12345O):" TMPLT-11-TOK-NBR
167500     DISPLAY WS-PGMID
167600          " "
167700          TMPLT-11-TXT-Z
167800     DISPLAY " "
167900     SKIP2
168000*    * ------------------------------------------------------- *
168100*    * CALL STRING SERVICE DE-EDIT ($-,--4.56)
168200*    * ------------------------------------------------------- *
168300     SKIP1
168400     MOVE ZERO TO RO-START
168500                  RO-COUNT
168600                  RO-PSA-LEN
168700     SET RO-FLAG-NONE  TO TRUE
168800     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
168900*    "$-,--4.56"
169000     MOVE +1   TO TEMPLATE-COUNT
169100     MOVE ZERO TO TMPLT-11-LEN
169200     MOVE LOW-VALUE TO TMPLT-11-TXT
169300     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
169400     IF PACKAGE-CALL
169500*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
169600       SET ACTION-DEEDIT TO TRUE
169700       MOVE "ASUSSVCB" TO LS-ASMODULE
169800       CALL LS-ASMODULE
169900            USING ASCA-COMMAREA
170000                  ACTION
170100                  AS-REQUEST-OPTIONS
170200                  SOURCE-STRING
170300                  TEMPLATE-COUNT
170400                  TEMPLATE-11
170500                  AS5FDBK-COND-AREA
170600     ELSE
170700       MOVE "ASUDDEDT" TO LS-ASMODULE
170800       CALL LS-ASMODULE
170900            USING ASCA-COMMAREA
171000                  AS-REQUEST-OPTIONS
171100                  SOURCE-STRING
171200                  TEMPLATE-COUNT
171300                  TEMPLATE-11
171400                  AS5FDBK-COND-AREA
171500     END-IF
171600
171700     IF AS5FDBK-SEVNBR > ZERO
171800       DISPLAY WS-PGMID
171900            " RETURN CODE: " AS5FDBK-SEVNBR
172000            " MESSAGE NBR: " AS5FDBK-MSGNBR
172100     END-IF
172200
172300     DISPLAY WS-PGMID
172400          " TEST CASE 008.D - DE-EDIT ($-,--4.56)"
172500     DISPLAY WS-PGMID
172600          " NUMERIC / NO CASE"
172700     DISPLAY WS-PGMID
172800          " SOURCE:" SRC-TXT
172900     DISPLAY WS-PGMID
173000          " OUTPUT LEN (13):" TMPLT-11-LEN
173100     DISPLAY WS-PGMID
173200          " RESULT:" TMPLT-11-TXT
173300     DISPLAY WS-PGMID
173400          "    TYPE (R):" TMPLT-11-TOK-TYPE
173500          "     STYPE (1):" TMPLT-11-TOK-STYPE
173600          "     LEN (9):" TMPLT-11-TOK-LEN
173700     DISPLAY WS-PGMID
173800          "   DIGIT (3):" TMPLT-11-TOK-DIGIT
173900          "  SCALE (2):" TMPLT-11-TOK-SCALE
174000          "  EXP (0):" TMPLT-11-TOK-EXP
174100     DISPLAY WS-PGMID
174200          "     NBR (45O):" TMPLT-11-TOK-NBR
174300     DISPLAY WS-PGMID
174400          " "
174500          TMPLT-11-TXT-Z
174600     DISPLAY " "
174700     SKIP2
174800*    * ------------------------------------------------------- *
174900*    * CALL STRING SERVICE DE-EDIT (0123,456 )
175000*    * ------------------------------------------------------- *
175100     SKIP1
175200     MOVE ZERO TO RO-START
175300                  RO-COUNT
175400                  RO-PSA-LEN
175500     SET RO-FLAG-NONE  TO TRUE
175600     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
175700*    "0123,456 "
175800     MOVE +1   TO TEMPLATE-COUNT
175900     MOVE ZERO TO TMPLT-11-LEN
176000     MOVE LOW-VALUE TO TMPLT-11-TXT
176100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
176200     IF PACKAGE-CALL
176300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
176400       SET ACTION-DEEDIT TO TRUE
176500       MOVE "ASUSSVCB" TO LS-ASMODULE
176600       CALL LS-ASMODULE
176700            USING ASCA-COMMAREA
176800                  ACTION
176900                  AS-REQUEST-OPTIONS
177000                  SOURCE-STRING
177100                  TEMPLATE-COUNT
177200                  TEMPLATE-11
177300                  AS5FDBK-COND-AREA
177400     ELSE
177500       MOVE "ASUDDEDT" TO LS-ASMODULE
177600       CALL LS-ASMODULE
177700            USING ASCA-COMMAREA
177800                  AS-REQUEST-OPTIONS
177900                  SOURCE-STRING
178000                  TEMPLATE-COUNT
178100                  TEMPLATE-11
178200                  AS5FDBK-COND-AREA
178300     END-IF
178400
178500     IF AS5FDBK-SEVNBR > ZERO
178600       DISPLAY WS-PGMID
178700            " RETURN CODE: " AS5FDBK-SEVNBR
178800            " MESSAGE NBR: " AS5FDBK-MSGNBR
178900     END-IF
179000
179100     DISPLAY WS-PGMID
179200          " TEST CASE 008.E - DE-EDIT (0123,456 )"
179300     DISPLAY WS-PGMID
179400          " NUMERIC / NO CASE"
179500     DISPLAY WS-PGMID
179600          " SOURCE:" SRC-TXT
179700     DISPLAY WS-PGMID
179800          " OUTPUT LEN (16):" TMPLT-11-LEN
179900     DISPLAY WS-PGMID
180000          " RESULT:" TMPLT-11-TXT
180100     DISPLAY WS-PGMID
180200          "    TYPE (Z):" TMPLT-11-TOK-TYPE
180300          "     STYPE (1):" TMPLT-11-TOK-STYPE
180400          "     LEN (12):" TMPLT-11-TOK-LEN
180500     DISPLAY WS-PGMID
180600          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
180700          "  SCALE (0):" TMPLT-11-TOK-SCALE
180800          "  EXP (0):" TMPLT-11-TOK-EXP
180900     DISPLAY WS-PGMID
181000          "     NBR (123456):" TMPLT-11-TOK-NBR
181100     DISPLAY WS-PGMID
181200          " "
181300          TMPLT-11-TXT-Z
181400     DISPLAY " "
181500     SKIP2
181600*    * ------------------------------------------------------- *
181700*    * CALL STRING SERVICE DE-EDIT (64K)
181800*    * ------------------------------------------------------- *
181900     SKIP1
182000     MOVE ZERO TO RO-START
182100                  RO-COUNT
182200                  RO-PSA-LEN
182300     SET RO-FLAG-NONE  TO TRUE
182400     MOVE WS-SOURCE-STRING-16 TO SOURCE-STRING
182500*    "64K"
182600     MOVE +1   TO TEMPLATE-COUNT
182700     MOVE ZERO TO TMPLT-11-LEN
182800     MOVE LOW-VALUE TO TMPLT-11-TXT
182900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
183000     IF PACKAGE-CALL
183100*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
183200       SET ACTION-DEEDIT TO TRUE
183300       MOVE "ASUSSVCB" TO LS-ASMODULE
183400       CALL LS-ASMODULE
183500            USING ASCA-COMMAREA
183600                  ACTION
183700                  AS-REQUEST-OPTIONS
183800                  SOURCE-STRING
183900                  TEMPLATE-COUNT
184000                  TEMPLATE-11
184100                  AS5FDBK-COND-AREA
184200     ELSE
184300       MOVE "ASUDDEDT" TO LS-ASMODULE
184400       CALL LS-ASMODULE
184500            USING ASCA-COMMAREA
184600                  AS-REQUEST-OPTIONS
184700                  SOURCE-STRING
184800                  TEMPLATE-COUNT
184900                  TEMPLATE-11
185000                  AS5FDBK-COND-AREA
185100     END-IF
185200
185300     IF AS5FDBK-SEVNBR > ZERO
185400       DISPLAY WS-PGMID
185500            " RETURN CODE: " AS5FDBK-SEVNBR
185600            " MESSAGE NBR: " AS5FDBK-MSGNBR
185700     END-IF
185800
185900     DISPLAY WS-PGMID
186000          " TEST CASE 008.F - DE-EDIT (64K)"
186100     DISPLAY WS-PGMID
186200          " NUMERIC / NO CASE"
186300     DISPLAY WS-PGMID
186400          " SOURCE:" SRC-TXT
186500     DISPLAY WS-PGMID
186600          " OUTPUT LEN (15):" TMPLT-11-LEN
186700     DISPLAY WS-PGMID
186800          " RESULT:" TMPLT-11-TXT
186900     DISPLAY WS-PGMID
187000          "    TYPE (Z):" TMPLT-11-TOK-TYPE
187100          "     STYPE (1):" TMPLT-11-TOK-STYPE
187200          "     LEN (11):" TMPLT-11-TOK-LEN
187300     DISPLAY WS-PGMID
187400          "   DIGIT (5):" TMPLT-11-TOK-DIGIT
187500          "  SCALE (0):" TMPLT-11-TOK-SCALE
187600          "  EXP (0):" TMPLT-11-TOK-EXP
187700     DISPLAY WS-PGMID
187800          "     NBR (64000):" TMPLT-11-TOK-NBR
187900     DISPLAY WS-PGMID
188000          " "
188100          TMPLT-11-TXT-Z
188200     DISPLAY " "
188300     SKIP2
188400*    * ------------------------------------------------------- *
188500*    * CALL STRING SERVICE DE-EDIT (123.456E+12)
188600*    * ------------------------------------------------------- *
188700     SKIP1
188800     MOVE ZERO TO RO-START
188900                  RO-COUNT
189000                  RO-PSA-LEN
189100     SET RO-FLAG-NONE  TO TRUE
189200     MOVE WS-SOURCE-STRING-17 TO SOURCE-STRING
189300*    "123.456E+12"
189400     MOVE +1   TO TEMPLATE-COUNT
189500     MOVE ZERO TO TMPLT-11-LEN
189600     MOVE LOW-VALUE TO TMPLT-11-TXT
189700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
189800     IF PACKAGE-CALL
189900*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
190000       SET ACTION-DEEDIT TO TRUE
190100       MOVE "ASUSSVCB" TO LS-ASMODULE
190200       CALL LS-ASMODULE
190300            USING ASCA-COMMAREA
190400                  ACTION
190500                  AS-REQUEST-OPTIONS
190600                  SOURCE-STRING
190700                  TEMPLATE-COUNT
190800                  TEMPLATE-11
190900                  AS5FDBK-COND-AREA
191000     ELSE
191100       MOVE "ASUDDEDT" TO LS-ASMODULE
191200       CALL LS-ASMODULE
191300            USING ASCA-COMMAREA
191400                  AS-REQUEST-OPTIONS
191500                  SOURCE-STRING
191600                  TEMPLATE-COUNT
191700                  TEMPLATE-11
191800                  AS5FDBK-COND-AREA
191900     END-IF
192000
192100     IF AS5FDBK-SEVNBR > ZERO
192200       DISPLAY WS-PGMID
192300            " RETURN CODE: " AS5FDBK-SEVNBR
192400            " MESSAGE NBR: " AS5FDBK-MSGNBR
192500     END-IF
192600
192700     DISPLAY WS-PGMID
192800          " TEST CASE 008.G - DE-EDIT (123.456E+12)"
192900     DISPLAY WS-PGMID
193000          " NUMERIC / NO CASE"
193100     DISPLAY WS-PGMID
193200          " SOURCE:" SRC-TXT
193300     DISPLAY WS-PGMID
193400          " OUTPUT LEN (18):" TMPLT-11-LEN
193500     DISPLAY WS-PGMID
193600          " RESULT:" TMPLT-11-TXT
193700     DISPLAY WS-PGMID
193800          "    TYPE (F):" TMPLT-11-TOK-TYPE
193900          "     STYPE (1):" TMPLT-11-TOK-STYPE
194000          "     LEN (14):" TMPLT-11-TOK-LEN
194100     DISPLAY WS-PGMID
194200          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
194300          "  SCALE (3):" TMPLT-11-TOK-SCALE
194400          "  EXP (2):" TMPLT-11-TOK-EXP
194500     DISPLAY WS-PGMID
194600          "     NBR (12345612):" TMPLT-11-TOK-NBR
194700     DISPLAY WS-PGMID
194800          " "
194900          TMPLT-11-TXT-Z
195000     DISPLAY " "
195100     SKIP2
195200*    * ------------------------------------------------------- *
195300*    * CALL STRING SERVICE DE-EDIT (0.123456E+15)
195400*    * ------------------------------------------------------- *
195500     SKIP1
195600     MOVE ZERO TO RO-START
195700                  RO-COUNT
195800                  RO-PSA-LEN
195900     SET RO-FLAG-NONE  TO TRUE
196000     MOVE WS-SOURCE-STRING-18 TO SOURCE-STRING
196100*    "0.123456E+15"
196200     MOVE +1   TO TEMPLATE-COUNT
196300     MOVE ZERO TO TMPLT-11-LEN
196400     MOVE LOW-VALUE TO TMPLT-11-TXT
196500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
196600     IF PACKAGE-CALL
196700*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
196800       SET ACTION-DEEDIT TO TRUE
196900       MOVE "ASUSSVCB" TO LS-ASMODULE
197000       CALL LS-ASMODULE
197100            USING ASCA-COMMAREA
197200                  ACTION
197300                  AS-REQUEST-OPTIONS
197400                  SOURCE-STRING
197500                  TEMPLATE-COUNT
197600                  TEMPLATE-11
197700                  AS5FDBK-COND-AREA
197800     ELSE
197900       MOVE "ASUDDEDT" TO LS-ASMODULE
198000       CALL LS-ASMODULE
198100            USING ASCA-COMMAREA
198200                  AS-REQUEST-OPTIONS
198300                  SOURCE-STRING
198400                  TEMPLATE-COUNT
198500                  TEMPLATE-11
198600                  AS5FDBK-COND-AREA
198700     END-IF
198800
198900     IF AS5FDBK-SEVNBR > ZERO
199000       DISPLAY WS-PGMID
199100            " RETURN CODE: " AS5FDBK-SEVNBR
199200            " MESSAGE NBR: " AS5FDBK-MSGNBR
199300     END-IF
199400
199500     DISPLAY WS-PGMID
199600          " TEST CASE 008.H - DE-EDIT (0.123456E+15)"
199700     DISPLAY WS-PGMID
199800          " NUMERIC / NO CASE"
199900     DISPLAY WS-PGMID
200000          " SOURCE:" SRC-TXT
200100     DISPLAY WS-PGMID
200200          " OUTPUT LEN (18):" TMPLT-11-LEN
200300     DISPLAY WS-PGMID
200400          " RESULT:" TMPLT-11-TXT
200500     DISPLAY WS-PGMID
200600          "    TYPE (F):" TMPLT-11-TOK-TYPE
200700          "     STYPE (1):" TMPLT-11-TOK-STYPE
200800          "     LEN (14):" TMPLT-11-TOK-LEN
200900     DISPLAY WS-PGMID
201000          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
201100          "  SCALE (6):" TMPLT-11-TOK-SCALE
201200          "  EXP (2):" TMPLT-11-TOK-EXP
201300     DISPLAY WS-PGMID
201400          "     NBR (12345615):" TMPLT-11-TOK-NBR
201500     DISPLAY WS-PGMID
201600          " "
201700          TMPLT-11-TXT-Z
201800     DISPLAY " "
201900     SKIP2
202000*    * ------------------------------------------------------- *
202100*    * CALL STRING SERVICE DE-EDIT (-123.456E-15)
202200*    * ------------------------------------------------------- *
202300     SKIP1
202400     MOVE ZERO TO RO-START
202500                  RO-COUNT
202600                  RO-PSA-LEN
202700     SET RO-FLAG-NONE  TO TRUE
202800     MOVE WS-SOURCE-STRING-19 TO SOURCE-STRING
202900*    "-123.456E-3"
203000     MOVE +1   TO TEMPLATE-COUNT
203100     MOVE ZERO TO TMPLT-11-LEN
203200     MOVE LOW-VALUE TO TMPLT-11-TXT
203300     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
203400     IF PACKAGE-CALL
203500*      CALL ASUSSVCB TO PERFORM SERVICE STRING DEEDIT
203600       SET ACTION-DEEDIT TO TRUE
203700       MOVE "ASUSSVCB" TO LS-ASMODULE
203800       CALL LS-ASMODULE
203900            USING ASCA-COMMAREA
204000                  ACTION
204100                  AS-REQUEST-OPTIONS
204200                  SOURCE-STRING
204300                  TEMPLATE-COUNT
204400                  TEMPLATE-11
204500                  AS5FDBK-COND-AREA
204600     ELSE
204700       MOVE "ASUDDEDT" TO LS-ASMODULE
204800       CALL LS-ASMODULE
204900            USING ASCA-COMMAREA
205000                  AS-REQUEST-OPTIONS
205100                  SOURCE-STRING
205200                  TEMPLATE-COUNT
205300                  TEMPLATE-11
205400                  AS5FDBK-COND-AREA
205500     END-IF
205600
205700     IF AS5FDBK-SEVNBR > ZERO
205800       DISPLAY WS-PGMID
205900            " RETURN CODE: " AS5FDBK-SEVNBR
206000            " MESSAGE NBR: " AS5FDBK-MSGNBR
206100     END-IF
206200
206300     DISPLAY WS-PGMID
206400          " TEST CASE 008.I - DE-EDIT (-123.456E-3)"
206500     DISPLAY WS-PGMID
206600          " NUMERIC / NO CASE"
206700     DISPLAY WS-PGMID
206800          " SOURCE:" SRC-TXT
206900     DISPLAY WS-PGMID
207000          " OUTPUT LEN (17):" TMPLT-11-LEN
207100     DISPLAY WS-PGMID
207200          " RESULT:" TMPLT-11-TXT
207300     DISPLAY WS-PGMID
207400          "    TYPE (F):" TMPLT-11-TOK-TYPE
207500          "     STYPE (1):" TMPLT-11-TOK-STYPE
207600          "     LEN (13):" TMPLT-11-TOK-LEN
207700     DISPLAY WS-PGMID
207800          "   DIGIT (6):" TMPLT-11-TOK-DIGIT
207900          "  SCALE (3):" TMPLT-11-TOK-SCALE
208000          "  EXP (1):" TMPLT-11-TOK-EXP
208100     DISPLAY WS-PGMID
208200          "     NBR (12345OL):" TMPLT-11-TOK-NBR
208300     DISPLAY WS-PGMID
208400          " "
208500          TMPLT-11-TXT-Z
208600     DISPLAY " "
208700     SKIP2
208800     CONTINUE.
208900 TEST-CASE-009.
209000
209100     IF NOT (TEST-CASE = "ALL" OR "009")
209200       GO TO TEST-CASE-010
209300     END-IF
209400     SKIP2
209500     CONTINUE.
209600 TEST-CASE-010.
209700
209800     IF NOT (TEST-CASE = "ALL" OR "010")
209900       GO TO TEST-CASE-011
210000     END-IF
210100
210200*    * ------------------------------------------------------- *
210300*    * CALL STRING SERVICE JUSTIFY
210400*    * ------------------------------------------------------- *
210500     SKIP1
210600     MOVE ZERO TO RO-START
210700                  RO-COUNT
210800                  RO-PSA-LEN
210900                  TMPLT-7-LEN
211000     SET RO-FLAG-UC TO TRUE
211100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
211200*    "+How+now+brown+cow++"
211300     MOVE +1   TO TEMPLATE-COUNT
211400     MOVE ZERO TO TMPLT-7-LEN
211500     MOVE LOW-VALUE TO TMPLT-7-TXT
211600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
211700     IF PACKAGE-CALL
211800*      CALL ASUSSVCB TO PERFORM SERVICE JUSTIFY
211900       SET ACTION-JUSTIFY TO TRUE
212000       MOVE "ASUSSVCB" TO LS-ASMODULE
212100       CALL LS-ASMODULE
212200            USING ASCA-COMMAREA
212300                  ACTION
212400                  AS-REQUEST-OPTIONS
212500                  SOURCE-STRING
212600                  TEMPLATE-COUNT
212700                  TEMPLATE-7
212800                  AS5FDBK-COND-AREA
212900     ELSE
213000       MOVE "ASUDJSTF" TO LS-ASMODULE
213100       CALL LS-ASMODULE
213200            USING ASCA-COMMAREA
213300                  AS-REQUEST-OPTIONS
213400                  SOURCE-STRING
213500                  TEMPLATE-COUNT
213600                  TEMPLATE-7
213700                  AS5FDBK-COND-AREA
213800     END-IF
213900
214000     IF AS5FDBK-SEVNBR > ZERO
214100       DISPLAY WS-PGMID
214200            " RETURN CODE: " AS5FDBK-SEVNBR
214300            " MESSAGE NBR: " AS5FDBK-MSGNBR
214400     END-IF
214500
214600     DISPLAY WS-PGMID
214700          " TEST CASE 010 - JUSTIFY (4 PADS BETWEEN)"
214800     DISPLAY WS-PGMID
214900          " MIXED CASE / UPPER CASE"
215000     DISPLAY WS-PGMID
215100          " SOURCE:" SRC-TXT
215200     DISPLAY WS-PGMID
215300          " OUTPUT LEN (26):" TMPLT-7-LEN
215400     DISPLAY WS-PGMID
215500          " RESULT:" TMPLT-7-TXT
215600     DISPLAY WS-PGMID
215700          " "
215800          TMPLT-7-TXT-Z
215900     DISPLAY " "
216000     SKIP2
216100     CONTINUE.
216200 TEST-CASE-011.
216300
216400     IF NOT (TEST-CASE = "ALL" OR "011")
216500       GO TO TEST-CASE-012
216600     END-IF
216700
216800*    * ------------------------------------------------------- *
216900*    * CALL STRING SERVICE LEFT JUSTIFY
217000*    * ------------------------------------------------------- *
217100     SKIP1
217200     MOVE ZERO TO RO-START
217300                  RO-COUNT
217400                  RO-PSA-LEN
217500                  TMPLT-6-LEN
217600     SET RO-FLAG-NONE  TO TRUE
217700     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
217800*    "+++++1ST+NATIONAL+BANK+++++"
217900     MOVE +1   TO TEMPLATE-COUNT
218000     MOVE ZERO TO TMPLT-6-LEN
218100     MOVE LOW-VALUE TO TMPLT-6-TXT
218200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
218300     IF PACKAGE-CALL
218400*      CALL ASUSSVCB TO PERFORM SERVICE LEFT JUSTIFY
218500       SET ACTION-LEFT TO TRUE
218600       MOVE "ASUSSVCB" TO LS-ASMODULE
218700       CALL LS-ASMODULE
218800            USING ASCA-COMMAREA
218900                  ACTION
219000                  AS-REQUEST-OPTIONS
219100                  SOURCE-STRING
219200                  TEMPLATE-COUNT
219300                  TEMPLATE-6
219400                  AS5FDBK-COND-AREA
219500     ELSE
219600       MOVE "ASUDLEFT" TO LS-ASMODULE
219700       CALL LS-ASMODULE
219800            USING ASCA-COMMAREA
219900                  AS-REQUEST-OPTIONS
220000                  SOURCE-STRING
220100                  TEMPLATE-COUNT
220200                  TEMPLATE-6
220300                  AS5FDBK-COND-AREA
220400     END-IF
220500
220600     IF AS5FDBK-SEVNBR > ZERO
220700       DISPLAY WS-PGMID
220800            " RETURN CODE: " AS5FDBK-SEVNBR
220900            " MESSAGE NBR: " AS5FDBK-MSGNBR
221000     END-IF
221100
221200     DISPLAY WS-PGMID
221300          " TEST CASE 011 - LEFT"
221400     DISPLAY WS-PGMID
221500          " UPPER CASE / NO CASE"
221600     DISPLAY WS-PGMID
221700          " SOURCE:" SRC-TXT
221800     DISPLAY WS-PGMID
221900          " OUTPUT LEN (55):" TMPLT-6-LEN
222000     DISPLAY WS-PGMID
222100          " RESULT:" TMPLT-6-TXT
222200     DISPLAY WS-PGMID
222300          " "
222400          TMPLT-6-TXT-Z
222500     DISPLAY " "
222600     SKIP2
222700     CONTINUE.
222800 TEST-CASE-012.
222900
223000     IF NOT (TEST-CASE = "ALL" OR "012")
223100       GO TO TEST-CASE-013
223200     END-IF
223300     SKIP2
223400     CONTINUE.
223500 TEST-CASE-013.
223600
223700     IF NOT (TEST-CASE = "ALL" OR "013")
223800       GO TO TEST-CASE-014
223900     END-IF
224000
224100*    * ------------------------------------------------------- *
224200*    * CALL STRING SERVICE RIGHT JUSTIFY
224300*    * ------------------------------------------------------- *
224400     SKIP1
224500     MOVE ZERO TO RO-START
224600                  RO-COUNT
224700                  RO-PSA-LEN
224800                  TMPLT-6-LEN
224900     SET RO-FLAG-NONE  TO TRUE
225000     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
225100*    "+++++1ST+NATIONAL+BANK+++++"
225200     MOVE +1   TO TEMPLATE-COUNT
225300     MOVE ZERO TO TMPLT-6-LEN
225400     MOVE LOW-VALUE TO TMPLT-6-TXT
225500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
225600     IF PACKAGE-CALL
225700*      CALL ASUSSVCB TO PERFORM SERVICE RIGHT JUSTIFY
225800       SET ACTION-RIGHT TO TRUE
225900       MOVE "ASUSSVCB" TO LS-ASMODULE
226000       CALL LS-ASMODULE
226100            USING ASCA-COMMAREA
226200                  ACTION
226300                  AS-REQUEST-OPTIONS
226400                  SOURCE-STRING
226500                  TEMPLATE-COUNT
226600                  TEMPLATE-6
226700                  AS5FDBK-COND-AREA
226800     ELSE
226900       MOVE "ASUDRGHT" TO LS-ASMODULE
227000       CALL LS-ASMODULE
227100            USING ASCA-COMMAREA
227200                  AS-REQUEST-OPTIONS
227300                  SOURCE-STRING
227400                  TEMPLATE-COUNT
227500                  TEMPLATE-6
227600                  AS5FDBK-COND-AREA
227700     END-IF
227800
227900     IF AS5FDBK-SEVNBR > ZERO
228000       DISPLAY WS-PGMID
228100            " RETURN CODE: " AS5FDBK-SEVNBR
228200            " MESSAGE NBR: " AS5FDBK-MSGNBR
228300     END-IF
228400
228500     DISPLAY WS-PGMID
228600          " TEST CASE 013 - RIGHT"
228700     DISPLAY WS-PGMID
228800          " UPPER CASE / NO CASE"
228900     DISPLAY WS-PGMID
229000          " SOURCE:" SRC-TXT
229100     DISPLAY WS-PGMID
229200          " OUTPUT LEN (55):" TMPLT-6-LEN
229300     DISPLAY WS-PGMID
229400          " RESULT:" TMPLT-6-TXT
229500     DISPLAY WS-PGMID
229600          " "
229700          TMPLT-6-TXT-Z
229800     DISPLAY " "
229900     SKIP2
230000     CONTINUE.
230100 TEST-CASE-014.
230200
230300     IF NOT (TEST-CASE = "ALL" OR "014")
230400       GO TO TEST-CASE-015
230500     END-IF
230600
230700*    * ------------------------------------------------------- *
230800*    * CALL STRING SERVICE SPACE
230900*    * ------------------------------------------------------- *
231000     SKIP1
231100     MOVE ZERO TO RO-START
231200                  RO-COUNT
231300                  RO-PSA-LEN
231400                  TMPLT-7-LEN
231500     SET RO-FLAG-UC TO TRUE
231600     MOVE +3   TO RO-COUNT
231700     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
231800*    "+How+now+brown+cow++"
231900     MOVE +1   TO TEMPLATE-COUNT
232000     MOVE ZERO TO TMPLT-7-LEN
232100     MOVE LOW-VALUE TO TMPLT-7-TXT
232200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
232300     IF PACKAGE-CALL
232400*      CALL ASUSSVCB TO PERFORM SERVICE SPACE
232500       SET ACTION-SPACE TO TRUE
232600       MOVE "ASUSSVCB" TO LS-ASMODULE
232700       CALL LS-ASMODULE
232800            USING ASCA-COMMAREA
232900                  ACTION
233000                  AS-REQUEST-OPTIONS
233100                  SOURCE-STRING
233200                  TEMPLATE-COUNT
233300                  TEMPLATE-7
233400                  AS5FDBK-COND-AREA
233500     ELSE
233600       MOVE "ASUDSPCE" TO LS-ASMODULE
233700       CALL LS-ASMODULE
233800            USING ASCA-COMMAREA
233900                  AS-REQUEST-OPTIONS
234000                  SOURCE-STRING
234100                  TEMPLATE-COUNT
234200                  TEMPLATE-7
234300                  AS5FDBK-COND-AREA
234400     END-IF
234500
234600     IF AS5FDBK-SEVNBR > ZERO
234700       DISPLAY WS-PGMID
234800            " RETURN CODE: " AS5FDBK-SEVNBR
234900            " MESSAGE NBR: " AS5FDBK-MSGNBR
235000     END-IF
235100
235200     DISPLAY WS-PGMID
235300          " TEST CASE 014 - SPACE (3 PADS BETWEEN)"
235400     DISPLAY WS-PGMID
235500          " MIXED CASE / UPPER CASE"
235600     DISPLAY WS-PGMID
235700          " COUNT:" RO-COUNT
235800     DISPLAY WS-PGMID
235900          " SOURCE:" SRC-TXT
236000     DISPLAY WS-PGMID
236100          " OUTPUT LEN (23):" TMPLT-7-LEN
236200     DISPLAY WS-PGMID
236300          " RESULT:" TMPLT-7-TXT
236400     DISPLAY WS-PGMID
236500          " "
236600          TMPLT-7-TXT-Z
236700     DISPLAY " "
236800     SKIP2
236900     CONTINUE.
237000 TEST-CASE-015.
237100
237200     IF NOT (TEST-CASE = "ALL" OR "015")
237300       GO TO TEST-CASE-016
237400     END-IF
237500
237600*    * ------------------------------------------------------- *
237700*    * CALL STRING SERVICE STRING DELETE LEADING
237800*    * ------------------------------------------------------- *
237900     SKIP1
238000     MOVE ZERO TO RO-START
238100                  RO-COUNT
238200                  RO-PSA-LEN
238300     SET RO-FLAG-NONE  TO TRUE
238400     MOVE +0   TO RO-START
238500     MOVE +7   TO RO-COUNT
238600     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
238700*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
238800     MOVE +1   TO TEMPLATE-COUNT
238900     MOVE ZERO TO TMPLT-6-LEN
239000     MOVE LOW-VALUE TO TMPLT-6-TXT
239100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
239200     IF PACKAGE-CALL
239300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
239400       SET ACTION-STRDEL TO TRUE
239500       MOVE "ASUSSVCB" TO LS-ASMODULE
239600       CALL LS-ASMODULE
239700            USING ASCA-COMMAREA
239800                  ACTION
239900                  AS-REQUEST-OPTIONS
240000                  SOURCE-STRING
240100                  TEMPLATE-COUNT
240200                  TEMPLATE-6
240300                  AS5FDBK-COND-AREA
240400     ELSE
240500       MOVE "ASUDSDEL" TO LS-ASMODULE
240600       CALL LS-ASMODULE
240700            USING ASCA-COMMAREA
240800                  AS-REQUEST-OPTIONS
240900                  SOURCE-STRING
241000                  TEMPLATE-COUNT
241100                  TEMPLATE-6
241200                  AS5FDBK-COND-AREA
241300     END-IF
241400
241500     IF AS5FDBK-SEVNBR > ZERO
241600       DISPLAY WS-PGMID
241700            " RETURN CODE: " AS5FDBK-SEVNBR
241800            " MESSAGE NBR: " AS5FDBK-MSGNBR
241900     END-IF
242000
242100     DISPLAY WS-PGMID
242200          " TEST CASE 015.A - STRING DELETE (0,7)"
242300     DISPLAY WS-PGMID
242400          " MIXED CASE / NO CASE"
242500     DISPLAY WS-PGMID
242600          " SOURCE:" SRC-TXT
242700     DISPLAY WS-PGMID
242800          " OUTPUT LEN (44):" TMPLT-6-LEN
242900     DISPLAY WS-PGMID
243000          " RESULT:" TMPLT-6-TXT
243100     DISPLAY WS-PGMID
243200          " "
243300          TMPLT-6-TXT-Z
243400     DISPLAY " "
243500     SKIP2
243600*    * ------------------------------------------------------- *
243700*    * CALL STRING SERVICE STRING DELETE MIDDLE
243800*    * ------------------------------------------------------- *
243900     SKIP1
244000     MOVE ZERO TO RO-START
244100                  RO-COUNT
244200                  RO-PSA-LEN
244300     SET RO-FLAG-NONE  TO TRUE
244400     MOVE +25  TO RO-START
244500     MOVE +9   TO RO-COUNT
244600     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
244700*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
244800     MOVE +1   TO TEMPLATE-COUNT
244900     MOVE ZERO TO TMPLT-6-LEN
245000     MOVE LOW-VALUE TO TMPLT-6-TXT
245100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
245200     IF PACKAGE-CALL
245300*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
245400       SET ACTION-STRDEL TO TRUE
245500       MOVE "ASUSSVCB" TO LS-ASMODULE
245600       CALL LS-ASMODULE
245700            USING ASCA-COMMAREA
245800                  ACTION
245900                  AS-REQUEST-OPTIONS
246000                  SOURCE-STRING
246100                  TEMPLATE-COUNT
246200                  TEMPLATE-6
246300                  AS5FDBK-COND-AREA
246400     ELSE
246500       MOVE "ASUDSDEL" TO LS-ASMODULE
246600       CALL LS-ASMODULE
246700            USING ASCA-COMMAREA
246800                  AS-REQUEST-OPTIONS
246900                  SOURCE-STRING
247000                  TEMPLATE-COUNT
247100                  TEMPLATE-6
247200                  AS5FDBK-COND-AREA
247300     END-IF
247400
247500     IF AS5FDBK-SEVNBR > ZERO
247600       DISPLAY WS-PGMID
247700            " RETURN CODE: " AS5FDBK-SEVNBR
247800            " MESSAGE NBR: " AS5FDBK-MSGNBR
247900     END-IF
248000
248100     DISPLAY WS-PGMID
248200          " TEST CASE 015.B - STRING DELETE (25,9)"
248300     DISPLAY WS-PGMID
248400          " MIXED CASE / NO CASE"
248500     DISPLAY WS-PGMID
248600          " SOURCE:" SRC-TXT
248700     DISPLAY WS-PGMID
248800          " OUTPUT LEN (42):" TMPLT-6-LEN
248900     DISPLAY WS-PGMID
249000          " RESULT:" TMPLT-6-TXT
249100     DISPLAY WS-PGMID
249200          " "
249300          TMPLT-6-TXT-Z
249400     DISPLAY " "
249500     SKIP2
249600*    * ------------------------------------------------------- *
249700*    * CALL STRING SERVICE STRING DELETE TRAILING
249800*    * ------------------------------------------------------- *
249900     SKIP1
250000     MOVE ZERO TO RO-START
250100                  RO-COUNT
250200                  RO-PSA-LEN
250300     SET RO-FLAG-NONE  TO TRUE
250400     MOVE +25  TO RO-START
250500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
250600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
250700     MOVE +1   TO TEMPLATE-COUNT
250800     MOVE ZERO TO TMPLT-6-LEN
250900     MOVE LOW-VALUE TO TMPLT-6-TXT
251000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
251100     IF PACKAGE-CALL
251200*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
251300       SET ACTION-STRDEL TO TRUE
251400       MOVE "ASUSSVCB" TO LS-ASMODULE
251500       CALL LS-ASMODULE
251600            USING ASCA-COMMAREA
251700                  ACTION
251800                  AS-REQUEST-OPTIONS
251900                  SOURCE-STRING
252000                  TEMPLATE-COUNT
252100                  TEMPLATE-6
252200                  AS5FDBK-COND-AREA
252300     ELSE
252400       MOVE "ASUDSDEL" TO LS-ASMODULE
252500       CALL LS-ASMODULE
252600            USING ASCA-COMMAREA
252700                  AS-REQUEST-OPTIONS
252800                  SOURCE-STRING
252900                  TEMPLATE-COUNT
253000                  TEMPLATE-6
253100                  AS5FDBK-COND-AREA
253200     END-IF
253300
253400     IF AS5FDBK-SEVNBR > ZERO
253500       DISPLAY WS-PGMID
253600            " RETURN CODE: " AS5FDBK-SEVNBR
253700            " MESSAGE NBR: " AS5FDBK-MSGNBR
253800     END-IF
253900
254000     DISPLAY WS-PGMID
254100          " TEST CASE 015.C - STRING DELETE (25,0)"
254200     DISPLAY WS-PGMID
254300          " MIXED CASE / NO CASE"
254400     DISPLAY WS-PGMID
254500         " SOURCE:" SRC-TXT
254600     DISPLAY WS-PGMID
254700          " OUTPUT LEN (24):" TMPLT-6-LEN
254800     DISPLAY WS-PGMID
254900          " RESULT:" TMPLT-6-TXT
255000     DISPLAY WS-PGMID
255100          " "
255200          TMPLT-6-TXT-Z
255300     DISPLAY " "
255400     SKIP2
255500*    * ------------------------------------------------------- *
255600*    * CALL STRING SERVICE STRING DELETE VIA STRING (front)
255700*    * ------------------------------------------------------- *
255800     SKIP1
255900     MOVE ZERO TO RO-START
256000                  RO-COUNT
256100                  RO-PSA-LEN
256200     SET RO-FLAG-NONE  TO TRUE
256300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
256400*    "+How+now+brown+cow++"
256500     MOVE +2   TO TEMPLATE-COUNT
256600     MOVE ZERO TO TMPLT-6-LEN
256700     MOVE LOW-VALUE TO TMPLT-6-TXT
256800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
256900     IF PACKAGE-CALL
257000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
257100       SET ACTION-STRDEL  TO TRUE
257200       MOVE "ASUSSVCB" TO LS-ASMODULE
257300       CALL LS-ASMODULE
257400            USING ASCA-COMMAREA
257500                  ACTION
257600                  AS-REQUEST-OPTIONS
257700                  SOURCE-STRING
257800                  TEMPLATE-COUNT
257900                  TEMPLATE-21
258000                  TEMPLATE-6
258100                  AS5FDBK-COND-AREA
258200     ELSE
258300       MOVE "ASUDSDEL" TO LS-ASMODULE
258400       CALL LS-ASMODULE
258500            USING ASCA-COMMAREA
258600                  AS-REQUEST-OPTIONS
258700                  SOURCE-STRING
258800                  TEMPLATE-COUNT
258900                  TEMPLATE-21
259000                  TEMPLATE-6
259100                  AS5FDBK-COND-AREA
259200     END-IF
259300
259400     IF AS5FDBK-SEVNBR > ZERO
259500       DISPLAY WS-PGMID
259600            " RETURN CODE: " AS5FDBK-SEVNBR
259700            " MESSAGE NBR: " AS5FDBK-MSGNBR
259800     END-IF
259900
260000     DISPLAY WS-PGMID
260100          " TEST CASE 015.D - STRING DELETE (+How+)"
260200     DISPLAY WS-PGMID
260300          " MIXED CASE / NO CASE"
260400     DISPLAY WS-PGMID
260500          " SOURCE:" SRC-TXT
260600     DISPLAY WS-PGMID
260700          " OUTPUT LEN (15):" TMPLT-6-LEN
260800     DISPLAY WS-PGMID
260900          " RESULT:" TMPLT-6-TXT
261000     DISPLAY WS-PGMID
261100          " "
261200          TMPLT-6-TXT-Z
261300     DISPLAY " "
261400     SKIP2
261500*    * ------------------------------------------------------- *
261600*    * CALL STRING SERVICE STRING DELETE VIA STRING (middle)
261700*    * ------------------------------------------------------- *
261800     SKIP1
261900     MOVE ZERO TO RO-START
262000                  RO-COUNT
262100                  RO-PSA-LEN
262200     SET RO-FLAG-NONE  TO TRUE
262300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
262400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
262500     MOVE +2   TO TEMPLATE-COUNT
262600     MOVE ZERO TO TMPLT-6-TXT
262700     MOVE LOW-VALUE TO TMPLT-6-TXT
262800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
262900     IF PACKAGE-CALL
263000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
263100       SET ACTION-STRDEL TO TRUE
263200       MOVE "ASUSSVCB" TO LS-ASMODULE
263300       CALL LS-ASMODULE
263400            USING ASCA-COMMAREA
263500                  ACTION
263600                  AS-REQUEST-OPTIONS
263700                  SOURCE-STRING
263800                  TEMPLATE-COUNT
263900                  TEMPLATE-8
264000                  TEMPLATE-6
264100                  AS5FDBK-COND-AREA
264200     ELSE
264300       MOVE "ASUDSDEL" TO LS-ASMODULE
264400       CALL LS-ASMODULE
264500            USING ASCA-COMMAREA
264600                  AS-REQUEST-OPTIONS
264700                  SOURCE-STRING
264800                  TEMPLATE-COUNT
264900                  TEMPLATE-8
265000                  TEMPLATE-6
265100                  AS5FDBK-COND-AREA
265200     END-IF
265300
265400     IF AS5FDBK-SEVNBR > ZERO
265500       DISPLAY WS-PGMID
265600            " RETURN CODE: " AS5FDBK-SEVNBR
265700            " MESSAGE NBR: " AS5FDBK-MSGNBR
265800     END-IF
265900
266000     DISPLAY WS-PGMID
266100          " TEST CASE 015.E - STRING DELETE (GOOD+)"
266200     DISPLAY WS-PGMID
266300          " MIXED CASE / NO CASE"
266400     DISPLAY WS-PGMID
266500          " SOURCE:" SRC-TXT
266600     DISPLAY WS-PGMID
266700          " OUTPUT LEN (0):" TMPLT-6-LEN
266800     DISPLAY WS-PGMID
266900          " RESULT:" TMPLT-6-TXT
267000     DISPLAY WS-PGMID
267100          " "
267200          TMPLT-6-TXT-Z
267300     DISPLAY " "
267400     SKIP2
267500*    * ------------------------------------------------------- *
267600*    * CALL STRING SERVICE STRING DELETE VIA STRING (middle)
267700*    * ------------------------------------------------------- *
267800     SKIP1
267900     MOVE ZERO TO RO-START
268000                  RO-COUNT
268100                  RO-PSA-LEN
268200     SET RO-FLAG-UC    TO TRUE
268300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
268400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
268500     MOVE +2   TO TEMPLATE-COUNT
268600     MOVE ZERO TO TMPLT-6-LEN
268700     MOVE LOW-VALUE TO TMPLT-6-TXT
268800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
268900     IF PACKAGE-CALL
269000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
269100       SET ACTION-STRDEL TO TRUE
269200       MOVE "ASUSSVCB" TO LS-ASMODULE
269300       CALL LS-ASMODULE
269400            USING ASCA-COMMAREA
269500                  ACTION
269600                  AS-REQUEST-OPTIONS
269700                  SOURCE-STRING
269800                  TEMPLATE-COUNT
269900                  TEMPLATE-8
270000                  TEMPLATE-6
270100                  AS5FDBK-COND-AREA
270200     ELSE
270300       MOVE "ASUDSDEL" TO LS-ASMODULE
270400       CALL LS-ASMODULE
270500            USING ASCA-COMMAREA
270600                  AS-REQUEST-OPTIONS
270700                  SOURCE-STRING
270800                  TEMPLATE-COUNT
270900                  TEMPLATE-8
271000                  TEMPLATE-6
271100                  AS5FDBK-COND-AREA
271200     END-IF
271300
271400     IF AS5FDBK-SEVNBR > ZERO
271500       DISPLAY WS-PGMID
271600            " RETURN CODE: " AS5FDBK-SEVNBR
271700            " MESSAGE NBR: " AS5FDBK-MSGNBR
271800     END-IF
271900
272000     DISPLAY WS-PGMID
272100          " TEST CASE 015.F - STRING DELETE (GOOD+)"
272200     DISPLAY WS-PGMID
272300          " MIXED CASE / UPPER CASE"
272400     DISPLAY WS-PGMID
272500          " SOURCE:" SRC-TXT
272600     DISPLAY WS-PGMID
272700          " OUTPUT LEN (46):" TMPLT-6-LEN
272800     DISPLAY WS-PGMID
272900          " RESULT:" TMPLT-6-TXT
273000     DISPLAY WS-PGMID
273100          " "
273200          TMPLT-6-TXT-Z
273300     DISPLAY " "
273400     SKIP2
273500*    * ------------------------------------------------------- *
273600*    * CALL STRING SERVICE STRING DELETE VIA STRING (trail)
273700*    * ------------------------------------------------------- *
273800     SKIP1
273900     MOVE ZERO TO RO-START
274000                  RO-COUNT
274100                  RO-PSA-LEN
274200     SET RO-FLAG-NONE  TO TRUE
274300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
274400*    "+How+now+brown+cow++"
274500     MOVE +2   TO TEMPLATE-COUNT
274600     MOVE ZERO TO TMPLT-6-LEN
274700     MOVE LOW-VALUE TO TMPLT-6-TXT
274800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
274900     IF PACKAGE-CALL
275000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
275100       SET ACTION-STRDEL  TO TRUE
275200       MOVE "ASUSSVCB" TO LS-ASMODULE
275300       CALL LS-ASMODULE
275400            USING ASCA-COMMAREA
275500                  ACTION
275600                  AS-REQUEST-OPTIONS
275700                  SOURCE-STRING
275800                  TEMPLATE-COUNT
275900                  TEMPLATE-22
276000                  TEMPLATE-6
276100                  AS5FDBK-COND-AREA
276200     ELSE
276300       MOVE "ASUDSDEL" TO LS-ASMODULE
276400       CALL LS-ASMODULE
276500            USING ASCA-COMMAREA
276600                  AS-REQUEST-OPTIONS
276700                  SOURCE-STRING
276800                  TEMPLATE-COUNT
276900                  TEMPLATE-22
277000                  TEMPLATE-6
277100                  AS5FDBK-COND-AREA
277200     END-IF
277300
277400     IF AS5FDBK-SEVNBR > ZERO
277500       DISPLAY WS-PGMID
277600            " RETURN CODE: " AS5FDBK-SEVNBR
277700            " MESSAGE NBR: " AS5FDBK-MSGNBR
277800     END-IF
277900
278000     DISPLAY WS-PGMID
278100          " TEST CASE 015.G - STRING DELETE (+cow++)"
278200     DISPLAY WS-PGMID
278300          " MIXED CASE / NO CASE"
278400     DISPLAY WS-PGMID
278500          " SOURCE:" SRC-TXT
278600     DISPLAY WS-PGMID
278700          " OUTPUT LEN (14):" TMPLT-6-LEN
278800     DISPLAY WS-PGMID
278900          " RESULT:" TMPLT-6-TXT
279000     DISPLAY WS-PGMID
279100          " "
279200          TMPLT-6-TXT-Z
279300     DISPLAY " "
279400     SKIP2
279500*    * ------------------------------------------------------- *
279600*    * CALL STRING SERVICE STRING DELETE VIA STRING (NO MATCH)
279700*    * ------------------------------------------------------- *
279800     SKIP1
279900     MOVE ZERO TO RO-START
280000                  RO-COUNT
280100                  RO-PSA-LEN
280200     SET RO-FLAG-NONE  TO TRUE
280300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
280400*    "+How+now+brown+cow++"
280500     MOVE +2   TO TEMPLATE-COUNT
280600     MOVE ZERO TO TMPLT-6-LEN
280700     MOVE LOW-VALUE TO TMPLT-6-TXT
280800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
280900     IF PACKAGE-CALL
281000*      CALL ASUSSVCB TO PERFORM SERVICE STRING DELETE
281100       SET ACTION-STRDEL  TO TRUE
281200       MOVE "ASUSSVCB" TO LS-ASMODULE
281300       CALL LS-ASMODULE
281400            USING ASCA-COMMAREA
281500                  ACTION
281600                  AS-REQUEST-OPTIONS
281700                  SOURCE-STRING
281800                  TEMPLATE-COUNT
281900                  TEMPLATE-8
282000                  TEMPLATE-6
282100                  AS5FDBK-COND-AREA
282200     ELSE
282300       MOVE "ASUDSDEL" TO LS-ASMODULE
282400       CALL LS-ASMODULE
282500            USING ASCA-COMMAREA
282600                  AS-REQUEST-OPTIONS
282700                  SOURCE-STRING
282800                  TEMPLATE-COUNT
282900                  TEMPLATE-8
283000                  TEMPLATE-6
283100                  AS5FDBK-COND-AREA
283200     END-IF
283300
283400     IF AS5FDBK-SEVNBR > ZERO
283500       DISPLAY WS-PGMID
283600            " RETURN CODE: " AS5FDBK-SEVNBR
283700            " MESSAGE NBR: " AS5FDBK-MSGNBR
283800     END-IF
283900
284000     DISPLAY WS-PGMID
284100          " TEST CASE 015.H - STRING DELETE (GOOD+)"
284200     DISPLAY WS-PGMID
284300          " MIXED CASE / NO CASE"
284400     DISPLAY WS-PGMID
284500          " SOURCE:" SRC-TXT
284600     DISPLAY WS-PGMID
284700          " OUTPUT LEN (0):" TMPLT-6-LEN
284800     DISPLAY WS-PGMID
284900          " RESULT:" TMPLT-6-TXT
285000     DISPLAY WS-PGMID
285100          " "
285200          TMPLT-6-TXT-Z
285300     DISPLAY " "
285400     SKIP2
285500     CONTINUE.
285600 TEST-CASE-016.
285700
285800     IF NOT (TEST-CASE = "ALL" OR "016")
285900       GO TO TEST-CASE-017
286000     END-IF
286100
286200*    * ------------------------------------------------------- *
286300*    * CALL STRING SERVICE FIRST/NEXT POS
286400*    * ------------------------------------------------------- *
286500     SKIP1
286600     MOVE ZERO TO RO-START
286700                  RO-COUNT
286800                  RO-PSA-LEN
286900     SET RO-FLAG-NONE TO TRUE
287000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
287100*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
287200     MOVE +32  TO RO-PSA-LEN
287300     MOVE +2   TO TEMPLATE-COUNT
287400     MOVE ZERO TO TMPLT-5-LEN
287500     MOVE LOW-VALUE TO TMPLT-5-TXT
287600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
287700     IF PACKAGE-CALL
287800*      CALL ASUSSVCB TO PERFORM SERVICE POS
287900       SET ACTION-STRFPOS TO TRUE
288000       MOVE "ASUSSVCB" TO LS-ASMODULE
288100       CALL LS-ASMODULE
288200            USING ASCA-COMMAREA
288300                  ACTION
288400                  AS-REQUEST-OPTIONS
288500                  SOURCE-STRING
288600                  TEMPLATE-COUNT
288700                  TEMPLATE-4
288800                  TEMPLATE-5
288900                  AS5FDBK-COND-AREA
289000     ELSE
289100       MOVE "ASUDFPOS" TO LS-ASMODULE
289200       CALL LS-ASMODULE
289300            USING ASCA-COMMAREA
289400                  AS-REQUEST-OPTIONS
289500                  SOURCE-STRING
289600                  TEMPLATE-COUNT
289700                  TEMPLATE-4
289800                  TEMPLATE-5
289900                  AS5FDBK-COND-AREA
290000     END-IF
290100
290200     IF AS5FDBK-SEVNBR > ZERO
290300       DISPLAY WS-PGMID
290400            " RETURN CODE: " AS5FDBK-SEVNBR
290500            " MESSAGE NBR: " AS5FDBK-MSGNBR
290600     END-IF
290700
290800     DISPLAY WS-PGMID
290900          " TEST CASE 016.A FPOS FIRST/NEXT"
291000     DISPLAY WS-PGMID
291100          " MIXED CASE / MIXED CASE"
291200     DISPLAY WS-PGMID
291300          " SOURCE:" SRC-TXT
291400     DISPLAY WS-PGMID
291500          " ARGUMENT:" TMPLT-4-TXT
291600     MOVE TMPLT-5-TXT TO TEMP-FIELD
291700     DISPLAY WS-PGMID
291800          " POSITION CALL 1 (34):" FW-BINARY
291900     DISPLAY WS-PGMID
292000          " "
292100          TMPLT-5-TXT-Z
292200     DISPLAY " "
292300     IF FW-BINARY = ZERO
292400       GO TO TEST-CASE-017
292500     END-IF
292600     SKIP2
292700     CONTINUE.
292800 LOOP-16.
292900*    * ------------------------------------------------------- *
293000*    * CALL STRING SERVICE FIRST/NEXT POS
293100*    * ------------------------------------------------------- *
293200     SKIP1
293300     SET RO-FLAG-CONT TO TRUE
293400     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
293500*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
293600     MOVE +32  TO RO-PSA-LEN
293700     MOVE +2   TO TEMPLATE-COUNT
293800     MOVE ZERO TO TMPLT-5-TXT
293900     MOVE LOW-VALUE TO TMPLT-5-TXT
294000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
294100     IF PACKAGE-CALL
294200*      CALL ASUSSVCB TO PERFORM SERVICE POS
294300       SET ACTION-STRFPOS TO TRUE
294400       MOVE "ASUSSVCB" TO LS-ASMODULE
294500       CALL LS-ASMODULE
294600            USING ASCA-COMMAREA
294700                  ACTION
294800                  AS-REQUEST-OPTIONS
294900                  SOURCE-STRING
295000                  TEMPLATE-COUNT
295100                  TEMPLATE-4
295200                  TEMPLATE-5
295300                  AS5FDBK-COND-AREA
295400     ELSE
295500       MOVE "ASUDFPOS" TO LS-ASMODULE
295600       CALL LS-ASMODULE
295700            USING ASCA-COMMAREA
295800                  AS-REQUEST-OPTIONS
295900                  SOURCE-STRING
296000                  TEMPLATE-COUNT
296100                  TEMPLATE-4
296200                  TEMPLATE-5
296300                  AS5FDBK-COND-AREA
296400     END-IF
296500
296600     IF AS5FDBK-SEVNBR > ZERO
296700       DISPLAY WS-PGMID
296800            " RETURN CODE: " AS5FDBK-SEVNBR
296900            " MESSAGE NBR: " AS5FDBK-MSGNBR
297000     END-IF
297100
297200     DISPLAY WS-PGMID
297300          " TEST CASE 016.B FPOS FIRST/NEXT LOOP"
297400     DISPLAY WS-PGMID
297500          " MIXED CASE / MIXED CASE"
297600     DISPLAY WS-PGMID
297700          " SOURCE:" SRC-TXT
297800     DISPLAY WS-PGMID
297900          " ARGUMENT:" TMPLT-4-TXT
298000     MOVE TMPLT-5-TXT TO TEMP-FIELD
298100     DISPLAY WS-PGMID
298200          " POSITION CALL 2 (38,41,0):" FW-BINARY
298300     DISPLAY WS-PGMID
298400          " "
298500          TMPLT-5-TXT-Z
298600     DISPLAY " "
298700     IF FW-BINARY NOT = ZERO
298800       GO TO LOOP-16
298900     END-IF
299000     SKIP2
299100     CONTINUE.
299200 TEST-CASE-017.
299300
299400     IF NOT (TEST-CASE = "ALL" OR "017")
299500       GO TO TEST-CASE-018
299600     END-IF
299700
299800*    * ------------------------------------------------------- *
299900*    * CALL STRING SERVICE STRIP TRAILING
300000*    * ------------------------------------------------------- *
300100     SKIP1
300200     MOVE ZERO TO RO-START
300300                  RO-COUNT
300400                  RO-PSA-LEN
300500                  TMPLT-6-LEN
300600     SET RO-FLAG-TRAIL  TO TRUE
300700     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
300800*    "+++++1ST+NATIONAL+BANK+++++"
300900     MOVE +1   TO TEMPLATE-COUNT
301000     MOVE ZERO TO TMPLT-6-LEN
301100     MOVE LOW-VALUE TO TMPLT-6-TXT
301200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
301300     IF PACKAGE-CALL
301400*      CALL ASUSSVCB TO PERFORM SERVICE STRIP TRAILING
301500       SET ACTION-STRIP TO TRUE
301600       MOVE "ASUSSVCB" TO LS-ASMODULE
301700       CALL LS-ASMODULE
301800            USING ASCA-COMMAREA
301900                  ACTION
302000                  AS-REQUEST-OPTIONS
302100                  SOURCE-STRING
302200                  TEMPLATE-COUNT
302300                  TEMPLATE-6
302400                  AS5FDBK-COND-AREA
302500     ELSE
302600       MOVE "ASUDSTRP" TO LS-ASMODULE
302700       CALL LS-ASMODULE
302800            USING ASCA-COMMAREA
302900                  AS-REQUEST-OPTIONS
303000                  SOURCE-STRING
303100                  TEMPLATE-COUNT
303200                  TEMPLATE-6
303300                  AS5FDBK-COND-AREA
303400     END-IF
303500
303600     IF AS5FDBK-SEVNBR > ZERO
303700       DISPLAY WS-PGMID
303800            " RETURN CODE: " AS5FDBK-SEVNBR
303900            " MESSAGE NBR: " AS5FDBK-MSGNBR
304000     END-IF
304100
304200     DISPLAY WS-PGMID
304300          " TEST CASE 017.A - STRIP TRAILING"
304400     DISPLAY WS-PGMID
304500          " UPPER CASE / NO CASE"
304600     DISPLAY WS-PGMID
304700          " SOURCE:" SRC-TXT
304800     DISPLAY WS-PGMID
304900          " OUTPUT LEN (22):" TMPLT-6-LEN
305000     DISPLAY WS-PGMID
305100          " RESULT:" TMPLT-6-TXT
305200     DISPLAY WS-PGMID
305300          " "
305400          TMPLT-6-TXT-Z
305500     DISPLAY " "
305600     SKIP2
305700*    * ------------------------------------------------------- *
305800*    * CALL STRING SERVICE STRIP LEADING
305900*    * ------------------------------------------------------- *
306000     SKIP1
306100     MOVE ZERO TO RO-START
306200                  RO-COUNT
306300                  RO-PSA-LEN
306400                  TMPLT-6-LEN
306500     SET RO-FLAG-LEAD  TO TRUE
306600     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
306700*    "+++++1ST+NATIONAL+BANK+++++"
306800     MOVE +1   TO TEMPLATE-COUNT
306900     MOVE ZERO TO TMPLT-6-LEN
307000     MOVE LOW-VALUE TO TMPLT-6-TXT
307100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
307200     IF PACKAGE-CALL
307300*      CALL ASUSSVCB TO PERFORM SERVICE STRIP LEADING
307400       SET ACTION-STRIP TO TRUE
307500       MOVE "ASUSSVCB" TO LS-ASMODULE
307600       CALL LS-ASMODULE
307700            USING ASCA-COMMAREA
307800                  ACTION
307900                  AS-REQUEST-OPTIONS
308000                  SOURCE-STRING
308100                  TEMPLATE-COUNT
308200                  TEMPLATE-6
308300                  AS5FDBK-COND-AREA
308400     ELSE
308500       MOVE "ASUDSTRP" TO LS-ASMODULE
308600       CALL LS-ASMODULE
308700            USING ASCA-COMMAREA
308800                  AS-REQUEST-OPTIONS
308900                  SOURCE-STRING
309000                  TEMPLATE-COUNT
309100                  TEMPLATE-6
309200                  AS5FDBK-COND-AREA
309300     END-IF
309400
309500     IF AS5FDBK-SEVNBR > ZERO
309600       DISPLAY WS-PGMID
309700            " RETURN CODE: " AS5FDBK-SEVNBR
309800            " MESSAGE NBR: " AS5FDBK-MSGNBR
309900     END-IF
310000
310100     DISPLAY WS-PGMID
310200          " TEST CASE 017.B - STRIP LEADING"
310300     DISPLAY WS-PGMID
310400          " UPPER CASE / NO CASE"
310500     DISPLAY WS-PGMID
310600          " SOURCE:" SRC-TXT
310700     DISPLAY WS-PGMID
310800          " OUTPUT LEN (22):" TMPLT-6-LEN
310900     DISPLAY WS-PGMID
311000          " RESULT:" TMPLT-6-TXT
311100     DISPLAY WS-PGMID
311200          " "
311300          TMPLT-6-TXT-Z
311400     DISPLAY " "
311500     SKIP2
311600*    * ------------------------------------------------------- *
311700*    * CALL STRING SERVICE STRIP BOTH
311800*    * ------------------------------------------------------- *
311900     SKIP1
312000     MOVE ZERO TO RO-START
312100                  RO-COUNT
312200                  RO-PSA-LEN
312300                  TMPLT-6-LEN
312400     SET RO-FLAG-BOTH  TO TRUE
312500     MOVE WS-SOURCE-STRING-4 TO SOURCE-STRING
312600*    "+++++1ST+NATIONAL+BANK+++++"
312700     MOVE +1   TO TEMPLATE-COUNT
312800     MOVE ZERO TO TMPLT-6-LEN
312900     MOVE LOW-VALUE TO TMPLT-6-TXT
313000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
313100     IF PACKAGE-CALL
313200*      CALL ASUSSVCB TO PERFORM SERVICE STRIP BOTH
313300       SET ACTION-STRIP TO TRUE
313400       MOVE "ASUSSVCB" TO LS-ASMODULE
313500       CALL LS-ASMODULE
313600            USING ASCA-COMMAREA
313700                  ACTION
313800                  AS-REQUEST-OPTIONS
313900                  SOURCE-STRING
314000                  TEMPLATE-COUNT
314100                  TEMPLATE-6
314200                  AS5FDBK-COND-AREA
314300     ELSE
314400       MOVE "ASUDSTRP" TO LS-ASMODULE
314500       CALL LS-ASMODULE
314600            USING ASCA-COMMAREA
314700                  AS-REQUEST-OPTIONS
314800                  SOURCE-STRING
314900                  TEMPLATE-COUNT
315000                  TEMPLATE-6
315100                  AS5FDBK-COND-AREA
315200     END-IF
315300
315400     IF AS5FDBK-SEVNBR > ZERO
315500       DISPLAY WS-PGMID
315600            " RETURN CODE: " AS5FDBK-SEVNBR
315700            " MESSAGE NBR: " AS5FDBK-MSGNBR
315800     END-IF
315900
316000     DISPLAY WS-PGMID
316100          " TEST CASE 017.C - STRIP BOTH"
316200     DISPLAY WS-PGMID
316300          " UPPER CASE / NO CASE"
316400     DISPLAY WS-PGMID
316500          " SOURCE:" SRC-TXT
316600     DISPLAY WS-PGMID
316700          " OUTPUT LEN (17):" TMPLT-6-LEN
316800     DISPLAY WS-PGMID
316900          " RESULT:" TMPLT-6-TXT
317000     DISPLAY WS-PGMID
317100          " "
317200          TMPLT-6-TXT-Z
317300     DISPLAY " "
317400     SKIP2
317500     CONTINUE.
317600 TEST-CASE-018.
317700
317800     IF NOT (TEST-CASE = "ALL" OR "018")
317900       GO TO TEST-CASE-019
318000     END-IF
318100
318200*    * ------------------------------------------------------- *
318300*    * CALL STRING SERVICE STRING INSERT IN FRONT
318400*    * ------------------------------------------------------- *
318500     SKIP1
318600     MOVE ZERO TO RO-START
318700                  RO-COUNT
318800                  RO-PSA-LEN
318900                  TMPLT-6-LEN
319000     SET RO-FLAG-NONE  TO TRUE
319100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
319200*    "+How+now+brown+cow++"
319300     MOVE +2   TO TEMPLATE-COUNT
319400     MOVE ZERO TO TMPLT-6-LEN
319500     MOVE LOW-VALUE TO TMPLT-6-TXT
319600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
319700     IF PACKAGE-CALL
319800*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
319900       SET ACTION-STRISRT TO TRUE
320000       MOVE "ASUSSVCB" TO LS-ASMODULE
320100       CALL LS-ASMODULE
320200            USING ASCA-COMMAREA
320300                  ACTION
320400                  AS-REQUEST-OPTIONS
320500                  SOURCE-STRING
320600                  TEMPLATE-COUNT
320700                  TEMPLATE-8
320800                  TEMPLATE-6
320900                  AS5FDBK-COND-AREA
321000     ELSE
321100       MOVE "ASUDSINS" TO LS-ASMODULE
321200       CALL LS-ASMODULE
321300            USING ASCA-COMMAREA
321400                  AS-REQUEST-OPTIONS
321500                  SOURCE-STRING
321600                  TEMPLATE-COUNT
321700                  TEMPLATE-8
321800                  TEMPLATE-6
321900                  AS5FDBK-COND-AREA
322000     END-IF
322100
322200     IF AS5FDBK-SEVNBR > ZERO
322300       DISPLAY WS-PGMID
322400            " RETURN CODE: " AS5FDBK-SEVNBR
322500            " MESSAGE NBR: " AS5FDBK-MSGNBR
322600     END-IF
322700
322800     DISPLAY WS-PGMID
322900          " TEST CASE 018.A - STRING INSERT (0,0,GOOD+)"
323000     DISPLAY WS-PGMID
323100          " MIXED CASE / NO CASE"
323200     DISPLAY WS-PGMID
323300          " SOURCE:" SRC-TXT
323400     DISPLAY WS-PGMID
323500          " OUTPUT LEN (25):" TMPLT-6-LEN
323600     DISPLAY WS-PGMID
323700          " RESULT:" TMPLT-6-TXT
323800     DISPLAY WS-PGMID
323900          " "
324000          TMPLT-6-TXT-Z
324100     DISPLAY " "
324200     SKIP2
324300*    * ------------------------------------------------------- *
324400*    * CALL STRING SERVICE STRING INSERT IN MIDDLE
324500*    * ------------------------------------------------------- *
324600     SKIP1
324700     MOVE ZERO TO RO-START
324800                  RO-COUNT
324900                  RO-PSA-LEN
325000                  TMPLT-6-LEN
325100     SET RO-FLAG-NONE  TO TRUE
325200     MOVE +10 TO RO-START
325300     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
325400*    "+How+now+brown+cow++"
325500     MOVE +2   TO TEMPLATE-COUNT
325600     MOVE ZERO TO TMPLT-6-LEN
325700     MOVE LOW-VALUE TO TMPLT-6-TXT
325800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
325900     IF PACKAGE-CALL
326000*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
326100       SET ACTION-STRISRT TO TRUE
326200       MOVE "ASUSSVCB" TO LS-ASMODULE
326300       CALL LS-ASMODULE
326400            USING ASCA-COMMAREA
326500                  ACTION
326600                  AS-REQUEST-OPTIONS
326700                  SOURCE-STRING
326800                  TEMPLATE-COUNT
326900                  TEMPLATE-8
327000                  TEMPLATE-6
327100                  AS5FDBK-COND-AREA
327200     ELSE
327300       MOVE "ASUDSINS" TO LS-ASMODULE
327400       CALL LS-ASMODULE
327500            USING ASCA-COMMAREA
327600                  AS-REQUEST-OPTIONS
327700                  SOURCE-STRING
327800                  TEMPLATE-COUNT
327900                  TEMPLATE-8
328000                  TEMPLATE-6
328100                  AS5FDBK-COND-AREA
328200     END-IF
328300
328400     IF AS5FDBK-SEVNBR > ZERO
328500       DISPLAY WS-PGMID
328600            " RETURN CODE: " AS5FDBK-SEVNBR
328700            " MESSAGE NBR: " AS5FDBK-MSGNBR
328800     END-IF
328900
329000     DISPLAY WS-PGMID
329100          " TEST CASE 018.B - STRING INSERT (10,0,GOOD+)"
329200     DISPLAY WS-PGMID
329300          " MIXED CASE / NO CASE"
329400     DISPLAY WS-PGMID
329500          " SOURCE:" SRC-TXT
329600     DISPLAY WS-PGMID
329700          " OUTPUT LEN (25):" TMPLT-6-LEN
329800     DISPLAY WS-PGMID
329900          " RESULT:" TMPLT-6-TXT
330000     DISPLAY WS-PGMID
330100          " "
330200          TMPLT-6-TXT-Z
330300     DISPLAY " "
330400     SKIP2
330500*    * ------------------------------------------------------- *
330600*    * CALL STRING SERVICE STRING INSERT AT END
330700*    * ------------------------------------------------------- *
330800     SKIP1
330900     MOVE ZERO TO RO-START
331000                  RO-COUNT
331100                  RO-PSA-LEN
331200                  TMPLT-6-LEN
331300     SET RO-FLAG-UC    TO TRUE
331400     MOVE +20 TO RO-START
331500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
331600*    "+How+now+brown+cow++"
331700     MOVE +2   TO TEMPLATE-COUNT
331800     MOVE ZERO TO TMPLT-6-LEN
331900     MOVE LOW-VALUE TO TMPLT-6-TXT
332000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
332100     IF PACKAGE-CALL
332200*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
332300       SET ACTION-STRISRT TO TRUE
332400       MOVE "ASUSSVCB" TO LS-ASMODULE
332500       CALL LS-ASMODULE
332600            USING ASCA-COMMAREA
332700                  ACTION
332800                  AS-REQUEST-OPTIONS
332900                  SOURCE-STRING
333000                  TEMPLATE-COUNT
333100                  TEMPLATE-8
333200                  TEMPLATE-6
333300                  AS5FDBK-COND-AREA
333400     ELSE
333500       MOVE "ASUDSINS" TO LS-ASMODULE
333600       CALL LS-ASMODULE
333700            USING ASCA-COMMAREA
333800                  AS-REQUEST-OPTIONS
333900                  SOURCE-STRING
334000                  TEMPLATE-COUNT
334100                  TEMPLATE-8
334200                  TEMPLATE-6
334300                  AS5FDBK-COND-AREA
334400     END-IF
334500
334600     IF AS5FDBK-SEVNBR > ZERO
334700       DISPLAY WS-PGMID
334800            " RETURN CODE: " AS5FDBK-SEVNBR
334900            " MESSAGE NBR: " AS5FDBK-MSGNBR
335000     END-IF
335100
335200     DISPLAY WS-PGMID
335300          " TEST CASE 018.C - STRING INSERT (20,0,GOOD+)"
335400     DISPLAY WS-PGMID
335500          " MIXED CASE / UPPER CASE"
335600     DISPLAY WS-PGMID
335700          " SOURCE:" SRC-TXT
335800     DISPLAY WS-PGMID
335900          " OUTPUT LEN (25):" TMPLT-6-LEN
336000     DISPLAY WS-PGMID
336100          " RESULT:" TMPLT-6-TXT
336200     DISPLAY WS-PGMID
336300          " "
336400          TMPLT-6-TXT-Z
336500     DISPLAY " "
336600     SKIP2
336700     CONTINUE.
336800 TEST-CASE-019.
336900
337000     IF NOT (TEST-CASE = "ALL" OR "019")
337100       GO TO TEST-CASE-020
337200     END-IF
337300
337400*    * ------------------------------------------------------- *
337500*    * CALL STRING SERVICE LAST/PREV POS
337600*    * ------------------------------------------------------- *
337700     SKIP1
337800     MOVE ZERO TO RO-START
337900                  RO-COUNT
338000                  RO-PSA-LEN
338100     SET RO-FLAG-NONE TO TRUE
338200     MOVE +32  TO RO-PSA-LEN
338300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
338400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
338500     MOVE +2   TO TEMPLATE-COUNT
338600     MOVE ZERO TO TMPLT-5-LEN
338700     MOVE LOW-VALUE TO TMPLT-5-TXT
338800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
338900     IF PACKAGE-CALL
339000*      CALL ASUSSVCB TO PERFORM SERVICE POS
339100       SET ACTION-STRLPOS TO TRUE
339200       MOVE "ASUSSVCB" TO LS-ASMODULE
339300       CALL LS-ASMODULE
339400            USING ASCA-COMMAREA
339500                  ACTION
339600                  AS-REQUEST-OPTIONS
339700                  SOURCE-STRING
339800                  TEMPLATE-COUNT
339900                  TEMPLATE-4
340000                  TEMPLATE-5
340100                  AS5FDBK-COND-AREA
340200     ELSE
340300       MOVE "ASUDLPOS" TO LS-ASMODULE
340400       CALL LS-ASMODULE
340500            USING ASCA-COMMAREA
340600                  AS-REQUEST-OPTIONS
340700                  SOURCE-STRING
340800                  TEMPLATE-COUNT
340900                  TEMPLATE-4
341000                  TEMPLATE-5
341100                  AS5FDBK-COND-AREA
341200     END-IF
341300
341400     IF AS5FDBK-SEVNBR > ZERO
341500       DISPLAY WS-PGMID
341600            " RETURN CODE: " AS5FDBK-SEVNBR
341700            " MESSAGE NBR: " AS5FDBK-MSGNBR
341800     END-IF
341900
342000     DISPLAY WS-PGMID
342100          " TEST CASE 019.A LPOS LAST/PREV"
342200     DISPLAY WS-PGMID
342300          " MIXED CASE / MIXED CASE"
342400     DISPLAY WS-PGMID
342500          " SOURCE:" SRC-TXT
342600     DISPLAY WS-PGMID
342700          " ARGUMENT:" TMPLT-4-TXT
342800     MOVE TMPLT-5-TXT TO TEMP-FIELD
342900     DISPLAY WS-PGMID
343000          " POSITION CALL 1 (41):" FW-BINARY
343100     DISPLAY WS-PGMID
343200          " "
343300          TMPLT-5-TXT-Z
343400     DISPLAY " "
343500     IF FW-BINARY = ZERO
343600       GO TO TEST-CASE-019
343700     END-IF
343800     SKIP2
343900     CONTINUE.
344000 LOOP-19.
344100*    * ------------------------------------------------------- *
344200*    * CALL STRING SERVICE LAST/PREV POS
344300*    * ------------------------------------------------------- *
344400     SKIP1
344500     SET RO-FLAG-CONT TO TRUE
344600     MOVE +32  TO RO-PSA-LEN
344700     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
344800*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
344900     MOVE +2   TO TEMPLATE-COUNT
345000     MOVE ZERO TO TMPLT-5-LEN
345100     MOVE LOW-VALUE TO TMPLT-5-TXT
345200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
345300     IF PACKAGE-CALL
345400*      CALL ASUSSVCB TO PERFORM SERVICE POS
345500       SET ACTION-STRLPOS TO TRUE
345600       MOVE "ASUSSVCB" TO LS-ASMODULE
345700       CALL LS-ASMODULE
345800            USING ASCA-COMMAREA
345900                  ACTION
346000                  AS-REQUEST-OPTIONS
346100                  SOURCE-STRING
346200                  TEMPLATE-COUNT
346300                  TEMPLATE-4
346400                  TEMPLATE-5
346500                  AS5FDBK-COND-AREA
346600     ELSE
346700       MOVE "ASUDLPOS" TO LS-ASMODULE
346800       CALL LS-ASMODULE
346900            USING ASCA-COMMAREA
347000                  AS-REQUEST-OPTIONS
347100                  SOURCE-STRING
347200                  TEMPLATE-COUNT
347300                  TEMPLATE-4
347400                  TEMPLATE-5
347500                  AS5FDBK-COND-AREA
347600     END-IF
347700
347800     IF AS5FDBK-SEVNBR > ZERO
347900       DISPLAY WS-PGMID
348000            " RETURN CODE: " AS5FDBK-SEVNBR
348100            " MESSAGE NBR: " AS5FDBK-MSGNBR
348200     END-IF
348300
348400     DISPLAY WS-PGMID
348500          " TEST CASE 019.B LPOS LAST/PREV LOOP"
348600     DISPLAY WS-PGMID
348700          " MIXED CASE / MIXED CASE"
348800     DISPLAY WS-PGMID
348900          " SOURCE:" SRC-TXT
349000     DISPLAY WS-PGMID
349100          " ARGUMENT:" TMPLT-4-TXT
349200     MOVE TMPLT-5-TXT TO TEMP-FIELD
349300     DISPLAY WS-PGMID
349400          " POSITION CALL 2 (38,34,0):" FW-BINARY
349500     DISPLAY WS-PGMID
349600          " "
349700          TMPLT-5-TXT-Z
349800     DISPLAY " "
349900     IF FW-BINARY NOT = ZERO
350000       GO TO LOOP-19
350100     END-IF
350200     SKIP2
350300     CONTINUE.
350400 TEST-CASE-020.
350500
350600     IF NOT (TEST-CASE = "ALL" OR "020")
350700       GO TO TEST-CASE-021
350800     END-IF
350900
351000*    * ------------------------------------------------------- *
351100*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
351200*    * ------------------------------------------------------- *
351300     SKIP1
351400     MOVE ZERO TO RO-START
351500                  RO-COUNT
351600                  RO-PSA-LEN
351700     SET RO-FLAG-NONE TO TRUE
351800     MOVE +288 TO RO-PSA-LEN
351900     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
352000*    "+How+now+brown+cow++"
352100     MOVE +2   TO TEMPLATE-COUNT
352200     MOVE ZERO TO TMPLT-5-LEN
352300     MOVE LOW-VALUE TO TMPLT-5-TXT
352400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
352500     IF PACKAGE-CALL
352600*      CALL ASUSSVCB TO PERFORM SERVICE POS
352700       SET ACTION-BMFPOS TO TRUE
352800       MOVE "ASUSSVCB" TO LS-ASMODULE
352900       CALL LS-ASMODULE
353000            USING ASCA-COMMAREA
353100                  ACTION
353200                  AS-REQUEST-OPTIONS
353300                  SOURCE-STRING
353400                  TEMPLATE-COUNT
353500                  TEMPLATE-23
353600                  TEMPLATE-5
353700                  AS5FDBK-COND-AREA
353800     ELSE
353900       MOVE "ASUDBPOS" TO LS-ASMODULE
354000       CALL LS-ASMODULE
354100            USING ASCA-COMMAREA
354200                  AS-REQUEST-OPTIONS
354300                  SOURCE-STRING
354400                  TEMPLATE-COUNT
354500                  TEMPLATE-23
354600                  TEMPLATE-5
354700                  AS5FDBK-COND-AREA
354800     END-IF
354900
355000     IF AS5FDBK-SEVNBR > ZERO
355100       DISPLAY WS-PGMID
355200            " RETURN CODE: " AS5FDBK-SEVNBR
355300            " MESSAGE NBR: " AS5FDBK-MSGNBR
355400     END-IF
355500
355600     DISPLAY WS-PGMID
355700          " TEST CASE 020.A BMFPOS FIRST/NEXT"
355800     DISPLAY WS-PGMID
355900          " MIXED CASE / MIXED CASE"
356000     DISPLAY WS-PGMID
356100          " SOURCE:" SRC-TXT
356200     DISPLAY WS-PGMID
356300          " ARGUMENT:" TMPLT-23-TXT
356400     MOVE TMPLT-5-TXT TO TEMP-FIELD
356500     DISPLAY WS-PGMID
356600          " POSITION CALL (16):" FW-BINARY
356700     DISPLAY WS-PGMID
356800          " "
356900          TMPLT-5-TXT-Z
357000     DISPLAY " "
357100     SKIP2
357200*    * ------------------------------------------------------- *
357300*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
357400*    * ------------------------------------------------------- *
357500     SKIP1
357600     MOVE ZERO TO RO-START
357700                  RO-COUNT
357800                  RO-PSA-LEN
357900     SET RO-FLAG-NONE TO TRUE
358000     MOVE +288 TO RO-PSA-LEN
358100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
358200*    "+How+now+brown+cow++"
358300     MOVE +2   TO TEMPLATE-COUNT
358400     MOVE ZERO TO TMPLT-5-LEN
358500     MOVE LOW-VALUE TO TMPLT-5-TXT
358600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
358700     IF PACKAGE-CALL
358800*      CALL ASUSSVCB TO PERFORM SERVICE POS
358900       SET ACTION-BMFPOS TO TRUE
359000       MOVE "ASUSSVCB" TO LS-ASMODULE
359100       CALL LS-ASMODULE
359200            USING ASCA-COMMAREA
359300                  ACTION
359400                  AS-REQUEST-OPTIONS
359500                  SOURCE-STRING
359600                  TEMPLATE-COUNT
359700                  TEMPLATE-24
359800                  TEMPLATE-5
359900                  AS5FDBK-COND-AREA
360000     ELSE
360100       MOVE "ASUDBPOS" TO LS-ASMODULE
360200       CALL LS-ASMODULE
360300            USING ASCA-COMMAREA
360400                  AS-REQUEST-OPTIONS
360500                  SOURCE-STRING
360600                  TEMPLATE-COUNT
360700                  TEMPLATE-24
360800                  TEMPLATE-5
360900                  AS5FDBK-COND-AREA
361000     END-IF
361100
361200     IF AS5FDBK-SEVNBR > ZERO
361300       DISPLAY WS-PGMID
361400            " RETURN CODE: " AS5FDBK-SEVNBR
361500            " MESSAGE NBR: " AS5FDBK-MSGNBR
361600     END-IF
361700
361800     DISPLAY WS-PGMID
361900          " TEST CASE 020.B BMFPOS FIRST/NEXT"
362000     DISPLAY WS-PGMID
362100          " MIXED CASE / MIXED CASE"
362200     DISPLAY WS-PGMID
362300          " SOURCE:" SRC-TXT
362400     DISPLAY WS-PGMID
362500          " ARGUMENT:" TMPLT-24-TXT
362600     MOVE TMPLT-5-TXT TO TEMP-FIELD
362700     DISPLAY WS-PGMID
362800          " POSITION CALL (6):" FW-BINARY
362900     DISPLAY WS-PGMID
363000          " "
363100          TMPLT-5-TXT-Z
363200     DISPLAY " "
363300     SKIP2
363400*    * ------------------------------------------------------- *
363500*    * CALL STRING SERVICE BOYER-MOORE FIRST/NEXT POS
363600*    * ------------------------------------------------------- *
363700     SKIP1
363800     MOVE ZERO TO RO-START
363900                  RO-COUNT
364000                  RO-PSA-LEN
364100     SET RO-FLAG-CASE TO TRUE
364200     MOVE +288 TO RO-PSA-LEN
364300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
364400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
364500     MOVE +2   TO TEMPLATE-COUNT
364600     MOVE ZERO TO TMPLT-5-LEN
364700     MOVE LOW-VALUE TO TMPLT-5-TXT
364800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
364900     IF PACKAGE-CALL
365000*      CALL ASUSSVCB TO PERFORM SERVICE POS
365100       SET ACTION-BMFPOS TO TRUE
365200       MOVE "ASUSSVCB" TO LS-ASMODULE
365300       CALL LS-ASMODULE
365400            USING ASCA-COMMAREA
365500                  ACTION
365600                  AS-REQUEST-OPTIONS
365700                  SOURCE-STRING
365800                  TEMPLATE-COUNT
365900                  TEMPLATE-4
366000                  TEMPLATE-5
366100                  AS5FDBK-COND-AREA
366200     ELSE
366300       MOVE "ASUDBPOS" TO LS-ASMODULE
366400       CALL LS-ASMODULE
366500            USING ASCA-COMMAREA
366600                  AS-REQUEST-OPTIONS
366700                  SOURCE-STRING
366800                  TEMPLATE-COUNT
366900                  TEMPLATE-4
367000                  TEMPLATE-5
367100                  AS5FDBK-COND-AREA
367200     END-IF
367300
367400     IF AS5FDBK-SEVNBR > ZERO
367500       DISPLAY WS-PGMID
367600            " RETURN CODE: " AS5FDBK-SEVNBR
367700            " MESSAGE NBR: " AS5FDBK-MSGNBR
367800     END-IF
367900
368000     DISPLAY WS-PGMID
368100          " TEST CASE 020.C BMFPOS FIRST/NEXT"
368200     DISPLAY WS-PGMID
368300          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
368400     DISPLAY WS-PGMID
368500          " SOURCE:" SRC-TXT
368600     DISPLAY WS-PGMID
368700          " ARGUMENT:" TMPLT-4-TXT
368800     MOVE TMPLT-5-TXT TO TEMP-FIELD
368900     DISPLAY WS-PGMID
369000          " POSITION CALL 1 (30):" FW-BINARY
369100     DISPLAY WS-PGMID
369200          " "
369300          TMPLT-5-TXT-Z
369400     DISPLAY " "
369500     IF FW-BINARY = ZERO
369600       GO TO TEST-CASE-021
369700     END-IF
369800     SKIP2
369900     CONTINUE.
370000 LOOP-20-D.
370100*    * ------------------------------------------------------- *
370200*    * CALL STRING SERVICE BOYER-MORE FIRST/NEXT POS
370300*    * ------------------------------------------------------- *
370400     SKIP1
370500     SET RO-FLAG-CASE-CONT TO TRUE
370600     MOVE +288 TO RO-PSA-LEN
370700     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
370800*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
370900     MOVE +2   TO TEMPLATE-COUNT
371000     MOVE ZERO TO TMPLT-5-LEN
371100     MOVE LOW-VALUE TO TMPLT-5-TXT
371200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
371300     IF PACKAGE-CALL
371400*      CALL ASUSSVCB TO PERFORM SERVICE POS
371500       SET ACTION-BMFPOS TO TRUE
371600       MOVE "ASUSSVCB" TO LS-ASMODULE
371700       CALL LS-ASMODULE
371800            USING ASCA-COMMAREA
371900                  ACTION
372000                  AS-REQUEST-OPTIONS
372100                  SOURCE-STRING
372200                  TEMPLATE-COUNT
372300                  TEMPLATE-4
372400                  TEMPLATE-5
372500                  AS5FDBK-COND-AREA
372600     ELSE
372700       MOVE "ASUDBPOS" TO LS-ASMODULE
372800       CALL LS-ASMODULE
372900            USING ASCA-COMMAREA
373000                  AS-REQUEST-OPTIONS
373100                  SOURCE-STRING
373200                  TEMPLATE-COUNT
373300                  TEMPLATE-4
373400                  TEMPLATE-5
373500                  AS5FDBK-COND-AREA
373600     END-IF
373700
373800     IF AS5FDBK-SEVNBR > ZERO
373900       DISPLAY WS-PGMID
374000            " RETURN CODE: " AS5FDBK-SEVNBR
374100            " MESSAGE NBR: " AS5FDBK-MSGNBR
374200     END-IF
374300
374400     DISPLAY WS-PGMID
374500          " TEST CASE 020.D BMFPOS FIRST/NEXT LOOP"
374600     DISPLAY WS-PGMID
374700          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
374800     DISPLAY WS-PGMID
374900          " SOURCE:" SRC-TXT
375000     DISPLAY WS-PGMID
375100          " ARGUMENT:" TMPLT-4-TXT
375200     MOVE TMPLT-5-TXT TO TEMP-FIELD
375300     DISPLAY WS-PGMID
375400          " POSITION CALL 2 (34,38,41,45,0):" FW-BINARY
375500     DISPLAY WS-PGMID
375600          " "
375700          TMPLT-5-TXT-Z
375800     DISPLAY " "
375900     IF FW-BINARY NOT = ZERO
376000       GO TO LOOP-20-D
376100     END-IF
376200     SKIP2
376300     CONTINUE.
376400 TEST-CASE-021.
376500
376600     IF NOT (TEST-CASE = "ALL" OR "021")
376700       GO TO TEST-CASE-022
376800     END-IF
376900
377000*    * ------------------------------------------------------- *
377100*    * CALL STRING SERVICE STRING REPLACE IN FRONT
377200*    * ------------------------------------------------------- *
377300     SKIP1
377400     MOVE ZERO TO RO-START
377500                  RO-COUNT
377600                  RO-PSA-LEN
377700                  TMPLT-6-LEN
377800     SET RO-FLAG-NONE  TO TRUE
377900     MOVE +1 TO RO-START
378000     MOVE +4 TO RO-COUNT
378100     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
378200*    "+How+now+brown+cow++"
378300     MOVE +2   TO TEMPLATE-COUNT
378400     MOVE ZERO TO TMPLT-6-LEN
378500     MOVE LOW-VALUE TO TMPLT-6-TXT
378600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
378700     IF PACKAGE-CALL
378800*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
378900       SET ACTION-STRREPL TO TRUE
379000       MOVE "ASUSSVCB" TO LS-ASMODULE
379100       CALL LS-ASMODULE
379200            USING ASCA-COMMAREA
379300                  ACTION
379400                  AS-REQUEST-OPTIONS
379500                  SOURCE-STRING
379600                  TEMPLATE-COUNT
379700                  TEMPLATE-8
379800                  TEMPLATE-6
379900                  AS5FDBK-COND-AREA
380000     ELSE
380100       MOVE "ASUDSREP" TO LS-ASMODULE
380200       CALL LS-ASMODULE
380300            USING ASCA-COMMAREA
380400                  AS-REQUEST-OPTIONS
380500                  SOURCE-STRING
380600                  TEMPLATE-COUNT
380700                  TEMPLATE-8
380800                  TEMPLATE-6
380900                  AS5FDBK-COND-AREA
381000     END-IF
381100
381200     IF AS5FDBK-SEVNBR > ZERO
381300       DISPLAY WS-PGMID
381400            " RETURN CODE: " AS5FDBK-SEVNBR
381500            " MESSAGE NBR: " AS5FDBK-MSGNBR
381600     END-IF
381700
381800     DISPLAY WS-PGMID
381900          " TEST CASE 021.A - STRING REPLACE (1,4,GOOD+)"
382000     DISPLAY WS-PGMID
382100          " MIXED CASE / NO CASE"
382200     DISPLAY WS-PGMID
382300          " SOURCE:" SRC-TXT
382400     DISPLAY WS-PGMID
382500          " OUTPUT LEN (21):" TMPLT-6-LEN
382600     DISPLAY WS-PGMID
382700          " RESULT:" TMPLT-6-TXT
382800     DISPLAY WS-PGMID
382900          " "
383000          TMPLT-6-TXT-Z
383100     DISPLAY " "
383200     SKIP2
383300*    * ------------------------------------------------------- *
383400*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE
383500*    * ------------------------------------------------------- *
383600     SKIP1
383700     MOVE ZERO TO RO-START
383800                  RO-COUNT
383900                  RO-PSA-LEN
384000                  TMPLT-6-LEN
384100     SET RO-FLAG-NONE  TO TRUE
384200     MOVE +10 TO RO-START
384300     MOVE +5  TO RO-COUNT
384400     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
384500*    "+How+now+brown+cow++"
384600     MOVE +2   TO TEMPLATE-COUNT
384700     MOVE ZERO TO TMPLT-6-LEN
384800     MOVE LOW-VALUE TO TMPLT-6-TXT
384900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
385000     IF PACKAGE-CALL
385100*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
385200       SET ACTION-STRREPL TO TRUE
385300       MOVE "ASUSSVCB" TO LS-ASMODULE
385400       CALL LS-ASMODULE
385500            USING ASCA-COMMAREA
385600                  ACTION
385700                  AS-REQUEST-OPTIONS
385800                  SOURCE-STRING
385900                  TEMPLATE-COUNT
386000                  TEMPLATE-4
386100                  TEMPLATE-6
386200                  AS5FDBK-COND-AREA
386300     ELSE
386400       MOVE "ASUDSREP" TO LS-ASMODULE
386500       CALL LS-ASMODULE
386600            USING ASCA-COMMAREA
386700                  AS-REQUEST-OPTIONS
386800                  SOURCE-STRING
386900                  TEMPLATE-COUNT
387000                  TEMPLATE-4
387100                  TEMPLATE-6
387200                  AS5FDBK-COND-AREA
387300     END-IF
387400
387500     IF AS5FDBK-SEVNBR > ZERO
387600       DISPLAY WS-PGMID
387700            " RETURN CODE: " AS5FDBK-SEVNBR
387800            " MESSAGE NBR: " AS5FDBK-MSGNBR
387900     END-IF
388000
388100     DISPLAY WS-PGMID
388200          " TEST CASE 021.B - STRING REPLACE (10,5,MEN)"
388300     DISPLAY WS-PGMID
388400          " MIXED CASE / NO CASE"
388500     DISPLAY WS-PGMID
388600          " SOURCE:" SRC-TXT
388700     DISPLAY WS-PGMID
388800          " OUTPUT LEN (18):" TMPLT-6-LEN
388900     DISPLAY WS-PGMID
389000          " RESULT:" TMPLT-6-TXT
389100     DISPLAY WS-PGMID
389200          " "
389300          TMPLT-6-TXT-Z
389400     DISPLAY " "
389500     SKIP2
389600*    * ------------------------------------------------------- *
389700*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE TRUNC
389800*    * ------------------------------------------------------- *
389900     SKIP1
390000     MOVE ZERO TO RO-START
390100                  RO-COUNT
390200                  RO-PSA-LEN
390300                  TMPLT-6-LEN
390400     SET RO-FLAG-NONE  TO TRUE
390500     MOVE +10 TO RO-START
390600     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
390700*    "+How+now+brown+cow++"
390800     MOVE +2   TO TEMPLATE-COUNT
390900     MOVE ZERO TO TMPLT-6-LEN
391000     MOVE LOW-VALUE TO TMPLT-6-TXT
391100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
391200     IF PACKAGE-CALL
391300*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
391400       SET ACTION-STRREPL TO TRUE
391500       MOVE "ASUSSVCB" TO LS-ASMODULE
391600       CALL LS-ASMODULE
391700            USING ASCA-COMMAREA
391800                  ACTION
391900                  AS-REQUEST-OPTIONS
392000                  SOURCE-STRING
392100                  TEMPLATE-COUNT
392200                  TEMPLATE-4
392300                  TEMPLATE-6
392400                  AS5FDBK-COND-AREA
392500     ELSE
392600       MOVE "ASUDSREP" TO LS-ASMODULE
392700       CALL LS-ASMODULE
392800            USING ASCA-COMMAREA
392900                  AS-REQUEST-OPTIONS
393000                  SOURCE-STRING
393100                  TEMPLATE-COUNT
393200                  TEMPLATE-4
393300                  TEMPLATE-6
393400                  AS5FDBK-COND-AREA
393500     END-IF
393600
393700     IF AS5FDBK-SEVNBR > ZERO
393800       DISPLAY WS-PGMID
393900            " RETURN CODE: " AS5FDBK-SEVNBR
394000            " MESSAGE NBR: " AS5FDBK-MSGNBR
394100     END-IF
394200
394300     DISPLAY WS-PGMID
394400          " TEST CASE 021.C - STRING REPLACE (10,0,MEN)"
394500     DISPLAY WS-PGMID
394600          " MIXED CASE / NO CASE"
394700     DISPLAY WS-PGMID
394800          " SOURCE:" SRC-TXT
394900     DISPLAY WS-PGMID
395000          " OUTPUT LEN (12):" TMPLT-6-LEN
395100     DISPLAY WS-PGMID
395200          " RESULT:" TMPLT-6-TXT
395300     DISPLAY WS-PGMID
395400          " "
395500          TMPLT-6-TXT-Z
395600     DISPLAY " "
395700     SKIP2
395800*    * ------------------------------------------------------- *
395900*    * CALL STRING SERVICE STRING REPLACE AT END
396000*    * ------------------------------------------------------- *
396100     SKIP1
396200     MOVE ZERO TO RO-START
396300                  RO-COUNT
396400                  RO-PSA-LEN
396500                  TMPLT-6-LEN
396600     SET RO-FLAG-UC    TO TRUE
396700     MOVE +20 TO RO-START
396800     MOVE +1  TO RO-COUNT
396900     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
397000*    "+How+now+brown+cow++"
397100     MOVE +2   TO TEMPLATE-COUNT
397200     MOVE ZERO TO TMPLT-6-LEN
397300     MOVE LOW-VALUE TO TMPLT-6-TXT
397400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
397500     IF PACKAGE-CALL
397600*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
397700       SET ACTION-STRREPL TO TRUE
397800       MOVE "ASUSSVCB" TO LS-ASMODULE
397900       CALL LS-ASMODULE
398000            USING ASCA-COMMAREA
398100                  ACTION
398200                  AS-REQUEST-OPTIONS
398300                  SOURCE-STRING
398400                  TEMPLATE-COUNT
398500                  TEMPLATE-8
398600                  TEMPLATE-6
398700                  AS5FDBK-COND-AREA
398800     ELSE
398900       MOVE "ASUDSREP" TO LS-ASMODULE
399000       CALL LS-ASMODULE
399100            USING ASCA-COMMAREA
399200                  AS-REQUEST-OPTIONS
399300                  SOURCE-STRING
399400                  TEMPLATE-COUNT
399500                  TEMPLATE-8
399600                  TEMPLATE-6
399700                  AS5FDBK-COND-AREA
399800     END-IF
399900
400000     IF AS5FDBK-SEVNBR > ZERO
400100       DISPLAY WS-PGMID
400200            " RETURN CODE: " AS5FDBK-SEVNBR
400300            " MESSAGE NBR: " AS5FDBK-MSGNBR
400400     END-IF
400500
400600     DISPLAY WS-PGMID
400700          " TEST CASE 021.D - STRING REPLACE (20,1,GOOD+)"
400800     DISPLAY WS-PGMID
400900          " MIXED CASE / UPPER CASE"
401000     DISPLAY WS-PGMID
401100          " SOURCE:" SRC-TXT
401200     DISPLAY WS-PGMID
401300          " OUTPUT LEN (24):" TMPLT-6-LEN
401400     DISPLAY WS-PGMID
401500          " RESULT:" TMPLT-6-TXT
401600     DISPLAY WS-PGMID
401700          " "
401800          TMPLT-6-TXT-Z
401900     DISPLAY " "
402000     SKIP2
402100*    * ------------------------------------------------------- *
402200*    * CALL STRING SERVICE STRING REPLACE IN FRONT
402300*    * ------------------------------------------------------- *
402400     SKIP1
402500     MOVE ZERO TO RO-START
402600                  RO-COUNT
402700                  RO-PSA-LEN
402800                  TMPLT-6-LEN
402900     SET RO-FLAG-NONE  TO TRUE
403000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
403100*    "+How+now+brown+cow++"
403200     MOVE +3   TO TEMPLATE-COUNT
403300     MOVE ZERO TO TMPLT-6-LEN
403400     MOVE LOW-VALUE TO TMPLT-6-TXT
403500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
403600     IF PACKAGE-CALL
403700*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
403800       SET ACTION-STRREPL TO TRUE
403900       MOVE "ASUSSVCB" TO LS-ASMODULE
404000       CALL LS-ASMODULE
404100            USING ASCA-COMMAREA
404200                  ACTION
404300                  AS-REQUEST-OPTIONS
404400                  SOURCE-STRING
404500                  TEMPLATE-COUNT
404600                  TEMPLATE-18
404700                  TEMPLATE-8
404800                  TEMPLATE-6
404900                  AS5FDBK-COND-AREA
405000     ELSE
405100       MOVE "ASUDSREP" TO LS-ASMODULE
405200       CALL LS-ASMODULE
405300            USING ASCA-COMMAREA
405400                  AS-REQUEST-OPTIONS
405500                  SOURCE-STRING
405600                  TEMPLATE-COUNT
405700                  TEMPLATE-18
405800                  TEMPLATE-8
405900                  TEMPLATE-6
406000                  AS5FDBK-COND-AREA
406100     END-IF
406200
406300     IF AS5FDBK-SEVNBR > ZERO
406400       DISPLAY WS-PGMID
406500            " RETURN CODE: " AS5FDBK-SEVNBR
406600            " MESSAGE NBR: " AS5FDBK-MSGNBR
406700     END-IF
406800
406900     DISPLAY WS-PGMID
407000          " TEST CASE 021.E - STRING REPLACE (+How,GOOD+)"
407100     DISPLAY WS-PGMID
407200          " MIXED CASE / NO CASE"
407300     DISPLAY WS-PGMID
407400          " SOURCE:" SRC-TXT
407500     DISPLAY WS-PGMID
407600          " ARGUMENT:" TMPLT-18-TXT
407700     DISPLAY WS-PGMID
407800          " OUTPUT LEN (21):" TMPLT-6-LEN
407900     DISPLAY WS-PGMID
408000          " RESULT:" TMPLT-6-TXT
408100     DISPLAY WS-PGMID
408200          " "
408300          TMPLT-6-TXT-Z
408400     DISPLAY " "
408500     SKIP2
408600*    * ------------------------------------------------------- *
408700*    * CALL STRING SERVICE STRING REPLACE IN MIDDLE
408800*    * ------------------------------------------------------- *
408900     SKIP1
409000     MOVE ZERO TO RO-START
409100                  RO-COUNT
409200                  RO-PSA-LEN
409300                  TMPLT-6-LEN
409400     SET RO-FLAG-NONE  TO TRUE
409500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
409600*    "+How+now+brown+cow++"
409700     MOVE +3   TO TEMPLATE-COUNT
409800     MOVE ZERO TO TMPLT-6-LEN
409900     MOVE LOW-VALUE TO TMPLT-6-TXT
410000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
410100     IF PACKAGE-CALL
410200*      CALL ASUSSVCB TO PERFORM SERVICE STRING INSERT
410300       SET ACTION-STRREPL TO TRUE
410400       MOVE "ASUSSVCB" TO LS-ASMODULE
410500       CALL LS-ASMODULE
410600            USING ASCA-COMMAREA
410700                  ACTION
410800                  AS-REQUEST-OPTIONS
410900                  SOURCE-STRING
411000                  TEMPLATE-COUNT
411100                  TEMPLATE-19
411200                  TEMPLATE-4
411300                  TEMPLATE-6
411400                  AS5FDBK-COND-AREA
411500     ELSE
411600       MOVE "ASUDSREP" TO LS-ASMODULE
411700       CALL LS-ASMODULE
411800            USING ASCA-COMMAREA
411900                  AS-REQUEST-OPTIONS
412000                  SOURCE-STRING
412100                  TEMPLATE-COUNT
412200                  TEMPLATE-19
412300                  TEMPLATE-4
412400                  TEMPLATE-6
412500                  AS5FDBK-COND-AREA
412600     END-IF
412700
412800     IF AS5FDBK-SEVNBR > ZERO
412900       DISPLAY WS-PGMID
413000            " RETURN CODE: " AS5FDBK-SEVNBR
413100            " MESSAGE NBR: " AS5FDBK-MSGNBR
413200     END-IF
413300
413400     DISPLAY WS-PGMID
413500          " TEST CASE 021.F - STRING REPLACE (brown,MEN)"
413600     DISPLAY WS-PGMID
413700          " MIXED CASE / NO CASE"
413800     DISPLAY WS-PGMID
413900          " SOURCE:" SRC-TXT
414000     DISPLAY WS-PGMID
414100          " ARGUMENT:" TMPLT-19-TXT
414200     DISPLAY WS-PGMID
414300          " OUTPUT LEN (18):" TMPLT-6-LEN
414400     DISPLAY WS-PGMID
414500          " RESULT:" TMPLT-6-TXT
414600     DISPLAY WS-PGMID
414700          " "
414800          TMPLT-6-TXT-Z
414900     DISPLAY " "
415000     SKIP2
415100*    * ------------------------------------------------------- *
415200*    * CALL STRING SERVICE STRING REPLACE AT END
415300*    * ------------------------------------------------------- *
415400     SKIP1
415500     MOVE ZERO TO RO-START
415600                  RO-COUNT
415700                  RO-PSA-LEN
415800                  TMPLT-6-LEN
415900     SET RO-FLAG-NONE  TO TRUE
416000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
416100*    "+How+now+brown+cow++"
416200     MOVE +3   TO TEMPLATE-COUNT
416300     MOVE ZERO TO TMPLT-6-LEN
416400     MOVE LOW-VALUE TO TMPLT-6-TXT
416500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
416600     IF PACKAGE-CALL
416700*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
416800       SET ACTION-STRREPL TO TRUE
416900       MOVE "ASUSSVCB" TO LS-ASMODULE
417000       CALL LS-ASMODULE
417100            USING ASCA-COMMAREA
417200                  ACTION
417300                  AS-REQUEST-OPTIONS
417400                  SOURCE-STRING
417500                  TEMPLATE-COUNT
417600                  TEMPLATE-20
417700                  TEMPLATE-8
417800                  TEMPLATE-6
417900                  AS5FDBK-COND-AREA
418000     ELSE
418100       MOVE "ASUDSREP" TO LS-ASMODULE
418200       CALL LS-ASMODULE
418300            USING ASCA-COMMAREA
418400                  AS-REQUEST-OPTIONS
418500                  SOURCE-STRING
418600                  TEMPLATE-COUNT
418700                  TEMPLATE-20
418800                  TEMPLATE-8
418900                  TEMPLATE-6
419000                  AS5FDBK-COND-AREA
419100     END-IF
419200
419300     IF AS5FDBK-SEVNBR > ZERO
419400       DISPLAY WS-PGMID
419500            " RETURN CODE: " AS5FDBK-SEVNBR
419600            " MESSAGE NBR: " AS5FDBK-MSGNBR
419700     END-IF
419800
419900     DISPLAY WS-PGMID
420000          " TEST CASE 021.G - STRING REPLACE (cow+,GOOD+)"
420100     DISPLAY WS-PGMID
420200          " MIXED CASE / NO CASE"
420300     DISPLAY WS-PGMID
420400          " SOURCE:" SRC-TXT
420500     DISPLAY WS-PGMID
420600          " ARGUMENT:" TMPLT-20-TXT
420700     DISPLAY WS-PGMID
420800          " OUTPUT LEN (21):" TMPLT-6-LEN
420900     DISPLAY WS-PGMID
421000          " RESULT:" TMPLT-6-TXT
421100     DISPLAY WS-PGMID
421200          " "
421300          TMPLT-6-TXT-Z
421400     DISPLAY " "
421500     SKIP2
421600*    * ------------------------------------------------------- *
421700*    * CALL STRING SERVICE STRING REPLACE AT (NO MATCH)
421800*    * ------------------------------------------------------- *
421900     SKIP1
422000     MOVE ZERO TO RO-START
422100                  RO-COUNT
422200                  RO-PSA-LEN
422300                  TMPLT-6-LEN
422400     SET RO-FLAG-NONE  TO TRUE
422500     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
422600*    "+How+now+brown+cow++"
422700     MOVE +3   TO TEMPLATE-COUNT
422800     MOVE ZERO TO TMPLT-6-LEN
422900     MOVE LOW-VALUE TO TMPLT-6-TXT
423000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
423100     IF PACKAGE-CALL
423200*      CALL ASUSSVCB TO PERFORM SERVICE STRING REPLACE
423300       SET ACTION-STRREPL TO TRUE
423400       MOVE "ASUSSVCB" TO LS-ASMODULE
423500       CALL LS-ASMODULE
423600            USING ASCA-COMMAREA
423700                  ACTION
423800                  AS-REQUEST-OPTIONS
423900                  SOURCE-STRING
424000                  TEMPLATE-COUNT
424100                  TEMPLATE-8
424200                  TEMPLATE-8
424300                  TEMPLATE-6
424400                  AS5FDBK-COND-AREA
424500     ELSE
424600       MOVE "ASUDSREP" TO LS-ASMODULE
424700       CALL LS-ASMODULE
424800            USING ASCA-COMMAREA
424900                  AS-REQUEST-OPTIONS
425000                  SOURCE-STRING
425100                  TEMPLATE-COUNT
425200                  TEMPLATE-8
425300                  TEMPLATE-8
425400                  TEMPLATE-6
425500                  AS5FDBK-COND-AREA
425600     END-IF
425700
425800     IF AS5FDBK-SEVNBR > ZERO
425900       DISPLAY WS-PGMID
426000            " RETURN CODE: " AS5FDBK-SEVNBR
426100            " MESSAGE NBR: " AS5FDBK-MSGNBR
426200     END-IF
426300
426400     DISPLAY WS-PGMID
426500          " TEST CASE 021.H - STRING REPLACE (GOOD+,GOOD+)"
426600     DISPLAY WS-PGMID
426700          " MIXED CASE / NO CASE"
426800     DISPLAY WS-PGMID
426900          " SOURCE:" SRC-TXT
427000     DISPLAY WS-PGMID
427100          " ARGUMENT:" TMPLT-8-TXT
427200     DISPLAY WS-PGMID
427300          " OUTPUT LEN (0):" TMPLT-6-LEN
427400     DISPLAY WS-PGMID
427500          " RESULT:" TMPLT-6-TXT
427600     DISPLAY WS-PGMID
427700          " "
427800          TMPLT-6-TXT-Z
427900     DISPLAY " "
428000     SKIP2
428100     CONTINUE.
428200 TEST-CASE-022.
428300
428400     IF NOT (TEST-CASE = "ALL" OR "022")
428500       GO TO TEST-CASE-023
428600     END-IF
428700
428800*    * ------------------------------------------------------- *
428900*    * CALL STRING SERVICE SUBSTR
429000*    * ------------------------------------------------------- *
429100     SKIP1
429200     MOVE ZERO TO RO-START
429300                  RO-COUNT
429400                  RO-PSA-LEN
429500                  TMPLT-6-LEN
429600     SET RO-FLAG-NONE  TO TRUE
429700     MOVE +25 TO RO-START
429800     MOVE +4  TO RO-COUNT
429900     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
430000*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
430100     MOVE +1   TO TEMPLATE-COUNT
430200     MOVE ZERO TO TMPLT-6-LEN
430300     MOVE LOW-VALUE TO TMPLT-6-TXT
430400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
430500     IF PACKAGE-CALL
430600*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR
430700       SET ACTION-SUBSTR TO TRUE
430800       MOVE "ASUSSVCB" TO LS-ASMODULE
430900       CALL LS-ASMODULE
431000            USING ASCA-COMMAREA
431100                  ACTION
431200                  AS-REQUEST-OPTIONS
431300                  SOURCE-STRING
431400                  TEMPLATE-COUNT
431500                  TEMPLATE-6
431600                  AS5FDBK-COND-AREA
431700     ELSE
431800       MOVE "ASUDSSUB" TO LS-ASMODULE
431900       CALL LS-ASMODULE
432000            USING ASCA-COMMAREA
432100                  AS-REQUEST-OPTIONS
432200                  SOURCE-STRING
432300                  TEMPLATE-COUNT
432400                  TEMPLATE-6
432500                  AS5FDBK-COND-AREA
432600     END-IF
432700
432800     IF AS5FDBK-SEVNBR > ZERO
432900       DISPLAY WS-PGMID
433000            " RETURN CODE: " AS5FDBK-SEVNBR
433100            " MESSAGE NBR: " AS5FDBK-MSGNBR
433200     END-IF
433300
433400     DISPLAY WS-PGMID
433500          " TEST CASE 022.A - SUB STRING (25,4)"
433600     DISPLAY WS-PGMID
433700          " MIXED CASE / NO CASE"
433800     DISPLAY WS-PGMID
433900          " SOURCE:" SRC-TXT
434000     DISPLAY WS-PGMID
434100          " OUTPUT LEN (4):" TMPLT-6-LEN
434200     DISPLAY WS-PGMID
434300          " RESULT (good):" TMPLT-6-TXT
434400     DISPLAY WS-PGMID
434500          " "
434600          TMPLT-6-TXT-Z
434700     DISPLAY " "
434800     SKIP2
434900*    * ------------------------------------------------------- *
435000*    * CALL STRING SERVICE SUBSTR
435100*    * ------------------------------------------------------- *
435200     SKIP1
435300     MOVE ZERO TO RO-START
435400                  RO-COUNT
435500                  RO-PSA-LEN
435600                  TMPLT-6-LEN
435700     SET RO-FLAG-NONE  TO TRUE
435800     MOVE +25 TO RO-START
435900     MOVE +27 TO RO-COUNT
436000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
436100*    "NOW+IS+THE+TIME+FOR+ALL+GOOD+MEN+MEN+MENMEN+MEN++++"
436200     MOVE +1   TO TEMPLATE-COUNT
436300     MOVE ZERO TO TMPLT-6-LEN
436400     MOVE LOW-VALUE TO TMPLT-6-TXT
436500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
436600     IF PACKAGE-CALL
436700*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR END
436800       SET ACTION-SUBSTR TO TRUE
436900       MOVE "ASUSSVCB" TO LS-ASMODULE
437000       CALL LS-ASMODULE
437100            USING ASCA-COMMAREA
437200                  ACTION
437300                  AS-REQUEST-OPTIONS
437400                  SOURCE-STRING
437500                  TEMPLATE-COUNT
437600                  TEMPLATE-6
437700                  AS5FDBK-COND-AREA
437800     ELSE
437900       MOVE "ASUDSSUB" TO LS-ASMODULE
438000       CALL LS-ASMODULE
438100            USING ASCA-COMMAREA
438200                  AS-REQUEST-OPTIONS
438300                  SOURCE-STRING
438400                  TEMPLATE-COUNT
438500                  TEMPLATE-6
438600                  AS5FDBK-COND-AREA
438700     END-IF
438800
438900     IF AS5FDBK-SEVNBR > ZERO
439000       DISPLAY WS-PGMID
439100            " RETURN CODE: " AS5FDBK-SEVNBR
439200            " MESSAGE NBR: " AS5FDBK-MSGNBR
439300     END-IF
439400
439500     DISPLAY WS-PGMID
439600          " TEST CASE 022.B - SUB STRING (25,27)"
439700     DISPLAY WS-PGMID
439800          " MIXED CASE / NO CASE"
439900     DISPLAY WS-PGMID
440000          " SOURCE:" SRC-TXT
440100     DISPLAY WS-PGMID
440200          " OUTPUT LEN (27):" TMPLT-6-LEN
440300     DISPLAY WS-PGMID
440400          " RESULT (good+...):" TMPLT-6-TXT
440500     DISPLAY WS-PGMID
440600          " "
440700          TMPLT-6-TXT-Z
440800     DISPLAY " "
440900     SKIP2
441000*    * ------------------------------------------------------- *
441100*    * CALL STRING SERVICE SUBSTR
441200*    * ------------------------------------------------------- *
441300     SKIP1
441400     MOVE ZERO TO RO-START
441500                  RO-COUNT
441600                  RO-PSA-LEN
441700                  TMPLT-6-LEN
441800     SET RO-FLAG-NONE  TO TRUE
441900     MOVE +25 TO RO-START
442000     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
442100*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
442200     MOVE +1   TO TEMPLATE-COUNT
442300     MOVE ZERO TO TMPLT-6-LEN
442400     MOVE LOW-VALUE TO TMPLT-6-TXT
442500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
442600     IF PACKAGE-CALL
442700*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR REST
442800       SET ACTION-SUBSTR TO TRUE
442900       MOVE "ASUSSVCB" TO LS-ASMODULE
443000       CALL LS-ASMODULE
443100            USING ASCA-COMMAREA
443200                  ACTION
443300                  AS-REQUEST-OPTIONS
443400                  SOURCE-STRING
443500                  TEMPLATE-COUNT
443600                  TEMPLATE-6
443700                  AS5FDBK-COND-AREA
443800     ELSE
443900       MOVE "ASUDSSUB" TO LS-ASMODULE
444000       CALL LS-ASMODULE
444100            USING ASCA-COMMAREA
444200                  AS-REQUEST-OPTIONS
444300                  SOURCE-STRING
444400                  TEMPLATE-COUNT
444500                  TEMPLATE-6
444600                  AS5FDBK-COND-AREA
444700     END-IF
444800
444900     IF AS5FDBK-SEVNBR > ZERO
445000       DISPLAY WS-PGMID
445100            " RETURN CODE: " AS5FDBK-SEVNBR
445200            " MESSAGE NBR: " AS5FDBK-MSGNBR
445300     END-IF
445400
445500     DISPLAY WS-PGMID
445600          " TEST CASE 022.C - SUB STRING (25,0)"
445700     DISPLAY WS-PGMID
445800          " MIXED CASE / NO CASE"
445900     DISPLAY WS-PGMID
446000          " SOURCE:" SRC-TXT
446100     DISPLAY WS-PGMID
446200          " OUTPUT LEN (27):" TMPLT-6-LEN
446300     DISPLAY WS-PGMID
446400          " RESULT (good+...):" TMPLT-6-TXT
446500     DISPLAY WS-PGMID
446600          " "
446700          TMPLT-6-TXT-Z
446800     DISPLAY " "
446900     SKIP2
447000*    * ------------------------------------------------------- *
447100*    * CALL STRING SERVICE SUBSTR
447200*    * ------------------------------------------------------- *
447300     SKIP1
447400     MOVE ZERO TO RO-START
447500                  RO-COUNT
447600                  RO-PSA-LEN
447700                  TMPLT-6-LEN
447800     SET RO-FLAG-NONE  TO TRUE
447900     MOVE +1  TO RO-START
448000     MOVE +4  TO RO-COUNT
448100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
448200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
448300     MOVE +1   TO TEMPLATE-COUNT
448400     MOVE ZERO TO TMPLT-6-LEN
448500     MOVE LOW-VALUE TO TMPLT-6-TXT
448600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
448700     IF PACKAGE-CALL
448800*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR LEADING
448900       SET ACTION-SUBSTR TO TRUE
449000       MOVE "ASUSSVCB" TO LS-ASMODULE
449100       CALL LS-ASMODULE
449200            USING ASCA-COMMAREA
449300                  ACTION
449400                  AS-REQUEST-OPTIONS
449500                  SOURCE-STRING
449600                  TEMPLATE-COUNT
449700                  TEMPLATE-6
449800                  AS5FDBK-COND-AREA
449900     ELSE
450000       MOVE "ASUDSSUB" TO LS-ASMODULE
450100       CALL LS-ASMODULE
450200            USING ASCA-COMMAREA
450300                  AS-REQUEST-OPTIONS
450400                  SOURCE-STRING
450500                  TEMPLATE-COUNT
450600                  TEMPLATE-6
450700                  AS5FDBK-COND-AREA
450800     END-IF
450900
451000     IF AS5FDBK-SEVNBR > ZERO
451100       DISPLAY WS-PGMID
451200            " RETURN CODE: " AS5FDBK-SEVNBR
451300            " MESSAGE NBR: " AS5FDBK-MSGNBR
451400     END-IF
451500
451600     DISPLAY WS-PGMID
451700          " TEST CASE 022.D - SUB STRING (1,4)"
451800     DISPLAY WS-PGMID
451900          " MIXED CASE / NO CASE"
452000     DISPLAY WS-PGMID
452100          " SOURCE:" SRC-TXT
452200     DISPLAY WS-PGMID
452300          " OUTPUT LEN (4):" TMPLT-6-LEN
452400     DISPLAY WS-PGMID
452500          " RESULT (Now+):" TMPLT-6-TXT
452600     DISPLAY WS-PGMID
452700          " "
452800          TMPLT-6-TXT-Z
452900     DISPLAY " "
453000     SKIP2
453100*    * ------------------------------------------------------- *
453200*    * CALL STRING SERVICE SUBSTR
453300*    * ------------------------------------------------------- *
453400     SKIP1
453500     MOVE ZERO TO RO-START
453600                  RO-COUNT
453700                  RO-PSA-LEN
453800                  TMPLT-6-LEN
453900     SET RO-FLAG-NONE  TO TRUE
454000     MOVE +0  TO RO-START
454100     MOVE +4  TO RO-COUNT
454200     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
454300*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
454400     MOVE +1   TO TEMPLATE-COUNT
454500     MOVE ZERO TO TMPLT-6-LEN
454600     MOVE LOW-VALUE TO TMPLT-6-TXT
454700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
454800     IF PACKAGE-CALL
454900*      CALL ASUSSVCB TO PERFORM SERVICE STRING SUBSTR LEADING
455000       SET ACTION-SUBSTR TO TRUE
455100       MOVE "ASUSSVCB" TO LS-ASMODULE
455200       CALL LS-ASMODULE
455300            USING ASCA-COMMAREA
455400                  ACTION
455500                  AS-REQUEST-OPTIONS
455600                  SOURCE-STRING
455700                  TEMPLATE-COUNT
455800                  TEMPLATE-6
455900                  AS5FDBK-COND-AREA
456000     ELSE
456100       MOVE "ASUDSSUB" TO LS-ASMODULE
456200       CALL LS-ASMODULE
456300            USING ASCA-COMMAREA
456400                  AS-REQUEST-OPTIONS
456500                  SOURCE-STRING
456600                  TEMPLATE-COUNT
456700                  TEMPLATE-6
456800                  AS5FDBK-COND-AREA
456900     END-IF
457000
457100     IF AS5FDBK-SEVNBR > ZERO
457200       DISPLAY WS-PGMID
457300            " RETURN CODE: " AS5FDBK-SEVNBR
457400            " MESSAGE NBR: " AS5FDBK-MSGNBR
457500     END-IF
457600
457700     DISPLAY WS-PGMID
457800          " TEST CASE 022.E - SUB STRING (0,4)"
457900     DISPLAY WS-PGMID
458000          " MIXED CASE / NO CASE"
458100     DISPLAY WS-PGMID
458200          " SOURCE:" SRC-TXT
458300     DISPLAY WS-PGMID
458400          " OUTPUT LEN (4):" TMPLT-6-LEN
458500     DISPLAY WS-PGMID
458600          " RESULT (Now+):" TMPLT-6-TXT
458700     DISPLAY WS-PGMID
458800          " "
458900          TMPLT-6-TXT-Z
459000     DISPLAY " "
459100     SKIP2
459200     CONTINUE.
459300 TEST-CASE-023.
459400
459500     IF NOT (TEST-CASE = "ALL" OR "023")
459600       GO TO TEST-CASE-024
459700     END-IF
459800
459900*    * ------------------------------------------------------- *
460000*    * CALL STRING SERVICE VAR (W1 W2 W3 W4)
460100*    * ------------------------------------------------------- *
460200     SKIP1
460300     MOVE ZERO TO RO-START
460400                  RO-COUNT
460500                  RO-PSA-LEN
460600     SET RO-FLAG-NONE  TO TRUE
460700     MOVE X'04' TO TOKEN-9-TYPE (1)
460800                   TOKEN-9-TYPE (2)
460900                   TOKEN-9-TYPE (3)
461000                   TOKEN-9-TYPE (4)
461100     MOVE +20   TO TOKEN-9-SIZE (1)
461200                   TOKEN-9-SIZE (2)
461300                   TOKEN-9-SIZE (3)
461400                   TOKEN-9-SIZE (4)
461500     MOVE ZERO  TO TMPLT-9-LEN  (1)
461600                   TMPLT-9-LEN  (2)
461700                   TMPLT-9-LEN  (3)
461800                   TMPLT-9-LEN  (4)
461900     MOVE SPACE TO TMPLT-9-TXT  (1)
462000                   TMPLT-9-TXT  (2)
462100                   TMPLT-9-TXT  (3)
462200                   TMPLT-9-TXT  (4)
462300     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
462400                     TMPLT-9-TXT-Z (2)
462500                     TMPLT-9-TXT-Z (3)
462600                     TMPLT-9-TXT-Z (4)
462700     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
462800*    "++TO++BE,+OR+NOT+TO+BE++++"
462900     MOVE +5   TO TEMPLATE-COUNT
463000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
463100     IF PACKAGE-CALL
463200*      CALL ASUSSVCB TO PERFORM SERVICE VAR
463300       SET ACTION-VAR TO TRUE
463400       MOVE "ASUSSVCB" TO LS-ASMODULE
463500       CALL LS-ASMODULE
463600            USING ASCA-COMMAREA
463700                  ACTION
463800                  AS-REQUEST-OPTIONS
463900                  SOURCE-STRING
464000                  TEMPLATE-COUNT
464100                  TEMPLATE-0
464200                  TEMPLATE-9 (1)
464300                  TEMPLATE-9 (2)
464400                  TEMPLATE-9 (3)
464500                  TEMPLATE-9 (4)
464600                  AS5FDBK-COND-AREA
464700     ELSE
464800       MOVE "ASUDSVAR" TO LS-ASMODULE
464900       CALL LS-ASMODULE
465000            USING ASCA-COMMAREA
465100                  AS-REQUEST-OPTIONS
465200                  SOURCE-STRING
465300                  TEMPLATE-COUNT
465400                  TEMPLATE-0
465500                  TEMPLATE-9 (1)
465600                  TEMPLATE-9 (2)
465700                  TEMPLATE-9 (3)
465800                  TEMPLATE-9 (4)
465900                  AS5FDBK-COND-AREA
466000     END-IF
466100
466200     IF AS5FDBK-SEVNBR > ZERO
466300       DISPLAY WS-PGMID
466400            " RETURN CODE: " AS5FDBK-SEVNBR
466500            " MESSAGE NBR: " AS5FDBK-MSGNBR
466600     END-IF
466700
466800     DISPLAY WS-PGMID
466900          " TEST CASE 023.A - VAR (W1 W2 W3 W4)"
467000     DISPLAY WS-PGMID
467100          " UPPER CASE / NO CASE"
467200     DISPLAY WS-PGMID
467300          " SOURCE:" SRC-TXT
467400     DISPLAY WS-PGMID
467500          " OUTPUT LEN 1 (2):" TMPLT-9-LEN (1)
467600     DISPLAY WS-PGMID
467700          " RESULT 1 (TO):" TMPLT-9-TXT (1)
467800     DISPLAY WS-PGMID
467900          " "
468000          TMPLT-9-TXT-Z (1)
468100     DISPLAY WS-PGMID
468200          " OUTPUT LEN 2 (2):" TMPLT-9-LEN (2)
468300     DISPLAY WS-PGMID
468400          " RESULT 2 (BE):" TMPLT-9-TXT (2)
468500     DISPLAY WS-PGMID
468600          " "
468700          TMPLT-9-TXT-Z (2)
468800     DISPLAY WS-PGMID
468900          " OUTPUT LEN 3 (2):" TMPLT-9-LEN (3)
469000     DISPLAY WS-PGMID
469100          " RESULT 3 (OR):" TMPLT-9-TXT (3)
469200     DISPLAY WS-PGMID
469300          " "
469400          TMPLT-9-TXT-Z (3)
469500     DISPLAY WS-PGMID
469600          " OUTPUT LEN 4 (13):" TMPLT-9-LEN (4)
469700     DISPLAY WS-PGMID
469800          " RESULT 4 (NOT+TO+BE++++):" TMPLT-9-TXT (4)
469900     DISPLAY WS-PGMID
470000          " "
470100          TMPLT-9-TXT-Z (4)
470200     DISPLAY " "
470300     SKIP2
470400*    * ------------------------------------------------------- *
470500*    * CALL STRING SERVICE VAR (6 W1 11 W2 18 W3)
470600*    * ------------------------------------------------------- *
470700     SKIP1
470800     MOVE ZERO TO RO-START
470900                  RO-COUNT
471000                  RO-PSA-LEN
471100     SET RO-FLAG-NONE  TO TRUE
471200     MOVE X'04' TO TOKEN-9-TYPE (1)
471300                   TOKEN-9-TYPE (2)
471400                   TOKEN-9-TYPE (3)
471500     MOVE +25   TO TOKEN-9-SIZE (1)
471600                   TOKEN-9-SIZE (2)
471700                   TOKEN-9-SIZE (3)
471800     MOVE ZERO  TO TMPLT-9-LEN  (1)
471900                   TMPLT-9-LEN  (2)
472000                   TMPLT-9-LEN  (3)
472100     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
472200                        TMPLT-9-TXT (2)
472300                        TMPLT-9-TXT (3)
472400     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
472500                     TMPLT-9-TXT-Z (2)
472600                     TMPLT-9-TXT-Z (3)
472700     MOVE X'03' TO TOKEN-10-TYPE (1)
472800                   TOKEN-10-TYPE (2)
472900                   TOKEN-10-TYPE (3)
473000     MOVE +1    TO TMPLT-10-LEN (1)
473100     MOVE +2    TO TMPLT-10-LEN (2)
473200                   TMPLT-10-LEN (3)
473300     MOVE "6"   TO TMPLT-10-TXT (1)
473400     MOVE "11"  TO TMPLT-10-TXT (2)
473500     MOVE "18"  TO TMPLT-10-TXT (3)
473600     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
473700*    "++TO++BE,+OR+NOT+TO+BE++++"
473800     MOVE +7   TO TEMPLATE-COUNT
473900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
474000     IF PACKAGE-CALL
474100*      CALL ASUSSVCB TO PERFORM SERVICE VAR
474200       SET ACTION-VAR TO TRUE
474300       MOVE "ASUSSVCB" TO LS-ASMODULE
474400       CALL LS-ASMODULE
474500            USING ASCA-COMMAREA
474600                  ACTION
474700                  AS-REQUEST-OPTIONS
474800                  SOURCE-STRING
474900                  TEMPLATE-COUNT
475000                  TEMPLATE-0
475100                  TEMPLATE-10 (1)
475200                  TEMPLATE-9 (1)
475300                  TEMPLATE-10 (2)
475400                  TEMPLATE-9 (2)
475500                  TEMPLATE-10 (3)
475600                  TEMPLATE-9 (3)
475700                  AS5FDBK-COND-AREA
475800     ELSE
475900       MOVE "ASUDSVAR" TO LS-ASMODULE
476000       CALL LS-ASMODULE
476100            USING ASCA-COMMAREA
476200                  AS-REQUEST-OPTIONS
476300                  SOURCE-STRING
476400                  TEMPLATE-COUNT
476500                  TEMPLATE-0
476600                  TEMPLATE-10 (1)
476700                  TEMPLATE-9 (1)
476800                  TEMPLATE-10 (2)
476900                  TEMPLATE-9 (2)
477000                  TEMPLATE-10 (3)
477100                  TEMPLATE-9 (3)
477200                  AS5FDBK-COND-AREA
477300     END-IF
477400
477500     IF AS5FDBK-SEVNBR > ZERO
477600       DISPLAY WS-PGMID
477700            " RETURN CODE: " AS5FDBK-SEVNBR
477800            " MESSAGE NBR: " AS5FDBK-MSGNBR
477900     END-IF
478000
478100     DISPLAY WS-PGMID
478200          " TEST CASE 023.B - VAR (6 W1 11 W2 18 W3)"
478300     DISPLAY WS-PGMID
478400          " UPPER CASE / NO CASE"
478500     DISPLAY WS-PGMID
478600          " SOURCE:" SRC-TXT
478700     DISPLAY WS-PGMID
478800          " OUTPUT LEN 1 (5):" TMPLT-9-LEN (1)
478900     DISPLAY WS-PGMID
479000          " RESULT 1 (+BE,+):" TMPLT-9-TXT (1)
479100     DISPLAY WS-PGMID
479200          " "
479300          TMPLT-9-TXT-Z (1)
479400     DISPLAY WS-PGMID
479500          " OUTPUT LEN 2 (7):" TMPLT-9-LEN (2)
479600     DISPLAY WS-PGMID
479700          " RESULT 2 (OR+NOT+):" TMPLT-9-TXT (2)
479800     DISPLAY WS-PGMID
479900          " "
480000          TMPLT-9-TXT-Z (2)
480100     DISPLAY WS-PGMID
480200          " OUTPUT LEN 3 (9):" TMPLT-9-LEN (3)
480300     DISPLAY WS-PGMID
480400          " RESULT 3 (TO+BE++++):" TMPLT-9-TXT (3)
480500     DISPLAY WS-PGMID
480600          " "
480700          TMPLT-9-TXT-Z (3)
480800     DISPLAY " "
480900     SKIP2
481000*    * ------------------------------------------------------- *
481100*    * CALL STRING SERVICE VAR ('BE' W1 +6 W2 +11 W3)
481200*    * ------------------------------------------------------- *
481300     SKIP1
481400     MOVE ZERO TO RO-START
481500                  RO-COUNT
481600                  RO-PSA-LEN
481700     SET RO-FLAG-UC    TO TRUE
481800     MOVE X'04' TO TOKEN-9-TYPE (1)
481900                   TOKEN-9-TYPE (2)
482000                   TOKEN-9-TYPE (3)
482100     MOVE +25   TO TOKEN-9-SIZE (1)
482200                   TOKEN-9-SIZE (2)
482300                   TOKEN-9-SIZE (3)
482400     MOVE ZERO  TO TMPLT-9-LEN  (1)
482500                   TMPLT-9-LEN  (2)
482600                   TMPLT-9-LEN  (3)
482700     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
482800                        TMPLT-9-TXT (2)
482900                        TMPLT-9-TXT (3)
483000     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
483100                     TMPLT-9-TXT-Z (2)
483200                     TMPLT-9-TXT-Z (3)
483300     MOVE X'02' TO TOKEN-10-TYPE (1)
483400     MOVE X'03' TO TOKEN-10-TYPE (2)
483500                   TOKEN-10-TYPE (3)
483600     MOVE +2    TO TMPLT-10-LEN (1)
483700     MOVE +1    TO TMPLT-10-LEN (2)
483800     MOVE +2    TO TMPLT-10-LEN (3)
483900     MOVE "BE"  TO TMPLT-10-TXT (1)
484000     MOVE +6    TO TMPLT-10-TXT-A (2)
484100     MOVE +11   TO TMPLT-10-TXT-B (3)
484200     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
484300*    "++TO++BE,+OR+NOT+TO+BE++++"
484400     MOVE +7   TO TEMPLATE-COUNT
484500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
484600     IF PACKAGE-CALL
484700*      CALL ASUSSVCB TO PERFORM SERVICE VAR
484800       SET ACTION-VAR TO TRUE
484900       MOVE "ASUSSVCB" TO LS-ASMODULE
485000       CALL LS-ASMODULE
485100            USING ASCA-COMMAREA
485200                  ACTION
485300                  AS-REQUEST-OPTIONS
485400                  SOURCE-STRING
485500                  TEMPLATE-COUNT
485600                  TEMPLATE-0
485700                  TEMPLATE-10 (1)
485800                  TEMPLATE-9 (1)
485900                  TEMPLATE-10 (2)
486000                  TEMPLATE-9 (2)
486100                  TEMPLATE-10 (3)
486200                  TEMPLATE-9 (3)
486300                  AS5FDBK-COND-AREA
486400     ELSE
486500       MOVE "ASUDSVAR" TO LS-ASMODULE
486600       CALL LS-ASMODULE
486700            USING ASCA-COMMAREA
486800                  AS-REQUEST-OPTIONS
486900                  SOURCE-STRING
487000                  TEMPLATE-COUNT
487100                  TEMPLATE-0
487200                  TEMPLATE-10 (1)
487300                  TEMPLATE-9 (1)
487400                  TEMPLATE-10 (2)
487500                  TEMPLATE-9 (2)
487600                  TEMPLATE-10 (3)
487700                  TEMPLATE-9 (3)
487800                  AS5FDBK-COND-AREA
487900     END-IF
488000
488100     IF AS5FDBK-SEVNBR > ZERO
488200       DISPLAY WS-PGMID
488300            " RETURN CODE: " AS5FDBK-SEVNBR
488400            " MESSAGE NBR: " AS5FDBK-MSGNBR
488500     END-IF
488600
488700     DISPLAY WS-PGMID
488800          " TEST CASE 023.C - VAR ('BE' W1 +6 W2 +11 W3)"
488900     DISPLAY WS-PGMID
489000          " UPPER CASE / UPPER CASE"
489100     DISPLAY WS-PGMID
489200          " SOURCE:" SRC-TXT
489300     DISPLAY WS-PGMID
489400          " OUTPUT LEN 1 (4):" TMPLT-9-LEN (1)
489500     DISPLAY WS-PGMID
489600          " RESULT 1 (,+OR):" TMPLT-9-TXT (1)
489700     DISPLAY WS-PGMID
489800          " "
489900          TMPLT-9-TXT-Z (1)
490000     DISPLAY WS-PGMID
490100          " OUTPUT LEN 2 (5):" TMPLT-9-LEN (2)
490200     DISPLAY WS-PGMID
490300          " RESULT 2 (+NOT+):" TMPLT-9-TXT (2)
490400     DISPLAY WS-PGMID
490500          " "
490600          TMPLT-9-TXT-Z (2)
490700     DISPLAY WS-PGMID
490800          " OUTPUT LEN 3 (9):" TMPLT-9-LEN (3)
490900     DISPLAY WS-PGMID
491000          " RESULT 3 (TO+BE++++):" TMPLT-9-TXT (3)
491100     DISPLAY WS-PGMID
491200          " "
491300          TMPLT-9-TXT-Z (3)
491400     DISPLAY " "
491500     SKIP2
491600*    * ------------------------------------------------------- *
491700*    * CALL STRING SERVICE VAR (3 W1 +3 W2 3 W3)
491800*    * ------------------------------------------------------- *
491900     SKIP1
492000     MOVE ZERO TO RO-START
492100                  RO-COUNT
492200                  RO-PSA-LEN
492300     SET RO-FLAG-NONE  TO TRUE
492400     MOVE X'04' TO TOKEN-9-TYPE (1)
492500                   TOKEN-9-TYPE (2)
492600                   TOKEN-9-TYPE (3)
492700     MOVE +25   TO TOKEN-9-SIZE (1)
492800                   TOKEN-9-SIZE (2)
492900                   TOKEN-9-SIZE (3)
493000     MOVE ZERO  TO TMPLT-9-LEN  (1)
493100                   TMPLT-9-LEN  (2)
493200                   TMPLT-9-LEN  (3)
493300     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
493400                        TMPLT-9-TXT (2)
493500                        TMPLT-9-TXT (3)
493600     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
493700                     TMPLT-9-TXT-Z (2)
493800                     TMPLT-9-TXT-Z (3)
493900     MOVE X'03' TO TOKEN-10-TYPE (1)
494000                   TOKEN-10-TYPE (2)
494100                   TOKEN-10-TYPE (3)
494200     MOVE +1    TO TMPLT-10-LEN (1)
494300     MOVE +1    TO TMPLT-10-LEN (2)
494400     MOVE +1    TO TMPLT-10-LEN (3)
494500     MOVE "3"   TO TMPLT-10-TXT (1)
494600     MOVE +3    TO TMPLT-10-TXT-A (2)
494700     MOVE "3"   TO TMPLT-10-TXT (3)
494800     MOVE WS-SOURCE-STRING-6 TO SOURCE-STRING
494900*    "123456789"
495000     MOVE +7   TO TEMPLATE-COUNT
495100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
495200     IF PACKAGE-CALL
495300*      CALL ASUSSVCB TO PERFORM SERVICE VAR
495400       SET ACTION-VAR TO TRUE
495500       MOVE "ASUSSVCB" TO LS-ASMODULE
495600       CALL LS-ASMODULE
495700            USING ASCA-COMMAREA
495800                  ACTION
495900                  AS-REQUEST-OPTIONS
496000                  SOURCE-STRING
496100                  TEMPLATE-COUNT
496200                  TEMPLATE-0
496300                  TEMPLATE-10 (1)
496400                  TEMPLATE-9 (1)
496500                  TEMPLATE-10 (2)
496600                  TEMPLATE-9 (2)
496700                  TEMPLATE-10 (3)
496800                  TEMPLATE-9 (3)
496900                  AS5FDBK-COND-AREA
497000     ELSE
497100       MOVE "ASUDSVAR" TO LS-ASMODULE
497200       CALL LS-ASMODULE
497300            USING ASCA-COMMAREA
497400                  AS-REQUEST-OPTIONS
497500                  SOURCE-STRING
497600                  TEMPLATE-COUNT
497700                  TEMPLATE-0
497800                  TEMPLATE-10 (1)
497900                  TEMPLATE-9 (1)
498000                  TEMPLATE-10 (2)
498100                  TEMPLATE-9 (2)
498200                  TEMPLATE-10 (3)
498300                  TEMPLATE-9 (3)
498400                  AS5FDBK-COND-AREA
498500     END-IF
498600
498700     IF AS5FDBK-SEVNBR > ZERO
498800       DISPLAY WS-PGMID
498900            " RETURN CODE: " AS5FDBK-SEVNBR
499000            " MESSAGE NBR: " AS5FDBK-MSGNBR
499100     END-IF
499200
499300     DISPLAY WS-PGMID
499400          " TEST CASE 023.D - VAR (3 W1 +3 W2 3 W3)"
499500     DISPLAY WS-PGMID
499600          " NUMERIC / NO CASE"
499700     DISPLAY WS-PGMID
499800          " SOURCE:" SRC-TXT
499900     DISPLAY WS-PGMID
500000          " OUTPUT LEN 1 (3):" TMPLT-9-LEN (1)
500100     DISPLAY WS-PGMID
500200          " RESULT 1 (345):" TMPLT-9-TXT (1)
500300     DISPLAY WS-PGMID
500400          " "
500500          TMPLT-9-TXT-Z (1)
500600     DISPLAY WS-PGMID
500700          " OUTPUT LEN 2 (4):" TMPLT-9-LEN (2)
500800     DISPLAY WS-PGMID
500900          " RESULT 2 (6789):" TMPLT-9-TXT (2)
501000     DISPLAY WS-PGMID
501100          " "
501200          TMPLT-9-TXT-Z (2)
501300     DISPLAY WS-PGMID
501400          " OUTPUT LEN 3 (7):" TMPLT-9-LEN (3)
501500     DISPLAY WS-PGMID
501600          " RESULT 3 (3456789):" TMPLT-9-TXT (3)
501700     DISPLAY WS-PGMID
501800          " "
501900          TMPLT-9-TXT-Z (3)
502000     DISPLAY " "
502100     SKIP2
502200*    * ------------------------------------------------------- *
502300*    * CALL STRING SERVICE VAR (Wn ...)
502400*    * ------------------------------------------------------- *
502500     SKIP1
502600     MOVE ZERO TO RO-START
502700                  RO-COUNT
502800                  RO-PSA-LEN
502900     SET RO-FLAG-NONE  TO TRUE
503000     MOVE +32  TO RO-PSA-LEN
503100     MOVE  1   TO LOOP-COUNT
503200
503300     CONTINUE.
503400 TEST-CASE-023-LOOP.
503500
503600     MOVE X'04' TO TOKEN-13-TYPE
503700     MOVE +8    TO TOKEN-13-SIZE
503800     MOVE ZERO  TO TMPLT-13-LEN
503900     MOVE SPACE TO TMPLT-13-TXT
504000     MOVE ALL "$" TO TMPLT-13-TXT-Z
504100     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
504200*    "++TO++BE,+OR+NOT+TO+BE++++"
504300     MOVE +3   TO TEMPLATE-COUNT
504400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
504500     IF PACKAGE-CALL
504600*      CALL ASUSSVCB TO PERFORM SERVICE VAR
504700       SET ACTION-VAR TO TRUE
504800       MOVE "ASUSSVCB" TO LS-ASMODULE
504900       CALL LS-ASMODULE
505000            USING ASCA-COMMAREA
505100                  ACTION
505200                  AS-REQUEST-OPTIONS
505300                  SOURCE-STRING
505400                  TEMPLATE-COUNT
505500                  TEMPLATE-0
505600                  TEMPLATE-13
505700                  TEMPLATE-DUMMY
505800                  AS5FDBK-COND-AREA
505900     ELSE
506000       MOVE "ASUDSVAR" TO LS-ASMODULE
506100       CALL LS-ASMODULE
506200            USING ASCA-COMMAREA
506300                  AS-REQUEST-OPTIONS
506400                  SOURCE-STRING
506500                  TEMPLATE-COUNT
506600                  TEMPLATE-0
506700                  TEMPLATE-13
506800                  TEMPLATE-DUMMY
506900                  AS5FDBK-COND-AREA
507000     END-IF
507100
507200     IF AS5FDBK-SEVNBR > ZERO
507300       DISPLAY WS-PGMID
507400            " RETURN CODE: " AS5FDBK-SEVNBR
507500            " MESSAGE NBR: " AS5FDBK-MSGNBR
507600       DISPLAY " "
507700       GO TO TEST-CASE-023-CONT
507800     END-IF
507900
508000     DISPLAY WS-PGMID
508100          " TEST CASE 023.E - VAR (Wn ... W6)"
508200     DISPLAY WS-PGMID
508300          " UPPER CASE / NO CASE"
508400     DISPLAY WS-PGMID
508500          " SOURCE:" SRC-TXT
508600     DISPLAY WS-PGMID
508700          " OUTPUT LEN:" TMPLT-13-LEN
508800     DISPLAY WS-PGMID
508900          " RESULT " LOOP-COUNT ":" TMPLT-13-TXT
509000     DISPLAY WS-PGMID
509100          " START (0,7,11,14,18,21,27) " LOOP-COUNT
509200          ":" RO-START
509300     DISPLAY WS-PGMID
509400          " NXT POS (7,11,14,18,21,27) " LOOP-COUNT
509500          ":" RO-PSA-NXTPOS
509600     DISPLAY WS-PGMID
509700          " "
509800          TMPLT-13-TXT-Z
509900     DISPLAY " "
510000
510100     ADD  1 TO LOOP-COUNT
510200
510300     IF LOOP-COUNT >  8
510400       DISPLAY WS-PGMID
510500            " TOO MANY LOOPS FOR TEST CASE 023.E"
510600       DISPLAY " "
510700       GO TO TEST-CASE-023-CONT
510800     END-IF
510900
511000     IF TMPLT-13-LEN > ZERO
511100       GO TO TEST-CASE-023-LOOP
511200     END-IF
511300
511400     CONTINUE.
511500 TEST-CASE-023-CONT.
511600     SKIP2
511700*    * ------------------------------------------------------- *
511800*    * CALL STRING SERVICE VAR ('ZZ' W1 +6 W2 +11 W3) (NO MATCH)
511900*    * ------------------------------------------------------- *
512000     SKIP1
512100     MOVE ZERO TO RO-START
512200                  RO-COUNT
512300                  RO-PSA-LEN
512400     SET RO-FLAG-UC    TO TRUE
512500     MOVE X'04' TO TOKEN-9-TYPE (1)
512600                   TOKEN-9-TYPE (2)
512700                   TOKEN-9-TYPE (3)
512800     MOVE +25   TO TOKEN-9-SIZE (1)
512900                   TOKEN-9-SIZE (2)
513000                   TOKEN-9-SIZE (3)
513100     MOVE ZERO  TO TMPLT-9-LEN  (1)
513200                   TMPLT-9-LEN  (2)
513300                   TMPLT-9-LEN  (3)
513400     MOVE LOW-VALUE TO TMPLT-9-TXT (1)
513500                        TMPLT-9-TXT (2)
513600                        TMPLT-9-TXT (3)
513700     MOVE ALL "$" TO TMPLT-9-TXT-Z (1)
513800                     TMPLT-9-TXT-Z (2)
513900                     TMPLT-9-TXT-Z (3)
514000     MOVE X'02' TO TOKEN-10-TYPE (1)
514100     MOVE X'03' TO TOKEN-10-TYPE (2)
514200                   TOKEN-10-TYPE (3)
514300     MOVE +2    TO TMPLT-10-LEN (1)
514400     MOVE +1    TO TMPLT-10-LEN (2)
514500     MOVE +2    TO TMPLT-10-LEN (3)
514600     MOVE "ZZ"  TO TMPLT-10-TXT (1)
514700     MOVE +6    TO TMPLT-10-TXT-A (2)
514800     MOVE +11   TO TMPLT-10-TXT-B (3)
514900     MOVE WS-SOURCE-STRING-5 TO SOURCE-STRING
515000*    "++TO++BE,+OR+NOT+TO+BE++++"
515100     MOVE +7   TO TEMPLATE-COUNT
515200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
515300     IF PACKAGE-CALL
515400*      CALL ASUSSVCB TO PERFORM SERVICE VAR
515500       SET ACTION-VAR TO TRUE
515600       MOVE "ASUSSVCB" TO LS-ASMODULE
515700       CALL LS-ASMODULE
515800            USING ASCA-COMMAREA
515900                  ACTION
516000                  AS-REQUEST-OPTIONS
516100                  SOURCE-STRING
516200                  TEMPLATE-COUNT
516300                  TEMPLATE-0
516400                  TEMPLATE-10 (1)
516500                  TEMPLATE-9 (1)
516600                  TEMPLATE-10 (2)
516700                  TEMPLATE-9 (2)
516800                  TEMPLATE-10 (3)
516900                  TEMPLATE-9 (3)
517000                  AS5FDBK-COND-AREA
517100     ELSE
517200       MOVE "ASUDSVAR" TO LS-ASMODULE
517300       CALL LS-ASMODULE
517400            USING ASCA-COMMAREA
517500                  AS-REQUEST-OPTIONS
517600                  SOURCE-STRING
517700                  TEMPLATE-COUNT
517800                  TEMPLATE-0
517900                  TEMPLATE-10 (1)
518000                  TEMPLATE-9 (1)
518100                  TEMPLATE-10 (2)
518200                  TEMPLATE-9 (2)
518300                  TEMPLATE-10 (3)
518400                  TEMPLATE-9 (3)
518500                  AS5FDBK-COND-AREA
518600     END-IF
518700
518800     IF AS5FDBK-SEVNBR > ZERO
518900       DISPLAY WS-PGMID
519000            " RETURN CODE: " AS5FDBK-SEVNBR
519100            " MESSAGE NBR: " AS5FDBK-MSGNBR
519200     END-IF
519300
519400     DISPLAY WS-PGMID
519500          " TEST CASE 023.F - VAR ('ZZ' W1 +6 W2 +11 W3)"
519600     DISPLAY WS-PGMID
519700          " UPPER CASE / UPPER CASE"
519800     DISPLAY WS-PGMID
519900          " SOURCE:" SRC-TXT
520000     DISPLAY WS-PGMID
520100          " OUTPUT LEN 1 (0):" TMPLT-9-LEN (1)
520200     DISPLAY WS-PGMID
520300          " RESULT 1 ():" TMPLT-9-TXT (1)
520400     DISPLAY WS-PGMID
520500          " "
520600          TMPLT-9-TXT-Z (1)
520700     DISPLAY WS-PGMID
520800          " OUTPUT LEN 2 (0):" TMPLT-9-LEN (2)
520900     DISPLAY WS-PGMID
521000          " RESULT 2 ():" TMPLT-9-TXT (2)
521100     DISPLAY WS-PGMID
521200          " "
521300          TMPLT-9-TXT-Z (2)
521400     DISPLAY WS-PGMID
521500          " OUTPUT LEN 3 (0):" TMPLT-9-LEN (3)
521600     DISPLAY WS-PGMID
521700          " RESULT 3 ():" TMPLT-9-TXT (3)
521800     DISPLAY WS-PGMID
521900          " "
522000          TMPLT-9-TXT-Z (3)
522100     DISPLAY " "
522200     SKIP2
522300     CONTINUE.
522400 TEST-CASE-024.
522500
522600     IF NOT (TEST-CASE = "ALL" OR "024")
522700       GO TO TEST-CASE-025
522800     END-IF
522900
523000*    * ------------------------------------------------------- *
523100*    * CALL STRING SERVICE VHEX
523200*    * (a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@=")
523300*    * ------------------------------------------------------- *
523400     SKIP1
523500     MOVE ZERO TO RO-START
523600                  RO-COUNT
523700                  RO-PSA-LEN
523800     SET RO-FLAG-NONE  TO TRUE
523900     MOVE WS-SOURCE-STRING-11 TO SOURCE-STRING
524000*    "a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@="
524100     MOVE +3   TO TEMPLATE-COUNT
524200     MOVE ZERO TO TMPLT-15-LEN
524300                  TMPLT-16-LEN
524400                  TMPLT-17-LEN
524500     MOVE LOW-VALUE TO TMPLT-15-TXT
524600                       TMPLT-16-TXT
524700                       TMPLT-17-TXT
524800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
524900     IF PACKAGE-CALL
525000*      CALL ASUSSVCB TO PERFORM SERVICE STRING VHEX
525100       SET ACTION-VHEX   TO TRUE
525200       MOVE "ASUSSVCB" TO LS-ASMODULE
525300       CALL LS-ASMODULE
525400            USING ASCA-COMMAREA
525500                  ACTION
525600                  AS-REQUEST-OPTIONS
525700                  SOURCE-STRING
525800                  TEMPLATE-COUNT
525900                  TEMPLATE-15
526000                  TEMPLATE-16
526100                  TEMPLATE-17
526200                  AS5FDBK-COND-AREA
526300     ELSE
526400       MOVE "ASUDVHEX" TO LS-ASMODULE
526500       CALL LS-ASMODULE
526600            USING ASCA-COMMAREA
526700                  AS-REQUEST-OPTIONS
526800                  SOURCE-STRING
526900                  TEMPLATE-COUNT
527000                  TEMPLATE-15
527100                  TEMPLATE-16
527200                  TEMPLATE-17
527300                  AS5FDBK-COND-AREA
527400     END-IF
527500
527600     IF AS5FDBK-SEVNBR > ZERO
527700       DISPLAY WS-PGMID
527800            " RETURN CODE: " AS5FDBK-SEVNBR
527900            " MESSAGE NBR: " AS5FDBK-MSGNBR
528000     END-IF
528100
528200     DISPLAY WS-PGMID
528300          " TEST CASE 024.A - VHEX"
528400     DISPLAY WS-PGMID
528500          ' a...zA...Z0...9.<(+|&!$*);¬-/,%_>?:#@="'
528600     DISPLAY WS-PGMID
528700          " NO CASE"
528800     DISPLAY WS-PGMID
528900          " SOURCE:" SRC-TXT
529000     DISPLAY WS-PGMID
529100          " OUTPUT LEN (86):" TMPLT-15-LEN
529200     DISPLAY WS-PGMID
529300          " RESULT CHAR:" TMPLT-15-TXT
529400     DISPLAY WS-PGMID
529500          " "
529600          TMPLT-15-TXT-Z
529700     DISPLAY " "
529800     DISPLAY WS-PGMID
529900          " OUTPUT LEN (86):" TMPLT-16-LEN
530000     DISPLAY WS-PGMID
530100          " RESULT ZONE:" TMPLT-16-TXT
530200     DISPLAY WS-PGMID
530300          " "
530400          TMPLT-16-TXT-Z
530500     DISPLAY " "
530600     DISPLAY WS-PGMID
530700          " OUTPUT LEN (86):" TMPLT-17-LEN
530800     DISPLAY WS-PGMID
530900          " RESULT NUMB:" TMPLT-17-TXT
531000     DISPLAY WS-PGMID
531100          " "
531200          TMPLT-17-TXT-Z
531300     DISPLAY " "
531400     SKIP2
531500     CONTINUE.
531600 TEST-CASE-025.
531700
531800     IF NOT (TEST-CASE = "ALL" OR "025")
531900       GO TO TEST-CASE-026
532000     END-IF
532100
532200*    * ------------------------------------------------------- *
532300*    * CALL STRING SERVICE WORD DELETE
532400*    * ------------------------------------------------------- *
532500     SKIP1
532600     MOVE ZERO TO RO-START
532700                  RO-COUNT
532800                  RO-PSA-LEN
532900                  TMPLT-5-LEN
533000     SET RO-FLAG-NONE TO TRUE
533100     MOVE +9   TO RO-START
533200     MOVE +2   TO RO-COUNT
533300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
533400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
533500     MOVE +1   TO TEMPLATE-COUNT
533600     MOVE ZERO TO TMPLT-5-LEN
533700     MOVE LOW-VALUE TO TMPLT-5-TXT
533800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
533900     IF PACKAGE-CALL
534000*      CALL ASUSSVCB TO PERFORM SERVICE WORD DELETE
534100       SET ACTION-WORDDEL TO TRUE
534200       MOVE "ASUSSVCB" TO LS-ASMODULE
534300       CALL LS-ASMODULE
534400            USING ASCA-COMMAREA
534500                  ACTION
534600                  AS-REQUEST-OPTIONS
534700                  SOURCE-STRING
534800                  TEMPLATE-COUNT
534900                  TEMPLATE-5
535000                  AS5FDBK-COND-AREA
535100     ELSE
535200       MOVE "ASUDWDEL" TO LS-ASMODULE
535300       CALL LS-ASMODULE
535400            USING ASCA-COMMAREA
535500                  AS-REQUEST-OPTIONS
535600                  SOURCE-STRING
535700                  TEMPLATE-COUNT
535800                  TEMPLATE-5
535900                  AS5FDBK-COND-AREA
536000     END-IF
536100
536200     IF AS5FDBK-SEVNBR > ZERO
536300       DISPLAY WS-PGMID
536400            " RETURN CODE: " AS5FDBK-SEVNBR
536500            " MESSAGE NBR: " AS5FDBK-MSGNBR
536600     END-IF
536700
536800     DISPLAY WS-PGMID
536900          " TEST CASE 025.A - WORD DELETE (9,2)"
537000     DISPLAY WS-PGMID
537100          " MIXED CASE / MIXED CASE"
537200     DISPLAY WS-PGMID
537300          " SOURCE:" SRC-TXT
537400     DISPLAY WS-PGMID
537500          " OUTPUT LEN (36):" TMPLT-5-LEN
537600     DISPLAY WS-PGMID
537700          " RESULT:" TMPLT-5-TXT
537800     DISPLAY WS-PGMID
537900          " "
538000          TMPLT-5-TXT-Z
538100     DISPLAY " "
538200     SKIP2
538300*    * ------------------------------------------------------- *
538400*    * CALL STRING SERVICE WORD DELETE
538500*    * ------------------------------------------------------- *
538600     SKIP1
538700     MOVE ZERO TO TMPLT-5-LEN
538800                  RO-COUNT
538900     SET RO-FLAG-UC   TO TRUE
539000     MOVE +9   TO RO-START
539100     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
539200*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
539300     MOVE +1   TO TEMPLATE-COUNT
539400     MOVE ZERO TO TMPLT-5-LEN
539500     MOVE LOW-VALUE TO TMPLT-5-TXT
539600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
539700     IF PACKAGE-CALL
539800*      CALL ASUSSVCB TO PERFORM SERVICE WORD DELETE
539900       SET ACTION-WORDDEL TO TRUE
540000       MOVE "ASUSSVCB" TO LS-ASMODULE
540100       CALL LS-ASMODULE
540200            USING ASCA-COMMAREA
540300                  ACTION
540400                  AS-REQUEST-OPTIONS
540500                  SOURCE-STRING
540600                  TEMPLATE-COUNT
540700                  TEMPLATE-5
540800                  AS5FDBK-COND-AREA
540900     ELSE
541000       MOVE "ASUDWDEL" TO LS-ASMODULE
541100       CALL LS-ASMODULE
541200            USING ASCA-COMMAREA
541300                  AS-REQUEST-OPTIONS
541400                  SOURCE-STRING
541500                  TEMPLATE-COUNT
541600                  TEMPLATE-5
541700                  AS5FDBK-COND-AREA
541800     END-IF
541900
542000     IF AS5FDBK-SEVNBR > ZERO
542100       DISPLAY WS-PGMID
542200            " RETURN CODE: " AS5FDBK-SEVNBR
542300            " MESSAGE NBR: " AS5FDBK-MSGNBR
542400     END-IF
542500
542600     DISPLAY WS-PGMID
542700          " TEST CASE 025.B - WORD DELETE (9,0)"
542800     DISPLAY WS-PGMID
542900          " MIXED CASE / UPPER CASE"
543000     DISPLAY WS-PGMID
543100          " SOURCE:" SRC-TXT
543200     DISPLAY WS-PGMID
543300          " OUTPUT LEN (32):" TMPLT-5-LEN
543400     DISPLAY WS-PGMID
543500          " RESULT:" TMPLT-5-TXT
543600     DISPLAY WS-PGMID
543700          " "
543800          TMPLT-5-TXT-Z
543900     DISPLAY " "
544000     SKIP2
544100     CONTINUE.
544200 TEST-CASE-026.
544300
544400     IF NOT (TEST-CASE = "ALL" OR "026")
544500       GO TO TEST-CASE-027
544600     END-IF
544700     SKIP2
544800     CONTINUE.
544900 TEST-CASE-027.
545000
545100     IF NOT (TEST-CASE = "ALL" OR "027")
545200       GO TO TEST-CASE-028
545300     END-IF
545400
545500*    * ------------------------------------------------------- *
545600*    * CALL STRING SERVICE WORD POSITION
545700*    * ------------------------------------------------------- *
545800     SKIP1
545900     MOVE ZERO TO RO-START
546000                  RO-COUNT
546100                  RO-PSA-LEN
546200     SET RO-FLAG-NONE  TO TRUE
546300     MOVE +7   TO RO-START
546400     MOVE +1   TO RO-COUNT
546500     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
546600*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
546700     MOVE +2   TO TEMPLATE-COUNT
546800     MOVE ZERO TO TMPLT-6-LEN
546900     MOVE LOW-VALUE TO TMPLT-6-TXT
547000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
547100     IF PACKAGE-CALL
547200*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
547300       SET ACTION-WORDPOS TO TRUE
547400       MOVE "ASUSSVCB" TO LS-ASMODULE
547500       CALL LS-ASMODULE
547600            USING ASCA-COMMAREA
547700                  ACTION
547800                  AS-REQUEST-OPTIONS
547900                  SOURCE-STRING
548000                  TEMPLATE-COUNT
548100                  TEMPLATE-2
548200                  TEMPLATE-6
548300                  AS5FDBK-COND-AREA
548400     ELSE
548500       MOVE "ASUDWPOS" TO LS-ASMODULE
548600       CALL LS-ASMODULE
548700            USING ASCA-COMMAREA
548800                  AS-REQUEST-OPTIONS
548900                  SOURCE-STRING
549000                  TEMPLATE-COUNT
549100                  TEMPLATE-2
549200                  TEMPLATE-6
549300                  AS5FDBK-COND-AREA
549400     END-IF
549500
549600     IF AS5FDBK-SEVNBR > ZERO
549700       DISPLAY WS-PGMID
549800            " RETURN CODE: " AS5FDBK-SEVNBR
549900            " MESSAGE NBR: " AS5FDBK-MSGNBR
550000     END-IF
550100
550200     DISPLAY WS-PGMID
550300          " TEST CASE 027.A - WORD POS (7,1)"
550400     DISPLAY WS-PGMID
550500          " MIXED CASE / NO CASE"
550600     DISPLAY WS-PGMID
550700          " SOURCE:" SRC-TXT
550800     DISPLAY WS-PGMID
550900          " OUTPUT LEN (4):" TMPLT-2-LEN
551000     DISPLAY WS-PGMID
551100          " WORD POS (25):" TMPLT-2-TXT
551200     DISPLAY WS-PGMID
551300          " "
551400          TMPLT-2-TXT-Z
551500     DISPLAY WS-PGMID
551600          " OUTPUT LEN (4):" TMPLT-6-LEN
551700     DISPLAY WS-PGMID
551800          " WORD TEXT (good):" TMPLT-6-TXT
551900     DISPLAY WS-PGMID
552000          " "
552100          TMPLT-6-TXT-Z
552200     DISPLAY " "
552300     SKIP2
552400*    * ------------------------------------------------------- *
552500*    * CALL STRING SERVICE WORD POSITION
552600*    * ------------------------------------------------------- *
552700     SKIP1
552800     MOVE ZERO TO RO-START
552900                  RO-COUNT
553000                  RO-PSA-LEN
553100     SET RO-FLAG-NONE  TO TRUE
553200     MOVE +7   TO RO-START
553300     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
553400*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
553500     MOVE +2   TO TEMPLATE-COUNT
553600     MOVE ZERO TO TMPLT-6-LEN
553700     MOVE LOW-VALUE TO TMPLT-6-TXT
553800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
553900     IF PACKAGE-CALL
554000*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
554100       SET ACTION-WORDPOS TO TRUE
554200       MOVE "ASUSSVCB" TO LS-ASMODULE
554300       CALL LS-ASMODULE
554400            USING ASCA-COMMAREA
554500                  ACTION
554600                  AS-REQUEST-OPTIONS
554700                  SOURCE-STRING
554800                  TEMPLATE-COUNT
554900                  TEMPLATE-2
555000                  TEMPLATE-6
555100                  AS5FDBK-COND-AREA
555200     ELSE
555300       MOVE "ASUDWPOS" TO LS-ASMODULE
555400       CALL LS-ASMODULE
555500            USING ASCA-COMMAREA
555600                  AS-REQUEST-OPTIONS
555700                  SOURCE-STRING
555800                  TEMPLATE-COUNT
555900                  TEMPLATE-2
556000                  TEMPLATE-6
556100                  AS5FDBK-COND-AREA
556200     END-IF
556300
556400     IF AS5FDBK-SEVNBR > ZERO
556500       DISPLAY WS-PGMID
556600            " RETURN CODE: " AS5FDBK-SEVNBR
556700            " MESSAGE NBR: " AS5FDBK-MSGNBR
556800     END-IF
556900
557000     DISPLAY WS-PGMID
557100          " TEST CASE 027.B - WORD POS (7,0)"
557200     DISPLAY WS-PGMID
557300          " MIXED CASE / NO CASE"
557400     DISPLAY WS-PGMID
557500          " SOURCE:" SRC-TXT
557600     DISPLAY WS-PGMID
557700          " OUTPUT LEN (4):" TMPLT-2-LEN
557800     DISPLAY WS-PGMID
557900          " WORD POS (25):" TMPLT-2-TXT
558000     DISPLAY WS-PGMID
558100          " "
558200          TMPLT-2-TXT-Z
558300     DISPLAY WS-PGMID
558400          " OUTPUT LEN (23):" TMPLT-6-LEN
558500     DISPLAY WS-PGMID
558600          " WORD TEXT (good...):" TMPLT-6-TXT
558700     DISPLAY WS-PGMID
558800          " "
558900          TMPLT-6-TXT-Z
559000     DISPLAY " "
559100     SKIP2
559200*    * ------------------------------------------------------- *
559300*    * CALL STRING SERVICE WORD POSITION
559400*    * ------------------------------------------------------- *
559500     SKIP1
559600     MOVE ZERO TO RO-START
559700                  RO-COUNT
559800                  RO-PSA-LEN
559900     SET RO-FLAG-NONE  TO TRUE
560000     MOVE +7   TO RO-START
560100     MOVE +2   TO RO-COUNT
560200     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
560300*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
560400     MOVE +2   TO TEMPLATE-COUNT
560500     MOVE ZERO TO TMPLT-6-LEN
560600     MOVE LOW-VALUE TO TMPLT-6-TXT
560700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
560800     IF PACKAGE-CALL
560900*      CALL ASUSSVCB TO PERFORM SERVICE WORD POS
561000       SET ACTION-WORDPOS TO TRUE
561100       MOVE "ASUSSVCB" TO LS-ASMODULE
561200       CALL LS-ASMODULE
561300            USING ASCA-COMMAREA
561400                  ACTION
561500                  AS-REQUEST-OPTIONS
561600                  SOURCE-STRING
561700                  TEMPLATE-COUNT
561800                  TEMPLATE-2
561900                  TEMPLATE-6
562000                  AS5FDBK-COND-AREA
562100     ELSE
562200       MOVE "ASUDWPOS" TO LS-ASMODULE
562300       CALL LS-ASMODULE
562400            USING ASCA-COMMAREA
562500                  AS-REQUEST-OPTIONS
562600                  SOURCE-STRING
562700                  TEMPLATE-COUNT
562800                  TEMPLATE-2
562900                  TEMPLATE-6
563000                  AS5FDBK-COND-AREA
563100     END-IF
563200
563300     IF AS5FDBK-SEVNBR > ZERO
563400       DISPLAY WS-PGMID
563500            " RETURN CODE: " AS5FDBK-SEVNBR
563600            " MESSAGE NBR: " AS5FDBK-MSGNBR
563700     END-IF
563800
563900     DISPLAY WS-PGMID
564000          " TEST CASE 027.C - WORD POS (7,2)"
564100     DISPLAY WS-PGMID
564200          " MIXED CASE / NO CASE"
564300     DISPLAY WS-PGMID
564400          " SOURCE:" SRC-TXT
564500     DISPLAY WS-PGMID
564600          " OUTPUT LEN (4):" TMPLT-2-LEN
564700     DISPLAY WS-PGMID
564800          " WORD POS (25):" TMPLT-2-TXT
564900     DISPLAY WS-PGMID
565000          " "
565100          TMPLT-2-TXT-Z
565200     DISPLAY WS-PGMID
565300          " OUTPUT LEN (8):" TMPLT-6-LEN
565400     DISPLAY WS-PGMID
565500          " WORD TEXT (good*men):" TMPLT-6-TXT
565600     DISPLAY WS-PGMID
565700          " "
565800          TMPLT-6-TXT-Z
565900     DISPLAY " "
566000     SKIP2
566100     CONTINUE.
566200 TEST-CASE-028.
566300
566400     IF NOT (TEST-CASE = "ALL" OR "028")
566500       GO TO TEST-CASE-090
566600     END-IF
566700     SKIP2
566800     CONTINUE.
566900 TEST-CASE-090.
567000
567100     IF NOT (TEST-CASE = "ALL" OR "090")
567200       GO TO TEST-CASE-091
567300     END-IF
567310
567311     IF PACKAGE-CALL
567312       GO TO TEST-CASE-091
567313     END-IF
567400
567500*    * ------------------------------------------------------- *
567600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
567700*    *   FORMAT: WORD, CURRENCY, CHECK
567800*    * ------------------------------------------------------- *
567900     SKIP1
568000     MOVE ZERO TO RO-START
568100                  RO-COUNT
568200                  RO-PSA-LEN
568300     SET RO-FLAG-NONE  TO TRUE
568400*    SET NUMBER TO WORD CONVERSION
568500     MOVE X'20' TO RO-OPTION-FLAG
568600     MOVE +2   TO RO-COUNT
568700     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
568800*    132132177     9(9)V99
568900     MOVE +1   TO TEMPLATE-COUNT
569000     MOVE ZERO TO TMPLT-25-LEN
569100     MOVE LOW-VALUE TO TMPLT-25-TXT
569200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
569300     IF PACKAGE-CALL
569400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
569500       CONTINUE
569600     ELSE
569700       MOVE "ASUDN2TB" TO LS-ASMODULE
569800       CALL LS-ASMODULE
569900            USING ASCA-COMMAREA
570000                  AS-REQUEST-OPTIONS
570100                  SOURCE-STRING
570200                  TEMPLATE-COUNT
570300                  TEMPLATE-25
570400                  AS5FDBK-COND-AREA
570500     END-IF
570600
570700     MOVE ZERO TO LS-ENCLAVE-RC
570800     MOVE "CEE3GRC" TO LS-LEMODULE
570900     CALL LS-LEMODULE
571000          USING LS-ENCLAVE-RC
571100                OMITTED
571200     IF LS-ENCLAVE-RC > ZERO
571300       DISPLAY WS-PGMID
571400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
571500     END-IF
571600
571700     IF AS5FDBK-SEVNBR > ZERO
571800       DISPLAY WS-PGMID
571900            " RETURN CODE: " AS5FDBK-SEVNBR
572000            " MESSAGE NBR: " AS5FDBK-MSGNBR
572100     END-IF
572200
572300     DISPLAY WS-PGMID
572400          " TEST CASE 090.A - NBR-2-WRD (ZD 1321321.77)"
572500     DISPLAY WS-PGMID
572600          " MIXED CASE / NO CASE"
572700     DISPLAY WS-PGMID
572800          " SOURCE:" SRC-TXT
572900     DISPLAY WS-PGMID
573000          " OUTPUT LEN (99):" TMPLT-25-LEN
573100     DISPLAY WS-PGMID
573200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
573300     DISPLAY WS-PGMID
573400          " "
573500          TMPLT-25-TXT-Z
573600     DISPLAY " "
573700     SKIP2
573800*    * ------------------------------------------------------- *
573900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
574000*    *   FORMAT: WORD, CURRENCY, CHECK
574100*    * ------------------------------------------------------- *
574200     SKIP1
574300     MOVE ZERO TO RO-START
574400                  RO-COUNT
574500                  RO-PSA-LEN
574600     SET RO-FLAG-NONE  TO TRUE
574700*    SET NUMBER TO CURRENCY CONVERSION
574800     MOVE X'10' TO RO-OPTION-FLAG
574900     MOVE +2   TO RO-COUNT
575000     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
575100*    132132177     9(9)V99
575200     MOVE +1   TO TEMPLATE-COUNT
575300     MOVE ZERO TO TMPLT-25-LEN
575400     MOVE LOW-VALUE TO TMPLT-25-TXT
575500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
575600     IF PACKAGE-CALL
575700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
575800       CONTINUE
575900     ELSE
576000       MOVE "ASUDN2TB" TO LS-ASMODULE
576100       CALL LS-ASMODULE
576200            USING ASCA-COMMAREA
576300                  AS-REQUEST-OPTIONS
576400                  SOURCE-STRING
576500                  TEMPLATE-COUNT
576600                  TEMPLATE-25
576700                  AS5FDBK-COND-AREA
576800     END-IF
576900
577000     MOVE ZERO TO LS-ENCLAVE-RC
577100     MOVE "CEE3GRC" TO LS-LEMODULE
577200     CALL LS-LEMODULE
577300          USING LS-ENCLAVE-RC
577400                OMITTED
577500     IF LS-ENCLAVE-RC > ZERO
577600       DISPLAY WS-PGMID
577700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
577800     END-IF
577900
578000     IF AS5FDBK-SEVNBR > ZERO
578100       DISPLAY WS-PGMID
578200            " RETURN CODE: " AS5FDBK-SEVNBR
578300            " MESSAGE NBR: " AS5FDBK-MSGNBR
578400     END-IF
578500
578600     DISPLAY WS-PGMID
578700          " TEST CASE 090.B - NBR-2-CUR (ZD 1321321.77)"
578800     DISPLAY WS-PGMID
578900          " MIXED CASE / NO CASE"
579000     DISPLAY WS-PGMID
579100          " SOURCE:" SRC-TXT
579200     DISPLAY WS-PGMID
579300          " OUTPUT LEN (102):" TMPLT-25-LEN
579400     DISPLAY WS-PGMID
579500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
579600     DISPLAY WS-PGMID
579700          " "
579800          TMPLT-25-TXT-Z
579900     DISPLAY " "
580000     SKIP2
580100*    * ------------------------------------------------------- *
580200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
580300*    *   FORMAT: WORD, CURRENCY, CHECK
580400*    * ------------------------------------------------------- *
580500     SKIP1
580600     MOVE ZERO TO RO-START
580700                  RO-COUNT
580800                  RO-PSA-LEN
580900     SET RO-FLAG-NONE  TO TRUE
581000     MOVE +2   TO RO-COUNT
581100     MOVE WS-SOURCE-STRING-20 TO SOURCE-STRING
581200*    132132177     9(9)V99
581300     MOVE +1   TO TEMPLATE-COUNT
581400     MOVE ZERO TO TMPLT-25-LEN
581500     MOVE LOW-VALUE TO TMPLT-25-TXT
581600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
581700     IF PACKAGE-CALL
581800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
581900       CONTINUE
582000     ELSE
582100       MOVE "ASUDN2TB" TO LS-ASMODULE
582200       CALL LS-ASMODULE
582300            USING ASCA-COMMAREA
582400                  AS-REQUEST-OPTIONS
582500                  SOURCE-STRING
582600                  TEMPLATE-COUNT
582700                  TEMPLATE-25
582800                  AS5FDBK-COND-AREA
582900     END-IF
583000
583100     MOVE ZERO TO LS-ENCLAVE-RC
583200     MOVE "CEE3GRC" TO LS-LEMODULE
583300     CALL LS-LEMODULE
583400          USING LS-ENCLAVE-RC
583500                OMITTED
583600     IF LS-ENCLAVE-RC > ZERO
583700       DISPLAY WS-PGMID
583800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
583900     END-IF
584000
584100     IF AS5FDBK-SEVNBR > ZERO
584200       DISPLAY WS-PGMID
584300            " RETURN CODE: " AS5FDBK-SEVNBR
584400            " MESSAGE NBR: " AS5FDBK-MSGNBR
584500     END-IF
584600
584700     DISPLAY WS-PGMID
584800          " TEST CASE 090.C - NBR-2-CHK (ZD 1321321.77)"
584900     DISPLAY WS-PGMID
585000          " MIXED CASE / NO CASE"
585100     DISPLAY WS-PGMID
585200          " SOURCE:" SRC-TXT
585300     DISPLAY WS-PGMID
585400          " OUTPUT LEN (89):" TMPLT-25-LEN
585500     DISPLAY WS-PGMID
585600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
585700     DISPLAY WS-PGMID
585800          " "
585900          TMPLT-25-TXT-Z
586000     DISPLAY " "
586100     SKIP2
586200*    * ------------------------------------------------------- *
586300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
586400*    *   FORMAT: WORD, CURRENCY, CHECK
586500*    * ------------------------------------------------------- *
586600     SKIP1
586700     MOVE ZERO TO RO-START
586800                  RO-COUNT
586900                  RO-PSA-LEN
587000     SET RO-FLAG-NONE  TO TRUE
587100*    SET NUMBER TO WORD CONVERSION
587200     MOVE X'20' TO RO-OPTION-FLAG
587300     MOVE +3   TO RO-COUNT
587400     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
587500*    1321321888    9(8)V9(3)
587600     MOVE +1   TO TEMPLATE-COUNT
587700     MOVE ZERO TO TMPLT-25-LEN
587800     MOVE LOW-VALUE TO TMPLT-25-TXT
587900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
588000     IF PACKAGE-CALL
588100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
588200       CONTINUE
588300     ELSE
588400       MOVE "ASUDN2TB" TO LS-ASMODULE
588500       CALL LS-ASMODULE
588600            USING ASCA-COMMAREA
588700                  AS-REQUEST-OPTIONS
588800                  SOURCE-STRING
588900                  TEMPLATE-COUNT
589000                  TEMPLATE-25
589100                  AS5FDBK-COND-AREA
589200     END-IF
589300
589400     MOVE ZERO TO LS-ENCLAVE-RC
589500     MOVE "CEE3GRC" TO LS-LEMODULE
589600     CALL LS-LEMODULE
589700          USING LS-ENCLAVE-RC
589800                OMITTED
589900     IF LS-ENCLAVE-RC > ZERO
590000       DISPLAY WS-PGMID
590100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
590200     END-IF
590300
590400     IF AS5FDBK-SEVNBR > ZERO
590500       DISPLAY WS-PGMID
590600            " RETURN CODE: " AS5FDBK-SEVNBR
590700            " MESSAGE NBR: " AS5FDBK-MSGNBR
590800     END-IF
590900
591000     DISPLAY WS-PGMID
591100          " TEST CASE 090.D - NBR-2-WRD (ZD 1321321.888)"
591200     DISPLAY WS-PGMID
591300          " MIXED CASE / NO CASE"
591400     DISPLAY WS-PGMID
591500          " SOURCE:" SRC-TXT
591600     DISPLAY WS-PGMID
591700          " OUTPUT LEN (113):" TMPLT-25-LEN
591800     DISPLAY WS-PGMID
591900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
592000     DISPLAY WS-PGMID
592100          " "
592200          TMPLT-25-TXT-Z
592300     DISPLAY " "
592400     SKIP2
592500*    * ------------------------------------------------------- *
592600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
592700*    *   FORMAT: WORD, CURRENCY, CHECK
592800*    * ------------------------------------------------------- *
592900     SKIP1
593000     MOVE ZERO TO RO-START
593100                  RO-COUNT
593200                  RO-PSA-LEN
593300     SET RO-FLAG-NONE  TO TRUE
593400*    SET NUMBER TO CURRENCY CONVERSION
593500     MOVE X'10' TO RO-OPTION-FLAG
593600     MOVE +3   TO RO-COUNT
593700     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
593800*    1321321888    9(8)V9(3)
593900     MOVE +1   TO TEMPLATE-COUNT
594000     MOVE ZERO TO TMPLT-25-LEN
594100     MOVE LOW-VALUE TO TMPLT-25-TXT
594200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
594300     IF PACKAGE-CALL
594400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
594500       CONTINUE
594600     ELSE
594700       MOVE "ASUDN2TB" TO LS-ASMODULE
594800       CALL LS-ASMODULE
594900            USING ASCA-COMMAREA
595000                  AS-REQUEST-OPTIONS
595100                  SOURCE-STRING
595200                  TEMPLATE-COUNT
595300                  TEMPLATE-25
595400                  AS5FDBK-COND-AREA
595500     END-IF
595600
595700     MOVE ZERO TO LS-ENCLAVE-RC
595800     MOVE "CEE3GRC" TO LS-LEMODULE
595900     CALL LS-LEMODULE
596000          USING LS-ENCLAVE-RC
596100                OMITTED
596200     IF LS-ENCLAVE-RC > ZERO
596300       DISPLAY WS-PGMID
596400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
596500     END-IF
596600
596700     IF AS5FDBK-SEVNBR > ZERO
596800       DISPLAY WS-PGMID
596900            " RETURN CODE: " AS5FDBK-SEVNBR
597000            " MESSAGE NBR: " AS5FDBK-MSGNBR
597100     END-IF
597200
597300     DISPLAY WS-PGMID
597400          " TEST CASE 090.E - NBR-2-CUR (ZD 1321321.888)"
597500     DISPLAY WS-PGMID
597600          " MIXED CASE / NO CASE"
597700     DISPLAY WS-PGMID
597800          " SOURCE:" SRC-TXT
597900     DISPLAY WS-PGMID
598000          " OUTPUT LEN (0):" TMPLT-25-LEN
598100     DISPLAY WS-PGMID
598200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
598300     DISPLAY WS-PGMID
598400          " "
598500          TMPLT-25-TXT-Z
598600     DISPLAY " "
598700     SKIP2
598800*    * ------------------------------------------------------- *
598900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
599000*    *   FORMAT: WORD, CURRENCY, CHECK
599100*    * ------------------------------------------------------- *
599200     SKIP1
599300     MOVE ZERO TO RO-START
599400                  RO-COUNT
599500                  RO-PSA-LEN
599600     SET RO-FLAG-NONE  TO TRUE
599700     MOVE +3   TO RO-COUNT
599800     MOVE WS-SOURCE-STRING-21 TO SOURCE-STRING
599900*    1321321888    9(8)V9(3)
600000     MOVE +1   TO TEMPLATE-COUNT
600100     MOVE ZERO TO TMPLT-25-LEN
600200     MOVE LOW-VALUE TO TMPLT-25-TXT
600300     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
600400     IF PACKAGE-CALL
600500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
600600       CONTINUE
600700     ELSE
600800       MOVE "ASUDN2TB" TO LS-ASMODULE
600900       CALL LS-ASMODULE
601000            USING ASCA-COMMAREA
601100                  AS-REQUEST-OPTIONS
601200                  SOURCE-STRING
601300                  TEMPLATE-COUNT
601400                  TEMPLATE-25
601500                  AS5FDBK-COND-AREA
601600     END-IF
601700
601800     MOVE ZERO TO LS-ENCLAVE-RC
601900     MOVE "CEE3GRC" TO LS-LEMODULE
602000     CALL LS-LEMODULE
602100          USING LS-ENCLAVE-RC
602200                OMITTED
602300     IF LS-ENCLAVE-RC > ZERO
602400       DISPLAY WS-PGMID
602500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
602600     END-IF
602700
602800     IF AS5FDBK-SEVNBR > ZERO
602900       DISPLAY WS-PGMID
603000            " RETURN CODE: " AS5FDBK-SEVNBR
603100            " MESSAGE NBR: " AS5FDBK-MSGNBR
603200     END-IF
603300
603400     DISPLAY WS-PGMID
603500          " TEST CASE 090.F - NBR-2-CHK (ZD 1321321.888)"
603600     DISPLAY WS-PGMID
603700          " MIXED CASE / NO CASE"
603800     DISPLAY WS-PGMID
603900          " SOURCE:" SRC-TXT
604000     DISPLAY WS-PGMID
604100          " OUTPUT LEN (89):" TMPLT-25-LEN
604200     DISPLAY WS-PGMID
604300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
604400     DISPLAY WS-PGMID
604500          " "
604600          TMPLT-25-TXT-Z
604700     DISPLAY " "
604800     SKIP2
604900*    * ------------------------------------------------------- *
605000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
605100*    *   FORMAT: WORD, CURRENCY, CHECK
605200*    * ------------------------------------------------------- *
605300     SKIP1
605400     MOVE ZERO TO RO-START
605500                  RO-COUNT
605600                  RO-PSA-LEN
605700     SET RO-FLAG-NONE  TO TRUE
605800*    SET NUMBER TO WORD CONVERSION
605900     MOVE X'20' TO RO-OPTION-FLAG
606000     MOVE +8   TO RO-COUNT
606100     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
606200*    132132132187654321    9(10)V9(8)
606300     MOVE +1   TO TEMPLATE-COUNT
606400     MOVE ZERO TO TMPLT-25-LEN
606500     MOVE LOW-VALUE TO TMPLT-25-TXT
606600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
606700     IF PACKAGE-CALL
606800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
606900       CONTINUE
607000     ELSE
607100       MOVE "ASUDN2TB" TO LS-ASMODULE
607200       CALL LS-ASMODULE
607300            USING ASCA-COMMAREA
607400                  AS-REQUEST-OPTIONS
607500                  SOURCE-STRING
607600                  TEMPLATE-COUNT
607700                  TEMPLATE-25
607800                  AS5FDBK-COND-AREA
607900     END-IF
608000
608100     MOVE ZERO TO LS-ENCLAVE-RC
608200     MOVE "CEE3GRC" TO LS-LEMODULE
608300     CALL LS-LEMODULE
608400          USING LS-ENCLAVE-RC
608500                OMITTED
608600     IF LS-ENCLAVE-RC > ZERO
608700       DISPLAY WS-PGMID
608800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
608900     END-IF
609000
609100     IF AS5FDBK-SEVNBR > ZERO
609200       DISPLAY WS-PGMID
609300            " RETURN CODE: " AS5FDBK-SEVNBR
609400            " MESSAGE NBR: " AS5FDBK-MSGNBR
609500     END-IF
609600
609700     DISPLAY WS-PGMID
609800          " TEST CASE 090.G - NBR-2-WRD (ZD 1321321321.87654321)"
609900     DISPLAY WS-PGMID
610000          " MIXED CASE / NO CASE"
610100     DISPLAY WS-PGMID
610200          " SOURCE:" SRC-TXT
610300     DISPLAY WS-PGMID
610400          " OUTPUT LEN (204):" TMPLT-25-LEN
610500     DISPLAY WS-PGMID
610600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
610700     DISPLAY WS-PGMID
610800          " "
610900          TMPLT-25-TXT-Z
611000     DISPLAY " "
611100     SKIP2
611200*    * ------------------------------------------------------- *
611300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
611400*    *   FORMAT: WORD, CURRENCY, CHECK
611500*    * ------------------------------------------------------- *
611600     SKIP1
611700     MOVE ZERO TO RO-START
611800                  RO-COUNT
611900                  RO-PSA-LEN
612000     SET RO-FLAG-NONE  TO TRUE
612100*    SET NUMBER TO CURRENCY CONVERSION
612200     MOVE X'10' TO RO-OPTION-FLAG
612300     MOVE +8   TO RO-COUNT
612400     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
612500*    132132132187654321   9(10)V9(8)
612600     MOVE +1   TO TEMPLATE-COUNT
612700     MOVE ZERO TO TMPLT-25-LEN
612800     MOVE LOW-VALUE TO TMPLT-25-TXT
612900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
613000     IF PACKAGE-CALL
613100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
613200       CONTINUE
613300     ELSE
613400       MOVE "ASUDN2TB" TO LS-ASMODULE
613500       CALL LS-ASMODULE
613600            USING ASCA-COMMAREA
613700                  AS-REQUEST-OPTIONS
613800                  SOURCE-STRING
613900                  TEMPLATE-COUNT
614000                  TEMPLATE-25
614100                  AS5FDBK-COND-AREA
614200     END-IF
614300
614400     MOVE ZERO TO LS-ENCLAVE-RC
614500     MOVE "CEE3GRC" TO LS-LEMODULE
614600     CALL LS-LEMODULE
614700          USING LS-ENCLAVE-RC
614800                OMITTED
614900     IF LS-ENCLAVE-RC > ZERO
615000       DISPLAY WS-PGMID
615100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
615200     END-IF
615300
615400     IF AS5FDBK-SEVNBR > ZERO
615500       DISPLAY WS-PGMID
615600            " RETURN CODE: " AS5FDBK-SEVNBR
615700            " MESSAGE NBR: " AS5FDBK-MSGNBR
615800     END-IF
615900
616000     DISPLAY WS-PGMID
616100          " TEST CASE 090.H - NBR-2-CUR (ZD 1321321321.87654321)"
616200     DISPLAY WS-PGMID
616300          " MIXED CASE / NO CASE"
616400     DISPLAY WS-PGMID
616500          " SOURCE:" SRC-TXT
616600     DISPLAY WS-PGMID
616700          " OUTPUT LEN (0):" TMPLT-25-LEN
616800     DISPLAY WS-PGMID
616900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
617000     DISPLAY WS-PGMID
617100          " "
617200          TMPLT-25-TXT-Z
617300     DISPLAY " "
617400     SKIP2
617500*    * ------------------------------------------------------- *
617600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
617700*    *   FORMAT: WORD, CURRENCY, CHECK
617800*    * ------------------------------------------------------- *
617900     SKIP1
618000     MOVE ZERO TO RO-START
618100                  RO-COUNT
618200                  RO-PSA-LEN
618300     SET RO-FLAG-NONE  TO TRUE
618400     MOVE +8   TO RO-COUNT
618500     MOVE WS-SOURCE-STRING-22 TO SOURCE-STRING
618600*    132132132187654321    9(10)V9(8)
618700     MOVE +1   TO TEMPLATE-COUNT
618800     MOVE ZERO TO TMPLT-25-LEN
618900     MOVE LOW-VALUE TO TMPLT-25-TXT
619000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
619100     IF PACKAGE-CALL
619200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
619300       CONTINUE
619400     ELSE
619500       MOVE "ASUDN2TB" TO LS-ASMODULE
619600       CALL LS-ASMODULE
619700            USING ASCA-COMMAREA
619800                  AS-REQUEST-OPTIONS
619900                  SOURCE-STRING
620000                  TEMPLATE-COUNT
620100                  TEMPLATE-25
620200                  AS5FDBK-COND-AREA
620300     END-IF
620400
620500     MOVE ZERO TO LS-ENCLAVE-RC
620600     MOVE "CEE3GRC" TO LS-LEMODULE
620700     CALL LS-LEMODULE
620800          USING LS-ENCLAVE-RC
620900                OMITTED
621000     IF LS-ENCLAVE-RC > ZERO
621100       DISPLAY WS-PGMID
621200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
621300     END-IF
621400
621500     IF AS5FDBK-SEVNBR > ZERO
621600       DISPLAY WS-PGMID
621700            " RETURN CODE: " AS5FDBK-SEVNBR
621800            " MESSAGE NBR: " AS5FDBK-MSGNBR
621900     END-IF
622000
622100     DISPLAY WS-PGMID
622200          " TEST CASE 090.I - NBR-2-CHK (ZD 1321321321.87654321)"
622300     DISPLAY WS-PGMID
622400          " MIXED CASE / NO CASE"
622500     DISPLAY WS-PGMID
622600          " SOURCE:" SRC-TXT
622700     DISPLAY WS-PGMID
622800          " OUTPUT LEN (122):" TMPLT-25-LEN
622900     DISPLAY WS-PGMID
623000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
623100     DISPLAY WS-PGMID
623200          " "
623300          TMPLT-25-TXT-Z
623400     DISPLAY " "
623500     SKIP2
623600*    * ------------------------------------------------------- *
623700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
623800*    *   FORMAT: WORD, CURRENCY, CHECK
623900*    * ------------------------------------------------------- *
624000     SKIP1
624100     MOVE ZERO TO RO-START
624200                  RO-COUNT
624300                  RO-PSA-LEN
624400     SET RO-FLAG-NONE  TO TRUE
624500*    SET NUMBER TO WORD CONVERSION
624600     MOVE X'20' TO RO-OPTION-FLAG
624700     MOVE +8   TO RO-COUNT
624800     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
624900*    132132132100004321    9(10)V9(8)
625000     MOVE +1   TO TEMPLATE-COUNT
625100     MOVE ZERO TO TMPLT-25-LEN
625200     MOVE LOW-VALUE TO TMPLT-25-TXT
625300     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
625400     IF PACKAGE-CALL
625500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
625600       CONTINUE
625700     ELSE
625800       MOVE "ASUDN2TB" TO LS-ASMODULE
625900       CALL LS-ASMODULE
626000            USING ASCA-COMMAREA
626100                  AS-REQUEST-OPTIONS
626200                  SOURCE-STRING
626300                  TEMPLATE-COUNT
626400                  TEMPLATE-25
626500                  AS5FDBK-COND-AREA
626600     END-IF
626700
626800     MOVE ZERO TO LS-ENCLAVE-RC
626900     MOVE "CEE3GRC" TO LS-LEMODULE
627000     CALL LS-LEMODULE
627100          USING LS-ENCLAVE-RC
627200                OMITTED
627300     IF LS-ENCLAVE-RC > ZERO
627400       DISPLAY WS-PGMID
627500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
627600     END-IF
627700
627800     IF AS5FDBK-SEVNBR > ZERO
627900       DISPLAY WS-PGMID
628000            " RETURN CODE: " AS5FDBK-SEVNBR
628100            " MESSAGE NBR: " AS5FDBK-MSGNBR
628200     END-IF
628300
628400     DISPLAY WS-PGMID
628500          " TEST CASE 090.J - NBR-2-WRD (ZD 1321321321.00004321)"
628600     DISPLAY WS-PGMID
628700          " MIXED CASE / NO CASE"
628800     DISPLAY WS-PGMID
628900          " SOURCE:" SRC-TXT
629000     DISPLAY WS-PGMID
629100          " OUTPUT LEN (165):" TMPLT-25-LEN
629200     DISPLAY WS-PGMID
629300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
629400     DISPLAY WS-PGMID
629500          " "
629600          TMPLT-25-TXT-Z
629700     DISPLAY " "
629800     SKIP2
629900*    * ------------------------------------------------------- *
630000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
630100*    *   FORMAT: WORD, CURRENCY, CHECK
630200*    * ------------------------------------------------------- *
630300     SKIP1
630400     MOVE ZERO TO RO-START
630500                  RO-COUNT
630600                  RO-PSA-LEN
630700     SET RO-FLAG-NONE  TO TRUE
630800*    SET NUMBER TO CURRENCY CONVERSION
630900     MOVE X'10' TO RO-OPTION-FLAG
631000     MOVE +8   TO RO-COUNT
631100     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
631200*    132132132100004321   9(10)V9(8)
631300     MOVE +1   TO TEMPLATE-COUNT
631400     MOVE ZERO TO TMPLT-25-LEN
631500     MOVE LOW-VALUE TO TMPLT-25-TXT
631600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
631700     IF PACKAGE-CALL
631800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
631900       CONTINUE
632000     ELSE
632100       MOVE "ASUDN2TB" TO LS-ASMODULE
632200       CALL LS-ASMODULE
632300            USING ASCA-COMMAREA
632400                  AS-REQUEST-OPTIONS
632500                  SOURCE-STRING
632600                  TEMPLATE-COUNT
632700                  TEMPLATE-25
632800                  AS5FDBK-COND-AREA
632900     END-IF
633000
633100     MOVE ZERO TO LS-ENCLAVE-RC
633200     MOVE "CEE3GRC" TO LS-LEMODULE
633300     CALL LS-LEMODULE
633400          USING LS-ENCLAVE-RC
633500                OMITTED
633600     IF LS-ENCLAVE-RC > ZERO
633700       DISPLAY WS-PGMID
633800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
633900     END-IF
634000
634100     IF AS5FDBK-SEVNBR > ZERO
634200       DISPLAY WS-PGMID
634300            " RETURN CODE: " AS5FDBK-SEVNBR
634400            " MESSAGE NBR: " AS5FDBK-MSGNBR
634500     END-IF
634600
634700     DISPLAY WS-PGMID
634800          " TEST CASE 090.K - NBR-2-CUR (ZD 1321321321.00004321)"
634900     DISPLAY WS-PGMID
635000          " MIXED CASE / NO CASE"
635100     DISPLAY WS-PGMID
635200          " SOURCE:" SRC-TXT
635300     DISPLAY WS-PGMID
635400          " OUTPUT LEN (0):" TMPLT-25-LEN
635500     DISPLAY WS-PGMID
635600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
635700     DISPLAY WS-PGMID
635800          " "
635900          TMPLT-25-TXT-Z
636000     DISPLAY " "
636100     SKIP2
636200*    * ------------------------------------------------------- *
636300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
636400*    *   FORMAT: WORD, CURRENCY, CHECK
636500*    * ------------------------------------------------------- *
636600     SKIP1
636700     MOVE ZERO TO RO-START
636800                  RO-COUNT
636900                  RO-PSA-LEN
637000     SET RO-FLAG-NONE  TO TRUE
637100     MOVE +8   TO RO-COUNT
637200     MOVE WS-SOURCE-STRING-23 TO SOURCE-STRING
637300*    132132132100004321    9(10)V9(8)
637400     MOVE +1   TO TEMPLATE-COUNT
637500     MOVE ZERO TO TMPLT-25-LEN
637600     MOVE LOW-VALUE TO TMPLT-25-TXT
637700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
637800     IF PACKAGE-CALL
637900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
638000       CONTINUE
638100     ELSE
638200       MOVE "ASUDN2TB" TO LS-ASMODULE
638300       CALL LS-ASMODULE
638400            USING ASCA-COMMAREA
638500                  AS-REQUEST-OPTIONS
638600                  SOURCE-STRING
638700                  TEMPLATE-COUNT
638800                  TEMPLATE-25
638900                  AS5FDBK-COND-AREA
639000     END-IF
639100
639200     MOVE ZERO TO LS-ENCLAVE-RC
639300     MOVE "CEE3GRC" TO LS-LEMODULE
639400     CALL LS-LEMODULE
639500          USING LS-ENCLAVE-RC
639600                OMITTED
639700     IF LS-ENCLAVE-RC > ZERO
639800       DISPLAY WS-PGMID
639900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
640000     END-IF
640100
640200     IF AS5FDBK-SEVNBR > ZERO
640300       DISPLAY WS-PGMID
640400            " RETURN CODE: " AS5FDBK-SEVNBR
640500            " MESSAGE NBR: " AS5FDBK-MSGNBR
640600     END-IF
640700
640800     DISPLAY WS-PGMID
640900          " TEST CASE 090.L - NBR-2-CHK (ZD 1321321321.00004321)"
641000     DISPLAY WS-PGMID
641100          " MIXED CASE / NO CASE"
641200     DISPLAY WS-PGMID
641300          " SOURCE:" SRC-TXT
641400     DISPLAY WS-PGMID
641500          " OUTPUT LEN (122):" TMPLT-25-LEN
641600     DISPLAY WS-PGMID
641700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
641800     DISPLAY WS-PGMID
641900          " "
642000          TMPLT-25-TXT-Z
642100     DISPLAY " "
642200     SKIP2
642300*    * ------------------------------------------------------- *
642400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
642500*    *   FORMAT: WORD, CURRENCY, CHECK
642600*    * ------------------------------------------------------- *
642700     SKIP1
642800     MOVE ZERO TO RO-START
642900                  RO-COUNT
643000                  RO-PSA-LEN
643100     SET RO-FLAG-NONE  TO TRUE
643200*    SET NUMBER TO WORD CONVERSION
643300     MOVE X'20' TO RO-OPTION-FLAG
643400     MOVE +6   TO RO-COUNT
643500     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
643600*    1000021001000543      9(12)V9(6)
643700     MOVE +1   TO TEMPLATE-COUNT
643800     MOVE ZERO TO TMPLT-25-LEN
643900     MOVE LOW-VALUE TO TMPLT-25-TXT
644000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
644100     IF PACKAGE-CALL
644200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
644300       CONTINUE
644400     ELSE
644500       MOVE "ASUDN2TB" TO LS-ASMODULE
644600       CALL LS-ASMODULE
644700            USING ASCA-COMMAREA
644800                  AS-REQUEST-OPTIONS
644900                  SOURCE-STRING
645000                  TEMPLATE-COUNT
645100                  TEMPLATE-25
645200                  AS5FDBK-COND-AREA
645300     END-IF
645400
645500     MOVE ZERO TO LS-ENCLAVE-RC
645600     MOVE "CEE3GRC" TO LS-LEMODULE
645700     CALL LS-LEMODULE
645800          USING LS-ENCLAVE-RC
645900                OMITTED
646000     IF LS-ENCLAVE-RC > ZERO
646100       DISPLAY WS-PGMID
646200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
646300     END-IF
646400
646500     IF AS5FDBK-SEVNBR > ZERO
646600       DISPLAY WS-PGMID
646700            " RETURN CODE: " AS5FDBK-SEVNBR
646800            " MESSAGE NBR: " AS5FDBK-MSGNBR
646900     END-IF
647000
647100     DISPLAY WS-PGMID
647200          " TEST CASE 090.M - NBR-2-WRD (ZD 1000021001.000543)"
647300     DISPLAY WS-PGMID
647400          " MIXED CASE / NO CASE"
647500     DISPLAY WS-PGMID
647600          " SOURCE:" SRC-TXT
647700     DISPLAY WS-PGMID
647800          " OUTPUT LEN (75):" TMPLT-25-LEN
647900     DISPLAY WS-PGMID
648000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
648100     DISPLAY WS-PGMID
648200          " "
648300          TMPLT-25-TXT-Z
648400     DISPLAY " "
648500     SKIP2
648600*    * ------------------------------------------------------- *
648700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
648800*    *   FORMAT: WORD, CURRENCY, CHECK
648900*    * ------------------------------------------------------- *
649000     SKIP1
649100     MOVE ZERO TO RO-START
649200                  RO-COUNT
649300                  RO-PSA-LEN
649400     SET RO-FLAG-NONE  TO TRUE
649500*    SET NUMBER TO CURRENCY CONVERSION
649600     MOVE X'10' TO RO-OPTION-FLAG
649700     MOVE +6   TO RO-COUNT
649800     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
649900*    1000021001000543   9(12)V9(6)
650000     MOVE +1   TO TEMPLATE-COUNT
650100     MOVE ZERO TO TMPLT-25-LEN
650200     MOVE LOW-VALUE TO TMPLT-25-TXT
650300     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
650400     IF PACKAGE-CALL
650500*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
650600       CONTINUE
650700     ELSE
650800       MOVE "ASUDN2TB" TO LS-ASMODULE
650900       CALL LS-ASMODULE
651000            USING ASCA-COMMAREA
651100                  AS-REQUEST-OPTIONS
651200                  SOURCE-STRING
651300                  TEMPLATE-COUNT
651400                  TEMPLATE-25
651500                  AS5FDBK-COND-AREA
651600     END-IF
651700
651800     MOVE ZERO TO LS-ENCLAVE-RC
651900     MOVE "CEE3GRC" TO LS-LEMODULE
652000     CALL LS-LEMODULE
652100          USING LS-ENCLAVE-RC
652200                OMITTED
652300     IF LS-ENCLAVE-RC > ZERO
652400       DISPLAY WS-PGMID
652500            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
652600     END-IF
652700
652800     IF AS5FDBK-SEVNBR > ZERO
652900       DISPLAY WS-PGMID
653000            " RETURN CODE: " AS5FDBK-SEVNBR
653100            " MESSAGE NBR: " AS5FDBK-MSGNBR
653200     END-IF
653300
653400     DISPLAY WS-PGMID
653500          " TEST CASE 090.N - NBR-2-CUR (ZD 1000021001.000543)"
653600     DISPLAY WS-PGMID
653700          " MIXED CASE / NO CASE"
653800     DISPLAY WS-PGMID
653900          " SOURCE:" SRC-TXT
654000     DISPLAY WS-PGMID
654100          " OUTPUT LEN (0):" TMPLT-25-LEN
654200     DISPLAY WS-PGMID
654300          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
654400     DISPLAY WS-PGMID
654500          " "
654600          TMPLT-25-TXT-Z
654700     DISPLAY " "
654800     SKIP2
654900*    * ------------------------------------------------------- *
655000*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
655100*    *   FORMAT: WORD, CURRENCY, CHECK
655200*    * ------------------------------------------------------- *
655300     SKIP1
655400     MOVE ZERO TO RO-START
655500                  RO-COUNT
655600                  RO-PSA-LEN
655700     SET RO-FLAG-NONE  TO TRUE
655800     MOVE +6   TO RO-COUNT
655900     MOVE WS-SOURCE-STRING-24 TO SOURCE-STRING
656000*    1000021001000543    9(12)V9(6)
656100     MOVE +1   TO TEMPLATE-COUNT
656200     MOVE ZERO TO TMPLT-25-LEN
656300     MOVE LOW-VALUE TO TMPLT-25-TXT
656400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
656500     IF PACKAGE-CALL
656600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
656700       CONTINUE
656800     ELSE
656900       MOVE "ASUDN2TB" TO LS-ASMODULE
657000       CALL LS-ASMODULE
657100            USING ASCA-COMMAREA
657200                  AS-REQUEST-OPTIONS
657300                  SOURCE-STRING
657400                  TEMPLATE-COUNT
657500                  TEMPLATE-25
657600                  AS5FDBK-COND-AREA
657700     END-IF
657800
657900     MOVE ZERO TO LS-ENCLAVE-RC
658000     MOVE "CEE3GRC" TO LS-LEMODULE
658100     CALL LS-LEMODULE
658200          USING LS-ENCLAVE-RC
658300                OMITTED
658400     IF LS-ENCLAVE-RC > ZERO
658500       DISPLAY WS-PGMID
658600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
658700     END-IF
658800
658900     IF AS5FDBK-SEVNBR > ZERO
659000       DISPLAY WS-PGMID
659100            " RETURN CODE: " AS5FDBK-SEVNBR
659200            " MESSAGE NBR: " AS5FDBK-MSGNBR
659300     END-IF
659400
659500     DISPLAY WS-PGMID
659600          " TEST CASE 090.O - NBR-2-CHK (ZD 1000021001.000543)"
659700     DISPLAY WS-PGMID
659800          " MIXED CASE / NO CASE"
659900     DISPLAY WS-PGMID
660000          " SOURCE:" SRC-TXT
660100     DISPLAY WS-PGMID
660200          " OUTPUT LEN (54):" TMPLT-25-LEN
660300     DISPLAY WS-PGMID
660400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
660500     DISPLAY WS-PGMID
660600          " "
660700          TMPLT-25-TXT-Z
660800     DISPLAY " "
660900     SKIP2
661000*    * ------------------------------------------------------- *
661100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
661200*    *   FORMAT: WORD, CURRENCY, CHECK
661300*    * ------------------------------------------------------- *
661400     SKIP1
661500     MOVE ZERO TO RO-START
661600                  RO-COUNT
661700                  RO-PSA-LEN
661800     SET RO-FLAG-NONE  TO TRUE
661900*    SET NUMBER TO WORD CONVERSION
662000     MOVE X'20' TO RO-OPTION-FLAG
662100     MOVE +0   TO RO-COUNT
662200     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
662300*    -10200             9(5)
662400     MOVE +1   TO TEMPLATE-COUNT
662500     MOVE ZERO TO TMPLT-25-LEN
662600     MOVE LOW-VALUE TO TMPLT-25-TXT
662700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
662800     IF PACKAGE-CALL
662900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
663000       CONTINUE
663100     ELSE
663200       MOVE "ASUDN2TB" TO LS-ASMODULE
663300       CALL LS-ASMODULE
663400            USING ASCA-COMMAREA
663500                  AS-REQUEST-OPTIONS
663600                  SOURCE-STRING
663700                  TEMPLATE-COUNT
663800                  TEMPLATE-25
663900                  AS5FDBK-COND-AREA
664000     END-IF
664100
664200     MOVE ZERO TO LS-ENCLAVE-RC
664300     MOVE "CEE3GRC" TO LS-LEMODULE
664400     CALL LS-LEMODULE
664500          USING LS-ENCLAVE-RC
664600                OMITTED
664700     IF LS-ENCLAVE-RC > ZERO
664800       DISPLAY WS-PGMID
664900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
665000     END-IF
665100
665200     IF AS5FDBK-SEVNBR > ZERO
665300       DISPLAY WS-PGMID
665400            " RETURN CODE: " AS5FDBK-SEVNBR
665500            " MESSAGE NBR: " AS5FDBK-MSGNBR
665600     END-IF
665700
665800     DISPLAY WS-PGMID
665900          " TEST CASE 090.P - NBR-2-WRD (ZD -10200)"
666000     DISPLAY WS-PGMID
666100          " MIXED CASE / NO CASE"
666200     DISPLAY WS-PGMID
666300          " SOURCE:" SRC-TXT
666400     DISPLAY WS-PGMID
666500          " OUTPUT LEN (33):" TMPLT-25-LEN
666600     DISPLAY WS-PGMID
666700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
666800     DISPLAY WS-PGMID
666900          " "
667000          TMPLT-25-TXT-Z
667100     DISPLAY " "
667200     SKIP2
667300*    * ------------------------------------------------------- *
667400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
667500*    *   FORMAT: WORD, CURRENCY, CHECK
667600*    * ------------------------------------------------------- *
667700     SKIP1
667800     MOVE ZERO TO RO-START
667900                  RO-COUNT
668000                  RO-PSA-LEN
668100     SET RO-FLAG-NONE  TO TRUE
668200*    SET NUMBER TO CURRENCY CONVERSION
668300     MOVE X'10' TO RO-OPTION-FLAG
668400     MOVE +0   TO RO-COUNT
668500     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
668600*    -10200             9(5)
668700     MOVE +1   TO TEMPLATE-COUNT
668800     MOVE ZERO TO TMPLT-25-LEN
668900     MOVE LOW-VALUE TO TMPLT-25-TXT
669000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
669100     IF PACKAGE-CALL
669200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
669300       CONTINUE
669400     ELSE
669500       MOVE "ASUDN2TB" TO LS-ASMODULE
669600       CALL LS-ASMODULE
669700            USING ASCA-COMMAREA
669800                  AS-REQUEST-OPTIONS
669900                  SOURCE-STRING
670000                  TEMPLATE-COUNT
670100                  TEMPLATE-25
670200                  AS5FDBK-COND-AREA
670300     END-IF
670400
670500     MOVE ZERO TO LS-ENCLAVE-RC
670600     MOVE "CEE3GRC" TO LS-LEMODULE
670700     CALL LS-LEMODULE
670800          USING LS-ENCLAVE-RC
670900                OMITTED
671000     IF LS-ENCLAVE-RC > ZERO
671100       DISPLAY WS-PGMID
671200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
671300     END-IF
671400
671500     IF AS5FDBK-SEVNBR > ZERO
671600       DISPLAY WS-PGMID
671700            " RETURN CODE: " AS5FDBK-SEVNBR
671800            " MESSAGE NBR: " AS5FDBK-MSGNBR
671900     END-IF
672000
672100     DISPLAY WS-PGMID
672200          " TEST CASE 090.Q - NBR-2-CUR (ZD -10200)"
672300     DISPLAY WS-PGMID
672400          " MIXED CASE / NO CASE"
672500     DISPLAY WS-PGMID
672600          " SOURCE:" SRC-TXT
672700     DISPLAY WS-PGMID
672800          " OUTPUT LEN (41):" TMPLT-25-LEN
672900     DISPLAY WS-PGMID
673000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
673100     DISPLAY WS-PGMID
673200          " "
673300          TMPLT-25-TXT-Z
673400     DISPLAY " "
673500     SKIP2
673600*    * ------------------------------------------------------- *
673700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
673800*    *   FORMAT: WORD, CURRENCY, CHECK
673900*    * ------------------------------------------------------- *
674000     SKIP1
674100     MOVE ZERO TO RO-START
674200                  RO-COUNT
674300                  RO-PSA-LEN
674400     SET RO-FLAG-NONE  TO TRUE
674500     MOVE +0   TO RO-COUNT
674600     MOVE WS-SOURCE-STRING-25 TO SOURCE-STRING
674700*    -10200             9(5)
674800     MOVE +1   TO TEMPLATE-COUNT
674900     MOVE ZERO TO TMPLT-25-LEN
675000     MOVE LOW-VALUE TO TMPLT-25-TXT
675100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
675200     IF PACKAGE-CALL
675300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
675400       CONTINUE
675500     ELSE
675600       MOVE "ASUDN2TB" TO LS-ASMODULE
675700       CALL LS-ASMODULE
675800            USING ASCA-COMMAREA
675900                  AS-REQUEST-OPTIONS
676000                  SOURCE-STRING
676100                  TEMPLATE-COUNT
676200                  TEMPLATE-25
676300                  AS5FDBK-COND-AREA
676400     END-IF
676500
676600     MOVE ZERO TO LS-ENCLAVE-RC
676700     MOVE "CEE3GRC" TO LS-LEMODULE
676800     CALL LS-LEMODULE
676900          USING LS-ENCLAVE-RC
677000                OMITTED
677100     IF LS-ENCLAVE-RC > ZERO
677200       DISPLAY WS-PGMID
677300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
677400     END-IF
677500
677600     IF AS5FDBK-SEVNBR > ZERO
677700       DISPLAY WS-PGMID
677800            " RETURN CODE: " AS5FDBK-SEVNBR
677900            " MESSAGE NBR: " AS5FDBK-MSGNBR
678000     END-IF
678100
678200     DISPLAY WS-PGMID
678300          " TEST CASE 090.R - NBR-2-CHK (ZD -10200)"
678400     DISPLAY WS-PGMID
678500          " MIXED CASE / NO CASE"
678600     DISPLAY WS-PGMID
678700          " SOURCE:" SRC-TXT
678800     DISPLAY WS-PGMID
678900          " OUTPUT LEN (0):" TMPLT-25-LEN
679000     DISPLAY WS-PGMID
679100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
679200     DISPLAY WS-PGMID
679300          " "
679400          TMPLT-25-TXT-Z
679500     DISPLAY " "
679600     SKIP2
679700*    * ------------------------------------------------------- *
679800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
679900*    *   FORMAT: WORD, CURRENCY, CHECK
680000*    * ------------------------------------------------------- *
680100     SKIP1
680200     MOVE ZERO TO RO-START
680300                  RO-COUNT
680400                  RO-PSA-LEN
680500     SET RO-FLAG-NONE  TO TRUE
680600*    SET NUMBER TO WORD CONVERSION
680700     MOVE X'20' TO RO-OPTION-FLAG
680800     MOVE +2   TO RO-COUNT
680900     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
681000*    0.75          9(3)V9(2)
681100     MOVE +1   TO TEMPLATE-COUNT
681200     MOVE ZERO TO TMPLT-25-LEN
681300     MOVE LOW-VALUE TO TMPLT-25-TXT
681400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
681500     IF PACKAGE-CALL
681600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
681700       CONTINUE
681800     ELSE
681900       MOVE "ASUDN2TB" TO LS-ASMODULE
682000       CALL LS-ASMODULE
682100            USING ASCA-COMMAREA
682200                  AS-REQUEST-OPTIONS
682300                  SOURCE-STRING
682400                  TEMPLATE-COUNT
682500                  TEMPLATE-25
682600                  AS5FDBK-COND-AREA
682700     END-IF
682800
682900     MOVE ZERO TO LS-ENCLAVE-RC
683000     MOVE "CEE3GRC" TO LS-LEMODULE
683100     CALL LS-LEMODULE
683200          USING LS-ENCLAVE-RC
683300                OMITTED
683400     IF LS-ENCLAVE-RC > ZERO
683500       DISPLAY WS-PGMID
683600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
683700     END-IF
683800
683900     IF AS5FDBK-SEVNBR > ZERO
684000       DISPLAY WS-PGMID
684100            " RETURN CODE: " AS5FDBK-SEVNBR
684200            " MESSAGE NBR: " AS5FDBK-MSGNBR
684300     END-IF
684400
684500     DISPLAY WS-PGMID
684600          " TEST CASE 090.S - NBR-2-WRD (ZD 0.75)"
684700     DISPLAY WS-PGMID
684800          " MIXED CASE / NO CASE"
684900     DISPLAY WS-PGMID
685000          " SOURCE:" SRC-TXT
685100     DISPLAY WS-PGMID
685200          " OUTPUT LEN (32):" TMPLT-25-LEN
685300     DISPLAY WS-PGMID
685400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
685500     DISPLAY WS-PGMID
685600          " "
685700          TMPLT-25-TXT-Z
685800     DISPLAY " "
685900     SKIP2
686000*    * ------------------------------------------------------- *
686100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
686200*    *   FORMAT: WORD, CURRENCY, CHECK
686300*    * ------------------------------------------------------- *
686400     SKIP1
686500     MOVE ZERO TO RO-START
686600                  RO-COUNT
686700                  RO-PSA-LEN
686800     SET RO-FLAG-NONE  TO TRUE
686900*    SET NUMBER TO CURRENCY CONVERSION
687000     MOVE X'10' TO RO-OPTION-FLAG
687100     MOVE +2   TO RO-COUNT
687200     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
687300*    0.75          9(3)V9(2)
687400     MOVE +1   TO TEMPLATE-COUNT
687500     MOVE ZERO TO TMPLT-25-LEN
687600     MOVE LOW-VALUE TO TMPLT-25-TXT
687700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
687800     IF PACKAGE-CALL
687900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
688000       CONTINUE
688100     ELSE
688200       MOVE "ASUDN2TB" TO LS-ASMODULE
688300       CALL LS-ASMODULE
688400            USING ASCA-COMMAREA
688500                  AS-REQUEST-OPTIONS
688600                  SOURCE-STRING
688700                  TEMPLATE-COUNT
688800                  TEMPLATE-25
688900                  AS5FDBK-COND-AREA
689000     END-IF
689100
689200     MOVE ZERO TO LS-ENCLAVE-RC
689300     MOVE "CEE3GRC" TO LS-LEMODULE
689400     CALL LS-LEMODULE
689500          USING LS-ENCLAVE-RC
689600                OMITTED
689700     IF LS-ENCLAVE-RC > ZERO
689800       DISPLAY WS-PGMID
689900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
690000     END-IF
690100
690200     IF AS5FDBK-SEVNBR > ZERO
690300       DISPLAY WS-PGMID
690400            " RETURN CODE: " AS5FDBK-SEVNBR
690500            " MESSAGE NBR: " AS5FDBK-MSGNBR
690600     END-IF
690700
690800     DISPLAY WS-PGMID
690900          " TEST CASE 090.T - NBR-2-CUR (ZD 0.75)"
691000     DISPLAY WS-PGMID
691100          " MIXED CASE / NO CASE"
691200     DISPLAY WS-PGMID
691300          " SOURCE:" SRC-TXT
691400     DISPLAY WS-PGMID
691500          " OUTPUT LEN (35):" TMPLT-25-LEN
691600     DISPLAY WS-PGMID
691700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
691800     DISPLAY WS-PGMID
691900          " "
692000          TMPLT-25-TXT-Z
692100     DISPLAY " "
692200     SKIP2
692300*    * ------------------------------------------------------- *
692400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
692500*    *   FORMAT: WORD, CURRENCY, CHECK
692600*    * ------------------------------------------------------- *
692700     SKIP1
692800     MOVE ZERO TO RO-START
692900                  RO-COUNT
693000                  RO-PSA-LEN
693100     SET RO-FLAG-NONE  TO TRUE
693200     MOVE +2   TO RO-COUNT
693300     MOVE WS-SOURCE-STRING-34 TO SOURCE-STRING
693400*    0.75          9(3)V9(2)
693500     MOVE +1   TO TEMPLATE-COUNT
693600     MOVE ZERO TO TMPLT-25-LEN
693700     MOVE LOW-VALUE TO TMPLT-25-TXT
693800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
693900     IF PACKAGE-CALL
694000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
694100       CONTINUE
694200     ELSE
694300       MOVE "ASUDN2TB" TO LS-ASMODULE
694400       CALL LS-ASMODULE
694500            USING ASCA-COMMAREA
694600                  AS-REQUEST-OPTIONS
694700                  SOURCE-STRING
694800                  TEMPLATE-COUNT
694900                  TEMPLATE-25
695000                  AS5FDBK-COND-AREA
695100     END-IF
695200
695300     MOVE ZERO TO LS-ENCLAVE-RC
695400     MOVE "CEE3GRC" TO LS-LEMODULE
695500     CALL LS-LEMODULE
695600          USING LS-ENCLAVE-RC
695700                OMITTED
695800     IF LS-ENCLAVE-RC > ZERO
695900       DISPLAY WS-PGMID
696000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
696100     END-IF
696200
696300     IF AS5FDBK-SEVNBR > ZERO
696400       DISPLAY WS-PGMID
696500            " RETURN CODE: " AS5FDBK-SEVNBR
696600            " MESSAGE NBR: " AS5FDBK-MSGNBR
696700     END-IF
696800
696900     DISPLAY WS-PGMID
697000          " TEST CASE 090.U - NBR-2-CHK (ZD 0.75)"
697100     DISPLAY WS-PGMID
697200          " MIXED CASE / NO CASE"
697300     DISPLAY WS-PGMID
697400          " SOURCE:" SRC-TXT
697500     DISPLAY WS-PGMID
697600          " OUTPUT LEN (23):" TMPLT-25-LEN
697700     DISPLAY WS-PGMID
697800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
697900     DISPLAY WS-PGMID
698000          " "
698100          TMPLT-25-TXT-Z
698200     DISPLAY " "
698300     SKIP2
698400     CONTINUE.
698500 TEST-CASE-091.
698600
698700     IF NOT (TEST-CASE = "ALL" OR "091")
698800       GO TO TEST-CASE-092
698900     END-IF
698910
698911     IF PACKAGE-CALL
698912       GO TO TEST-CASE-092
698913     END-IF
698914
699000*    * ------------------------------------------------------- *
699100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
699200*    *   FORMAT: WORD, CURRENCY, CHECK
699300*    * ------------------------------------------------------- *
699400     SKIP1
699500     MOVE ZERO TO RO-START
699600                  RO-COUNT
699700                  RO-PSA-LEN
699800     SET RO-FLAG-NONE  TO TRUE
699900*    SET NUMBER TO WORD CONVERSION
700000     MOVE X'20' TO RO-OPTION-FLAG
700100     MOVE +2   TO RO-COUNT
700200     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
700300*    132132177     9(9)V99
700400     MOVE +1   TO TEMPLATE-COUNT
700500     MOVE ZERO TO TMPLT-25-LEN
700600     MOVE LOW-VALUE TO TMPLT-25-TXT
700700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
700800     IF PACKAGE-CALL
700900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
701000       CONTINUE
701100     ELSE
701200       MOVE "ASUDN2TB" TO LS-ASMODULE
701300       CALL LS-ASMODULE
701400            USING ASCA-COMMAREA
701500                  AS-REQUEST-OPTIONS
701600                  SOURCE-STRING
701700                  TEMPLATE-COUNT
701800                  TEMPLATE-25
701900                  AS5FDBK-COND-AREA
702000     END-IF
702100
702200     MOVE ZERO TO LS-ENCLAVE-RC
702300     MOVE "CEE3GRC" TO LS-LEMODULE
702400     CALL LS-LEMODULE
702500          USING LS-ENCLAVE-RC
702600                OMITTED
702700     IF LS-ENCLAVE-RC > ZERO
702800       DISPLAY WS-PGMID
702900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
703000     END-IF
703100
703200     IF AS5FDBK-SEVNBR > ZERO
703300       DISPLAY WS-PGMID
703400            " RETURN CODE: " AS5FDBK-SEVNBR
703500            " MESSAGE NBR: " AS5FDBK-MSGNBR
703600     END-IF
703700
703800     DISPLAY WS-PGMID
703900          " TEST CASE 091.A - NBR-2-WRD (PD 1321321.77)"
704000     DISPLAY WS-PGMID
704100          " MIXED CASE / NO CASE"
704200     DISPLAY WS-PGMID
704300          " SOURCE:" SRC-TXT
704400     DISPLAY WS-PGMID
704500          " OUTPUT LEN (99):" TMPLT-25-LEN
704600     DISPLAY WS-PGMID
704700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
704800     DISPLAY WS-PGMID
704900          " "
705000          TMPLT-25-TXT-Z
705100     DISPLAY " "
705200     SKIP2
705300*    * ------------------------------------------------------- *
705400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
705500*    *   FORMAT: WORD, CURRENCY, CHECK
705600*    * ------------------------------------------------------- *
705700     SKIP1
705800     MOVE ZERO TO RO-START
705900                  RO-COUNT
706000                  RO-PSA-LEN
706100     SET RO-FLAG-NONE  TO TRUE
706200*    SET NUMBER TO CURRENCY CONVERSION
706300     MOVE X'10' TO RO-OPTION-FLAG
706400     MOVE +2   TO RO-COUNT
706500     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
706600*    132132177     9(9)V99
706700     MOVE +1   TO TEMPLATE-COUNT
706800     MOVE ZERO TO TMPLT-25-LEN
706900     MOVE LOW-VALUE TO TMPLT-25-TXT
707000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
707100     IF PACKAGE-CALL
707200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
707300       CONTINUE
707400     ELSE
707500       MOVE "ASUDN2TB" TO LS-ASMODULE
707600       CALL LS-ASMODULE
707700            USING ASCA-COMMAREA
707800                  AS-REQUEST-OPTIONS
707900                  SOURCE-STRING
708000                  TEMPLATE-COUNT
708100                  TEMPLATE-25
708200                  AS5FDBK-COND-AREA
708300     END-IF
708400
708500     MOVE ZERO TO LS-ENCLAVE-RC
708600     MOVE "CEE3GRC" TO LS-LEMODULE
708700     CALL LS-LEMODULE
708800          USING LS-ENCLAVE-RC
708900                OMITTED
709000     IF LS-ENCLAVE-RC > ZERO
709100       DISPLAY WS-PGMID
709200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
709300     END-IF
709400
709500     IF AS5FDBK-SEVNBR > ZERO
709600       DISPLAY WS-PGMID
709700            " RETURN CODE: " AS5FDBK-SEVNBR
709800            " MESSAGE NBR: " AS5FDBK-MSGNBR
709900     END-IF
710000
710100     DISPLAY WS-PGMID
710200          " TEST CASE 091.B - NBR-2-CUR (PD 1321321.77)"
710300     DISPLAY WS-PGMID
710400          " MIXED CASE / NO CASE"
710500     DISPLAY WS-PGMID
710600          " SOURCE:" SRC-TXT
710700     DISPLAY WS-PGMID
710800          " OUTPUT LEN (102):" TMPLT-25-LEN
710900     DISPLAY WS-PGMID
711000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
711100     DISPLAY WS-PGMID
711200          " "
711300          TMPLT-25-TXT-Z
711400     DISPLAY " "
711500     SKIP2
711600*    * ------------------------------------------------------- *
711700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
711800*    *   FORMAT: WORD, CURRENCY, CHECK
711900*    * ------------------------------------------------------- *
712000     SKIP1
712100     MOVE ZERO TO RO-START
712200                  RO-COUNT
712300                  RO-PSA-LEN
712400     SET RO-FLAG-NONE  TO TRUE
712500     MOVE +2   TO RO-COUNT
712600     MOVE WS-SOURCE-STRING-26 TO SOURCE-STRING
712700*    132132177     9(9)V99
712800     MOVE +1   TO TEMPLATE-COUNT
712900     MOVE ZERO TO TMPLT-25-LEN
713000     MOVE LOW-VALUE TO TMPLT-25-TXT
713100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
713200     IF PACKAGE-CALL
713300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
713400       CONTINUE
713500     ELSE
713600       MOVE "ASUDN2TB" TO LS-ASMODULE
713700       CALL LS-ASMODULE
713800            USING ASCA-COMMAREA
713900                  AS-REQUEST-OPTIONS
714000                  SOURCE-STRING
714100                  TEMPLATE-COUNT
714200                  TEMPLATE-25
714300                  AS5FDBK-COND-AREA
714400     END-IF
714500
714600     MOVE ZERO TO LS-ENCLAVE-RC
714700     MOVE "CEE3GRC" TO LS-LEMODULE
714800     CALL LS-LEMODULE
714900          USING LS-ENCLAVE-RC
715000                OMITTED
715100     IF LS-ENCLAVE-RC > ZERO
715200       DISPLAY WS-PGMID
715300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
715400     END-IF
715500
715600     IF AS5FDBK-SEVNBR > ZERO
715700       DISPLAY WS-PGMID
715800            " RETURN CODE: " AS5FDBK-SEVNBR
715900            " MESSAGE NBR: " AS5FDBK-MSGNBR
716000     END-IF
716100
716200     DISPLAY WS-PGMID
716300          " TEST CASE 091.C - NBR-2-CHK (PD 1321321.77)"
716400     DISPLAY WS-PGMID
716500          " MIXED CASE / NO CASE"
716600     DISPLAY WS-PGMID
716700          " SOURCE:" SRC-TXT
716800     DISPLAY WS-PGMID
716900          " OUTPUT LEN (89):" TMPLT-25-LEN
717000     DISPLAY WS-PGMID
717100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
717200     DISPLAY WS-PGMID
717300          " "
717400          TMPLT-25-TXT-Z
717500     DISPLAY " "
717600     SKIP2
717700*    * ------------------------------------------------------- *
717800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
717900*    *   FORMAT: WORD, CURRENCY, CHECK
718000*    * ------------------------------------------------------- *
718100     SKIP1
718200     MOVE ZERO TO RO-START
718300                  RO-COUNT
718400                  RO-PSA-LEN
718500     SET RO-FLAG-NONE  TO TRUE
718600*    SET NUMBER TO WORD CONVERSION
718700     MOVE X'20' TO RO-OPTION-FLAG
718800     MOVE +3   TO RO-COUNT
718900     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
719000*    1321321888    9(8)V9(3)
719100     MOVE +1   TO TEMPLATE-COUNT
719200     MOVE ZERO TO TMPLT-25-LEN
719300     MOVE LOW-VALUE TO TMPLT-25-TXT
719400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
719500     IF PACKAGE-CALL
719600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
719700       CONTINUE
719800     ELSE
719900       MOVE "ASUDN2TB" TO LS-ASMODULE
720000       CALL LS-ASMODULE
720100            USING ASCA-COMMAREA
720200                  AS-REQUEST-OPTIONS
720300                  SOURCE-STRING
720400                  TEMPLATE-COUNT
720500                  TEMPLATE-25
720600                  AS5FDBK-COND-AREA
720700     END-IF
720800
720900     MOVE ZERO TO LS-ENCLAVE-RC
721000     MOVE "CEE3GRC" TO LS-LEMODULE
721100     CALL LS-LEMODULE
721200          USING LS-ENCLAVE-RC
721300                OMITTED
721400     IF LS-ENCLAVE-RC > ZERO
721500       DISPLAY WS-PGMID
721600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
721700     END-IF
721800
721900     IF AS5FDBK-SEVNBR > ZERO
722000       DISPLAY WS-PGMID
722100            " RETURN CODE: " AS5FDBK-SEVNBR
722200            " MESSAGE NBR: " AS5FDBK-MSGNBR
722300     END-IF
722400
722500     DISPLAY WS-PGMID
722600          " TEST CASE 091.D - NBR-2-WRD (PD 1321321.888)"
722700     DISPLAY WS-PGMID
722800          " MIXED CASE / NO CASE"
722900     DISPLAY WS-PGMID
723000          " SOURCE:" SRC-TXT
723100     DISPLAY WS-PGMID
723200          " OUTPUT LEN (113):" TMPLT-25-LEN
723300     DISPLAY WS-PGMID
723400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
723500     DISPLAY WS-PGMID
723600          " "
723700          TMPLT-25-TXT-Z
723800     DISPLAY " "
723900     SKIP2
724000*    * ------------------------------------------------------- *
724100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
724200*    *   FORMAT: WORD, CURRENCY, CHECK
724300*    * ------------------------------------------------------- *
724400     SKIP1
724500     MOVE ZERO TO RO-START
724600                  RO-COUNT
724700                  RO-PSA-LEN
724800     SET RO-FLAG-NONE  TO TRUE
724900*    SET NUMBER TO CURRENCY CONVERSION
725000     MOVE X'10' TO RO-OPTION-FLAG
725100     MOVE +3   TO RO-COUNT
725200     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
725300*    1321321888    9(8)V9(3)
725400     MOVE +1   TO TEMPLATE-COUNT
725500     MOVE ZERO TO TMPLT-25-LEN
725600     MOVE LOW-VALUE TO TMPLT-25-TXT
725700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
725800     IF PACKAGE-CALL
725900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
726000       CONTINUE
726100     ELSE
726200       MOVE "ASUDN2TB" TO LS-ASMODULE
726300       CALL LS-ASMODULE
726400            USING ASCA-COMMAREA
726500                  AS-REQUEST-OPTIONS
726600                  SOURCE-STRING
726700                  TEMPLATE-COUNT
726800                  TEMPLATE-25
726900                  AS5FDBK-COND-AREA
727000     END-IF
727100
727200     MOVE ZERO TO LS-ENCLAVE-RC
727300     MOVE "CEE3GRC" TO LS-LEMODULE
727400     CALL LS-LEMODULE
727500          USING LS-ENCLAVE-RC
727600                OMITTED
727700     IF LS-ENCLAVE-RC > ZERO
727800       DISPLAY WS-PGMID
727900            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
728000     END-IF
728100
728200     IF AS5FDBK-SEVNBR > ZERO
728300       DISPLAY WS-PGMID
728400            " RETURN CODE: " AS5FDBK-SEVNBR
728500            " MESSAGE NBR: " AS5FDBK-MSGNBR
728600     END-IF
728700
728800     DISPLAY WS-PGMID
728900          " TEST CASE 091.E - NBR-2-CUR (PD 1321321.888)"
729000     DISPLAY WS-PGMID
729100          " MIXED CASE / NO CASE"
729200     DISPLAY WS-PGMID
729300          " SOURCE:" SRC-TXT
729400     DISPLAY WS-PGMID
729500          " OUTPUT LEN (0):" TMPLT-25-LEN
729600     DISPLAY WS-PGMID
729700          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
729800     DISPLAY WS-PGMID
729900          " "
730000          TMPLT-25-TXT-Z
730100     DISPLAY " "
730200     SKIP2
730300*    * ------------------------------------------------------- *
730400*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
730500*    *   FORMAT: WORD, CURRENCY, CHECK
730600*    * ------------------------------------------------------- *
730700     SKIP1
730800     MOVE ZERO TO RO-START
730900                  RO-COUNT
731000                  RO-PSA-LEN
731100     SET RO-FLAG-NONE  TO TRUE
731200     MOVE +3   TO RO-COUNT
731300     MOVE WS-SOURCE-STRING-27 TO SOURCE-STRING
731400*    1321321888    9(8)V9(3)
731500     MOVE +1   TO TEMPLATE-COUNT
731600     MOVE ZERO TO TMPLT-25-LEN
731700     MOVE LOW-VALUE TO TMPLT-25-TXT
731800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
731900     IF PACKAGE-CALL
732000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
732100       CONTINUE
732200     ELSE
732300       MOVE "ASUDN2TB" TO LS-ASMODULE
732400       CALL LS-ASMODULE
732500            USING ASCA-COMMAREA
732600                  AS-REQUEST-OPTIONS
732700                  SOURCE-STRING
732800                  TEMPLATE-COUNT
732900                  TEMPLATE-25
733000                  AS5FDBK-COND-AREA
733100     END-IF
733200
733300     MOVE ZERO TO LS-ENCLAVE-RC
733400     MOVE "CEE3GRC" TO LS-LEMODULE
733500     CALL LS-LEMODULE
733600          USING LS-ENCLAVE-RC
733700                OMITTED
733800     IF LS-ENCLAVE-RC > ZERO
733900       DISPLAY WS-PGMID
734000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
734100     END-IF
734200
734300     IF AS5FDBK-SEVNBR > ZERO
734400       DISPLAY WS-PGMID
734500            " RETURN CODE: " AS5FDBK-SEVNBR
734600            " MESSAGE NBR: " AS5FDBK-MSGNBR
734700     END-IF
734800
734900     DISPLAY WS-PGMID
735000          " TEST CASE 091.F - NBR-2-CHK (PD 1321321.888)"
735100     DISPLAY WS-PGMID
735200          " MIXED CASE / NO CASE"
735300     DISPLAY WS-PGMID
735400          " SOURCE:" SRC-TXT
735500     DISPLAY WS-PGMID
735600          " OUTPUT LEN (89):" TMPLT-25-LEN
735700     DISPLAY WS-PGMID
735800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
735900     DISPLAY WS-PGMID
736000          " "
736100          TMPLT-25-TXT-Z
736200     DISPLAY " "
736300     SKIP2
736400*    * ------------------------------------------------------- *
736500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
736600*    *   FORMAT: WORD, CURRENCY, CHECK
736700*    * ------------------------------------------------------- *
736800     SKIP1
736900     MOVE ZERO TO RO-START
737000                  RO-COUNT
737100                  RO-PSA-LEN
737200     SET RO-FLAG-NONE  TO TRUE
737300*    SET NUMBER TO WORD CONVERSION
737400     MOVE X'20' TO RO-OPTION-FLAG
737500     MOVE +8   TO RO-COUNT
737600     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
737700*    132132132187654321    9(10)V9(8)
737800     MOVE +1   TO TEMPLATE-COUNT
737900     MOVE ZERO TO TMPLT-25-LEN
738000     MOVE LOW-VALUE TO TMPLT-25-TXT
738100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
738200     IF PACKAGE-CALL
738300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
738400       CONTINUE
738500     ELSE
738600       MOVE "ASUDN2TB" TO LS-ASMODULE
738700       CALL LS-ASMODULE
738800            USING ASCA-COMMAREA
738900                  AS-REQUEST-OPTIONS
739000                  SOURCE-STRING
739100                  TEMPLATE-COUNT
739200                  TEMPLATE-25
739300                  AS5FDBK-COND-AREA
739400     END-IF
739500
739600     MOVE ZERO TO LS-ENCLAVE-RC
739700     MOVE "CEE3GRC" TO LS-LEMODULE
739800     CALL LS-LEMODULE
739900          USING LS-ENCLAVE-RC
740000                OMITTED
740100     IF LS-ENCLAVE-RC > ZERO
740200       DISPLAY WS-PGMID
740300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
740400     END-IF
740500
740600     IF AS5FDBK-SEVNBR > ZERO
740700       DISPLAY WS-PGMID
740800            " RETURN CODE: " AS5FDBK-SEVNBR
740900            " MESSAGE NBR: " AS5FDBK-MSGNBR
741000     END-IF
741100
741200     DISPLAY WS-PGMID
741300          " TEST CASE 091.G - NBR-2-WRD (PD 1321321321.87654321)"
741400     DISPLAY WS-PGMID
741500          " MIXED CASE / NO CASE"
741600     DISPLAY WS-PGMID
741700          " SOURCE:" SRC-TXT
741800     DISPLAY WS-PGMID
741900          " OUTPUT LEN (204):" TMPLT-25-LEN
742000     DISPLAY WS-PGMID
742100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
742200     DISPLAY WS-PGMID
742300          " "
742400          TMPLT-25-TXT-Z
742500     DISPLAY " "
742600     SKIP2
742700*    * ------------------------------------------------------- *
742800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
742900*    *   FORMAT: WORD, CURRENCY, CHECK
743000*    * ------------------------------------------------------- *
743100     SKIP1
743200     MOVE ZERO TO RO-START
743300                  RO-COUNT
743400                  RO-PSA-LEN
743500     SET RO-FLAG-NONE  TO TRUE
743600*    SET NUMBER TO CURRENCY CONVERSION
743700     MOVE X'10' TO RO-OPTION-FLAG
743800     MOVE +8   TO RO-COUNT
743900     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
744000*    132132132187654321   9(10)V9(8)
744100     MOVE +1   TO TEMPLATE-COUNT
744200     MOVE ZERO TO TMPLT-25-LEN
744300     MOVE LOW-VALUE TO TMPLT-25-TXT
744400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
744500     IF PACKAGE-CALL
744600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
744700       CONTINUE
744800     ELSE
744900       MOVE "ASUDN2TB" TO LS-ASMODULE
745000       CALL LS-ASMODULE
745100            USING ASCA-COMMAREA
745200                  AS-REQUEST-OPTIONS
745300                  SOURCE-STRING
745400                  TEMPLATE-COUNT
745500                  TEMPLATE-25
745600                  AS5FDBK-COND-AREA
745700     END-IF
745800
745900     MOVE ZERO TO LS-ENCLAVE-RC
746000     MOVE "CEE3GRC" TO LS-LEMODULE
746100     CALL LS-LEMODULE
746200          USING LS-ENCLAVE-RC
746300                OMITTED
746400     IF LS-ENCLAVE-RC > ZERO
746500       DISPLAY WS-PGMID
746600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
746700     END-IF
746800
746900     IF AS5FDBK-SEVNBR > ZERO
747000       DISPLAY WS-PGMID
747100            " RETURN CODE: " AS5FDBK-SEVNBR
747200            " MESSAGE NBR: " AS5FDBK-MSGNBR
747300     END-IF
747400
747500     DISPLAY WS-PGMID
747600          " TEST CASE 091.H - NBR-2-CUR (PD 1321321321.87654321)"
747700     DISPLAY WS-PGMID
747800          " MIXED CASE / NO CASE"
747900     DISPLAY WS-PGMID
748000          " SOURCE:" SRC-TXT
748100     DISPLAY WS-PGMID
748200          " OUTPUT LEN (0):" TMPLT-25-LEN
748300     DISPLAY WS-PGMID
748400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
748500     DISPLAY WS-PGMID
748600          " "
748700          TMPLT-25-TXT-Z
748800     DISPLAY " "
748900     SKIP2
749000*    * ------------------------------------------------------- *
749100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
749200*    *   FORMAT: WORD, CURRENCY, CHECK
749300*    * ------------------------------------------------------- *
749400     SKIP1
749500     MOVE ZERO TO RO-START
749600                  RO-COUNT
749700                  RO-PSA-LEN
749800     SET RO-FLAG-NONE  TO TRUE
749900     MOVE +8   TO RO-COUNT
750000     MOVE WS-SOURCE-STRING-28 TO SOURCE-STRING
750100*    132132132187654321    9(10)V9(8)
750200     MOVE +1   TO TEMPLATE-COUNT
750300     MOVE ZERO TO TMPLT-25-LEN
750400     MOVE LOW-VALUE TO TMPLT-25-TXT
750500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
750600     IF PACKAGE-CALL
750700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
750800       CONTINUE
750900     ELSE
751000       MOVE "ASUDN2TB" TO LS-ASMODULE
751100       CALL LS-ASMODULE
751200            USING ASCA-COMMAREA
751300                  AS-REQUEST-OPTIONS
751400                  SOURCE-STRING
751500                  TEMPLATE-COUNT
751600                  TEMPLATE-25
751700                  AS5FDBK-COND-AREA
751800     END-IF
751900
752000     MOVE ZERO TO LS-ENCLAVE-RC
752100     MOVE "CEE3GRC" TO LS-LEMODULE
752200     CALL LS-LEMODULE
752300          USING LS-ENCLAVE-RC
752400                OMITTED
752500     IF LS-ENCLAVE-RC > ZERO
752600       DISPLAY WS-PGMID
752700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
752800     END-IF
752900
753000     IF AS5FDBK-SEVNBR > ZERO
753100       DISPLAY WS-PGMID
753200            " RETURN CODE: " AS5FDBK-SEVNBR
753300            " MESSAGE NBR: " AS5FDBK-MSGNBR
753400     END-IF
753500
753600     DISPLAY WS-PGMID
753700          " TEST CASE 091.I - NBR-2-CHK (PD 1321321321.87654321)"
753800     DISPLAY WS-PGMID
753900          " MIXED CASE / NO CASE"
754000     DISPLAY WS-PGMID
754100          " SOURCE:" SRC-TXT
754200     DISPLAY WS-PGMID
754300          " OUTPUT LEN (122):" TMPLT-25-LEN
754400     DISPLAY WS-PGMID
754500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
754600     DISPLAY WS-PGMID
754700          " "
754800          TMPLT-25-TXT-Z
754900     DISPLAY " "
755000     SKIP2
755100*    * ------------------------------------------------------- *
755200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
755300*    *   FORMAT: WORD, CURRENCY, CHECK
755400*    * ------------------------------------------------------- *
755500     SKIP1
755600     MOVE ZERO TO RO-START
755700                  RO-COUNT
755800                  RO-PSA-LEN
755900     SET RO-FLAG-NONE  TO TRUE
756000*    SET NUMBER TO WORD CONVERSION
756100     MOVE X'20' TO RO-OPTION-FLAG
756200     MOVE +8   TO RO-COUNT
756300     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
756400*    132132132100004321    9(10)V9(8)
756500     MOVE +1   TO TEMPLATE-COUNT
756600     MOVE ZERO TO TMPLT-25-LEN
756700     MOVE LOW-VALUE TO TMPLT-25-TXT
756800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
756900     IF PACKAGE-CALL
757000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
757100       CONTINUE
757200     ELSE
757300       MOVE "ASUDN2TB" TO LS-ASMODULE
757400       CALL LS-ASMODULE
757500            USING ASCA-COMMAREA
757600                  AS-REQUEST-OPTIONS
757700                  SOURCE-STRING
757800                  TEMPLATE-COUNT
757900                  TEMPLATE-25
758000                  AS5FDBK-COND-AREA
758100     END-IF
758200
758300     MOVE ZERO TO LS-ENCLAVE-RC
758400     MOVE "CEE3GRC" TO LS-LEMODULE
758500     CALL LS-LEMODULE
758600          USING LS-ENCLAVE-RC
758700                OMITTED
758800     IF LS-ENCLAVE-RC > ZERO
758900       DISPLAY WS-PGMID
759000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
759100     END-IF
759200
759300     IF AS5FDBK-SEVNBR > ZERO
759400       DISPLAY WS-PGMID
759500            " RETURN CODE: " AS5FDBK-SEVNBR
759600            " MESSAGE NBR: " AS5FDBK-MSGNBR
759700     END-IF
759800
759900     DISPLAY WS-PGMID
760000          " TEST CASE 091.J - NBR-2-WRD (ZD 1321321321.00004321)"
760100     DISPLAY WS-PGMID
760200          " MIXED CASE / NO CASE"
760300     DISPLAY WS-PGMID
760400          " SOURCE:" SRC-TXT
760500     DISPLAY WS-PGMID
760600          " OUTPUT LEN (165):" TMPLT-25-LEN
760700     DISPLAY WS-PGMID
760800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
760900     DISPLAY WS-PGMID
761000          " "
761100          TMPLT-25-TXT-Z
761200     DISPLAY " "
761300     SKIP2
761400*    * ------------------------------------------------------- *
761500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
761600*    *   FORMAT: WORD, CURRENCY, CHECK
761700*    * ------------------------------------------------------- *
761800     SKIP1
761900     MOVE ZERO TO RO-START
762000                  RO-COUNT
762100                  RO-PSA-LEN
762200     SET RO-FLAG-NONE  TO TRUE
762300*    SET NUMBER TO CURRENCY CONVERSION
762400     MOVE X'10' TO RO-OPTION-FLAG
762500     MOVE +8   TO RO-COUNT
762600     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
762700*    132132132100004321   9(10)V9(8)
762800     MOVE +1   TO TEMPLATE-COUNT
762900     MOVE ZERO TO TMPLT-25-LEN
763000     MOVE LOW-VALUE TO TMPLT-25-TXT
763100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
763200     IF PACKAGE-CALL
763300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
763400       CONTINUE
763500     ELSE
763600       MOVE "ASUDN2TB" TO LS-ASMODULE
763700       CALL LS-ASMODULE
763800            USING ASCA-COMMAREA
763900                  AS-REQUEST-OPTIONS
764000                  SOURCE-STRING
764100                  TEMPLATE-COUNT
764200                  TEMPLATE-25
764300                  AS5FDBK-COND-AREA
764400     END-IF
764500
764600     MOVE ZERO TO LS-ENCLAVE-RC
764700     MOVE "CEE3GRC" TO LS-LEMODULE
764800     CALL LS-LEMODULE
764900          USING LS-ENCLAVE-RC
765000                OMITTED
765100     IF LS-ENCLAVE-RC > ZERO
765200       DISPLAY WS-PGMID
765300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
765400     END-IF
765500
765600     IF AS5FDBK-SEVNBR > ZERO
765700       DISPLAY WS-PGMID
765800            " RETURN CODE: " AS5FDBK-SEVNBR
765900            " MESSAGE NBR: " AS5FDBK-MSGNBR
766000     END-IF
766100
766200     DISPLAY WS-PGMID
766300          " TEST CASE 091.K - NBR-2-CUR (PD 1321321321.00004321)"
766400     DISPLAY WS-PGMID
766500          " MIXED CASE / NO CASE"
766600     DISPLAY WS-PGMID
766700          " SOURCE:" SRC-TXT
766800     DISPLAY WS-PGMID
766900          " OUTPUT LEN (0):" TMPLT-25-LEN
767000     DISPLAY WS-PGMID
767100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
767200     DISPLAY WS-PGMID
767300          " "
767400          TMPLT-25-TXT-Z
767500     DISPLAY " "
767600     SKIP2
767700*    * ------------------------------------------------------- *
767800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
767900*    *   FORMAT: WORD, CURRENCY, CHECK
768000*    * ------------------------------------------------------- *
768100     SKIP1
768200     MOVE ZERO TO RO-START
768300                  RO-COUNT
768400                  RO-PSA-LEN
768500     SET RO-FLAG-NONE  TO TRUE
768600     MOVE +8   TO RO-COUNT
768700     MOVE WS-SOURCE-STRING-29 TO SOURCE-STRING
768800*    132132132100004321    9(10)V9(8)
768900     MOVE +1   TO TEMPLATE-COUNT
769000     MOVE ZERO TO TMPLT-25-LEN
769100     MOVE LOW-VALUE TO TMPLT-25-TXT
769200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
769300     IF PACKAGE-CALL
769400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
769500       CONTINUE
769600     ELSE
769700       MOVE "ASUDN2TB" TO LS-ASMODULE
769800       CALL LS-ASMODULE
769900            USING ASCA-COMMAREA
770000                  AS-REQUEST-OPTIONS
770100                  SOURCE-STRING
770200                  TEMPLATE-COUNT
770300                  TEMPLATE-25
770400                  AS5FDBK-COND-AREA
770500     END-IF
770600
770700     MOVE ZERO TO LS-ENCLAVE-RC
770800     MOVE "CEE3GRC" TO LS-LEMODULE
770900     CALL LS-LEMODULE
771000          USING LS-ENCLAVE-RC
771100                OMITTED
771200     IF LS-ENCLAVE-RC > ZERO
771300       DISPLAY WS-PGMID
771400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
771500     END-IF
771600
771700     IF AS5FDBK-SEVNBR > ZERO
771800       DISPLAY WS-PGMID
771900            " RETURN CODE: " AS5FDBK-SEVNBR
772000            " MESSAGE NBR: " AS5FDBK-MSGNBR
772100     END-IF
772200
772300     DISPLAY WS-PGMID
772400          " TEST CASE 091.L - NBR-2-CHK (ZD 1321321321.00004321)"
772500     DISPLAY WS-PGMID
772600          " MIXED CASE / NO CASE"
772700     DISPLAY WS-PGMID
772800          " SOURCE:" SRC-TXT
772900     DISPLAY WS-PGMID
773000          " OUTPUT LEN (122):" TMPLT-25-LEN
773100     DISPLAY WS-PGMID
773200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
773300     DISPLAY WS-PGMID
773400          " "
773500          TMPLT-25-TXT-Z
773600     DISPLAY " "
773700     SKIP2
773800*    * ------------------------------------------------------- *
773900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
774000*    *   FORMAT: WORD, CURRENCY, CHECK
774100*    * ------------------------------------------------------- *
774200     SKIP1
774300     MOVE ZERO TO RO-START
774400                  RO-COUNT
774500                  RO-PSA-LEN
774600     SET RO-FLAG-NONE  TO TRUE
774700*    SET NUMBER TO WORD CONVERSION
774800     MOVE X'20' TO RO-OPTION-FLAG
774900     MOVE +6   TO RO-COUNT
775000     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
775100*    1000021001000543      9(12)V9(6)
775200     MOVE +1   TO TEMPLATE-COUNT
775300     MOVE ZERO TO TMPLT-25-LEN
775400     MOVE LOW-VALUE TO TMPLT-25-TXT
775500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
775600     IF PACKAGE-CALL
775700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
775800       CONTINUE
775900     ELSE
776000       MOVE "ASUDN2TB" TO LS-ASMODULE
776100       CALL LS-ASMODULE
776200            USING ASCA-COMMAREA
776300                  AS-REQUEST-OPTIONS
776400                  SOURCE-STRING
776500                  TEMPLATE-COUNT
776600                  TEMPLATE-25
776700                  AS5FDBK-COND-AREA
776800     END-IF
776900
777000     MOVE ZERO TO LS-ENCLAVE-RC
777100     MOVE "CEE3GRC" TO LS-LEMODULE
777200     CALL LS-LEMODULE
777300          USING LS-ENCLAVE-RC
777400                OMITTED
777500     IF LS-ENCLAVE-RC > ZERO
777600       DISPLAY WS-PGMID
777700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
777800     END-IF
777900
778000     IF AS5FDBK-SEVNBR > ZERO
778100       DISPLAY WS-PGMID
778200            " RETURN CODE: " AS5FDBK-SEVNBR
778300            " MESSAGE NBR: " AS5FDBK-MSGNBR
778400     END-IF
778500
778600     DISPLAY WS-PGMID
778700          " TEST CASE 091.M - NBR-2-WRD (PD 1000021001.000543)"
778800     DISPLAY WS-PGMID
778900          " MIXED CASE / NO CASE"
779000     DISPLAY WS-PGMID
779100          " SOURCE:" SRC-TXT
779200     DISPLAY WS-PGMID
779300          " OUTPUT LEN (75):" TMPLT-25-LEN
779400     DISPLAY WS-PGMID
779500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
779600     DISPLAY WS-PGMID
779700          " "
779800          TMPLT-25-TXT-Z
779900     DISPLAY " "
780000     SKIP2
780100*    * ------------------------------------------------------- *
780200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
780300*    *   FORMAT: WORD, CURRENCY, CHECK
780400*    * ------------------------------------------------------- *
780500     SKIP1
780600     MOVE ZERO TO RO-START
780700                  RO-COUNT
780800                  RO-PSA-LEN
780900     SET RO-FLAG-NONE  TO TRUE
781000*    SET NUMBER TO CURRENCY CONVERSION
781100     MOVE X'10' TO RO-OPTION-FLAG
781200     MOVE +6   TO RO-COUNT
781300     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
781400*    1000021001000543   9(12)V9(6)
781500     MOVE +1   TO TEMPLATE-COUNT
781600     MOVE ZERO TO TMPLT-25-LEN
781700     MOVE LOW-VALUE TO TMPLT-25-TXT
781800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
781900     IF PACKAGE-CALL
782000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
782100       CONTINUE
782200     ELSE
782300       MOVE "ASUDN2TB" TO LS-ASMODULE
782400       CALL LS-ASMODULE
782500            USING ASCA-COMMAREA
782600                  AS-REQUEST-OPTIONS
782700                  SOURCE-STRING
782800                  TEMPLATE-COUNT
782900                  TEMPLATE-25
783000                  AS5FDBK-COND-AREA
783100     END-IF
783200
783300     MOVE ZERO TO LS-ENCLAVE-RC
783400     MOVE "CEE3GRC" TO LS-LEMODULE
783500     CALL LS-LEMODULE
783600          USING LS-ENCLAVE-RC
783700                OMITTED
783800     IF LS-ENCLAVE-RC > ZERO
783900       DISPLAY WS-PGMID
784000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
784100     END-IF
784200
784300     IF AS5FDBK-SEVNBR > ZERO
784400       DISPLAY WS-PGMID
784500            " RETURN CODE: " AS5FDBK-SEVNBR
784600            " MESSAGE NBR: " AS5FDBK-MSGNBR
784700     END-IF
784800
784900     DISPLAY WS-PGMID
785000          " TEST CASE 091.N - NBR-2-CUR (PD 1000021001.000543)"
785100     DISPLAY WS-PGMID
785200          " MIXED CASE / NO CASE"
785300     DISPLAY WS-PGMID
785400          " SOURCE:" SRC-TXT
785500     DISPLAY WS-PGMID
785600          " OUTPUT LEN (0):" TMPLT-25-LEN
785700     DISPLAY WS-PGMID
785800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
785900     DISPLAY WS-PGMID
786000          " "
786100          TMPLT-25-TXT-Z
786200     DISPLAY " "
786300     SKIP2
786400*    * ------------------------------------------------------- *
786500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
786600*    *   FORMAT: WORD, CURRENCY, CHECK
786700*    * ------------------------------------------------------- *
786800     SKIP1
786900     MOVE ZERO TO RO-START
787000                  RO-COUNT
787100                  RO-PSA-LEN
787200     SET RO-FLAG-NONE  TO TRUE
787300     MOVE +6   TO RO-COUNT
787400     MOVE WS-SOURCE-STRING-30 TO SOURCE-STRING
787500*    1000021001000543    9(12)V9(6)
787600     MOVE +1   TO TEMPLATE-COUNT
787700     MOVE ZERO TO TMPLT-25-LEN
787800     MOVE LOW-VALUE TO TMPLT-25-TXT
787900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
788000     IF PACKAGE-CALL
788100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
788200       CONTINUE
788300     ELSE
788400       MOVE "ASUDN2TB" TO LS-ASMODULE
788500       CALL LS-ASMODULE
788600            USING ASCA-COMMAREA
788700                  AS-REQUEST-OPTIONS
788800                  SOURCE-STRING
788900                  TEMPLATE-COUNT
789000                  TEMPLATE-25
789100                  AS5FDBK-COND-AREA
789200     END-IF
789300
789400     MOVE ZERO TO LS-ENCLAVE-RC
789500     MOVE "CEE3GRC" TO LS-LEMODULE
789600     CALL LS-LEMODULE
789700          USING LS-ENCLAVE-RC
789800                OMITTED
789900     IF LS-ENCLAVE-RC > ZERO
790000       DISPLAY WS-PGMID
790100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
790200     END-IF
790300
790400     IF AS5FDBK-SEVNBR > ZERO
790500       DISPLAY WS-PGMID
790600            " RETURN CODE: " AS5FDBK-SEVNBR
790700            " MESSAGE NBR: " AS5FDBK-MSGNBR
790800     END-IF
790900
791000     DISPLAY WS-PGMID
791100          " TEST CASE 091.O - NBR-2-CHK (PD 1000021001.000543)"
791200     DISPLAY WS-PGMID
791300          " MIXED CASE / NO CASE"
791400     DISPLAY WS-PGMID
791500          " SOURCE:" SRC-TXT
791600     DISPLAY WS-PGMID
791700          " OUTPUT LEN (54):" TMPLT-25-LEN
791800     DISPLAY WS-PGMID
791900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
792000     DISPLAY WS-PGMID
792100          " "
792200          TMPLT-25-TXT-Z
792300     DISPLAY " "
792400     SKIP2
792500*    * ------------------------------------------------------- *
792600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
792700*    *   FORMAT: WORD, CURRENCY, CHECK
792800*    * ------------------------------------------------------- *
792900     SKIP1
793000     MOVE ZERO TO RO-START
793100                  RO-COUNT
793200                  RO-PSA-LEN
793300     SET RO-FLAG-NONE  TO TRUE
793400*    SET NUMBER TO WORD CONVERSION
793500     MOVE X'20' TO RO-OPTION-FLAG
793600     MOVE +0   TO RO-COUNT
793700     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
793800*    -10200             9(5)
793900     MOVE +1   TO TEMPLATE-COUNT
794000     MOVE ZERO TO TMPLT-25-LEN
794100     MOVE LOW-VALUE TO TMPLT-25-TXT
794200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
794300     IF PACKAGE-CALL
794400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
794500       CONTINUE
794600     ELSE
794700       MOVE "ASUDN2TB" TO LS-ASMODULE
794800       CALL LS-ASMODULE
794900            USING ASCA-COMMAREA
795000                  AS-REQUEST-OPTIONS
795100                  SOURCE-STRING
795200                  TEMPLATE-COUNT
795300                  TEMPLATE-25
795400                  AS5FDBK-COND-AREA
795500     END-IF
795600
795700     MOVE ZERO TO LS-ENCLAVE-RC
795800     MOVE "CEE3GRC" TO LS-LEMODULE
795900     CALL LS-LEMODULE
796000          USING LS-ENCLAVE-RC
796100                OMITTED
796200     IF LS-ENCLAVE-RC > ZERO
796300       DISPLAY WS-PGMID
796400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
796500     END-IF
796600
796700     IF AS5FDBK-SEVNBR > ZERO
796800       DISPLAY WS-PGMID
796900            " RETURN CODE: " AS5FDBK-SEVNBR
797000            " MESSAGE NBR: " AS5FDBK-MSGNBR
797100     END-IF
797200
797300     DISPLAY WS-PGMID
797400          " TEST CASE 091.P - NBR-2-WRD (PD -10200)"
797500     DISPLAY WS-PGMID
797600          " MIXED CASE / NO CASE"
797700     DISPLAY WS-PGMID
797800          " SOURCE:" SRC-TXT
797900     DISPLAY WS-PGMID
798000          " OUTPUT LEN (33):" TMPLT-25-LEN
798100     DISPLAY WS-PGMID
798200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
798300     DISPLAY WS-PGMID
798400          " "
798500          TMPLT-25-TXT-Z
798600     DISPLAY " "
798700     SKIP2
798800*    * ------------------------------------------------------- *
798900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
799000*    *   FORMAT: WORD, CURRENCY, CHECK
799100*    * ------------------------------------------------------- *
799200     SKIP1
799300     MOVE ZERO TO RO-START
799400                  RO-COUNT
799500                  RO-PSA-LEN
799600     SET RO-FLAG-NONE  TO TRUE
799700*    SET NUMBER TO CURRENCY CONVERSION
799800     MOVE X'10' TO RO-OPTION-FLAG
799900     MOVE +0   TO RO-COUNT
800000     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
800100*    -10200             9(5)
800200     MOVE +1   TO TEMPLATE-COUNT
800300     MOVE ZERO TO TMPLT-25-LEN
800400     MOVE LOW-VALUE TO TMPLT-25-TXT
800500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
800600     IF PACKAGE-CALL
800700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
800800       CONTINUE
800900     ELSE
801000       MOVE "ASUDN2TB" TO LS-ASMODULE
801100       CALL LS-ASMODULE
801200            USING ASCA-COMMAREA
801300                  AS-REQUEST-OPTIONS
801400                  SOURCE-STRING
801500                  TEMPLATE-COUNT
801600                  TEMPLATE-25
801700                  AS5FDBK-COND-AREA
801800     END-IF
801900
802000     MOVE ZERO TO LS-ENCLAVE-RC
802100     MOVE "CEE3GRC" TO LS-LEMODULE
802200     CALL LS-LEMODULE
802300          USING LS-ENCLAVE-RC
802400                OMITTED
802500     IF LS-ENCLAVE-RC > ZERO
802600       DISPLAY WS-PGMID
802700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
802800     END-IF
802900
803000     IF AS5FDBK-SEVNBR > ZERO
803100       DISPLAY WS-PGMID
803200            " RETURN CODE: " AS5FDBK-SEVNBR
803300            " MESSAGE NBR: " AS5FDBK-MSGNBR
803400     END-IF
803500
803600     DISPLAY WS-PGMID
803700          " TEST CASE 091.Q - NBR-2-CUR (PD -10200)"
803800     DISPLAY WS-PGMID
803900          " MIXED CASE / NO CASE"
804000     DISPLAY WS-PGMID
804100          " SOURCE:" SRC-TXT
804200     DISPLAY WS-PGMID
804300          " OUTPUT LEN (41):" TMPLT-25-LEN
804400     DISPLAY WS-PGMID
804500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
804600     DISPLAY WS-PGMID
804700          " "
804800          TMPLT-25-TXT-Z
804900     DISPLAY " "
805000     SKIP2
805100*    * ------------------------------------------------------- *
805200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
805300*    *   FORMAT: WORD, CURRENCY, CHECK
805400*    * ------------------------------------------------------- *
805500     SKIP1
805600     MOVE ZERO TO RO-START
805700                  RO-COUNT
805800                  RO-PSA-LEN
805900     SET RO-FLAG-NONE  TO TRUE
806000     MOVE +0   TO RO-COUNT
806100     MOVE WS-SOURCE-STRING-31 TO SOURCE-STRING
806200*    -10200             9(5)
806300     MOVE +1   TO TEMPLATE-COUNT
806400     MOVE ZERO TO TMPLT-25-LEN
806500     MOVE LOW-VALUE TO TMPLT-25-TXT
806600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
806700     IF PACKAGE-CALL
806800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
806900       CONTINUE
807000     ELSE
807100       MOVE "ASUDN2TB" TO LS-ASMODULE
807200       CALL LS-ASMODULE
807300            USING ASCA-COMMAREA
807400                  AS-REQUEST-OPTIONS
807500                  SOURCE-STRING
807600                  TEMPLATE-COUNT
807700                  TEMPLATE-25
807800                  AS5FDBK-COND-AREA
807900     END-IF
808000
808100     MOVE ZERO TO LS-ENCLAVE-RC
808200     MOVE "CEE3GRC" TO LS-LEMODULE
808300     CALL LS-LEMODULE
808400          USING LS-ENCLAVE-RC
808500                OMITTED
808600     IF LS-ENCLAVE-RC > ZERO
808700       DISPLAY WS-PGMID
808800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
808900     END-IF
809000
809100     IF AS5FDBK-SEVNBR > ZERO
809200       DISPLAY WS-PGMID
809300            " RETURN CODE: " AS5FDBK-SEVNBR
809400            " MESSAGE NBR: " AS5FDBK-MSGNBR
809500     END-IF
809600
809700     DISPLAY WS-PGMID
809800          " TEST CASE 091.R - NBR-2-CHK (PD -10200)"
809900     DISPLAY WS-PGMID
810000          " MIXED CASE / NO CASE"
810100     DISPLAY WS-PGMID
810200          " SOURCE:" SRC-TXT
810300     DISPLAY WS-PGMID
810400          " OUTPUT LEN (0):" TMPLT-25-LEN
810500     DISPLAY WS-PGMID
810600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
810700     DISPLAY WS-PGMID
810800          " "
810900          TMPLT-25-TXT-Z
811000     DISPLAY " "
811100     SKIP2
811200*    * ------------------------------------------------------- *
811300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
811400*    *   FORMAT: WORD, CURRENCY, CHECK
811500*    * ------------------------------------------------------- *
811600     SKIP1
811700     MOVE ZERO TO RO-START
811800                  RO-COUNT
811900                  RO-PSA-LEN
812000     SET RO-FLAG-NONE  TO TRUE
812100*    SET NUMBER TO WORD CONVERSION
812200     MOVE X'20' TO RO-OPTION-FLAG
812300     MOVE +9   TO RO-COUNT
812400     MOVE WS-SOURCE-STRING-32 TO SOURCE-STRING
812500*    100000001.100000001  9(9)V9(9)
812600     MOVE +1   TO TEMPLATE-COUNT
812700     MOVE ZERO TO TMPLT-25-LEN
812800     MOVE LOW-VALUE TO TMPLT-25-TXT
812900     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
813000     IF PACKAGE-CALL
813100*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
813200       CONTINUE
813300     ELSE
813400       MOVE "ASUDN2TB" TO LS-ASMODULE
813500       CALL LS-ASMODULE
813600            USING ASCA-COMMAREA
813700                  AS-REQUEST-OPTIONS
813800                  SOURCE-STRING
813900                  TEMPLATE-COUNT
814000                  TEMPLATE-25
814100                  AS5FDBK-COND-AREA
814200     END-IF
814300
814400     MOVE ZERO TO LS-ENCLAVE-RC
814500     MOVE "CEE3GRC" TO LS-LEMODULE
814600     CALL LS-LEMODULE
814700          USING LS-ENCLAVE-RC
814800                OMITTED
814900     IF LS-ENCLAVE-RC > ZERO
815000       DISPLAY WS-PGMID
815100            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
815200     END-IF
815300
815400     IF AS5FDBK-SEVNBR > ZERO
815500       DISPLAY WS-PGMID
815600            " RETURN CODE: " AS5FDBK-SEVNBR
815700            " MESSAGE NBR: " AS5FDBK-MSGNBR
815800     END-IF
815900
816000     DISPLAY WS-PGMID
816100          " TEST CASE 091.S - NBR-2-WRD (PD 100000001.100000001)"
816200     DISPLAY WS-PGMID
816300          " MIXED CASE / NO CASE"
816400     DISPLAY WS-PGMID
816500          " SOURCE:" SRC-TXT
816600     DISPLAY WS-PGMID
816700          " OUTPUT LEN (62):" TMPLT-25-LEN
816800     DISPLAY WS-PGMID
816900          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
817000     DISPLAY WS-PGMID
817100          " "
817200          TMPLT-25-TXT-Z
817300     DISPLAY " "
817400     SKIP2
817500*    * ------------------------------------------------------- *
817600*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
817700*    *   FORMAT: WORD, CURRENCY, CHECK
817800*    * ------------------------------------------------------- *
817900     SKIP1
818000     MOVE ZERO TO RO-START
818100                  RO-COUNT
818200                  RO-PSA-LEN
818300     SET RO-FLAG-NONE  TO TRUE
818400*    SET NUMBER TO WORD CONVERSION
818500     MOVE X'20' TO RO-OPTION-FLAG
818600     MOVE +2   TO RO-COUNT
818700     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
818800*    0.75          9(3)V9(2)
818900     MOVE +1   TO TEMPLATE-COUNT
819000     MOVE ZERO TO TMPLT-25-LEN
819100     MOVE LOW-VALUE TO TMPLT-25-TXT
819200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
819300     IF PACKAGE-CALL
819400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
819500       CONTINUE
819600     ELSE
819700       MOVE "ASUDN2TB" TO LS-ASMODULE
819800       CALL LS-ASMODULE
819900            USING ASCA-COMMAREA
820000                  AS-REQUEST-OPTIONS
820100                  SOURCE-STRING
820200                  TEMPLATE-COUNT
820300                  TEMPLATE-25
820400                  AS5FDBK-COND-AREA
820500     END-IF
820600
820700     MOVE ZERO TO LS-ENCLAVE-RC
820800     MOVE "CEE3GRC" TO LS-LEMODULE
820900     CALL LS-LEMODULE
821000          USING LS-ENCLAVE-RC
821100                OMITTED
821200     IF LS-ENCLAVE-RC > ZERO
821300       DISPLAY WS-PGMID
821400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
821500     END-IF
821600
821700     IF AS5FDBK-SEVNBR > ZERO
821800       DISPLAY WS-PGMID
821900            " RETURN CODE: " AS5FDBK-SEVNBR
822000            " MESSAGE NBR: " AS5FDBK-MSGNBR
822100     END-IF
822200
822300     DISPLAY WS-PGMID
822400          " TEST CASE 091.T - NBR-2-WRD (PD 0.75)"
822500     DISPLAY WS-PGMID
822600          " MIXED CASE / NO CASE"
822700     DISPLAY WS-PGMID
822800          " SOURCE:" SRC-TXT
822900     DISPLAY WS-PGMID
823000          " OUTPUT LEN (32):" TMPLT-25-LEN
823100     DISPLAY WS-PGMID
823200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
823300     DISPLAY WS-PGMID
823400          " "
823500          TMPLT-25-TXT-Z
823600     DISPLAY " "
823700     SKIP2
823800*    * ------------------------------------------------------- *
823900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
824000*    *   FORMAT: WORD, CURRENCY, CHECK
824100*    * ------------------------------------------------------- *
824200     SKIP1
824300     MOVE ZERO TO RO-START
824400                  RO-COUNT
824500                  RO-PSA-LEN
824600     SET RO-FLAG-NONE  TO TRUE
824700*    SET NUMBER TO CURRENCY CONVERSION
824800     MOVE X'10' TO RO-OPTION-FLAG
824900     MOVE +2   TO RO-COUNT
825000     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
825100*    0.75          9(3)V9(2)
825200     MOVE +1   TO TEMPLATE-COUNT
825300     MOVE ZERO TO TMPLT-25-LEN
825400     MOVE LOW-VALUE TO TMPLT-25-TXT
825500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
825600     IF PACKAGE-CALL
825700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
825800       CONTINUE
825900     ELSE
826000       MOVE "ASUDN2TB" TO LS-ASMODULE
826100       CALL LS-ASMODULE
826200            USING ASCA-COMMAREA
826300                  AS-REQUEST-OPTIONS
826400                  SOURCE-STRING
826500                  TEMPLATE-COUNT
826600                  TEMPLATE-25
826700                  AS5FDBK-COND-AREA
826800     END-IF
826900
827000     MOVE ZERO TO LS-ENCLAVE-RC
827100     MOVE "CEE3GRC" TO LS-LEMODULE
827200     CALL LS-LEMODULE
827300          USING LS-ENCLAVE-RC
827400                OMITTED
827500     IF LS-ENCLAVE-RC > ZERO
827600       DISPLAY WS-PGMID
827700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
827800     END-IF
827900
828000     IF AS5FDBK-SEVNBR > ZERO
828100       DISPLAY WS-PGMID
828200            " RETURN CODE: " AS5FDBK-SEVNBR
828300            " MESSAGE NBR: " AS5FDBK-MSGNBR
828400     END-IF
828500
828600     DISPLAY WS-PGMID
828700          " TEST CASE 091.U - NBR-2-CUR (PD 0.75)"
828800     DISPLAY WS-PGMID
828900          " MIXED CASE / NO CASE"
829000     DISPLAY WS-PGMID
829100          " SOURCE:" SRC-TXT
829200     DISPLAY WS-PGMID
829300          " OUTPUT LEN (35):" TMPLT-25-LEN
829400     DISPLAY WS-PGMID
829500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
829600     DISPLAY WS-PGMID
829700          " "
829800          TMPLT-25-TXT-Z
829900     DISPLAY " "
830000     SKIP2
830100*    * ------------------------------------------------------- *
830200*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
830300*    *   FORMAT: WORD, CURRENCY, CHECK
830400*    * ------------------------------------------------------- *
830500     SKIP1
830600     MOVE ZERO TO RO-START
830700                  RO-COUNT
830800                  RO-PSA-LEN
830900     SET RO-FLAG-NONE  TO TRUE
831000     MOVE +2   TO RO-COUNT
831100     MOVE WS-SOURCE-STRING-35 TO SOURCE-STRING
831200*    0.75          9(3)V9(2)
831300     MOVE +1   TO TEMPLATE-COUNT
831400     MOVE ZERO TO TMPLT-25-LEN
831500     MOVE LOW-VALUE TO TMPLT-25-TXT
831600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
831700     IF PACKAGE-CALL
831800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
831900       CONTINUE
832000     ELSE
832100       MOVE "ASUDN2TB" TO LS-ASMODULE
832200       CALL LS-ASMODULE
832300            USING ASCA-COMMAREA
832400                  AS-REQUEST-OPTIONS
832500                  SOURCE-STRING
832600                  TEMPLATE-COUNT
832700                  TEMPLATE-25
832800                  AS5FDBK-COND-AREA
832900     END-IF
833000
833100     MOVE ZERO TO LS-ENCLAVE-RC
833200     MOVE "CEE3GRC" TO LS-LEMODULE
833300     CALL LS-LEMODULE
833400          USING LS-ENCLAVE-RC
833500                OMITTED
833600     IF LS-ENCLAVE-RC > ZERO
833700       DISPLAY WS-PGMID
833800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
833900     END-IF
834000
834100     IF AS5FDBK-SEVNBR > ZERO
834200       DISPLAY WS-PGMID
834300            " RETURN CODE: " AS5FDBK-SEVNBR
834400            " MESSAGE NBR: " AS5FDBK-MSGNBR
834500     END-IF
834600
834700     DISPLAY WS-PGMID
834800          " TEST CASE 091.V - NBR-2-CHK (PD 0.75)"
834900     DISPLAY WS-PGMID
835000          " MIXED CASE / NO CASE"
835100     DISPLAY WS-PGMID
835200          " SOURCE:" SRC-TXT
835300     DISPLAY WS-PGMID
835400          " OUTPUT LEN (23):" TMPLT-25-LEN
835500     DISPLAY WS-PGMID
835600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
835700     DISPLAY WS-PGMID
835800          " "
835900          TMPLT-25-TXT-Z
836000     DISPLAY " "
836100     SKIP2
836200     CONTINUE.
836300 TEST-CASE-092.
836400
836500     IF NOT (TEST-CASE = "ALL" OR "092")
836600       GO TO TEST-CASE-093
836700     END-IF
836710
836711     IF PACKAGE-CALL
836712       GO TO TEST-CASE-093
836713     END-IF
836714
836800*    * ------------------------------------------------------- *
836900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
837000*    *   FORMAT: WORD, CURRENCY, CHECK
837100*    * ------------------------------------------------------- *
837200     SKIP1
837300     MOVE ZERO TO RO-START
837400                  RO-COUNT
837500                  RO-PSA-LEN
837600     SET RO-FLAG-NONE  TO TRUE
837700*    SET NUMBER TO WORD CONVERSION
837800     MOVE X'20' TO RO-OPTION-FLAG
837900     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
838000*    "$234.56"
838100     MOVE +1   TO TEMPLATE-COUNT
838200     MOVE ZERO TO TMPLT-25-LEN
838300     MOVE LOW-VALUE TO TMPLT-25-TXT
838400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
838500     IF PACKAGE-CALL
838600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
838700       CONTINUE
838800     ELSE
838900       MOVE "ASUDN2TB" TO LS-ASMODULE
839000       CALL LS-ASMODULE
839100            USING ASCA-COMMAREA
839200                  AS-REQUEST-OPTIONS
839300                  SOURCE-STRING
839400                  TEMPLATE-COUNT
839500                  TEMPLATE-25
839600                  AS5FDBK-COND-AREA
839700     END-IF
839800
839900     MOVE ZERO TO LS-ENCLAVE-RC
840000     MOVE "CEE3GRC" TO LS-LEMODULE
840100     CALL LS-LEMODULE
840200          USING LS-ENCLAVE-RC
840300                OMITTED
840400     IF LS-ENCLAVE-RC > ZERO
840500       DISPLAY WS-PGMID
840600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
840700     END-IF
840800
840900     IF AS5FDBK-SEVNBR > ZERO
841000       DISPLAY WS-PGMID
841100            " RETURN CODE: " AS5FDBK-SEVNBR
841200            " MESSAGE NBR: " AS5FDBK-MSGNBR
841300     END-IF
841400
841500     DISPLAY WS-PGMID
841600          " TEST CASE 092.A - NBR-2-WRD (ED $234.56)"
841700     DISPLAY WS-PGMID
841800          " MIXED CASE / NO CASE"
841900     DISPLAY WS-PGMID
842000          " SOURCE:" SRC-TXT
842100     DISPLAY WS-PGMID
842200          " OUTPUT LEN (48):" TMPLT-25-LEN
842300     DISPLAY WS-PGMID
842400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
842500     DISPLAY WS-PGMID
842600          " "
842700          TMPLT-25-TXT-Z
842800     DISPLAY " "
842900     SKIP2
843000*    * ------------------------------------------------------- *
843100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
843200*    *   FORMAT: WORD, CURRENCY, CHECK
843300*    * ------------------------------------------------------- *
843400     SKIP1
843500     MOVE ZERO TO RO-START
843600                  RO-COUNT
843700                  RO-PSA-LEN
843800     SET RO-FLAG-NONE  TO TRUE
843900*    SET NUMBER TO CURRENCY CONVERSION
844000     MOVE X'10' TO RO-OPTION-FLAG
844100     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
844200*    "$234.56"
844300     MOVE +1   TO TEMPLATE-COUNT
844400     MOVE ZERO TO TMPLT-25-LEN
844500     MOVE LOW-VALUE TO TMPLT-25-TXT
844600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
844700     IF PACKAGE-CALL
844800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
844900       CONTINUE
845000     ELSE
845100       MOVE "ASUDN2TB" TO LS-ASMODULE
845200       CALL LS-ASMODULE
845300            USING ASCA-COMMAREA
845400                  AS-REQUEST-OPTIONS
845500                  SOURCE-STRING
845600                  TEMPLATE-COUNT
845700                  TEMPLATE-25
845800                  AS5FDBK-COND-AREA
845900     END-IF
846000
846100     MOVE ZERO TO LS-ENCLAVE-RC
846200     MOVE "CEE3GRC" TO LS-LEMODULE
846300     CALL LS-LEMODULE
846400          USING LS-ENCLAVE-RC
846500                OMITTED
846600     IF LS-ENCLAVE-RC > ZERO
846700       DISPLAY WS-PGMID
846800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
846900     END-IF
847000
847100     IF AS5FDBK-SEVNBR > ZERO
847200       DISPLAY WS-PGMID
847300            " RETURN CODE: " AS5FDBK-SEVNBR
847400            " MESSAGE NBR: " AS5FDBK-MSGNBR
847500     END-IF
847600
847700     DISPLAY WS-PGMID
847800          " TEST CASE 092.B - NBR-2-CUR (ED $234.56)"
847900     DISPLAY WS-PGMID
848000          " MIXED CASE / NO CASE"
848100     DISPLAY WS-PGMID
848200          " SOURCE:" SRC-TXT
848300     DISPLAY WS-PGMID
848400          " OUTPUT LEN (51):" TMPLT-25-LEN
848500     DISPLAY WS-PGMID
848600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
848700     DISPLAY WS-PGMID
848800          " "
848900          TMPLT-25-TXT-Z
849000     DISPLAY " "
849100     SKIP2
849200*    * ------------------------------------------------------- *
849300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
849400*    *   FORMAT: WORD, CURRENCY, CHECK
849500*    * ------------------------------------------------------- *
849600     SKIP1
849700     MOVE ZERO TO RO-START
849800                  RO-COUNT
849900                  RO-PSA-LEN
850000     SET RO-FLAG-NONE  TO TRUE
850100     MOVE WS-SOURCE-STRING-7 TO SOURCE-STRING
850200*    "$234.56"
850300     MOVE +1   TO TEMPLATE-COUNT
850400     MOVE ZERO TO TMPLT-25-LEN
850500     MOVE LOW-VALUE TO TMPLT-25-TXT
850600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
850700     IF PACKAGE-CALL
850800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
850900       CONTINUE
851000     ELSE
851100       MOVE "ASUDN2TB" TO LS-ASMODULE
851200       CALL LS-ASMODULE
851300            USING ASCA-COMMAREA
851400                  AS-REQUEST-OPTIONS
851500                  SOURCE-STRING
851600                  TEMPLATE-COUNT
851700                  TEMPLATE-25
851800                  AS5FDBK-COND-AREA
851900     END-IF
852000
852100     MOVE ZERO TO LS-ENCLAVE-RC
852200     MOVE "CEE3GRC" TO LS-LEMODULE
852300     CALL LS-LEMODULE
852400          USING LS-ENCLAVE-RC
852500                OMITTED
852600     IF LS-ENCLAVE-RC > ZERO
852700       DISPLAY WS-PGMID
852800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
852900     END-IF
853000
853100     IF AS5FDBK-SEVNBR > ZERO
853200       DISPLAY WS-PGMID
853300            " RETURN CODE: " AS5FDBK-SEVNBR
853400            " MESSAGE NBR: " AS5FDBK-MSGNBR
853500     END-IF
853600
853700     DISPLAY WS-PGMID
853800          " TEST CASE 092.C - NBR-2-CHK (ED $234.56)"
853900     DISPLAY WS-PGMID
854000          " MIXED CASE / NO CASE"
854100     DISPLAY WS-PGMID
854200          " SOURCE:" SRC-TXT
854300     DISPLAY WS-PGMID
854400          " OUTPUT LEN (42):" TMPLT-25-LEN
854500     DISPLAY WS-PGMID
854600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
854700     DISPLAY WS-PGMID
854800          " "
854900          TMPLT-25-TXT-Z
855000     DISPLAY " "
855100     SKIP2
855200*    * ------------------------------------------------------- *
855300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
855400*    *   FORMAT: WORD, CURRENCY, CHECK
855500*    * ------------------------------------------------------- *
855600     SKIP1
855700     MOVE ZERO TO RO-START
855800                  RO-COUNT
855900                  RO-PSA-LEN
856000     SET RO-FLAG-NONE  TO TRUE
856100*    SET NUMBER TO WORD CONVERSION
856200     MOVE X'20' TO RO-OPTION-FLAG
856300     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
856400*    "-1,234.56"
856500     MOVE +1   TO TEMPLATE-COUNT
856600     MOVE ZERO TO TMPLT-25-LEN
856700     MOVE LOW-VALUE TO TMPLT-25-TXT
856800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
856900     IF PACKAGE-CALL
857000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
857100       CONTINUE
857200     ELSE
857300       MOVE "ASUDN2TB" TO LS-ASMODULE
857400       CALL LS-ASMODULE
857500            USING ASCA-COMMAREA
857600                  AS-REQUEST-OPTIONS
857700                  SOURCE-STRING
857800                  TEMPLATE-COUNT
857900                  TEMPLATE-25
858000                  AS5FDBK-COND-AREA
858100     END-IF
858200
858300     MOVE ZERO TO LS-ENCLAVE-RC
858400     MOVE "CEE3GRC" TO LS-LEMODULE
858500     CALL LS-LEMODULE
858600          USING LS-ENCLAVE-RC
858700                OMITTED
858800     IF LS-ENCLAVE-RC > ZERO
858900       DISPLAY WS-PGMID
859000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
859100     END-IF
859200
859300     IF AS5FDBK-SEVNBR > ZERO
859400       DISPLAY WS-PGMID
859500            " RETURN CODE: " AS5FDBK-SEVNBR
859600            " MESSAGE NBR: " AS5FDBK-MSGNBR
859700     END-IF
859800
859900     DISPLAY WS-PGMID
860000          " TEST CASE 092.D - NBR-2-WRD (ED -1,234.56)"
860100     DISPLAY WS-PGMID
860200          " MIXED CASE / NO CASE"
860300     DISPLAY WS-PGMID
860400          " SOURCE:" SRC-TXT
860500     DISPLAY WS-PGMID
860600          " OUTPUT LEN (70):" TMPLT-25-LEN
860700     DISPLAY WS-PGMID
860800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
860900     DISPLAY WS-PGMID
861000          " "
861100          TMPLT-25-TXT-Z
861200     DISPLAY " "
861300     SKIP2
861400*    * ------------------------------------------------------- *
861500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
861600*    *   FORMAT: WORD, CURRENCY, CHECK
861700*    * ------------------------------------------------------- *
861800     SKIP1
861900     MOVE ZERO TO RO-START
862000                  RO-COUNT
862100                  RO-PSA-LEN
862200     SET RO-FLAG-NONE  TO TRUE
862300*    SET NUMBER TO CURRENCY CONVERSION
862400     MOVE X'10' TO RO-OPTION-FLAG
862500     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
862600*    "-1,234.56"
862700     MOVE +1   TO TEMPLATE-COUNT
862800     MOVE ZERO TO TMPLT-25-LEN
862900     MOVE LOW-VALUE TO TMPLT-25-TXT
863000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
863100     IF PACKAGE-CALL
863200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
863300       CONTINUE
863400     ELSE
863500       MOVE "ASUDN2TB" TO LS-ASMODULE
863600       CALL LS-ASMODULE
863700            USING ASCA-COMMAREA
863800                  AS-REQUEST-OPTIONS
863900                  SOURCE-STRING
864000                  TEMPLATE-COUNT
864100                  TEMPLATE-25
864200                  AS5FDBK-COND-AREA
864300     END-IF
864400
864500     MOVE ZERO TO LS-ENCLAVE-RC
864600     MOVE "CEE3GRC" TO LS-LEMODULE
864700     CALL LS-LEMODULE
864800          USING LS-ENCLAVE-RC
864900                OMITTED
865000     IF LS-ENCLAVE-RC > ZERO
865100       DISPLAY WS-PGMID
865200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
865300     END-IF
865400
865500     IF AS5FDBK-SEVNBR > ZERO
865600       DISPLAY WS-PGMID
865700            " RETURN CODE: " AS5FDBK-SEVNBR
865800            " MESSAGE NBR: " AS5FDBK-MSGNBR
865900     END-IF
866000
866100     DISPLAY WS-PGMID
866200          " TEST CASE 092.E - NBR-2-CUR (ED -1,234.56)"
866300     DISPLAY WS-PGMID
866400          " MIXED CASE / NO CASE"
866500     DISPLAY WS-PGMID
866600          " SOURCE:" SRC-TXT
866700     DISPLAY WS-PGMID
866800          " OUTPUT LEN (73):" TMPLT-25-LEN
866900     DISPLAY WS-PGMID
867000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
867100     DISPLAY WS-PGMID
867200          " "
867300          TMPLT-25-TXT-Z
867400     DISPLAY " "
867500     SKIP2
867600*    * ------------------------------------------------------- *
867700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
867800*    *   FORMAT: WORD, CURRENCY, CHECK
867900*    * ------------------------------------------------------- *
868000     SKIP1
868100     MOVE ZERO TO RO-START
868200                  RO-COUNT
868300                  RO-PSA-LEN
868400     SET RO-FLAG-NONE  TO TRUE
868500     MOVE WS-SOURCE-STRING-8 TO SOURCE-STRING
868600*    "-1,234.56"
868700     MOVE +1   TO TEMPLATE-COUNT
868800     MOVE ZERO TO TMPLT-25-LEN
868900     MOVE LOW-VALUE TO TMPLT-25-TXT
869000     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
869100     IF PACKAGE-CALL
869200*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
869300       CONTINUE
869400     ELSE
869500       MOVE "ASUDN2TB" TO LS-ASMODULE
869600       CALL LS-ASMODULE
869700            USING ASCA-COMMAREA
869800                  AS-REQUEST-OPTIONS
869900                  SOURCE-STRING
870000                  TEMPLATE-COUNT
870100                  TEMPLATE-25
870200                  AS5FDBK-COND-AREA
870300     END-IF
870400
870500     MOVE ZERO TO LS-ENCLAVE-RC
870600     MOVE "CEE3GRC" TO LS-LEMODULE
870700     CALL LS-LEMODULE
870800          USING LS-ENCLAVE-RC
870900                OMITTED
871000     IF LS-ENCLAVE-RC > ZERO
871100       DISPLAY WS-PGMID
871200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
871300     END-IF
871400
871500     IF AS5FDBK-SEVNBR > ZERO
871600       DISPLAY WS-PGMID
871700            " RETURN CODE: " AS5FDBK-SEVNBR
871800            " MESSAGE NBR: " AS5FDBK-MSGNBR
871900     END-IF
872000
872100     DISPLAY WS-PGMID
872200          " TEST CASE 092.F - NBR-2-CHK (ED -1,234.56)"
872300     DISPLAY WS-PGMID
872400          " MIXED CASE / NO CASE"
872500     DISPLAY WS-PGMID
872600          " SOURCE:" SRC-TXT
872700     DISPLAY WS-PGMID
872800          " OUTPUT LEN (0):" TMPLT-25-LEN
872900     DISPLAY WS-PGMID
873000          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
873100     DISPLAY WS-PGMID
873200          " "
873300          TMPLT-25-TXT-Z
873400     DISPLAY " "
873500     SKIP2
873600*    * ------------------------------------------------------- *
873700*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
873800*    *   FORMAT: WORD, CURRENCY, CHECK
873900*    * ------------------------------------------------------- *
874000     SKIP1
874100     MOVE ZERO TO RO-START
874200                  RO-COUNT
874300                  RO-PSA-LEN
874400     SET RO-FLAG-NONE  TO TRUE
874500*    SET NUMBER TO WORD CONVERSION
874600     MOVE X'20' TO RO-OPTION-FLAG
874700     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
874800*    "$-,--4.56"
874900     MOVE +1   TO TEMPLATE-COUNT
875000     MOVE ZERO TO TMPLT-25-LEN
875100     MOVE LOW-VALUE TO TMPLT-25-TXT
875200     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
875300     IF PACKAGE-CALL
875400*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
875500       CONTINUE
875600     ELSE
875700       MOVE "ASUDN2TB" TO LS-ASMODULE
875800       CALL LS-ASMODULE
875900            USING ASCA-COMMAREA
876000                  AS-REQUEST-OPTIONS
876100                  SOURCE-STRING
876200                  TEMPLATE-COUNT
876300                  TEMPLATE-25
876400                  AS5FDBK-COND-AREA
876500     END-IF
876600
876700     MOVE ZERO TO LS-ENCLAVE-RC
876800     MOVE "CEE3GRC" TO LS-LEMODULE
876900     CALL LS-LEMODULE
877000          USING LS-ENCLAVE-RC
877100                OMITTED
877200     IF LS-ENCLAVE-RC > ZERO
877300       DISPLAY WS-PGMID
877400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
877500     END-IF
877600
877700     IF AS5FDBK-SEVNBR > ZERO
877800       DISPLAY WS-PGMID
877900            " RETURN CODE: " AS5FDBK-SEVNBR
878000            " MESSAGE NBR: " AS5FDBK-MSGNBR
878100     END-IF
878200
878300     DISPLAY WS-PGMID
878400          " TEST CASE 092.G - NBR-2-WRD (ED $-,--4.56)"
878500     DISPLAY WS-PGMID
878600          " MIXED CASE / NO CASE"
878700     DISPLAY WS-PGMID
878800          " SOURCE:" SRC-TXT
878900     DISPLAY WS-PGMID
879000          " OUTPUT LEN (38):" TMPLT-25-LEN
879100     DISPLAY WS-PGMID
879200          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
879300     DISPLAY WS-PGMID
879400          " "
879500          TMPLT-25-TXT-Z
879600     DISPLAY " "
879700     SKIP2
879800*    * ------------------------------------------------------- *
879900*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
880000*    *   FORMAT: WORD, CURRENCY, CHECK
880100*    * ------------------------------------------------------- *
880200     SKIP1
880300     MOVE ZERO TO RO-START
880400                  RO-COUNT
880500                  RO-PSA-LEN
880600     SET RO-FLAG-NONE  TO TRUE
880700*    SET NUMBER TO CURRENCY CONVERSION
880800     MOVE X'10' TO RO-OPTION-FLAG
880900     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
881000*    "$-,--4.56"
881100     MOVE +1   TO TEMPLATE-COUNT
881200     MOVE ZERO TO TMPLT-25-LEN
881300     MOVE LOW-VALUE TO TMPLT-25-TXT
881400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
881500     IF PACKAGE-CALL
881600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
881700       CONTINUE
881800     ELSE
881900       MOVE "ASUDN2TB" TO LS-ASMODULE
882000       CALL LS-ASMODULE
882100            USING ASCA-COMMAREA
882200                  AS-REQUEST-OPTIONS
882300                  SOURCE-STRING
882400                  TEMPLATE-COUNT
882500                  TEMPLATE-25
882600                  AS5FDBK-COND-AREA
882700     END-IF
882800
882900     MOVE ZERO TO LS-ENCLAVE-RC
883000     MOVE "CEE3GRC" TO LS-LEMODULE
883100     CALL LS-LEMODULE
883200          USING LS-ENCLAVE-RC
883300                OMITTED
883400     IF LS-ENCLAVE-RC > ZERO
883500       DISPLAY WS-PGMID
883600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
883700     END-IF
883800
883900     IF AS5FDBK-SEVNBR > ZERO
884000       DISPLAY WS-PGMID
884100            " RETURN CODE: " AS5FDBK-SEVNBR
884200            " MESSAGE NBR: " AS5FDBK-MSGNBR
884300     END-IF
884400
884500     DISPLAY WS-PGMID
884600          " TEST CASE 092.H - NBR-2-CUR (ED $-,--4.56)"
884700     DISPLAY WS-PGMID
884800          " MIXED CASE / NO CASE"
884900     DISPLAY WS-PGMID
885000          " SOURCE:" SRC-TXT
885100     DISPLAY WS-PGMID
885200          " OUTPUT LEN (41):" TMPLT-25-LEN
885300     DISPLAY WS-PGMID
885400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
885500     DISPLAY WS-PGMID
885600          " "
885700          TMPLT-25-TXT-Z
885800     DISPLAY " "
885900     SKIP2
886000*    * ------------------------------------------------------- *
886100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
886200*    *   FORMAT: WORD, CURRENCY, CHECK
886300*    * ------------------------------------------------------- *
886400     SKIP1
886500     MOVE ZERO TO RO-START
886600                  RO-COUNT
886700                  RO-PSA-LEN
886800     SET RO-FLAG-NONE  TO TRUE
886900     MOVE WS-SOURCE-STRING-9 TO SOURCE-STRING
887000*    "$-,--4.56"
887100     MOVE +1   TO TEMPLATE-COUNT
887200     MOVE ZERO TO TMPLT-25-LEN
887300     MOVE LOW-VALUE TO TMPLT-25-TXT
887400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
887500     IF PACKAGE-CALL
887600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
887700       CONTINUE
887800     ELSE
887900       MOVE "ASUDN2TB" TO LS-ASMODULE
888000       CALL LS-ASMODULE
888100            USING ASCA-COMMAREA
888200                  AS-REQUEST-OPTIONS
888300                  SOURCE-STRING
888400                  TEMPLATE-COUNT
888500                  TEMPLATE-25
888600                  AS5FDBK-COND-AREA
888700     END-IF
888800
888900     MOVE ZERO TO LS-ENCLAVE-RC
889000     MOVE "CEE3GRC" TO LS-LEMODULE
889100     CALL LS-LEMODULE
889200          USING LS-ENCLAVE-RC
889300                OMITTED
889400     IF LS-ENCLAVE-RC > ZERO
889500       DISPLAY WS-PGMID
889600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
889700     END-IF
889800
889900     IF AS5FDBK-SEVNBR > ZERO
890000       DISPLAY WS-PGMID
890100            " RETURN CODE: " AS5FDBK-SEVNBR
890200            " MESSAGE NBR: " AS5FDBK-MSGNBR
890300     END-IF
890400
890500     DISPLAY WS-PGMID
890600          " TEST CASE 092.I - NBR-2-CHK (ED $-,--4.56)"
890700     DISPLAY WS-PGMID
890800          " MIXED CASE / NO CASE"
890900     DISPLAY WS-PGMID
891000          " SOURCE:" SRC-TXT
891100     DISPLAY WS-PGMID
891200          " OUTPUT LEN (0):" TMPLT-25-LEN
891300     DISPLAY WS-PGMID
891400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
891500     DISPLAY WS-PGMID
891600          " "
891700          TMPLT-25-TXT-Z
891800     DISPLAY " "
891900     SKIP2
892000*    * ------------------------------------------------------- *
892100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
892200*    *   FORMAT: WORD, CURRENCY, CHECK
892300*    * ------------------------------------------------------- *
892400     SKIP1
892500     MOVE ZERO TO RO-START
892600                  RO-COUNT
892700                  RO-PSA-LEN
892800     SET RO-FLAG-NONE  TO TRUE
892900*    SET NUMBER TO WORD CONVERSION
893000     MOVE X'20' TO RO-OPTION-FLAG
893100     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
893200*    "0123,456 "
893300     MOVE +1   TO TEMPLATE-COUNT
893400     MOVE ZERO TO TMPLT-25-LEN
893500     MOVE LOW-VALUE TO TMPLT-25-TXT
893600     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
893700     IF PACKAGE-CALL
893800*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
893900       CONTINUE
894000     ELSE
894100       MOVE "ASUDN2TB" TO LS-ASMODULE
894200       CALL LS-ASMODULE
894300            USING ASCA-COMMAREA
894400                  AS-REQUEST-OPTIONS
894500                  SOURCE-STRING
894600                  TEMPLATE-COUNT
894700                  TEMPLATE-25
894800                  AS5FDBK-COND-AREA
894900     END-IF
895000
895100     MOVE ZERO TO LS-ENCLAVE-RC
895200     MOVE "CEE3GRC" TO LS-LEMODULE
895300     CALL LS-LEMODULE
895400          USING LS-ENCLAVE-RC
895500                OMITTED
895600     IF LS-ENCLAVE-RC > ZERO
895700       DISPLAY WS-PGMID
895800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
895900     END-IF
896000
896100     IF AS5FDBK-SEVNBR > ZERO
896200       DISPLAY WS-PGMID
896300            " RETURN CODE: " AS5FDBK-SEVNBR
896400            " MESSAGE NBR: " AS5FDBK-MSGNBR
896500     END-IF
896600
896700     DISPLAY WS-PGMID
896800          " TEST CASE 092.J - NBR-2-WRD (ED 0123,456 )"
896900     DISPLAY WS-PGMID
897000          " MIXED CASE / NO CASE"
897100     DISPLAY WS-PGMID
897200          " SOURCE:" SRC-TXT
897300     DISPLAY WS-PGMID
897400          " OUTPUT LEN (56):" TMPLT-25-LEN
897500     DISPLAY WS-PGMID
897600          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
897700     DISPLAY WS-PGMID
897800          " "
897900          TMPLT-25-TXT-Z
898000     DISPLAY " "
898100     SKIP2
898200*    * ------------------------------------------------------- *
898300*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
898400*    *   FORMAT: WORD, CURRENCY, CHECK
898500*    * ------------------------------------------------------- *
898600     SKIP1
898700     MOVE ZERO TO RO-START
898800                  RO-COUNT
898900                  RO-PSA-LEN
899000     SET RO-FLAG-NONE  TO TRUE
899100*    SET NUMBER TO CURRENCY CONVERSION
899200     MOVE X'10' TO RO-OPTION-FLAG
899300     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
899400*    "0123,456 "
899500     MOVE +1   TO TEMPLATE-COUNT
899600     MOVE ZERO TO TMPLT-25-LEN
899700     MOVE LOW-VALUE TO TMPLT-25-TXT
899800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
899900     IF PACKAGE-CALL
900000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
900100       CONTINUE
900200     ELSE
900300       MOVE "ASUDN2TB" TO LS-ASMODULE
900400       CALL LS-ASMODULE
900500            USING ASCA-COMMAREA
900600                  AS-REQUEST-OPTIONS
900700                  SOURCE-STRING
900800                  TEMPLATE-COUNT
900900                  TEMPLATE-25
901000                  AS5FDBK-COND-AREA
901100     END-IF
901200
901300     MOVE ZERO TO LS-ENCLAVE-RC
901400     MOVE "CEE3GRC" TO LS-LEMODULE
901500     CALL LS-LEMODULE
901600          USING LS-ENCLAVE-RC
901700                OMITTED
901800     IF LS-ENCLAVE-RC > ZERO
901900       DISPLAY WS-PGMID
902000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
902100     END-IF
902200
902300     IF AS5FDBK-SEVNBR > ZERO
902400       DISPLAY WS-PGMID
902500            " RETURN CODE: " AS5FDBK-SEVNBR
902600            " MESSAGE NBR: " AS5FDBK-MSGNBR
902700     END-IF
902800
902900     DISPLAY WS-PGMID
903000          " TEST CASE 092.K - NBR-2-CUR (ED 0123,456 )"
903100     DISPLAY WS-PGMID
903200          " MIXED CASE / NO CASE"
903300     DISPLAY WS-PGMID
903400          " SOURCE:" SRC-TXT
903500     DISPLAY WS-PGMID
903600          " OUTPUT LEN (64):" TMPLT-25-LEN
903700     DISPLAY WS-PGMID
903800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
903900     DISPLAY WS-PGMID
904000          " "
904100          TMPLT-25-TXT-Z
904200     DISPLAY " "
904300     SKIP2
904400*    * ------------------------------------------------------- *
904500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
904600*    *   FORMAT: WORD, CURRENCY, CHECK
904700*    * ------------------------------------------------------- *
904800     SKIP1
904900     MOVE ZERO TO RO-START
905000                  RO-COUNT
905100                  RO-PSA-LEN
905200     SET RO-FLAG-NONE  TO TRUE
905300     MOVE WS-SOURCE-STRING-10 TO SOURCE-STRING
905400*    "0123,456 "
905500     MOVE +1   TO TEMPLATE-COUNT
905600     MOVE ZERO TO TMPLT-25-LEN
905700     MOVE LOW-VALUE TO TMPLT-25-TXT
905800     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
905900     IF PACKAGE-CALL
906000*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
906100       CONTINUE
906200     ELSE
906300       MOVE "ASUDN2TB" TO LS-ASMODULE
906400       CALL LS-ASMODULE
906500            USING ASCA-COMMAREA
906600                  AS-REQUEST-OPTIONS
906700                  SOURCE-STRING
906800                  TEMPLATE-COUNT
906900                  TEMPLATE-25
907000                  AS5FDBK-COND-AREA
907100     END-IF
907200
907300     MOVE ZERO TO LS-ENCLAVE-RC
907400     MOVE "CEE3GRC" TO LS-LEMODULE
907500     CALL LS-LEMODULE
907600          USING LS-ENCLAVE-RC
907700                OMITTED
907800     IF LS-ENCLAVE-RC > ZERO
907900       DISPLAY WS-PGMID
908000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
908100     END-IF
908200
908300     IF AS5FDBK-SEVNBR > ZERO
908400       DISPLAY WS-PGMID
908500            " RETURN CODE: " AS5FDBK-SEVNBR
908600            " MESSAGE NBR: " AS5FDBK-MSGNBR
908700     END-IF
908800
908900     DISPLAY WS-PGMID
909000          " TEST CASE 092.L - NBR-2-CHK (ED 0123,456 )"
909100     DISPLAY WS-PGMID
909200          " MIXED CASE / NO CASE"
909300     DISPLAY WS-PGMID
909400          " SOURCE:" SRC-TXT
909500     DISPLAY WS-PGMID
909600          " OUTPUT LEN (64):" TMPLT-25-LEN
909700     DISPLAY WS-PGMID
909800          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
909900     DISPLAY WS-PGMID
910000          " "
910100          TMPLT-25-TXT-Z
910200     DISPLAY " "
910300     SKIP2
910400*    * ------------------------------------------------------- *
910500*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
910600*    *   FORMAT: WORD, CURRENCY, CHECK
910700*    * ------------------------------------------------------- *
910800     SKIP1
910900     MOVE ZERO TO RO-START
911000                  RO-COUNT
911100                  RO-PSA-LEN
911200     SET RO-FLAG-NONE  TO TRUE
911300*    SET NUMBER TO WORD CONVERSION
911400     MOVE X'20' TO RO-OPTION-FLAG
911500     MOVE +2   TO RO-COUNT
911600     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
911700*    "0.75"
911800     MOVE +1   TO TEMPLATE-COUNT
911900     MOVE ZERO TO TMPLT-25-LEN
912000     MOVE LOW-VALUE TO TMPLT-25-TXT
912100     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
912200     IF PACKAGE-CALL
912300*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
912400       CONTINUE
912500     ELSE
912600       MOVE "ASUDN2TB" TO LS-ASMODULE
912700       CALL LS-ASMODULE
912800            USING ASCA-COMMAREA
912900                  AS-REQUEST-OPTIONS
913000                  SOURCE-STRING
913100                  TEMPLATE-COUNT
913200                  TEMPLATE-25
913300                  AS5FDBK-COND-AREA
913400     END-IF
913500
913600     MOVE ZERO TO LS-ENCLAVE-RC
913700     MOVE "CEE3GRC" TO LS-LEMODULE
913800     CALL LS-LEMODULE
913900          USING LS-ENCLAVE-RC
914000                OMITTED
914100     IF LS-ENCLAVE-RC > ZERO
914200       DISPLAY WS-PGMID
914300            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
914400     END-IF
914500
914600     IF AS5FDBK-SEVNBR > ZERO
914700       DISPLAY WS-PGMID
914800            " RETURN CODE: " AS5FDBK-SEVNBR
914900            " MESSAGE NBR: " AS5FDBK-MSGNBR
915000     END-IF
915100
915200     DISPLAY WS-PGMID
915300          " TEST CASE 092.M - NBR-2-WRD (ED 0.75)"
915400     DISPLAY WS-PGMID
915500          " MIXED CASE / NO CASE"
915600     DISPLAY WS-PGMID
915700          " SOURCE:" SRC-TXT
915800     DISPLAY WS-PGMID
915900          " OUTPUT LEN (32):" TMPLT-25-LEN
916000     DISPLAY WS-PGMID
916100          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
916200     DISPLAY WS-PGMID
916300          " "
916400          TMPLT-25-TXT-Z
916500     DISPLAY " "
916600     SKIP2
916700*    * ------------------------------------------------------- *
916800*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
916900*    *   FORMAT: WORD, CURRENCY, CHECK
917000*    * ------------------------------------------------------- *
917100     SKIP1
917200     MOVE ZERO TO RO-START
917300                  RO-COUNT
917400                  RO-PSA-LEN
917500     SET RO-FLAG-NONE  TO TRUE
917600*    SET NUMBER TO CURRENCY CONVERSION
917700     MOVE X'10' TO RO-OPTION-FLAG
917800     MOVE +2   TO RO-COUNT
917900     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
918000*    "0.75"
918100     MOVE +1   TO TEMPLATE-COUNT
918200     MOVE ZERO TO TMPLT-25-LEN
918300     MOVE LOW-VALUE TO TMPLT-25-TXT
918400     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
918500     IF PACKAGE-CALL
918600*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
918700       CONTINUE
918800     ELSE
918900       MOVE "ASUDN2TB" TO LS-ASMODULE
919000       CALL LS-ASMODULE
919100            USING ASCA-COMMAREA
919200                  AS-REQUEST-OPTIONS
919300                  SOURCE-STRING
919400                  TEMPLATE-COUNT
919500                  TEMPLATE-25
919600                  AS5FDBK-COND-AREA
919700     END-IF
919800
919900     MOVE ZERO TO LS-ENCLAVE-RC
920000     MOVE "CEE3GRC" TO LS-LEMODULE
920100     CALL LS-LEMODULE
920200          USING LS-ENCLAVE-RC
920300                OMITTED
920400     IF LS-ENCLAVE-RC > ZERO
920500       DISPLAY WS-PGMID
920600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
920700     END-IF
920800
920900     IF AS5FDBK-SEVNBR > ZERO
921000       DISPLAY WS-PGMID
921100            " RETURN CODE: " AS5FDBK-SEVNBR
921200            " MESSAGE NBR: " AS5FDBK-MSGNBR
921300     END-IF
921400
921500     DISPLAY WS-PGMID
921600          " TEST CASE 092.N - NBR-2-CUR (ED 0.75)"
921700     DISPLAY WS-PGMID
921800          " MIXED CASE / NO CASE"
921900     DISPLAY WS-PGMID
922000          " SOURCE:" SRC-TXT
922100     DISPLAY WS-PGMID
922200          " OUTPUT LEN (35):" TMPLT-25-LEN
922300     DISPLAY WS-PGMID
922400          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
922500     DISPLAY WS-PGMID
922600          " "
922700          TMPLT-25-TXT-Z
922800     DISPLAY " "
922900     SKIP2
923000*    * ------------------------------------------------------- *
923100*    * CALL PSEUDO-STRING SERVICE CONVERT NUMBER TO TEXT
923200*    *   FORMAT: WORD, CURRENCY, CHECK
923300*    * ------------------------------------------------------- *
923400     SKIP1
923500     MOVE ZERO TO RO-START
923600                  RO-COUNT
923700                  RO-PSA-LEN
923800     SET RO-FLAG-NONE  TO TRUE
923900     MOVE +2   TO RO-COUNT
924000     MOVE WS-SOURCE-STRING-33 TO SOURCE-STRING
924100*    "0.75"
924200     MOVE +1   TO TEMPLATE-COUNT
924300     MOVE ZERO TO TMPLT-25-LEN
924400     MOVE LOW-VALUE TO TMPLT-25-TXT
924500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
924600     IF PACKAGE-CALL
924700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
924800       CONTINUE
924900     ELSE
925000       MOVE "ASUDN2TB" TO LS-ASMODULE
925100       CALL LS-ASMODULE
925200            USING ASCA-COMMAREA
925300                  AS-REQUEST-OPTIONS
925400                  SOURCE-STRING
925500                  TEMPLATE-COUNT
925600                  TEMPLATE-25
925700                  AS5FDBK-COND-AREA
925800     END-IF
925900
926000     MOVE ZERO TO LS-ENCLAVE-RC
926100     MOVE "CEE3GRC" TO LS-LEMODULE
926200     CALL LS-LEMODULE
926300          USING LS-ENCLAVE-RC
926400                OMITTED
926500     IF LS-ENCLAVE-RC > ZERO
926600       DISPLAY WS-PGMID
926700            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
926800     END-IF
926900
927000     IF AS5FDBK-SEVNBR > ZERO
927100       DISPLAY WS-PGMID
927200            " RETURN CODE: " AS5FDBK-SEVNBR
927300            " MESSAGE NBR: " AS5FDBK-MSGNBR
927400     END-IF
927500
927600     DISPLAY WS-PGMID
927700          " TEST CASE 092.O - NBR-2-CHK (ED 0.75)"
927800     DISPLAY WS-PGMID
927900          " MIXED CASE / NO CASE"
928000     DISPLAY WS-PGMID
928100          " SOURCE:" SRC-TXT
928200     DISPLAY WS-PGMID
928300          " OUTPUT LEN (23):" TMPLT-25-LEN
928400     DISPLAY WS-PGMID
928500          " WORD TEXT (...):" TMPLT-25-TXT (1:TMPLT-25-LEN)
928600     DISPLAY WS-PGMID
928700          " "
928800          TMPLT-25-TXT-Z
928900     DISPLAY " "
929000     SKIP2
929100     CONTINUE.
929200 TEST-CASE-093.
929300
929400     IF NOT (TEST-CASE = "ALL" OR "093")
929500       GO TO TEST-CASE-094
929600     END-IF
929700
929800     IF PACKAGE-CALL
929900       GO TO TEST-CASE-094
930000     END-IF
930100
930200*    * ------------------------------------------------------- *
930300*    * CALL STRING SERVICE NBROF
930400*    * IMPLEMENT BOYER-MOORE FIND
930500*    * ------------------------------------------------------- *
930600     SKIP1
930700     MOVE ZERO TO RO-START
930800                  RO-COUNT
930900                  RO-PSA-LEN
931000     SET RO-FLAG-NONE TO TRUE
931100     MOVE +288 TO RO-PSA-LEN
931200     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
931300*    "+How+now+brown+cow++"
931400     MOVE +2   TO TEMPLATE-COUNT
931500     MOVE ZERO TO TMPLT-2-LEN
931600     MOVE ZERO TO TMPLT-2-TXT
931700     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
931800     IF PACKAGE-CALL
931900*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
932000       CONTINUE
932100     ELSE
932200       MOVE "ASUDNOFB" TO LS-ASMODULE
932300       CALL LS-ASMODULE
932400            USING ASCA-COMMAREA
932500                  AS-REQUEST-OPTIONS
932600                  SOURCE-STRING
932700                  TEMPLATE-COUNT
932800                  TEMPLATE-23
932900                  TEMPLATE-2
933000                  OMITTED
933100**                OMITTED
933200**                AS5FDBK-COND-AREA
933300     END-IF
933400
933500     MOVE ZERO TO LS-ENCLAVE-RC
933600     MOVE "CEE3GRC" TO LS-LEMODULE
933700     CALL LS-LEMODULE
933800          USING LS-ENCLAVE-RC
933900                OMITTED
934000     IF LS-ENCLAVE-RC > ZERO
934100       DISPLAY WS-PGMID
934200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
934300     END-IF
934400
934500     DISPLAY WS-PGMID
934600          " TEST CASE 093.A NBROF"
934700     DISPLAY WS-PGMID
934800          " MIXED CASE / MIXED CASE"
934900     DISPLAY WS-PGMID
935000          " SOURCE:" SRC-TXT
935100     DISPLAY WS-PGMID
935200          " ARGUMENT:" TMPLT-23-TXT
935300     DISPLAY WS-PGMID
935400          " NBROF CALL (1) (16):" TMPLT-2-TXT
935500     DISPLAY WS-PGMID
935600          " "
935700          TMPLT-2-TXT-Z
935800     DISPLAY " "
935900     SKIP2
936000*    * ------------------------------------------------------- *
936100*    * CALL STRING SERVICE NBROF
936200*    * IMPLEMENT BOYER-MOORE FIND
936300*    * ------------------------------------------------------- *
936400     SKIP1
936500     MOVE ZERO TO RO-START
936600                  RO-COUNT
936700                  RO-PSA-LEN
936800     SET RO-FLAG-NONE TO TRUE
936900     MOVE +288 TO RO-PSA-LEN
937000     MOVE WS-SOURCE-STRING-2 TO SOURCE-STRING
937100*    "+How+now+brown+cow++"
937200     MOVE +2   TO TEMPLATE-COUNT
937300     MOVE ZERO TO TMPLT-2-LEN
937400     MOVE ZERO TO TMPLT-2-TXT
937500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
937600     IF PACKAGE-CALL
937700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
937800       CONTINUE
937900     ELSE
938000       MOVE "ASUDNOFB" TO LS-ASMODULE
938100       CALL LS-ASMODULE
938200            USING ASCA-COMMAREA
938300                  AS-REQUEST-OPTIONS
938400                  SOURCE-STRING
938500                  TEMPLATE-COUNT
938600                  TEMPLATE-24
938700                  TEMPLATE-2
938800                  OMITTED
938900**                OMITTED
939000**                AS5FDBK-COND-AREA
939100     END-IF
939200
939300     MOVE ZERO TO LS-ENCLAVE-RC
939400     MOVE "CEE3GRC" TO LS-LEMODULE
939500     CALL LS-LEMODULE
939600          USING LS-ENCLAVE-RC
939700                OMITTED
939800     IF LS-ENCLAVE-RC > ZERO
939900       DISPLAY WS-PGMID
940000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
940100     END-IF
940200
940300     DISPLAY WS-PGMID
940400          " TEST CASE 093.B NBROF"
940500     DISPLAY WS-PGMID
940600          " MIXED CASE / MIXED CASE"
940700     DISPLAY WS-PGMID
940800          " SOURCE:" SRC-TXT
940900     DISPLAY WS-PGMID
941000          " ARGUMENT:" TMPLT-24-TXT
941100     DISPLAY WS-PGMID
941200          " NBROF CALL (1) (6):" TMPLT-2-TXT
941300     DISPLAY WS-PGMID
941400          " "
941500          TMPLT-2-TXT-Z
941600     DISPLAY " "
941700     SKIP2
941800*    * ------------------------------------------------------- *
941900*    * CALL STRING SERVICE NBROF
942000*    * IMPLEMENT BOYER-MOORE FIND
942100*    * ------------------------------------------------------- *
942200     SKIP1
942300     MOVE ZERO TO RO-START
942400                  RO-COUNT
942500                  RO-PSA-LEN
942600     SET RO-FLAG-CASE TO TRUE
942700     MOVE +288 TO RO-PSA-LEN
942800     MOVE WS-SOURCE-STRING-1 TO SOURCE-STRING
942900*    "Now+is+the+time+for+all+good+men+MEN+MENMEN+men++++"
943000     MOVE +3   TO TEMPLATE-COUNT
943100     MOVE ZERO TO TMPLT-2-LEN
943200     MOVE ZERO TO TMPLT-2-TXT
943300     MOVE ZERO TO TMPLT-25-LEN
943400     MOVE LOW-VALUE TO TMPLT-25-TXT
943500     MOVE LOW-VALUE TO AS5FDBK-COND-AREA
943600     IF PACKAGE-CALL
943700*      CALL ASUSSVCB TO PERFORM SERVICE (NONE)
943800       CONTINUE
943900     ELSE
944000       MOVE "ASUDNOFB" TO LS-ASMODULE
944100       CALL LS-ASMODULE
944200            USING ASCA-COMMAREA
944300                  AS-REQUEST-OPTIONS
944400                  SOURCE-STRING
944500                  TEMPLATE-COUNT
944600                  TEMPLATE-4
944700                  TEMPLATE-2
944800                  TEMPLATE-25
944900**                OMITTED
945000**                AS5FDBK-COND-AREA
945100     END-IF
945200
945300     MOVE ZERO TO LS-ENCLAVE-RC
945400     MOVE "CEE3GRC" TO LS-LEMODULE
945500     CALL LS-LEMODULE
945600          USING LS-ENCLAVE-RC
945700                OMITTED
945800     IF LS-ENCLAVE-RC > ZERO
945900       DISPLAY WS-PGMID
946000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
946100     END-IF
946200
946300     DISPLAY WS-PGMID
946400          " TEST CASE 093.C NBROF"
946500     DISPLAY WS-PGMID
946600          " MIXED CASE / UPPER CASE / CASE INSENSITIVE"
946700     DISPLAY WS-PGMID
946800          " SOURCE:" SRC-TXT
946900     DISPLAY WS-PGMID
947000          " ARGUMENT:" TMPLT-4-TXT
947100     DISPLAY WS-PGMID
947200          " NBROF CALL (5) (30,34,38,41,45,0):" TMPLT-2-TXT
947300     DISPLAY WS-PGMID
947400          " "
947500          TMPLT-2-TXT-Z
947600     PERFORM
947700          VARYING LOOP-COUNT FROM +1 BY +1
947800          UNTIL LOOP-COUNT > TMPLT-2-TXT
947900       DISPLAY WS-PGMID
948000            " NBROF POS:" TMPLT-25-POS (LOOP-COUNT)
948100     END-PERFORM
948200     DISPLAY WS-PGMID
948300          " "
948400          TMPLT-25-TXT-Z
948500     DISPLAY " "
948600     SKIP2
948700     CONTINUE.
948800 TEST-CASE-094.
948900
949000     IF NOT (TEST-CASE = "ALL" OR "094")
949100       GO TO TEST-CASE-999
949200     END-IF
949210
949211     IF PACKAGE-CALL
949212       GO TO TEST-CASE-999
949213     END-IF
949300
949400     SKIP2
949500     CONTINUE.
949600 TEST-CASE-999.
949700
949800     GO TO 0200-00-INPUT
949900     SKIP2
950000     CONTINUE.
950100 9000-00-RETURN.
950200*    * ------------------------------------------------------- *
950300*    * RETURN TO CALLER
950400*    * ------------------------------------------------------- *
950500     SKIP1
950600     EXIT PROGRAM.
950700     GOBACK.
./ ADD NAME=ASTSVC1B 0170-17340-21272-1412-08553-00654-00000-APLKS   59
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSVC1B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700*--------------------------------------------------------------*
000800*               ** PROGRAM DESCRIPTION **                      *
000900*                                                              *
001000* ASTSVC1B test LE & ASU callable services                     *
001100*    NAME: ASTSVC1B                                            *
001200*    APPL: Architecture Services Utility                       *
001300*    DESC: Test program to access LE services                  *
001400*          & ASU & DTE date services.                          *
001500* PURPOSE: Program to drive the ASU date services.             *
001600*                                                              *
001700* Called Routine(s):                                           *
001800*    ASUMETXT                                                  *
001900*    ASUMDHEX                                                  *
002000*    ASTDATEB                                                  *
002100*    ASUB2JDB                                                  *
002200*    ASUG2JDB                                                  *
002300*    ASUJ2BDB                                                  *
002400*    ASUJ2GDB                                                  *
002500*    ASUJ2WDB                                                  *
002600*    ASUW2JDB                                                  *
002700*    ASU3QEIB                                                  *
002800*    CEEFMDA                                                   *
002900*    CEEFMDT                                                   *
003000*    CEEFMTM                                                   *
003100*    CEEGPID                                                   *
003200*    CEEMOUT                                                   *
003300*    CEEQCEN                                                   *
003400*    CEESETL                                                   *
003500*    CEE3CTY                                                   *
003600*    CEE3LNG                                                   *
003700*    CEE3MCS                                                   *
003800*    CEE3MDS                                                   *
003900*    CEE3MTS                                                   *
004000*    CEE3PRM                                                   *
004100*    CEE3RPH                                                   *
004200*    DTEB2G                                                    *
004300*    DTEDOW1                                                   *
004400*    DTEDOW2                                                   *
004500*    DTEG2B                                                    *
004600*    DTEG2J                                                    *
004700*    DTEG2W                                                    *
004800*    DTEJ2G                                                    *
004900*    DTEW2G                                                    *
005000*    GETENV()                                                  *
005100*    TIME()        retrieve time in seconds from 19700101      *
005200*    CTIME()       return time as a char string 26             *
005300*                                                              *
005400*--------------------------------------------------------------*
005500     SKIP2
005600*--------------------------------------------------------------*
005700*               ** HISTORY OF REVISIONS **                     *
005800* DESCRIPTION                                           CHNGID *
005900* ____________________________________________________  _______*
006000*                                                              *
006100* 10/17/01 NEW                                                 *
006200*                                                              *
006300*--------------------------------------------------------------*
006400     SKIP2
006500 DATA DIVISION.
006600     SKIP2
006700 WORKING-STORAGE SECTION.
006800 01  FILLER.
006900     03  WS-EYE-CATCHER PIC X(25)
007000              VALUE "BUZZARD CREEK TECH, INC. ".
007100     03  WS-PGMID       PIC X(08) VALUE "ASTSVC1B".
007200 01  WS-ASUB2JDB        PIC X(08) VALUE "ASUB2JDB".
007300 01  WS-ASUG2JDB        PIC X(08) VALUE "ASUG2JDB".
007400 01  WS-ASUJ2BDB        PIC X(08) VALUE "ASUJ2BDB".
007500 01  WS-ASUJ2GDB        PIC X(08) VALUE "ASUJ2GDB".
007600 01  WS-ASUJ2WDB        PIC X(08) VALUE "ASUJ2WDB".
007700 01  WS-ASUW2JDB        PIC X(08) VALUE "ASUW2JDB".
007800 01  WS-DTEB2G          PIC X(08) VALUE "DTEB2G".
007900 01  WS-DTEDOW1         PIC X(08) VALUE "DTEDOW1".
008000 01  WS-DTEDOW2         PIC X(08) VALUE "DTEDOW2".
008100 01  WS-DTEG2B          PIC X(08) VALUE "DTEG2B".
008200 01  WS-DTEG2J          PIC X(08) VALUE "DTEG2J".
008300 01  WS-DTEG2W          PIC X(08) VALUE "DTEG2W".
008400 01  WS-DTEJ2G          PIC X(08) VALUE "DTEJ2G".
008500 01  WS-DTEW2G          PIC X(08) VALUE "DTEW2G".
008600
008700 01  WS-NULL-CNTRY-CODE PIC X(02) VALUE SPACE.
008800 01  WS-PRT-HD          PIC X(80) VALUE 'THIS IS FOR ASTSVC1B'.
008900 01  KEYWORD-LE-ENVAR-1 PIC X(03) VALUE Z'TZ'.
009000
009100 01  WS-DATE-CONSTANTS.
009200     03  WS-G00100228   PIC  9(8) VALUE 100228.
009300     03  WS-J0010059    PIC  9(7) VALUE 10059.
009400     03  WS-Y0010       PIC  9(4) VALUE 10.
009500     03  WS-G00300228   PIC  9(8) VALUE 300228.
009600     03  WS-J0030059    PIC  9(7) VALUE 30059.
009700     03  WS-Y0030       PIC  9(4) VALUE 30.
009800     03  WS-G00500228   PIC  9(8) VALUE 500228.
009900     03  WS-J0050059    PIC  9(7) VALUE 50059.
010000     03  WS-Y0050       PIC  9(4) VALUE 50.
010100     03  WS-G00700228   PIC  9(8) VALUE 700228.
010200     03  WS-J0070059    PIC  9(7) VALUE 70059.
010300     03  WS-Y0070       PIC  9(4) VALUE 70.
010400     03  WS-G00900228   PIC  9(8) VALUE 900228.
010500     03  WS-J0090059    PIC  9(7) VALUE 90059.
010600     03  WS-Y0090       PIC  9(4) VALUE 90.
010700     03  WS-G15821015   PIC  9(8) VALUE 15821015.
010800     03  WS-J1582288    PIC  9(7) VALUE 1582288.
010900     03  WS-B577735     PIC  9(9) BINARY VALUE 577735.
011000     03  WS-Y1582       PIC  9(4) VALUE 1582.
011100     03  WS-G15830101   PIC  9(8) VALUE 15830101.
011200     03  WS-J1583001    PIC  9(7) VALUE 1583001.
011300     03  WS-B577813     PIC  9(9) BINARY VALUE 577813.
011400     03  WS-G15830228   PIC  9(8) VALUE 15830228.
011500     03  WS-J1583059    PIC  9(7) VALUE 1583059.
011600     03  WS-B577871     PIC  9(9) BINARY VALUE 577871.
011700     03  WS-G15830301   PIC  9(8) VALUE 15830301.
011800     03  WS-J1583060    PIC  9(7) VALUE 1583060.
011900     03  WS-B577872     PIC  9(9) BINARY VALUE 577872.
012000     03  WS-G15831231   PIC  9(8) VALUE 15831231.
012100     03  WS-J1583365    PIC  9(7) VALUE 1583365.
012200     03  WS-B578177     PIC  9(9) BINARY VALUE 578177.
012300     03  WS-Y1583       PIC  9(4) VALUE 1583.
012400     03  WS-G16010101   PIC  9(8) VALUE 16010101.
012500     03  WS-J1601001    PIC  9(7) VALUE 1601001.
012600     03  WS-B584388     PIC  9(9) BINARY VALUE 584388.
012700     03  WS-G16010228   PIC  9(8) VALUE 16010228.
012800     03  WS-J1601059    PIC  9(7) VALUE 1601059.
012900     03  WS-B584446     PIC  9(9) BINARY VALUE 584446.
013000     03  WS-G16010301   PIC  9(8) VALUE 16010301.
013100     03  WS-J1601060    PIC  9(7) VALUE 1601060.
013200     03  WS-B584447     PIC  9(9) BINARY VALUE 584447.
013300     03  WS-G16011231   PIC  9(8) VALUE 16011231.
013400     03  WS-J1601365    PIC  9(7) VALUE 1601365.
013500     03  WS-B584752     PIC  9(9) BINARY VALUE 584752.
013600     03  WS-Y1601       PIC  9(4) VALUE 1601.
013700     03  WS-G18750520   PIC  9(8) VALUE 18750520.
013800     03  WS-J1875140    PIC  9(7) VALUE 1875140.
013900     03  WS-B684603     PIC  9(9) BINARY VALUE 684603.
014000     03  WS-G18751231   PIC  9(8) VALUE 18751231.
014100     03  WS-J1875365    PIC  9(7) VALUE 1875365.
014200     03  WS-B684828     PIC  9(9) BINARY VALUE 684828.
014300     03  WS-Y1875       PIC  9(4) VALUE 1875.
014400     03  WS-G19000101   PIC  9(8) VALUE 19000101.
014500     03  WS-J1900001    PIC  9(7) VALUE 1900001.
014600     03  WS-B693595     PIC  9(9) BINARY VALUE 693595.
014700     03  WS-G19000228   PIC  9(8) VALUE 19000228.
014800     03  WS-J1900059    PIC  9(7) VALUE 1900059.
014900     03  WS-B693653     PIC  9(9) BINARY VALUE 693653.
015000     03  WS-G19000229   PIC  9(8) VALUE 19000229.
015100     03  WS-G19000301   PIC  9(8) VALUE 19000301.
015200     03  WS-J1900060    PIC  9(7) VALUE 1900060.
015300     03  WS-B693654     PIC  9(9) BINARY VALUE 693654.
015400     03  WS-G19001231   PIC  9(8) VALUE 19001231.
015500     03  WS-J1900365    PIC  9(7) VALUE 1900365.
015600     03  WS-J1900366    PIC  9(7) VALUE 1900366.
015700     03  WS-B693959     PIC  9(9) BINARY VALUE 693959.
015800     03  WS-Y1900       PIC  9(4) VALUE 1900.
015900     03  WS-G19040101   PIC  9(8) VALUE 19040101.
016000     03  WS-J1904001    PIC  9(7) VALUE 1904001.
016100     03  WS-B695055     PIC  9(9) BINARY VALUE 695055.
016200     03  WS-G19040228   PIC  9(8) VALUE 19040228.
016300     03  WS-J1904059    PIC  9(7) VALUE 1904059.
016400     03  WS-B695113     PIC  9(9) BINARY VALUE 695113.
016500     03  WS-G19040229   PIC  9(8) VALUE 19040229.
016600     03  WS-J1904060    PIC  9(7) VALUE 1904060.
016700     03  WS-B695114     PIC  9(9) BINARY VALUE 695114.
016800     03  WS-G19040301   PIC  9(8) VALUE 19040301.
016900     03  WS-J1904061    PIC  9(7) VALUE 1904061.
017000     03  WS-B695115     PIC  9(9) BINARY VALUE 695115.
017100     03  WS-G19041231   PIC  9(8) VALUE 19041231.
017200     03  WS-J1904365    PIC  9(7) VALUE 1904365.
017300     03  WS-J1904366    PIC  9(7) VALUE 1904366.
017400     03  WS-B695420     PIC  9(9) BINARY VALUE 695420.
017500     03  WS-Y1904       PIC  9(4) VALUE 1904.
017600     03  WS-G19700101   PIC  9(8) VALUE 19700101.
017700     03  WS-J1970001    PIC  9(7) VALUE 1970001.
017800     03  WS-B719162     PIC  9(9) BINARY VALUE 719162.
017900     03  WS-G19700228   PIC  9(8) VALUE 19700228.
018000     03  WS-J1970059    PIC  9(7) VALUE 1970059.
018100     03  WS-B719220     PIC  9(9) BINARY VALUE 719220.
018200     03  WS-G19700301   PIC  9(8) VALUE 19700301.
018300     03  WS-J1970060    PIC  9(7) VALUE 1970060.
018400     03  WS-B719221     PIC  9(9) BINARY VALUE 719221.
018500     03  WS-G19701231   PIC  9(8) VALUE 19701231.
018600     03  WS-J1970365    PIC  9(7) VALUE 1970365.
018700     03  WS-B719526     PIC  9(9) BINARY VALUE 719526.
018800     03  WS-Y1970       PIC  9(4) VALUE 1970.
018900     03  WS-G20000101   PIC  9(8) VALUE 20000101.
019000     03  WS-J2000001    PIC  9(7) VALUE 2000001.
019100     03  WS-B730119     PIC  9(9) BINARY VALUE 730119.
019200     03  WS-G20000228   PIC  9(8) VALUE 20000228.
019300     03  WS-J2000059    PIC  9(7) VALUE 2000059.
019400     03  WS-B730177     PIC  9(9) BINARY VALUE 730177.
019500     03  WS-G20000229   PIC  9(8) VALUE 20000229.
019600     03  WS-J2000060    PIC  9(7) VALUE 2000060.
019700     03  WS-B730178     PIC  9(9) BINARY VALUE 730178.
019800     03  WS-G20000301   PIC  9(8) VALUE 20000301.
019900     03  WS-J2000061    PIC  9(7) VALUE 2000061.
020000     03  WS-B730179     PIC  9(9) BINARY VALUE 730179.
020100     03  WS-G20000931   PIC  9(8) VALUE 20000931.
020200     03  WS-J2000275    PIC  9(7) VALUE 2000275.
020300     03  WS-B730393     PIC  9(9) BINARY VALUE 730393.
020400     03  WS-G20001231   PIC  9(8) VALUE 20001231.
020500     03  WS-J2000366    PIC  9(7) VALUE 2000366.
020600     03  WS-B730484     PIC  9(9) BINARY VALUE 730484.
020700     03  WS-Y2000       PIC  9(4) VALUE 2000.
020800     03  WS-G20200101   PIC  9(8) VALUE 20200101.
020900     03  WS-J2020001    PIC  9(7) VALUE 2020001.
021000     03  WS-B737424     PIC  9(9) BINARY VALUE 737424.
021100     03  WS-G20200228   PIC  9(8) VALUE 20200228.
021200     03  WS-J2020059    PIC  9(7) VALUE 2020059.
021300     03  WS-B737482     PIC  9(9) BINARY VALUE 737482.
021400     03  WS-G20200229   PIC  9(8) VALUE 20200229.
021500     03  WS-J2020060    PIC  9(7) VALUE 2020060.
021600     03  WS-B737483     PIC  9(9) BINARY VALUE 737483.
021700     03  WS-G20200301   PIC  9(8) VALUE 20200301.
021800     03  WS-J2020061    PIC  9(7) VALUE 2020061.
021900     03  WS-B737484     PIC  9(9) BINARY VALUE 737484.
022000     03  WS-G20201231   PIC  9(8) VALUE 20201231.
022100     03  WS-J2020366    PIC  9(7) VALUE 2020366.
022200     03  WS-B737789     PIC  9(9) BINARY VALUE 737789.
022300     03  WS-Y2020       PIC  9(4) VALUE 2020.
022400     03  WS-W01         PIC  9(2) VALUE 1.
022500     03  WS-W08         PIC  9(2) VALUE 8.
022600     03  WS-W09         PIC  9(2) VALUE 9.
022700     03  WS-W20         PIC  9(2) VALUE 20.
022800     03  WS-W39         PIC  9(2) VALUE 39.
022900     03  WS-W41         PIC  9(2) VALUE 41.
023000     03  WS-W52         PIC  9(2) VALUE 52.
023100     03  WS-W53         PIC  9(2) VALUE 53.
023200
023300     COPY CEEIGZLC.
023400
023500     COPY AS5FDBK.
023600
023700     COPY AS5ENVCA.
023800     SKIP2
023900 LOCAL-STORAGE SECTION.
024000 01  LS-VAR-PTR         POINTER.
024100 01  LS-VAR-PTR1        POINTER.
024200 01  XS-VAR-PTR         POINTER.
024300 01  LS-ASCA-PTR        POINTER.
024400
024500 01  LS-FWORD-1         PIC  9(9) COMP-5.
024600 01  FILLER REDEFINES LS-FWORD-1.
024700     03  FILLER         PIC X(01).
024800     03  LS-BYTE-12     PIC X(01).
024900     03  LS-BYTE-13     PIC X(01).
025000     03  LS-BYTE-14     PIC X(01).
025100 01  FILLER REDEFINES LS-FWORD-1.
025200     03  LS-HWORD-11    PIC  9(4) BINARY.
025300     03  LS-HWORD-12    PIC  9(4) BINARY.
025400 01  LS-FWORD-2         PIC  9(9) COMP-5.
025500 01  FILLER REDEFINES LS-FWORD-2.
025600     03  FILLER         PIC X(03).
025700     03  LS-BYTE-24     PIC X(01).
025800 01  LS-ZDEC-1          PIC  9(2).
025900 01  LS-ZDEC-2          PIC  9(4).
026000
026100 01  LS-USER-MSG-VSTRING.
026200     03  LS-USER-MSG-LEN     PIC S9(4) BINARY.
026300     03  LS-USER-MSG-TEXT    PIC X(120).
026400
026500 01  LS-VSTR.
026600     03  LS-VLEN        PIC S9(4) BINARY.
026700     03  LS-VTXT        PIC X(80).
026800
026900 01  LS-MISC-STORAGE.
027000     03  LS-LESECS0     COMP-2 SYNC.
027100     03  LS-LESECS1     COMP-2 SYNC.
027200     03  LS-LESECS2     COMP-2 SYNC.
027300     03  LS-ENCLAVE-RC  PIC  9(9) BINARY.
027400     03  LS-LEFUNCT     PIC  9(9) BINARY.
027500     03  LS-LEPLATFORM  PIC  9(9) BINARY.
027600     03  LS-LEMSGDEST   PIC S9(9) BINARY.
027700     03  LS-LELILIAN    PIC S9(9) BINARY.
027800     03  LS-LEYEAR      PIC S9(9) BINARY.
027900     03  LS-LEMONTH     PIC S9(9) BINARY.
028000     03  LS-LEDAY       PIC S9(9) BINARY.
028100     03  LS-LEHOUR      PIC S9(9) BINARY.
028200     03  LS-LEMINUTE    PIC S9(9) BINARY.
028300     03  LS-LESECOND    PIC S9(9) BINARY.
028400     03  LS-LEMILLISEC  PIC S9(9) BINARY.
028500     03  LS-LEVERSION   PIC X(06).
028600     03  LS-ASMODULE    PIC X(08).
028700     03  LS-LEMODULE    PIC X(08).
028800     03  LE-PARM-STR         PIC X(80).
028900     03  LE-DATE-PIC-STR     PIC X(80).
029000     03  LE-DTTM-PIC-STR     PIC X(80).
029100     03  LE-TIME-PIC-STR     PIC X(80).
029200
029300 01  ASUDATE-ACTION.
029400     03  I-DATE-ACTION  PIC S9(9) BINARY.
029500       88 I-ACTION-QUERY    VALUE +002.
029600       88 I-ACTION-DIFF     VALUE +005.
029700       88 I-ACTION-INCR     VALUE +006.
029800       88 I-ACTION-DECR     VALUE +007.
029900       88 I-ACTION-FORMAT   VALUE +008.
030000
030100 01  ASUDATE-INPUT.
030200     03  I-DATE-CALENDAR     PIC X(01).
030300       88 I-CALENDAR-DEFAULT     VALUE ' '.
030400       88 I-CALENDAR-ACTUAL      VALUE 'A'.
030500       88 I-CALENDAR-BUSINESS    VALUE 'B'.
030600       88 I-CALENDAR-360         VALUE 'C'.
030700     03  I-DATE-FLDMOD       PIC X(01).
030800       88 I-FLDMOD-DEFAULT       VALUE ' '.
030900       88 I-FLDMOD-DAY           VALUE 'D'.
031000       88 I-FLDMOD-MONTH         VALUE 'M'.
031100       88 I-FLDMOD-WEEK          VALUE 'W'.
031200     03  I-DATE-INCLUDE      PIC X(01).
031300       88 I-INCLUDE-DEFAULT      VALUE ' '.
031400       88 I-INCLUDE-BOTH         VALUE 'B'.
031500       88 I-INCLUDE-FIRST        VALUE 'F'.
031600       88 I-INCLUDE-LAST         VALUE 'L'.
031700       88 I-INCLUDE-NONE         VALUE 'N'.
031800     03  I-DTTM-A            PIC X(14).
031900     03  I-DATE-A-FORMAT     PIC S9(2) BINARY.
032000       88 I-A-FORMAT-YYDDD       VALUE +01.
032100       88 I-A-FORMAT-YYYYDDD     VALUE +02.
032200       88 I-A-FORMAT-DDDYY       VALUE +03.
032300       88 I-A-FORMAT-DDDYYYY     VALUE +04.
032400       88 I-A-FORMAT-YYMMDD      VALUE +10.
032500       88 I-A-FORMAT-YYYYMMDD    VALUE +11.
032600       88 I-A-FORMAT-MMDDYY      VALUE +12.
032700       88 I-A-FORMAT-MMDDYYYY    VALUE +13.
032800       88 I-A-FORMAT-DDMMYY      VALUE +14.
032900       88 I-A-FORMAT-DDMMYYYY    VALUE +15.
033000     03  I-DTTM-B       PIC X(14).
033100     03  I-DATE-B-FORMAT     PIC S9(2) BINARY.
033200       88 I-B-FORMAT-YYDDD       VALUE +01.
033300       88 I-B-FORMAT-YYYYDDD     VALUE +02.
033400       88 I-B-FORMAT-DDDYY       VALUE +03.
033500       88 I-B-FORMAT-DDDYYYY     VALUE +04.
033600       88 I-B-FORMAT-YYMMDD      VALUE +10.
033700       88 I-B-FORMAT-YYYYMMDD    VALUE +11.
033800       88 I-B-FORMAT-MMDDYY      VALUE +12.
033900       88 I-B-FORMAT-MMDDYYYY    VALUE +13.
034000       88 I-B-FORMAT-DDMMYY      VALUE +14.
034100       88 I-B-FORMAT-DDMMYYYY    VALUE +15.
034200     03  I-DATE-INCR-DECR    PIC S9(9) BINARY.
034300     03  I-DATE-FULL-MASK.
034400         05  I-DATE-FULL-MASK-VLEN     PIC S9(4) BINARY.
034500         05  I-DATE-FULL-MASK-VSTR     PIC X(80).
034600     03  I-DATE-ABBR-MASK.
034700         05  I-DATE-ABBR-MASK-VLEN     PIC S9(4) BINARY.
034800         05  I-DATE-ABBR-MASK-VSTR     PIC X(80).
034900
035000 01  ASUDATE-OUTPUT.
035100     03  O-DATE         PIC X(10).
035200     03  O-DATE-CMPR-FLAG    PIC X(02).
035300       88 O-CMPR-FLAG-LT         VALUE 'LT'.
035400       88 O-CMPR-FLAG-EQ         VALUE 'EQ'.
035500       88 O-CMPR-FLAG-GT         VALUE 'GT'.
035600     03  O-DATE-DIFF    PIC S9(9) BINARY.
035700     03  O-DOW          PIC S9(9) BINARY.
035800     03  O-DOW-OCCUR    PIC S9(9) BINARY.
035900     03  O-DATE-FULL-STR.
036000         05  O-DATE-FULL-VLEN     PIC S9(4) BINARY.
036100         05  O-DATE-FULL-VTXT     PIC X(80).
036200     03  O-DATE-ABBR-STR.
036300         05  O-DATE-ABBR-VLEN     PIC S9(4) BINARY.
036400         05  O-DATE-ABBR-VTXT     PIC X(80).
036500
036600 01  LS-DATE-OUTPUT.
036700     03  LS-BDAY        PIC 9(9) BINARY.
036800     03  LS-GREGORIAN   PIC 9(8).
036900     03  LS-JULIAN      PIC 9(7).
037000     03  LS-WEEK        PIC X(10).
037100     03  LS-DOW-NBR     PIC 9(4) BINARY.
037200     03  LS-DOW-TXT     PIC X(9).
037300
037400     COPY AS5CTOK.
037500
037600     COPY AS5MSGRB.
037700
037800     COPY AS5DMPRB.
037900     EJECT
038000 LINKAGE SECTION.
038100     COPY AS5CA.
038200     SKIP1
038300 01  LE-ENV-VAR         PIC X(256).
038400     EJECT
038500 PROCEDURE DIVISION USING
038600     ASCA-COMMAREA.
038700     SKIP2
038800 DECLARATIVES.
038900 0010-00-DEBUG SECTION.
039000     USE FOR DEBUGGING ON ALL PROCEDURES.
039100     SKIP1
039200 0010-10-DEBUG.
039300     DISPLAY DEBUG-ITEM
039400     SKIP1
039500     CONTINUE.
039600*0020-00-DEBUG SECTION.
039700**   USE FOR DEBUGGING ON PARAGRAPH_NAME
039800     SKIP1
039900*0020-10-DEBUG.
040000*    STATEMENTS ...
040100     SKIP1
040200     CONTINUE.
040300*0030-00-DEBUG SECTION.
040400**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
040500     SKIP1
040600*0030-10-DEBUG.
040700*    STATEMENTS ...
040800     SKIP2
040900     CONTINUE.
041000 END DECLARATIVES.
041100     SKIP2
041200     CONTINUE.
041300 0090-00-INITIAL.
041400     DISPLAY WS-PGMID
041500          " Testing ASU services"
041600     SKIP2
041700*    * ------------------------------------------------------- *
041800*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
041900*    * ------------------------------------------------------- *
042000
042100     SET LS-ASCA-PTR TO NULL
042200     MOVE "ASU3I01B" TO LS-ASMODULE
042300     CALL LS-ASMODULE
042400          USING LS-ASCA-PTR
042500**              AS5FDBK-COND-AREA
042600                OMITTED
042700
042800     IF LS-ASCA-PTR = NULL
042900       DISPLAY WS-PGMID
043000            " ASU3I01B failed to create the ASCA"
043100       GOBACK
043200     END-IF
043300
043400     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
043500     DISPLAY " "
043600
043700*    DUMP AS5CA COMMUNICATION AREA
043800     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
043900     MOVE +1 TO AS5DMPRB-NUMBER
044000     MOVE "ASCA COMMAREA"         TO AS5DMPRB-TITLE
044100     MOVE "ASUMDHEX" TO LS-ASMODULE
044200     CALL LS-ASMODULE
044300          USING ASCA-COMMAREA
044400                AS5DMPRB-REQUEST-BLOCK
044500                ASCA-COMMAREA
044600**              AS5FDBK-COND-AREA
044700                OMITTED
044800
044900     DISPLAY ' '
045000
045100     CONTINUE.
045200 0100-00-MAINLINE.
045300     INITIALIZE AS5ENVCA-COMMAREA
045400
045500     INITIALIZE LS-MISC-STORAGE
045600     MOVE +2 TO LS-LEMSGDEST
045700     INITIALIZE ASUDATE-ACTION
045800     INITIALIZE ASUDATE-INPUT
045900     INITIALIZE ASUDATE-OUTPUT
046000
046100     PERFORM 1000-00-INITIAL
046200     PERFORM 2000-00-TEST-DATE
046300     PERFORM 3000-00-TEST-ASU
046400     PERFORM 3100-00-TEST-ASU
046500     PERFORM 4000-00-TEST-DTE
046600     PERFORM 4100-00-TEST-DTE
046700
046800     PERFORM 8000-00-DUMPHEX THRU 8000-99-END
046900
047000     MOVE ZERO TO RETURN-CODE
047100
047200     DISPLAY WS-PGMID
047300          ' STOP RUN/GOBACK/EXIT'
047400     GOBACK
047500
047600     CONTINUE.
047700 1000-00-INITIAL.
047800*    CALL CEE3RPH TO SET LE STORAGE REPORT HEADING
047900     CALL 'CEE3RPH'
048000          USING WS-PRT-HD
048100**              AS5FDBK-COND-AREA
048200                OMITTED
048300
048400*    CALL CEEGPID TO RETURN THE LE VERSION AND PLATFORM ID
048500     CALL 'CEEGPID'
048600          USING LS-FWORD-1
048700                LS-LEPLATFORM
048800**              AS5FDBK-COND-AREA
048900                OMITTED
049000
049100     MOVE ZERO TO LS-FWORD-2 LS-ZDEC-1
049200     MOVE LS-BYTE-12 TO LS-BYTE-24
049300     MOVE LS-FWORD-2 TO LS-ZDEC-1
049400     MOVE LS-ZDEC-1  TO LS-LEVERSION (1:2)
049500     MOVE LS-BYTE-13 TO LS-BYTE-24
049600     MOVE LS-FWORD-2 TO LS-ZDEC-1
049700     MOVE LS-ZDEC-1  TO LS-LEVERSION (3:2)
049800     MOVE LS-BYTE-14 TO LS-BYTE-24
049900     MOVE LS-FWORD-2 TO LS-ZDEC-1
050000     MOVE LS-ZDEC-1  TO LS-LEVERSION (5:2)
050100     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
050200     STRING WS-PGMID
050300          ' CURRENTLY RUNNING VERSION '
050400          LS-LEVERSION
050500          ' OF IBM LE '
050600          DELIMITED SIZE INTO LS-USER-MSG-TEXT
050700     END-STRING
050800     MOVE ZERO TO LS-HWORD-11
050900     INSPECT LS-USER-MSG-TEXT
051000          TALLYING LS-HWORD-11
051100          FOR CHARACTERS BEFORE INITIAL X'00'
051200     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
051300*    CALL CEEMOUT TO PRINT MESSAGE
051400     CALL 'CEEMOUT'
051500          USING LS-USER-MSG-VSTRING
051600                LS-LEMSGDEST
051700**              AS5FDBK-COND-AREA
051800                OMITTED
051900
052000     EVALUATE LS-LEPLATFORM
052100       WHEN 2
052200         DISPLAY WS-PGMID ' UNDER OS/2'
052300       WHEN 3
052400         DISPLAY WS-PGMID ' UNDER MVS/VM/370'
052500       WHEN 4
052600         DISPLAY WS-PGMID ' UNDER AN AS/400'
052700       WHEN 5
052800         DISPLAY WS-PGMID ' UNDER VSE'
052900       WHEN NOT 2 THRU 5
053000         DISPLAY WS-PGMID ' UNKNOWN'
053100     END-EVALUATE
053200
053300*    CALL CEE3CTY TO RETURN THE LE COUNTRY CODE
053400     MOVE 2 TO LS-LEFUNCT
053500     CALL 'CEE3CTY'
053600          USING LS-LEFUNCT
053700                ASCA-CNTRY
053800**              AS5FDBK-COND-AREA
053900                OMITTED
054000
054100     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING.
054200     STRING WS-PGMID
054300          ' THE COUNTRY CODE IS '
054400          ASCA-CNTRY
054500          DELIMITED SIZE INTO LS-USER-MSG-TEXT
054600     END-STRING
054700     MOVE ZERO TO LS-HWORD-11
054800     INSPECT LS-USER-MSG-TEXT
054900          TALLYING LS-HWORD-11
055000          FOR CHARACTERS BEFORE INITIAL X'00'
055100     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
055200*    CALL CEEMOUT TO PRINT MESSAGE
055300     CALL 'CEEMOUT'
055400          USING LS-USER-MSG-VSTRING
055500                LS-LEMSGDEST
055600**              AS5FDBK-COND-AREA
055700                OMITTED
055800
055900*    CALL CEE3LNG TO RETURN THE LE NATIONAL LANGUAGE
056000     MOVE 2 TO LS-LEFUNCT
056100     CALL 'CEE3LNG'
056200          USING LS-LEFUNCT
056300                ASCA-NATL-LANG
056400**              AS5FDBK-COND-AREA
056500                OMITTED
056600
056700     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
056800     STRING WS-PGMID
056900          ' THE LANGUAGE CODE IS '
057000          ASCA-NATL-LANG
057100          DELIMITED SIZE INTO LS-USER-MSG-TEXT
057200     END-STRING
057300     MOVE ZERO TO LS-HWORD-11
057400     INSPECT LS-USER-MSG-TEXT
057500          TALLYING LS-HWORD-11
057600          FOR CHARACTERS BEFORE INITIAL X'00'
057700     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
057800*    CALL CEEMOUT TO PRINT MESSAGE
057900     CALL 'CEEMOUT'
058000          USING LS-USER-MSG-VSTRING
058100                LS-LEMSGDEST
058200**              AS5FDBK-COND-AREA
058300                OMITTED
058400
058500*    CALL CEE3MCS TO RETURN THE LE CURRENCY SYMBOL
058600     MOVE ZERO TO LS-LEFUNCT
058700     CALL 'CEE3MCS'
058800          USING WS-NULL-CNTRY-CODE
058900                ASCA-CNTRY-MCS
059000**              AS5FDBK-COND-AREA
059100                OMITTED
059200
059300     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
059400     STRING WS-PGMID
059500          ' THE CURRENCY SYMBOL IS '
059600          ASCA-CNTRY-MCS
059700          DELIMITED SIZE INTO LS-USER-MSG-TEXT
059800     END-STRING
059900     MOVE ZERO TO LS-HWORD-11
060000     INSPECT LS-USER-MSG-TEXT
060100          TALLYING LS-HWORD-11
060200          FOR CHARACTERS BEFORE INITIAL X'00'
060300     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
060400*    CALL CEEMOUT TO PRINT MESSAGE
060500     CALL 'CEEMOUT'
060600          USING LS-USER-MSG-VSTRING
060700                LS-LEMSGDEST
060800**              AS5FDBK-COND-AREA
060900                OMITTED
061000
061100*    CALL CEE3MDS TO RETURN THE LE DECIMAL SYMBOL
061200     MOVE ZERO TO LS-LEFUNCT
061300     CALL 'CEE3MDS'
061400          USING WS-NULL-CNTRY-CODE
061500                ASCA-CNTRY-MDS
061600**              AS5FDBK-COND-AREA
061700                OMITTED
061800
061900     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
062000     STRING WS-PGMID
062100          ' THE DECIMAL SYMBOL IS '
062200          ASCA-CNTRY-MDS
062300          DELIMITED SIZE INTO LS-USER-MSG-TEXT
062400     END-STRING
062500     MOVE ZERO TO LS-HWORD-11
062600     INSPECT LS-USER-MSG-TEXT
062700          TALLYING LS-HWORD-11
062800          FOR CHARACTERS BEFORE INITIAL X'00'
062900     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
063000*    CALL CEEMOUT TO PRINT MESSAGE
063100     CALL 'CEEMOUT'
063200          USING LS-USER-MSG-VSTRING
063300                LS-LEMSGDEST
063400**              AS5FDBK-COND-AREA
063500                OMITTED
063600
063700*    CALL CEE3MTS TO RETURN THE LE THOUSANDS SYMBOL
063800     MOVE ZERO TO LS-LEFUNCT
063900     CALL 'CEE3MTS'
064000          USING WS-NULL-CNTRY-CODE
064100                ASCA-CNTRY-MTS
064200**              AS5FDBK-COND-AREA
064300                OMITTED
064400
064500     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
064600     STRING WS-PGMID
064700          ' THE THOUSANDS SYMBOL IS '
064800          ASCA-CNTRY-MTS
064900          DELIMITED SIZE INTO LS-USER-MSG-TEXT
065000     END-STRING
065100     MOVE ZERO TO LS-HWORD-11
065200     INSPECT LS-USER-MSG-TEXT
065300          TALLYING LS-HWORD-11
065400          FOR CHARACTERS BEFORE INITIAL X'00'
065500     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
065600*    CALL CEEMOUT TO PRINT MESSAGE
065700     CALL 'CEEMOUT'
065800          USING LS-USER-MSG-VSTRING
065900                LS-LEMSGDEST
066000**              AS5FDBK-COND-AREA
066100                OMITTED
066200
066300*    CALL CEE3PRM TO RETURN THE PARM= STATEMENT STRING
066400     MOVE ZERO TO LS-LEFUNCT
066500     CALL 'CEE3PRM'
066600          USING LE-PARM-STR
066700**              AS5FDBK-COND-AREA
066800                OMITTED
066900
067000     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
067100     STRING WS-PGMID
067200          ' THE PARM STRING IS '
067300          LE-PARM-STR
067400          DELIMITED SIZE INTO LS-USER-MSG-TEXT
067500     END-STRING
067600     MOVE ZERO TO LS-HWORD-11
067700     INSPECT LS-USER-MSG-TEXT
067800          TALLYING LS-HWORD-11
067900          FOR CHARACTERS BEFORE INITIAL X'00'
068000     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
068100*    CALL CEEMOUT TO PRINT MESSAGE
068200     CALL 'CEEMOUT'
068300          USING LS-USER-MSG-VSTRING
068400                LS-LEMSGDEST
068500**              AS5FDBK-COND-AREA
068600                OMITTED
068700
068800*    CALL CEEQCEN TO RETURN THE CENTURY WINDOW
068900     CALL 'CEEQCEN'
069000          USING LS-FWORD-1
069100**              AS5FDBK-COND-AREA
069200                OMITTED
069300
069400     MOVE LS-FWORD-1 TO LS-ZDEC-2
069500     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
069600     STRING WS-PGMID
069700          ' THE DEFAULT CENTURY WINDOW IS '
069800          LS-ZDEC-2
069900          DELIMITED SIZE INTO LS-USER-MSG-TEXT
070000     END-STRING
070100     MOVE ZERO TO LS-HWORD-11
070200     INSPECT LS-USER-MSG-TEXT
070300          TALLYING LS-HWORD-11
070400          FOR CHARACTERS BEFORE INITIAL X'00'
070500     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
070600*    CALL CEEMOUT TO PRINT MESSAGE
070700     CALL 'CEEMOUT'
070800          USING LS-USER-MSG-VSTRING
070900                LS-LEMSGDEST
071000**              AS5FDBK-COND-AREA
071100                OMITTED
071200
071300*    CALL CEEFMDA TO RETURN THE LE DATE FORMAT
071400     MOVE ZERO TO LS-LEFUNCT
071500     CALL 'CEEFMDA'
071600          USING WS-NULL-CNTRY-CODE
071700                LE-DATE-PIC-STR
071800**              AS5FDBK-COND-AREA
071900                OMITTED
072000
072100     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
072200     STRING WS-PGMID
072300          ' THE DEFAULT DATE FORMAT IS '
072400          LE-DATE-PIC-STR
072500          DELIMITED SIZE INTO LS-USER-MSG-TEXT
072600     END-STRING
072700     MOVE ZERO TO LS-HWORD-11
072800     INSPECT LS-USER-MSG-TEXT
072900          TALLYING LS-HWORD-11
073000          FOR CHARACTERS BEFORE INITIAL X'00'
073100     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
073200*    CALL CEEMOUT TO PRINT MESSAGE
073300     CALL 'CEEMOUT'
073400          USING LS-USER-MSG-VSTRING
073500                LS-LEMSGDEST
073600**              AS5FDBK-COND-AREA
073700                OMITTED
073800
073900*    CALL CEEFMDT TO RETURN THE LE DATE/TIME FORMAT
074000     MOVE ZERO TO LS-LEFUNCT
074100     CALL 'CEEFMDT'
074200          USING WS-NULL-CNTRY-CODE
074300                LE-DTTM-PIC-STR
074400**              AS5FDBK-COND-AREA
074500                OMITTED
074600
074700     MOVE LOW-VALUES TO LS-USER-MSG-VSTRING
074800     STRING WS-PGMID
074900          ' THE DEFAULT DATE/TIME FORMAT IS '
075000          LE-DTTM-PIC-STR
075100          DELIMITED SIZE INTO LS-USER-MSG-TEXT
075200     END-STRING
075300     MOVE ZERO TO LS-HWORD-11
075400     INSPECT LS-USER-MSG-TEXT
075500          TALLYING LS-HWORD-11
075600          FOR CHARACTERS BEFORE INITIAL X'00'
075700     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
075800*    CALL CEEMOUT TO PRINT MESSAGE
075900     CALL 'CEEMOUT'
076000          USING LS-USER-MSG-VSTRING
076100                LS-LEMSGDEST
076200**              AS5FDBK-COND-AREA
076300                OMITTED
076400
076500*    CALL CEEFMTM TO RETURN THE LE TIME FORMAT
076600     MOVE ZERO TO LS-LEFUNCT
076700     CALL 'CEEFMTM'
076800          USING WS-NULL-CNTRY-CODE
076900                LE-TIME-PIC-STR
077000**              AS5FDBK-COND-AREA
077100                OMITTED
077200
077300     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
077400     STRING WS-PGMID
077500          ' THE DEFAULT TIME FORMAT IS '
077600          LE-TIME-PIC-STR
077700          DELIMITED SIZE INTO LS-USER-MSG-TEXT
077800     END-STRING
077900     MOVE ZERO TO LS-HWORD-11
078000     INSPECT LS-USER-MSG-TEXT
078100          TALLYING LS-HWORD-11
078200          FOR CHARACTERS BEFORE INITIAL X'00'
078300     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
078400*    CALL CEEMOUT TO PRINT MESSAGE
078500     CALL 'CEEMOUT'
078600          USING LS-USER-MSG-VSTRING
078700                LS-LEMSGDEST
078800**              AS5FDBK-COND-AREA
078900                OMITTED
079000
079100*    CALL LE SERVICE(S) TO RETURN NBR OF SECONDS
079200*    FROM 15821015 TO 19700101
079300     MOVE 1970 TO LS-LEYEAR
079400     MOVE   01 TO LS-LEMONTH
079500     MOVE   01 TO LS-LEDAY
079600     MOVE ZERO TO LS-LEHOUR
079700                  LS-LEMINUTE
079800                  LS-LESECOND
079900                  LS-LEMILLISEC
080000     CALL 'CEEISEC'
080100          USING LS-LEYEAR
080200                LS-LEMONTH
080300                LS-LEDAY
080400                LS-LEHOUR
080500                LS-LEMINUTE
080600                LS-LESECOND
080700                LS-LEMILLISEC
080800                LS-LESECS2
080900**              AS5FDBK-COND-AREA
081000                OMITTED
081100
081200*    CALL LE SERVICE(S) TO RETURN NBR OF SECONDS FROM 15821015
081300     CALL 'CEEGMT'
081400          USING LS-LELILIAN
081500                LS-LESECS1
081600**              AS5FDBK-COND-AREA
081700                OMITTED
081800
081900     DISPLAY ' '
082000     DISPLAY WS-PGMID
082100          ' NBR OF SECONDS FROM 15821015 TO TODAY    = '
082200          LS-LESECS1
082300     DISPLAY WS-PGMID
082400          ' NBR OF SECONDS FROM 15821015 TO 19700101 = '
082500          LS-LESECS2
082600     COMPUTE LS-FWORD-2 = LS-LESECS1 - LS-LESECS2
082700     DISPLAY WS-PGMID
082800          ' NBR OF SECONDS FROM 19700101 = ' LS-FWORD-2
082900     DISPLAY ' '
083000
083100*    CALL C/C++ FUNCTION TO RETIEVE THE NBR SECS FROM 1970101
083200     MOVE ZERO TO LS-FWORD-1
083300     CALL 'TIME'
083400          USING BY VALUE ADDRESS OF LS-FWORD-1
083500     DISPLAY WS-PGMID
083600          ' NBR OF SECONDS FROM 19700101 = ' LS-FWORD-1
083700     CALL 'CTIME'
083800          USING BY VALUE ADDRESS OF LS-FWORD-1
083900          RETURNING LS-VAR-PTR1
084000     IF LS-VAR-PTR1 NOT = NULL
084100       SET ADDRESS OF LE-ENV-VAR TO LS-VAR-PTR1
084200       DISPLAY WS-PGMID
084300            ' DATE/TIME = ' LE-ENV-VAR (1:24)
084400     END-IF
084500
084600     DISPLAY ' '
084700
084800*    CALL C/C++ FUNCTION TO RETIEVE A LE ENV VARIABLE
084900     SET LS-VAR-PTR TO ADDRESS OF KEYWORD-LE-ENVAR-1
085000     CALL 'GETENV'
085100          USING BY VALUE LS-VAR-PTR
085200          RETURNING XS-VAR-PTR
085300     IF XS-VAR-PTR = NULL
085400       DISPLAY WS-PGMID
085500            ' ENV VAR TZ NOT FOUND'
085600     ELSE
085700       SET ADDRESS OF LE-ENV-VAR TO XS-VAR-PTR
085800       MOVE ZERO TO LS-HWORD-11
085900       INSPECT LE-ENV-VAR
086000            TALLYING LS-HWORD-11
086100            FOR CHARACTERS BEFORE INITIAL X'00'
086200       MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
086300       STRING WS-PGMID
086400            ' ENV VAR TZ IS '
086500            LE-ENV-VAR (1:LS-HWORD-11)
086600            DELIMITED SIZE INTO LS-USER-MSG-TEXT
086700       END-STRING
086800       MOVE ZERO TO LS-HWORD-11
086900       INSPECT LS-USER-MSG-TEXT
087000            TALLYING LS-HWORD-11
087100            FOR CHARACTERS BEFORE INITIAL X'00'
087200       MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
087300*      CALL CEEMOUT TO PRINT MESSAGE
087400       CALL 'CEEMOUT'
087500            USING LS-USER-MSG-VSTRING
087600                  LS-LEMSGDEST
087700**                AS5FDBK-COND-AREA
087800                  OMITTED
087900     END-IF
088000
088100*    CALL CEESETL TO SET THE LOCALE FOR DATE ROUTINE
088200     MOVE +14              TO LS-VLEN
088300     MOVE 'En_US.IBM-1047' TO LS-VTXT
088400**   MOVE +14              TO LS-VLEN
088500**   MOVE 'Es_CR.IBM-1047' TO LS-VTXT
088600     CALL 'CEESETL'
088700          USING LS-VSTR
088800                LC-ALL
088900**              AS5FDBK-COND-AREA
089000                OMITTED
089100
089200     MOVE LOW-VALUE  TO LS-USER-MSG-VSTRING
089300     STRING WS-PGMID
089400          ' SET LOCALE TO: '
089500          LS-VTXT (1:LS-VLEN)
089600          DELIMITED SIZE INTO LS-USER-MSG-TEXT
089700     END-STRING
089800     MOVE ZERO TO LS-HWORD-11
089900     INSPECT LS-USER-MSG-TEXT
090000          TALLYING LS-HWORD-11
090100          FOR CHARACTERS BEFORE INITIAL X'00'
090200     MOVE LS-HWORD-11 TO LS-USER-MSG-LEN
090300*    CALL CEEMOUT TO PRINT MESSAGE
090400     CALL 'CEEMOUT'
090500          USING LS-USER-MSG-VSTRING
090600                LS-LEMSGDEST
090700**              AS5FDBK-COND-AREA
090800                OMITTED
090900
091000     DISPLAY ' '
091100
091200*    QUERY ENVIRONMENT INFORMATION
091300     MOVE WS-PGMID TO AS5ENVCA-CSV-IPGM
091400     MOVE 2 TO LS-LEFUNCT
091500     MOVE 'ASU3QEIB' TO LS-ASMODULE
091600     CALL LS-ASMODULE
091700          USING ASCA-COMMAREA
091800                LS-LEFUNCT
091900                AS5ENVCA-COMMAREA
092000**              AS5FDBK-COND-AREA
092100                OMITTED
092200
092300*    DUMP ASU3QEIB COMMUNICATION AREA
092400     MOVE LENGTH OF AS5ENVCA-COMMAREA TO AS5DMPRB-DATA-LEN
092500     MOVE +2 TO AS5DMPRB-NUMBER
092600     MOVE 'ENVIRONMENT INFORMATION' TO AS5DMPRB-TITLE
092700     MOVE 'ASUMDHEX' TO LS-ASMODULE
092800     CALL LS-ASMODULE
092900          USING ASCA-COMMAREA
093000                AS5DMPRB-REQUEST-BLOCK
093100                AS5ENVCA-COMMAREA
093200**              AS5FDBK-COND-AREA
093300                OMITTED
093400
093500     DISPLAY ' '
093600
093700*    QUERY ENVIRONMENT INFORMATION
093800     MOVE 5 TO LS-LEFUNCT
093900     MOVE 'ASU3QEIB' TO LS-ASMODULE
094000     CALL LS-ASMODULE
094100          USING ASCA-COMMAREA
094200                LS-LEFUNCT
094300                AS5ENVCA-COMMAREA
094400**              AS5FDBK-COND-AREA
094500                OMITTED
094600
094700     DISPLAY ' '
094800
094900     CONTINUE.
095000 1000-99-END.
095100     EXIT.
095200
095300     CONTINUE.
095400 2000-00-TEST-DATE.
095500*    TEST DATE QUERY
095600     DISPLAY WS-PGMID
095700          ' 1. TESTING DATE QUERY'
095800     SET I-ACTION-QUERY TO TRUE
095900     SET I-CALENDAR-ACTUAL TO TRUE
096000     SET I-FLDMOD-DAY TO TRUE
096100     SET I-INCLUDE-BOTH TO TRUE
096200     MOVE '12302004' TO I-DTTM-A
096300     SET I-A-FORMAT-MMDDYYYY TO TRUE
096400     MOVE 'ASTDATEB' TO LS-ASMODULE
096500     CALL LS-ASMODULE
096600          USING ASCA-COMMAREA
096700                ASUDATE-ACTION
096800                ASUDATE-INPUT
096900                ASUDATE-OUTPUT
097000                AS5FDBK-COND-AREA
097100**              OMITTED
097200
097300     DISPLAY WS-PGMID
097400          ' ACTUAL DAY BOTH 12302004 MMDDYYYY'
097500     DISPLAY WS-PGMID
097600          ' DATE QUERY = '
097700          I-DTTM-A
097800          '  COMPARE FLAG = '
097900          O-DATE-CMPR-FLAG
098000          '  DAY OF WEEK = '
098100          O-DOW
098200          '  DAY OF WEEK OCCUR = '
098300          O-DOW-OCCUR
098400     DISPLAY WS-PGMID
098500          ' FULL DATE: '
098600          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
098700     DISPLAY WS-PGMID
098800          ' ABBR DATE: '
098900          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
099000
099100     DISPLAY ' '
099200
099300*    TEST DATE QUERY
099400     DISPLAY WS-PGMID
099500          ' 2. TESTING DATE QUERY'
099600     SET I-ACTION-QUERY TO TRUE
099700     SET I-CALENDAR-ACTUAL TO TRUE
099800     SET I-FLDMOD-DAY TO TRUE
099900     SET I-INCLUDE-BOTH TO TRUE
100000     MOVE '01012005' TO I-DTTM-A
100100     SET I-A-FORMAT-MMDDYYYY TO TRUE
100200     MOVE 'ASTDATEB' TO LS-ASMODULE
100300     CALL LS-ASMODULE
100400          USING ASCA-COMMAREA
100500                ASUDATE-ACTION
100600                ASUDATE-INPUT
100700                ASUDATE-OUTPUT
100800                AS5FDBK-COND-AREA
100900**              OMITTED
101000
101100     DISPLAY WS-PGMID
101200          ' ACTUAL DAY BOTH 01012005 MMDDYYYY'
101300     DISPLAY WS-PGMID
101400          ' DATE QUERY = '
101500          I-DTTM-A
101600          '  COMPARE FLAG = '
101700          O-DATE-CMPR-FLAG
101800          '  DAY OF WEEK = '
101900          O-DOW
102000          '  DAY OF WEEK OCCUR = '
102100          O-DOW-OCCUR
102200     DISPLAY WS-PGMID
102300          ' FULL DATE: '
102400          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
102500     DISPLAY WS-PGMID
102600          ' ABBR DATE: '
102700          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
102800     DISPLAY ' '
102900
103000*    TEST DATE QUERY
103100     DISPLAY WS-PGMID
103200          ' 3. TESTING DATE QUERY'
103300     SET I-ACTION-QUERY TO TRUE
103400     SET I-CALENDAR-ACTUAL TO TRUE
103500     SET I-FLDMOD-DAY TO TRUE
103600     SET I-INCLUDE-BOTH TO TRUE
103700     MOVE '01032005121212' TO I-DTTM-A
103800     SET I-A-FORMAT-MMDDYYYY TO TRUE
103900     MOVE 'ASTDATEB' TO LS-ASMODULE
104000     CALL LS-ASMODULE
104100          USING ASCA-COMMAREA
104200                ASUDATE-ACTION
104300                ASUDATE-INPUT
104400                ASUDATE-OUTPUT
104500                AS5FDBK-COND-AREA
104600**              OMITTED
104700
104800     DISPLAY WS-PGMID
104900          ' ACTUAL DAY BOTH 01032005121212 MMDDYYYY'
105000     DISPLAY WS-PGMID
105100          ' DATE QUERY = '
105200          I-DTTM-A
105300          '  COMPARE FLAG = '
105400          O-DATE-CMPR-FLAG
105500          '  DAY OF WEEK = '
105600          O-DOW
105700          '  DAY OF WEEK OCCUR = '
105800          O-DOW-OCCUR
105900     DISPLAY WS-PGMID
106000          ' FULL DATE: '
106100          O-DATE-FULL-VTXT (1:O-DATE-FULL-VLEN)
106200     DISPLAY WS-PGMID
106300          ' ABBR DATE: '
106400          O-DATE-ABBR-VTXT (1:O-DATE-ABBR-VLEN)
106500     DISPLAY ' '
106600
106700*    TEST DATE DIFF
106800     DISPLAY WS-PGMID
106900          ' 4. TESTING DATE DIFFERENCE - 09121956 12102001'
107000     SET I-ACTION-DIFF TO TRUE
107100     SET I-CALENDAR-ACTUAL TO TRUE
107200     SET I-FLDMOD-DAY TO TRUE
107300     SET I-INCLUDE-BOTH TO TRUE
107400     MOVE '09121956' TO I-DTTM-A
107500     SET I-A-FORMAT-MMDDYYYY TO TRUE
107600     MOVE '12102001' TO I-DTTM-B
107700     SET I-B-FORMAT-MMDDYYYY TO TRUE
107800     MOVE 'ASTDATEB' TO LS-ASMODULE
107900     CALL LS-ASMODULE
108000          USING ASCA-COMMAREA
108100                ASUDATE-ACTION
108200                ASUDATE-INPUT
108300                ASUDATE-OUTPUT
108400                AS5FDBK-COND-AREA
108500**              OMITTED
108600
108700     DISPLAY WS-PGMID
108800          ' ACTUAL DAY BOTH 09121956 MMDDYYYY 12102001 MMDDYYYY'
108900     DISPLAY WS-PGMID
109000          ' DATE DIFFERENCE = '
109100          O-DATE-DIFF
109200          '  COMPARE FLAG = '
109300          O-DATE-CMPR-FLAG
109400     DISPLAY ' '
109500
109600*    TEST DATE INCR
109700     DISPLAY WS-PGMID
109800          ' 5. TESTING DATE INCREMENT - 01012001+120'
109900     SET I-ACTION-INCR TO TRUE
110000     SET I-CALENDAR-ACTUAL TO TRUE
110100     SET I-FLDMOD-DAY TO TRUE
110200     SET I-INCLUDE-DEFAULT TO TRUE
110300     MOVE '01012001' TO I-DTTM-A
110400     SET I-A-FORMAT-MMDDYYYY TO TRUE
110500     MOVE +120 TO I-DATE-INCR-DECR
110600     MOVE 'ASTDATEB' TO LS-ASMODULE
110700     CALL LS-ASMODULE
110800          USING ASCA-COMMAREA
110900                ASUDATE-ACTION
111000                ASUDATE-INPUT
111100                ASUDATE-OUTPUT
111200                AS5FDBK-COND-AREA
111300**              OMITTED
111400
111500     DISPLAY WS-PGMID
111600          ' ACTUAL DAY DEFAULT 01012001 MMDDYYYY +120'
111700     DISPLAY WS-PGMID
111800          ' DATE INCR = '
111900          O-DATE
112000          '  COMPARE FLAG = '
112100          O-DATE-CMPR-FLAG
112200     DISPLAY ' '
112300
112400*    TEST DATE DECR
112500     DISPLAY WS-PGMID
112600          ' 6. TESTING DATE DECREMENT - 12102001-120'
112700     SET I-ACTION-DECR TO TRUE
112800     SET I-CALENDAR-ACTUAL TO TRUE
112900     SET I-FLDMOD-DAY TO TRUE
113000     SET I-INCLUDE-DEFAULT TO TRUE
113100     MOVE '12102001' TO I-DTTM-A
113200     SET I-A-FORMAT-MMDDYYYY TO TRUE
113300     MOVE +120 TO I-DATE-INCR-DECR
113400     MOVE 'ASTDATEB' TO LS-ASMODULE
113500     CALL LS-ASMODULE
113600          USING ASCA-COMMAREA
113700                ASUDATE-ACTION
113800                ASUDATE-INPUT
113900                ASUDATE-OUTPUT
114000                AS5FDBK-COND-AREA
114100**              OMITTED
114200
114300     DISPLAY WS-PGMID
114400          ' ACTUAL DAY DEFAULT 12102001 MMDDYYYY -120'
114500     DISPLAY WS-PGMID
114600          ' DATE DECR ='
114700          O-DATE
114800          '  COMPARE FLAG = '
114900          O-DATE-CMPR-FLAG
115000     DISPLAY ' '
115100
115200*    TEST DATE FORMAT
115300     DISPLAY WS-PGMID
115400          ' 7. TESTING DATE FORMAT'
115500     SET I-ACTION-FORMAT TO TRUE
115600     SET I-CALENDAR-ACTUAL TO TRUE
115700     SET I-FLDMOD-DAY TO TRUE
115800     SET I-INCLUDE-DEFAULT TO TRUE
115900     MOVE '01302001' TO I-DTTM-A
116000     SET I-A-FORMAT-MMDDYYYY TO TRUE
116100     MOVE SPACE      TO I-DTTM-B
116200     SET I-B-FORMAT-YYYYMMDD TO TRUE
116300     MOVE 'ASTDATEB' TO LS-ASMODULE
116400     CALL LS-ASMODULE
116500          USING ASCA-COMMAREA
116600                ASUDATE-ACTION
116700                ASUDATE-INPUT
116800                ASUDATE-OUTPUT
116900                AS5FDBK-COND-AREA
117000**              OMITTED
117100
117200     DISPLAY WS-PGMID
117300          ' DATE FORMAT 1 = '
117400          I-DTTM-A
117500          '  DATE FORMAT 2 = '
117600          I-DTTM-B
117700          '  DATE = '
117800          O-DATE
117900     DISPLAY ' '
118000
118100*    TEST INVALID REQUEST
118200     DISPLAY WS-PGMID
118300          ' 8. TESTING INVALID ACTION'
118400     MOVE +9 TO I-DATE-ACTION
118500     SET I-CALENDAR-ACTUAL TO TRUE
118600     SET I-FLDMOD-DAY TO TRUE
118700     SET I-INCLUDE-DEFAULT TO TRUE
118800     MOVE '01302001' TO I-DTTM-A
118900     SET I-A-FORMAT-MMDDYYYY TO TRUE
119000     MOVE '20171212' TO I-DTTM-B
119100     SET I-B-FORMAT-YYYYMMDD TO TRUE
119200     MOVE 'ASTDATEB' TO LS-ASMODULE
119300     CALL LS-ASMODULE
119400          USING ASCA-COMMAREA
119500                ASUDATE-ACTION
119600                ASUDATE-INPUT
119700                ASUDATE-OUTPUT
119800                AS5FDBK-COND-AREA
119900**              OMITTED
120000
120100     CONTINUE.
120200 2000-99-END.
120300     EXIT.
120400
120500     CONTINUE.
120600 3000-00-TEST-ASU.
120700*    TEST ASU DATE ROUTINES
120800     DISPLAY " "
120900     DISPLAY WS-PGMID
121000          " 1. TESTING DATE ASUG2JDB - 15821015/1582288, error"
121100     MOVE ZERO TO LS-JULIAN
121200     CALL WS-ASUG2JDB
121300          USING ASCA-COMMAREA
121400                WS-G15821015
121500                LS-JULIAN
121600**              AS5FDBK-COND-AREA
121700                OMITTED
121800
121900     MOVE ZERO TO LS-ENCLAVE-RC
122000     MOVE "CEE3GRC" TO LS-LEMODULE
122100     CALL LS-LEMODULE
122200          USING LS-ENCLAVE-RC
122300                OMITTED
122400     IF LS-ENCLAVE-RC > ZERO
122500       DISPLAY WS-PGMID
122600            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
122700     END-IF
122800
122900     DISPLAY WS-PGMID
123000          "    INPUT GREGORIAN: " WS-G15821015
123100          "  OUTPUT JULIAN: " LS-JULIAN
123200
123300     DISPLAY WS-PGMID
123400          " 2. TESTING DATE ASUJ2GDB - 1582288/15821015, error"
123500     MOVE ZERO TO LS-GREGORIAN
123600     CALL WS-ASUJ2GDB
123700          USING ASCA-COMMAREA
123800                WS-J1582288
123900                LS-GREGORIAN
124000**              AS5FDBK-COND-AREA
124100                OMITTED
124200
124300     MOVE ZERO TO LS-ENCLAVE-RC
124400     MOVE "CEE3GRC" TO LS-LEMODULE
124500     CALL LS-LEMODULE
124600          USING LS-ENCLAVE-RC
124700                OMITTED
124800     IF LS-ENCLAVE-RC > ZERO
124900       DISPLAY WS-PGMID
125000            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
125100     END-IF
125200
125300     DISPLAY WS-PGMID
125400          "    INPUT JULIAN: " WS-J1582288
125500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
125600
125700     DISPLAY WS-PGMID
125800          " 3. TESTING DATE ASUJ2BDB - 1582288/577735, error"
125900     MOVE ZERO TO LS-BDAY
126000     CALL WS-ASUJ2BDB
126100          USING ASCA-COMMAREA
126200                WS-J1582288
126300                LS-BDAY
126400**              AS5FDBK-COND-AREA
126500                OMITTED
126600
126700     MOVE ZERO TO LS-ENCLAVE-RC
126800     MOVE "CEE3GRC" TO LS-LEMODULE
126900     CALL LS-LEMODULE
127000          USING LS-ENCLAVE-RC
127100                OMITTED
127200     IF LS-ENCLAVE-RC > ZERO
127300       DISPLAY WS-PGMID
127400            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
127500     END-IF
127600
127700     DISPLAY WS-PGMID
127800          "    INPUT JULIAN: " WS-J1582288
127900          "  OUTPUT BASE: " LS-BDAY
128000
128100     DISPLAY WS-PGMID
128200          " 4. TESTING DATE ASUB2JDB - 577735/1582288"
128300     MOVE ZERO TO LS-JULIAN
128400     CALL WS-ASUB2JDB
128500          USING ASCA-COMMAREA
128600                WS-B577735
128700                LS-JULIAN
128800**              AS5FDBK-COND-AREA
128900                OMITTED
129000
129100     MOVE ZERO TO LS-ENCLAVE-RC
129200     MOVE "CEE3GRC" TO LS-LEMODULE
129300     CALL LS-LEMODULE
129400          USING LS-ENCLAVE-RC
129500                OMITTED
129600     IF LS-ENCLAVE-RC > ZERO
129700       DISPLAY WS-PGMID
129800            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
129900     END-IF
130000
130100     DISPLAY WS-PGMID
130200          "    INPUT BASE: " WS-B577735
130300          "  OUTPUT JULIAN: " LS-JULIAN
130400
130500     DISPLAY WS-PGMID
130600          " 5. TESTING DATE ASUJ2WDB - 1582288/      , error"
130700     MOVE SPACE TO LS-WEEK
130800     CALL WS-ASUJ2WDB
130900          USING ASCA-COMMAREA
131000                WS-J1582288
131100                LS-WEEK
131200**              AS5FDBK-COND-AREA
131300                OMITTED
131400
131500     MOVE ZERO TO LS-ENCLAVE-RC
131600     MOVE "CEE3GRC" TO LS-LEMODULE
131700     CALL LS-LEMODULE
131800          USING LS-ENCLAVE-RC
131900                OMITTED
132000     IF LS-ENCLAVE-RC > ZERO
132100       DISPLAY WS-PGMID
132200            " LE/COBOL RETURN CODE: " LS-ENCLAVE-RC
132300     END-IF
132400
132500     DISPLAY WS-PGMID
132600          "    INPUT JULIAN: " WS-J1582288
132700          "  OUTPUT WEEK: " LS-WEEK
132800
132900     DISPLAY " "
133000     DISPLAY WS-PGMID
133100          " 1. TESTING DATE ASUG2JDB - 15830101/1583001"
133200     MOVE ZERO TO LS-JULIAN
133300     CALL WS-ASUG2JDB
133400          USING ASCA-COMMAREA
133500                WS-G15830101
133600                LS-JULIAN
133700**              AS5FDBK-COND-AREA
133800                OMITTED
133900
134000     DISPLAY WS-PGMID
134100          "    INPUT GREGORIAN: " WS-G15830101
134200          "  OUTPUT JULIAN: " LS-JULIAN
134300
134400     DISPLAY WS-PGMID
134500          " 2. TESTING DATE ASUJ2GDB - 1583001/15830101"
134600     MOVE ZERO TO LS-GREGORIAN
134700     CALL WS-ASUJ2GDB
134800          USING ASCA-COMMAREA
134900                WS-J1583001
135000                LS-GREGORIAN
135100**              AS5FDBK-COND-AREA
135200                OMITTED
135300
135400     DISPLAY WS-PGMID
135500          "    INPUT JULIAN: " WS-J1583001
135600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
135700
135800     DISPLAY WS-PGMID
135900          " 3. TESTING DATE ASUJ2BDB - 1583001/577813"
136000     MOVE ZERO TO LS-BDAY
136100     CALL WS-ASUJ2BDB
136200          USING ASCA-COMMAREA
136300                WS-J1583001
136400                LS-BDAY
136500**              AS5FDBK-COND-AREA
136600                OMITTED
136700
136800     DISPLAY WS-PGMID
136900          "    INPUT JULIAN: " WS-J1583001
137000          "  OUTPUT BASE: " LS-BDAY
137100
137200     DISPLAY WS-PGMID
137300          " 4. TESTING DATE ASUB2JDB - 577813/1583001"
137400     MOVE ZERO TO LS-JULIAN
137500     CALL WS-ASUB2JDB
137600          USING ASCA-COMMAREA
137700                WS-B577813
137800                LS-JULIAN
137900**              AS5FDBK-COND-AREA
138000                OMITTED
138100
138200     DISPLAY WS-PGMID
138300          "    INPUT BASE: " WS-B577813
138400          "  OUTPUT JULIAN: " LS-JULIAN
138500
138600     DISPLAY WS-PGMID
138700          " 5. TESTING DATE ASUJ2WDB - 1583001/1582-W52-6"
138800     MOVE SPACE TO LS-WEEK
138900     CALL WS-ASUJ2WDB
139000          USING ASCA-COMMAREA
139100                WS-J1583001
139200                LS-WEEK
139300**              AS5FDBK-COND-AREA
139400                OMITTED
139500
139600     DISPLAY WS-PGMID
139700          "    INPUT JULIAN: " WS-J1583001
139800          "  OUTPUT WEEK: " LS-WEEK
139900
140000     DISPLAY WS-PGMID
140100          " 6. TESTING DATE ASUW2JDB - 1583 01/1583003"
140200     MOVE SPACE TO LS-WEEK
140300     CALL WS-ASUW2JDB
140400          USING ASCA-COMMAREA
140500                WS-Y1583
140600                WS-W01
140700                LS-JULIAN
140800**              AS5FDBK-COND-AREA
140900                OMITTED
141000
141100     DISPLAY WS-PGMID
141200          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W01
141300          "  OUTPUT JULIAN: " LS-JULIAN
141400
141500     DISPLAY " "
141600     DISPLAY WS-PGMID
141700          " 1. TESTING DATE ASUG2JDB - 15830228/1583059"
141800     MOVE ZERO TO LS-JULIAN
141900     CALL WS-ASUG2JDB
142000          USING ASCA-COMMAREA
142100                WS-G15830228
142200                LS-JULIAN
142300**              AS5FDBK-COND-AREA
142400                OMITTED
142500
142600     DISPLAY WS-PGMID
142700          "    INPUT GREGORIAN: " WS-G15830228
142800          "  OUTPUT JULIAN: " LS-JULIAN
142900
143000     DISPLAY WS-PGMID
143100          " 2. TESTING DATE ASUJ2GDB - 1583059/15830228"
143200     MOVE ZERO TO LS-GREGORIAN
143300     CALL WS-ASUJ2GDB
143400          USING ASCA-COMMAREA
143500                WS-J1583059
143600                LS-GREGORIAN
143700**              AS5FDBK-COND-AREA
143800                OMITTED
143900
144000     DISPLAY WS-PGMID
144100          "    INPUT JULIAN: " WS-J1583059
144200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
144300
144400     DISPLAY WS-PGMID
144500          " 3. TESTING DATE ASUJ2BDB - 1583059/577871"
144600     MOVE ZERO TO LS-BDAY
144700     CALL WS-ASUJ2BDB
144800          USING ASCA-COMMAREA
144900                WS-J1583059
145000                LS-BDAY
145100**              AS5FDBK-COND-AREA
145200                OMITTED
145300
145400     DISPLAY WS-PGMID
145500          "    INPUT JULIAN: " WS-J1583059
145600          "  OUTPUT BASE: " LS-BDAY
145700
145800     DISPLAY WS-PGMID
145900          " 4. TESTING DATE ASUB2JDB - 577871/1583059"
146000     MOVE ZERO TO LS-JULIAN
146100     CALL WS-ASUB2JDB
146200          USING ASCA-COMMAREA
146300                WS-B577871
146400                LS-JULIAN
146500**              AS5FDBK-COND-AREA
146600                OMITTED
146700
146800     DISPLAY WS-PGMID
146900          "    INPUT BASE: " WS-B577871
147000          "  OUTPUT JULIAN: " LS-JULIAN
147100
147200     DISPLAY WS-PGMID
147300          " 5. TESTING DATE ASUJ2WDB - 1583059/1583-W09-1"
147400     MOVE SPACE TO LS-WEEK
147500     CALL WS-ASUJ2WDB
147600          USING ASCA-COMMAREA
147700                WS-J1583059
147800                LS-WEEK
147900**              AS5FDBK-COND-AREA
148000                OMITTED
148100
148200     DISPLAY WS-PGMID
148300          "    INPUT JULIAN: " WS-J1583059
148400          "  OUTPUT WEEK: " LS-WEEK
148500
148600     DISPLAY WS-PGMID
148700          " 6. TESTING DATE ASUW2JDB - 1583 09/1583059"
148800     MOVE SPACE TO LS-WEEK
148900     CALL WS-ASUW2JDB
149000          USING ASCA-COMMAREA
149100                WS-Y1583
149200                WS-W09
149300                LS-JULIAN
149400**              AS5FDBK-COND-AREA
149500                OMITTED
149600
149700     DISPLAY WS-PGMID
149800          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W09
149900          "  OUTPUT JULIAN: " LS-JULIAN
150000
150100     DISPLAY " "
150200     DISPLAY WS-PGMID
150300          " 1. TESTING DATE ASUG2JDB - 15830301/1583060"
150400     MOVE ZERO TO LS-JULIAN
150500     CALL WS-ASUG2JDB
150600          USING ASCA-COMMAREA
150700                WS-G15830301
150800                LS-JULIAN
150900**              AS5FDBK-COND-AREA
151000                OMITTED
151100
151200     DISPLAY WS-PGMID
151300          "    INPUT GREGORIAN: " WS-G15830301
151400          "  OUTPUT JULIAN: " LS-JULIAN
151500
151600     DISPLAY WS-PGMID
151700          " 2. TESTING DATE ASUJ2GDB - 1583060/15830301"
151800     MOVE ZERO TO LS-GREGORIAN
151900     CALL WS-ASUJ2GDB
152000          USING ASCA-COMMAREA
152100                WS-J1583060
152200                LS-GREGORIAN
152300**              AS5FDBK-COND-AREA
152400                OMITTED
152500
152600     DISPLAY WS-PGMID
152700          "    INPUT JULIAN: " WS-J1583060
152800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
152900
153000     DISPLAY WS-PGMID
153100          " 3. TESTING DATE ASUJ2BDB - 1583060/577872"
153200     MOVE ZERO TO LS-BDAY
153300     CALL WS-ASUJ2BDB
153400          USING ASCA-COMMAREA
153500                WS-J1583060
153600                LS-BDAY
153700**              AS5FDBK-COND-AREA
153800                OMITTED
153900
154000     DISPLAY WS-PGMID
154100          "    INPUT JULIAN: " WS-J1583060
154200          "  OUTPUT BASE: " LS-BDAY
154300
154400     DISPLAY WS-PGMID
154500          " 4. TESTING DATE ASUB2JDB - 577872/1583060"
154600     MOVE ZERO TO LS-JULIAN
154700     CALL WS-ASUB2JDB
154800          USING ASCA-COMMAREA
154900                WS-B577872
155000                LS-JULIAN
155100**              AS5FDBK-COND-AREA
155200                OMITTED
155300
155400     DISPLAY WS-PGMID
155500          "    INPUT BASE: " WS-B577872
155600          "  OUTPUT JULIAN: " LS-JULIAN
155700
155800     DISPLAY WS-PGMID
155900          " 5. TESTING DATE ASUJ2WDB - 1583060/1583-W09-2"
156000     MOVE SPACE TO LS-WEEK
156100     CALL WS-ASUJ2WDB
156200          USING ASCA-COMMAREA
156300                WS-J1583060
156400                LS-WEEK
156500**              AS5FDBK-COND-AREA
156600                OMITTED
156700
156800     DISPLAY WS-PGMID
156900          "    INPUT JULIAN: " WS-J1583060
157000          "  OUTPUT WEEK: " LS-WEEK
157100
157200     DISPLAY WS-PGMID
157300          " 6. TESTING DATE ASUW2JDB - 1583 09/1583059"
157400     MOVE SPACE TO LS-WEEK
157500     CALL WS-ASUW2JDB
157600          USING ASCA-COMMAREA
157700                WS-Y1583
157800                WS-W09
157900                LS-JULIAN
158000**              AS5FDBK-COND-AREA
158100                OMITTED
158200
158300     DISPLAY WS-PGMID
158400          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W09
158500          "  OUTPUT JULIAN: " LS-JULIAN
158600
158700     DISPLAY " "
158800     DISPLAY WS-PGMID
158900          " 1. TESTING DATE ASUG2JDB - 15831231/1583365"
159000     MOVE ZERO TO LS-JULIAN
159100     CALL WS-ASUG2JDB
159200          USING ASCA-COMMAREA
159300                WS-G15831231
159400                LS-JULIAN
159500**              AS5FDBK-COND-AREA
159600                OMITTED
159700
159800     DISPLAY WS-PGMID
159900          "    INPUT GREGORIAN: " WS-G15831231
160000          "  OUTPUT JULIAN: " LS-JULIAN
160100
160200     DISPLAY WS-PGMID
160300          " 2. TESTING DATE ASUJ2GDB - 1583365/15831231"
160400     MOVE ZERO TO LS-GREGORIAN
160500     CALL WS-ASUJ2GDB
160600          USING ASCA-COMMAREA
160700                WS-J1583365
160800                LS-GREGORIAN
160900**              AS5FDBK-COND-AREA
161000                OMITTED
161100
161200     DISPLAY WS-PGMID
161300          "    INPUT JULIAN: " WS-J1583365
161400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
161500
161600     DISPLAY WS-PGMID
161700          " 3. TESTING DATE ASUJ2BDB - 1583365/578177"
161800     MOVE ZERO TO LS-BDAY
161900     CALL WS-ASUJ2BDB
162000          USING ASCA-COMMAREA
162100                WS-J1583365
162200                LS-BDAY
162300**              AS5FDBK-COND-AREA
162400                OMITTED
162500
162600     DISPLAY WS-PGMID
162700          "    INPUT JULIAN: " WS-J1583365
162800          "  OUTPUT BASE: " LS-BDAY
162900
163000     DISPLAY WS-PGMID
163100          " 4. TESTING DATE ASUB2JDB - 578177/1583365"
163200     MOVE ZERO TO LS-JULIAN
163300     CALL WS-ASUB2JDB
163400          USING ASCA-COMMAREA
163500                WS-B578177
163600                LS-JULIAN
163700**              AS5FDBK-COND-AREA
163800                OMITTED
163900
164000     DISPLAY WS-PGMID
164100          "    INPUT BASE: " WS-B578177
164200          "  OUTPUT JULIAN: " LS-JULIAN
164300
164400     DISPLAY WS-PGMID
164500          " 5. TESTING DATE ASUJ2WDB - 1583365/1583-W52-6"
164600     MOVE SPACE TO LS-WEEK
164700     CALL WS-ASUJ2WDB
164800          USING ASCA-COMMAREA
164900                WS-J1583365
165000                LS-WEEK
165100**              AS5FDBK-COND-AREA
165200                OMITTED
165300
165400     DISPLAY WS-PGMID
165500          "    INPUT JULIAN: " WS-J1583365
165600          "  OUTPUT WEEK: " LS-WEEK
165700
165800     DISPLAY WS-PGMID
165900          " 6. TESTING DATE ASUW2JDB - 1583 52/1582360"
166000     MOVE SPACE TO LS-WEEK
166100     CALL WS-ASUW2JDB
166200          USING ASCA-COMMAREA
166300                WS-Y1583
166400                WS-W52
166500                LS-JULIAN
166600**              AS5FDBK-COND-AREA
166700                OMITTED
166800
166900     DISPLAY WS-PGMID
167000          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W52
167100          "  OUTPUT JULIAN: " LS-JULIAN
167200
167300     DISPLAY " "
167400     DISPLAY WS-PGMID
167500          " 1. TESTING DATE ASUG2JDB - 16010101/1601001"
167600     MOVE ZERO TO LS-JULIAN
167700     CALL WS-ASUG2JDB
167800          USING ASCA-COMMAREA
167900                WS-G16010101
168000                LS-JULIAN
168100**              AS5FDBK-COND-AREA
168200                OMITTED
168300
168400     DISPLAY WS-PGMID
168500          "    INPUT GREGORIAN: " WS-G16010101
168600          "  OUTPUT JULIAN: " LS-JULIAN
168700
168800     DISPLAY WS-PGMID
168900          " 2. TESTING DATE ASUJ2GDB - 1601001/16010101"
169000     MOVE ZERO TO LS-GREGORIAN
169100     CALL WS-ASUJ2GDB
169200          USING ASCA-COMMAREA
169300                WS-J1601001
169400                LS-GREGORIAN
169500**              AS5FDBK-COND-AREA
169600                OMITTED
169700
169800     DISPLAY WS-PGMID
169900          "    INPUT JULIAN: " WS-J1601001
170000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
170100
170200     DISPLAY WS-PGMID
170300          " 3. TESTING DATE ASUJ2BDB - 1601001/584388"
170400     MOVE ZERO TO LS-BDAY
170500     CALL WS-ASUJ2BDB
170600          USING ASCA-COMMAREA
170700                WS-J1601001
170800                LS-BDAY
170900**              AS5FDBK-COND-AREA
171000                OMITTED
171100
171200     DISPLAY WS-PGMID
171300          "    INPUT JULIAN: " WS-J1601001
171400          "  OUTPUT BASE: " LS-BDAY
171500
171600     DISPLAY WS-PGMID
171700          " 4. TESTING DATE ASUB2JDB - 584388/1601001"
171800     MOVE ZERO TO LS-JULIAN
171900     CALL WS-ASUB2JDB
172000          USING ASCA-COMMAREA
172100                WS-B584388
172200                LS-JULIAN
172300**              AS5FDBK-COND-AREA
172400                OMITTED
172500
172600     DISPLAY WS-PGMID
172700          "    INPUT BASE: " WS-B584388
172800          "  OUTPUT JULIAN: " LS-JULIAN
172900
173000     DISPLAY WS-PGMID
173100          " 5. TESTING DATE ASUJ2WDB - 1601001/1601-W01-1"
173200     MOVE SPACE TO LS-WEEK
173300     CALL WS-ASUJ2WDB
173400          USING ASCA-COMMAREA
173500                WS-J1601001
173600                LS-WEEK
173700**              AS5FDBK-COND-AREA
173800                OMITTED
173900
174000     DISPLAY WS-PGMID
174100          "    INPUT JULIAN: " WS-J1601001
174200          "  OUTPUT WEEK: " LS-WEEK
174300
174400     DISPLAY WS-PGMID
174500          " 6. TESTING DATE ASUW2JDB - 1601 01/1601001"
174600     MOVE SPACE TO LS-WEEK
174700     CALL WS-ASUW2JDB
174800          USING ASCA-COMMAREA
174900                WS-Y1601
175000                WS-W01
175100                LS-JULIAN
175200**              AS5FDBK-COND-AREA
175300                OMITTED
175400
175500     DISPLAY WS-PGMID
175600          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W01
175700          "  OUTPUT JULIAN: " LS-JULIAN
175800
175900     DISPLAY " "
176000     DISPLAY WS-PGMID
176100          " 1. TESTING DATE ASUG2JDB - 16010228/1601059"
176200     MOVE ZERO TO LS-JULIAN
176300     CALL WS-ASUG2JDB
176400          USING ASCA-COMMAREA
176500                WS-G16010228
176600                LS-JULIAN
176700**              AS5FDBK-COND-AREA
176800                OMITTED
176900
177000     DISPLAY WS-PGMID
177100          "    INPUT GREGORIAN: " WS-G16010228
177200          "  OUTPUT JULIAN: " LS-JULIAN
177300
177400     DISPLAY WS-PGMID
177500          " 2. TESTING DATE ASUJ2GDB - 1601059/16010228"
177600     MOVE ZERO TO LS-GREGORIAN
177700     CALL WS-ASUJ2GDB
177800          USING ASCA-COMMAREA
177900                WS-J1601059
178000                LS-GREGORIAN
178100**              AS5FDBK-COND-AREA
178200                OMITTED
178300
178400     DISPLAY WS-PGMID
178500          "    INPUT JULIAN: " WS-J1601059
178600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
178700
178800     DISPLAY WS-PGMID
178900          " 3. TESTING DATE ASUJ2BDB - 1601059/584446"
179000     MOVE ZERO TO LS-BDAY
179100     CALL WS-ASUJ2BDB
179200          USING ASCA-COMMAREA
179300                WS-J1601059
179400                LS-BDAY
179500**              AS5FDBK-COND-AREA
179600                OMITTED
179700
179800     DISPLAY WS-PGMID
179900          "    INPUT JULIAN: " WS-J1601059
180000          "  OUTPUT BASE: " LS-BDAY
180100
180200     DISPLAY WS-PGMID
180300          " 4. TESTING DATE ASUB2JDB - 584446/1601059"
180400     MOVE ZERO TO LS-JULIAN
180500     CALL WS-ASUB2JDB
180600          USING ASCA-COMMAREA
180700                WS-B584446
180800                LS-JULIAN
180900**              AS5FDBK-COND-AREA
181000                OMITTED
181100
181200     DISPLAY WS-PGMID
181300          "    INPUT BASE: " WS-B584446
181400          "  OUTPUT JULIAN: " LS-JULIAN
181500
181600     DISPLAY WS-PGMID
181700          " 5. TESTING DATE ASUJ2WDB - 1601059/1601-W09-3"
181800     MOVE SPACE TO LS-WEEK
181900     CALL WS-ASUJ2WDB
182000          USING ASCA-COMMAREA
182100                WS-J1601059
182200                LS-WEEK
182300**              AS5FDBK-COND-AREA
182400                OMITTED
182500
182600     DISPLAY WS-PGMID
182700          "    INPUT JULIAN: " WS-J1601059
182800          "  OUTPUT WEEK: " LS-WEEK
182900
183000     DISPLAY WS-PGMID
183100          " 6. TESTING DATE ASUW2JDB - 1601 09/1601057"
183200     MOVE SPACE TO LS-WEEK
183300     CALL WS-ASUW2JDB
183400          USING ASCA-COMMAREA
183500                WS-Y1601
183600                WS-W09
183700                LS-JULIAN
183800**              AS5FDBK-COND-AREA
183900                OMITTED
184000
184100     DISPLAY WS-PGMID
184200          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W09
184300          "  OUTPUT JULIAN: " LS-JULIAN
184400
184500     DISPLAY " "
184600     DISPLAY WS-PGMID
184700          " 1. TESTING DATE ASUG2JDB - 16010301/1601060"
184800     MOVE ZERO TO LS-JULIAN
184900     CALL WS-ASUG2JDB
185000          USING ASCA-COMMAREA
185100                WS-G16010301
185200                LS-JULIAN
185300**              AS5FDBK-COND-AREA
185400                OMITTED
185500
185600     DISPLAY WS-PGMID
185700          "    INPUT GREGORIAN: " WS-G16010301
185800          "  OUTPUT JULIAN: " LS-JULIAN
185900
186000     DISPLAY WS-PGMID
186100          " 2. TESTING DATE ASUJ2GDB - 1601060/16010301"
186200     MOVE ZERO TO LS-GREGORIAN
186300     CALL WS-ASUJ2GDB
186400          USING ASCA-COMMAREA
186500                WS-J1601060
186600                LS-GREGORIAN
186700**              AS5FDBK-COND-AREA
186800                OMITTED
186900
187000     DISPLAY WS-PGMID
187100          "    INPUT JULIAN: " WS-J1601060
187200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
187300
187400     DISPLAY WS-PGMID
187500          " 3. TESTING DATE ASUJ2BDB - 1601060/584447"
187600     MOVE ZERO TO LS-BDAY
187700     CALL WS-ASUJ2BDB
187800          USING ASCA-COMMAREA
187900                WS-J1601060
188000                LS-BDAY
188100**              AS5FDBK-COND-AREA
188200                OMITTED
188300
188400     DISPLAY WS-PGMID
188500          "    INPUT JULIAN: " WS-J1601060
188600          "  OUTPUT BASE: " LS-BDAY
188700
188800     DISPLAY WS-PGMID
188900          " 4. TESTING DATE ASUB2JDB - 584447/1601060"
189000     MOVE ZERO TO LS-JULIAN
189100     CALL WS-ASUB2JDB
189200          USING ASCA-COMMAREA
189300                WS-B584447
189400                LS-JULIAN
189500**              AS5FDBK-COND-AREA
189600                OMITTED
189700
189800     DISPLAY WS-PGMID
189900          "    INPUT BASE: " WS-B584447
190000          "  OUTPUT JULIAN: " LS-JULIAN
190100
190200     DISPLAY WS-PGMID
190300          " 5. TESTING DATE ASUJ2WDB - 1601060/1601-W09-4"
190400     MOVE SPACE TO LS-WEEK
190500     CALL WS-ASUJ2WDB
190600          USING ASCA-COMMAREA
190700                WS-J1601060
190800                LS-WEEK
190900**              AS5FDBK-COND-AREA
191000                OMITTED
191100
191200     DISPLAY WS-PGMID
191300          "    INPUT JULIAN: " WS-J1601060
191400          "  OUTPUT WEEK: " LS-WEEK
191500
191600     DISPLAY WS-PGMID
191700          " 6. TESTING DATE ASUW2JDB - 1601 09/1601057"
191800     MOVE SPACE TO LS-WEEK
191900     CALL WS-ASUW2JDB
192000          USING ASCA-COMMAREA
192100                WS-Y1601
192200                WS-W09
192300                LS-JULIAN
192400**              AS5FDBK-COND-AREA
192500                OMITTED
192600
192700     DISPLAY WS-PGMID
192800          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W09
192900          "  OUTPUT JULIAN: " LS-JULIAN
193000
193100     DISPLAY " "
193200     DISPLAY WS-PGMID
193300          " 1. TESTING DATE ASUG2JDB - 16011231/1601365"
193400     MOVE ZERO TO LS-JULIAN
193500     CALL WS-ASUG2JDB
193600          USING ASCA-COMMAREA
193700                WS-G16011231
193800                LS-JULIAN
193900**              AS5FDBK-COND-AREA
194000                OMITTED
194100
194200     DISPLAY WS-PGMID
194300          "    INPUT GREGORIAN: " WS-G16011231
194400          "  OUTPUT JULIAN: " LS-JULIAN
194500
194600     DISPLAY WS-PGMID
194700          " 2. TESTING DATE ASUJ2GDB - 1601365/16011231"
194800     MOVE ZERO TO LS-GREGORIAN
194900     CALL WS-ASUJ2GDB
195000          USING ASCA-COMMAREA
195100                WS-J1601365
195200                LS-GREGORIAN
195300**              AS5FDBK-COND-AREA
195400                OMITTED
195500
195600     DISPLAY WS-PGMID
195700          "    INPUT JULIAN: " WS-J1601365
195800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
195900
196000     DISPLAY WS-PGMID
196100          " 3. TESTING DATE ASUJ2BDB - 1601365/584752"
196200     MOVE ZERO TO LS-BDAY
196300     CALL WS-ASUJ2BDB
196400          USING ASCA-COMMAREA
196500                WS-J1601365
196600                LS-BDAY
196700**              AS5FDBK-COND-AREA
196800                OMITTED
196900
197000     DISPLAY WS-PGMID
197100          "    INPUT JULIAN: " WS-J1601365
197200          "  OUTPUT BASE: " LS-BDAY
197300
197400     DISPLAY WS-PGMID
197500          " 4. TESTING DATE ASUB2JDB - 584752/1601365"
197600     MOVE ZERO TO LS-JULIAN
197700     CALL WS-ASUB2JDB
197800          USING ASCA-COMMAREA
197900                WS-B584752
198000                LS-JULIAN
198100**              AS5FDBK-COND-AREA
198200                OMITTED
198300
198400     DISPLAY WS-PGMID
198500          "    INPUT BASE: " WS-B584752
198600          "  OUTPUT JULIAN: " LS-JULIAN
198700
198800     DISPLAY WS-PGMID
198900          " 5. TESTING DATE ASUJ2WDB - 1601365/1601-W53-1"
199000     MOVE SPACE TO LS-WEEK
199100     CALL WS-ASUJ2WDB
199200          USING ASCA-COMMAREA
199300                WS-J1601365
199400                LS-WEEK
199500**              AS5FDBK-COND-AREA
199600                OMITTED
199700
199800     DISPLAY WS-PGMID
199900          "    INPUT JULIAN: " WS-J1601365
200000          "  OUTPUT WEEK: " LS-WEEK
200100
200200     DISPLAY WS-PGMID
200300          " 6. TESTING DATE ASUW2JDB - 1601 53/1601365"
200400     MOVE SPACE TO LS-WEEK
200500     CALL WS-ASUW2JDB
200600          USING ASCA-COMMAREA
200700                WS-Y1601
200800                WS-W53
200900                LS-JULIAN
201000**              AS5FDBK-COND-AREA
201100                OMITTED
201200
201300     DISPLAY WS-PGMID
201400          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W53
201500          "  OUTPUT JULIAN: " LS-JULIAN
201600
201700     DISPLAY " "
201800     DISPLAY WS-PGMID
201900          " 1. TESTING DATE ASUG2JDB - 18750520/1875140"
202000     MOVE ZERO TO LS-JULIAN
202100     CALL WS-ASUG2JDB
202200          USING ASCA-COMMAREA
202300                WS-G18750520
202400                LS-JULIAN
202500**              AS5FDBK-COND-AREA
202600                OMITTED
202700
202800     DISPLAY WS-PGMID
202900          "    INPUT GREGORIAN: " WS-G18750520
203000          "  OUTPUT JULIAN: " LS-JULIAN
203100
203200     DISPLAY WS-PGMID
203300          " 2. TESTING DATE ASUJ2GDB - 1875140/18750520"
203400     MOVE ZERO TO LS-GREGORIAN
203500     CALL WS-ASUJ2GDB
203600          USING ASCA-COMMAREA
203700                WS-J1875140
203800                LS-GREGORIAN
203900**              AS5FDBK-COND-AREA
204000                OMITTED
204100
204200     DISPLAY WS-PGMID
204300          "    INPUT JULIAN: " WS-J1875140
204400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
204500
204600     DISPLAY WS-PGMID
204700          " 3. TESTING DATE ASUJ2BDB - 1875140/684603"
204800     MOVE ZERO TO LS-BDAY
204900     CALL WS-ASUJ2BDB
205000          USING ASCA-COMMAREA
205100                WS-J1875140
205200                LS-BDAY
205300**              AS5FDBK-COND-AREA
205400                OMITTED
205500
205600     DISPLAY WS-PGMID
205700          "    INPUT JULIAN: " WS-J1875140
205800          "  OUTPUT BASE: " LS-BDAY
205900
206000     DISPLAY WS-PGMID
206100          " 4. TESTING DATE ASUB2JDB - 684603/1875140"
206200     MOVE ZERO TO LS-JULIAN
206300     CALL WS-ASUB2JDB
206400          USING ASCA-COMMAREA
206500                WS-B684603
206600                LS-JULIAN
206700**              AS5FDBK-COND-AREA
206800                OMITTED
206900
207000     DISPLAY WS-PGMID
207100          "    INPUT BASE: " WS-B684603
207200          "  OUTPUT JULIAN: " LS-JULIAN
207300
207400     DISPLAY WS-PGMID
207500          " 5. TESTING DATE ASUJ2WDB - 1875140/1875-W20-4"
207600     MOVE SPACE TO LS-WEEK
207700     CALL WS-ASUJ2WDB
207800          USING ASCA-COMMAREA
207900                WS-J1875140
208000                LS-WEEK
208100**              AS5FDBK-COND-AREA
208200                OMITTED
208300
208400     DISPLAY WS-PGMID
208500          "    INPUT JULIAN: " WS-J1875140
208600          "  OUTPUT WEEK: " LS-WEEK
208700
208800     DISPLAY WS-PGMID
208900          " 6. TESTING DATE ASUW2JDB - 1875 20/1875137"
209000     MOVE SPACE TO LS-WEEK
209100     CALL WS-ASUW2JDB
209200          USING ASCA-COMMAREA
209300                WS-Y1875
209400                WS-W20
209500                LS-JULIAN
209600**              AS5FDBK-COND-AREA
209700                OMITTED
209800
209900     DISPLAY WS-PGMID
210000          "    INPUT YEAR: " WS-Y1875 " WEEK: " WS-W20
210100          "  OUTPUT JULIAN: " LS-JULIAN
210200
210300     DISPLAY " "
210400     DISPLAY WS-PGMID
210500          " 1. TESTING DATE ASUG2JDB - 18751231/1875365"
210600     MOVE ZERO TO LS-JULIAN
210700     CALL WS-ASUG2JDB
210800          USING ASCA-COMMAREA
210900                WS-G18751231
211000                LS-JULIAN
211100**              AS5FDBK-COND-AREA
211200                OMITTED
211300
211400     DISPLAY WS-PGMID
211500          "    INPUT GREGORIAN: " WS-G18751231
211600          "  OUTPUT JULIAN: " LS-JULIAN
211700
211800     DISPLAY WS-PGMID
211900          " 2. TESTING DATE ASUJ2GDB - 1875365/18751231"
212000     MOVE ZERO TO LS-GREGORIAN
212100     CALL WS-ASUJ2GDB
212200          USING ASCA-COMMAREA
212300                WS-J1875365
212400                LS-GREGORIAN
212500**              AS5FDBK-COND-AREA
212600                OMITTED
212700
212800     DISPLAY WS-PGMID
212900          "    INPUT JULIAN: " WS-J1875365
213000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
213100
213200     DISPLAY WS-PGMID
213300          " 3. TESTING DATE ASUJ2BDB - 1875365/684828"
213400     MOVE ZERO TO LS-BDAY
213500     CALL WS-ASUJ2BDB
213600          USING ASCA-COMMAREA
213700                WS-J1875365
213800                LS-BDAY
213900**              AS5FDBK-COND-AREA
214000                OMITTED
214100
214200     DISPLAY WS-PGMID
214300          "    INPUT JULIAN: " WS-J1875365
214400          "  OUTPUT BASE: " LS-BDAY
214500
214600     DISPLAY WS-PGMID
214700          " 4. TESTING DATE ASUB2JDB - 684828/1875365"
214800     MOVE ZERO TO LS-JULIAN
214900     CALL WS-ASUB2JDB
215000          USING ASCA-COMMAREA
215100                WS-B684828
215200                LS-JULIAN
215300**              AS5FDBK-COND-AREA
215400                OMITTED
215500
215600     DISPLAY WS-PGMID
215700          "    INPUT BASE: " WS-B684828
215800          "  OUTPUT JULIAN: " LS-JULIAN
215900
216000     DISPLAY WS-PGMID
216100          " 5. TESTING DATE ASUJ2WDB - 1875365/1875-W52-5"
216200     MOVE SPACE TO LS-WEEK
216300     CALL WS-ASUJ2WDB
216400          USING ASCA-COMMAREA
216500                WS-J1875365
216600                LS-WEEK
216700**              AS5FDBK-COND-AREA
216800                OMITTED
216900
217000     DISPLAY WS-PGMID
217100          "    INPUT JULIAN: " WS-J1875365
217200          "  OUTPUT WEEK: " LS-WEEK
217300
217400     DISPLAY WS-PGMID
217500          " 6. TESTING DATE ASUW2JDB - 1875 52/1875361"
217600     MOVE SPACE TO LS-WEEK
217700     CALL WS-ASUW2JDB
217800          USING ASCA-COMMAREA
217900                WS-Y1875
218000                WS-W52
218100                LS-JULIAN
218200**              AS5FDBK-COND-AREA
218300                OMITTED
218400
218500     DISPLAY WS-PGMID
218600          "    INPUT YEAR: " WS-Y1875 " WEEK: " WS-W52
218700          "  OUTPUT JULIAN: " LS-JULIAN
218800
218900     DISPLAY " "
219000     DISPLAY WS-PGMID
219100          " 1. TESTING DATE ASUG2JDB - 19000101/1900001"
219200     MOVE ZERO TO LS-JULIAN
219300     CALL WS-ASUG2JDB
219400          USING ASCA-COMMAREA
219500                WS-G19000101
219600                LS-JULIAN
219700**              AS5FDBK-COND-AREA
219800                OMITTED
219900
220000     DISPLAY WS-PGMID
220100          "    INPUT GREGORIAN: " WS-G19000101
220200          "  OUTPUT JULIAN: " LS-JULIAN
220300
220400     DISPLAY WS-PGMID
220500          " 2. TESTING DATE ASUJ2GDB - 1900001/19000101"
220600     MOVE ZERO TO LS-GREGORIAN
220700     CALL WS-ASUJ2GDB
220800          USING ASCA-COMMAREA
220900                WS-J1900001
221000                LS-GREGORIAN
221100**              AS5FDBK-COND-AREA
221200                OMITTED
221300
221400     DISPLAY WS-PGMID
221500          "    INPUT JULIAN: " WS-J1900001
221600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
221700
221800     DISPLAY WS-PGMID
221900          " 3. TESTING DATE ASUJ2BDB - 1900001/693595"
222000     MOVE ZERO TO LS-BDAY
222100     CALL WS-ASUJ2BDB
222200          USING ASCA-COMMAREA
222300                WS-J1900001
222400                LS-BDAY
222500**              AS5FDBK-COND-AREA
222600                OMITTED
222700
222800     DISPLAY WS-PGMID
222900          "    INPUT JULIAN: " WS-J1900001
223000          "  OUTPUT BASE: " LS-BDAY
223100
223200     DISPLAY WS-PGMID
223300          " 4. TESTING DATE ASUB2JDB - 693595/1900001"
223400     MOVE ZERO TO LS-JULIAN
223500     CALL WS-ASUB2JDB
223600          USING ASCA-COMMAREA
223700                WS-B693595
223800                LS-JULIAN
223900**              AS5FDBK-COND-AREA
224000                OMITTED
224100
224200     DISPLAY WS-PGMID
224300          "    INPUT BASE: " WS-B693595
224400          "  OUTPUT JULIAN: " LS-JULIAN
224500
224600     DISPLAY WS-PGMID
224700          " 5. TESTING DATE ASUJ2WDB - 1900001/1900-W01-1"
224800     MOVE SPACE TO LS-WEEK
224900     CALL WS-ASUJ2WDB
225000          USING ASCA-COMMAREA
225100                WS-J1900001
225200                LS-WEEK
225300**              AS5FDBK-COND-AREA
225400                OMITTED
225500
225600     DISPLAY WS-PGMID
225700          "    INPUT JULIAN: " WS-J1900001
225800          "  OUTPUT WEEK: " LS-WEEK
225900
226000     DISPLAY WS-PGMID
226100          " 6. TESTING DATE ASUW2JDB - 1900 01/1900001"
226200     MOVE SPACE TO LS-WEEK
226300     CALL WS-ASUW2JDB
226400          USING ASCA-COMMAREA
226500                WS-Y1900
226600                WS-W01
226700                LS-JULIAN
226800**              AS5FDBK-COND-AREA
226900                OMITTED
227000
227100     DISPLAY WS-PGMID
227200          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W01
227300          "  OUTPUT JULIAN: " LS-JULIAN
227400
227500     DISPLAY " "
227600     DISPLAY WS-PGMID
227700          " 1. TESTING DATE ASUG2JDB - 19000228/1900059"
227800     MOVE ZERO TO LS-JULIAN
227900     CALL WS-ASUG2JDB
228000          USING ASCA-COMMAREA
228100                WS-G19000228
228200                LS-JULIAN
228300**              AS5FDBK-COND-AREA
228400                OMITTED
228500
228600     DISPLAY WS-PGMID
228700          "    INPUT GREGORIAN: " WS-G19000228
228800          "  OUTPUT JULIAN: " LS-JULIAN
228900
229000     DISPLAY WS-PGMID
229100          " 2. TESTING DATE ASUJ2GDB - 1900059/19000228"
229200     MOVE ZERO TO LS-GREGORIAN
229300     CALL WS-ASUJ2GDB
229400          USING ASCA-COMMAREA
229500                WS-J1900059
229600                LS-GREGORIAN
229700**              AS5FDBK-COND-AREA
229800                OMITTED
229900
230000     DISPLAY WS-PGMID
230100          "    INPUT JULIAN: " WS-J1900059
230200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
230300
230400     DISPLAY WS-PGMID
230500          " 3. TESTING DATE ASUJ2BDB - 1900059/693653"
230600     MOVE ZERO TO LS-BDAY
230700     CALL WS-ASUJ2BDB
230800          USING ASCA-COMMAREA
230900                WS-J1900059
231000                LS-BDAY
231100**              AS5FDBK-COND-AREA
231200                OMITTED
231300
231400     DISPLAY WS-PGMID
231500          "    INPUT JULIAN: " WS-J1900059
231600          "  OUTPUT BASE: " LS-BDAY
231700
231800     DISPLAY WS-PGMID
231900          " 4. TESTING DATE ASUB2JDB - 693653/1900059"
232000     MOVE ZERO TO LS-JULIAN
232100     CALL WS-ASUB2JDB
232200          USING ASCA-COMMAREA
232300                WS-B693653
232400                LS-JULIAN
232500**              AS5FDBK-COND-AREA
232600                OMITTED
232700
232800     DISPLAY WS-PGMID
232900          "    INPUT BASE: " WS-B693653
233000          "  OUTPUT JULIAN: " LS-JULIAN
233100
233200     DISPLAY WS-PGMID
233300          " 5. TESTING DATE ASUJ2WDB - 1900059/1900-W09-3"
233400     MOVE SPACE TO LS-WEEK
233500     CALL WS-ASUJ2WDB
233600          USING ASCA-COMMAREA
233700                WS-J1900059
233800                LS-WEEK
233900**              AS5FDBK-COND-AREA
234000                OMITTED
234100
234200     DISPLAY WS-PGMID
234300          "    INPUT JULIAN: " WS-J1900059
234400          "  OUTPUT WEEK: " LS-WEEK
234500
234600     DISPLAY WS-PGMID
234700          " 6. TESTING DATE ASUW2JDB - 1900 09/1900057"
234800     MOVE SPACE TO LS-WEEK
234900     CALL WS-ASUW2JDB
235000          USING ASCA-COMMAREA
235100                WS-Y1900
235200                WS-W09
235300                LS-JULIAN
235400**              AS5FDBK-COND-AREA
235500                OMITTED
235600
235700     DISPLAY WS-PGMID
235800          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W09
235900          "  OUTPUT JULIAN: " LS-JULIAN
236000
236100     DISPLAY " "
236200     DISPLAY WS-PGMID
236300          " 1. TESTING DATE ASUG2JDB - 19000301/1900060"
236400     MOVE ZERO TO LS-JULIAN
236500     CALL WS-ASUG2JDB
236600          USING ASCA-COMMAREA
236700                WS-G19000301
236800                LS-JULIAN
236900**              AS5FDBK-COND-AREA
237000                OMITTED
237100
237200     DISPLAY WS-PGMID
237300          "    INPUT GREGORIAN: " WS-G19000301
237400          "  OUTPUT JULIAN: " LS-JULIAN
237500
237600     DISPLAY WS-PGMID
237700          " 2. TESTING DATE ASUJ2GDB - 1900060/19000301"
237800     MOVE ZERO TO LS-GREGORIAN
237900     CALL WS-ASUJ2GDB
238000          USING ASCA-COMMAREA
238100                WS-J1900060
238200                LS-GREGORIAN
238300**              AS5FDBK-COND-AREA
238400                OMITTED
238500
238600     DISPLAY WS-PGMID
238700          "    INPUT JULIAN: " WS-J1900060
238800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
238900
239000     DISPLAY WS-PGMID
239100          " 3. TESTING DATE ASUJ2BDB - 1900060/693654"
239200     MOVE ZERO TO LS-BDAY
239300     CALL WS-ASUJ2BDB
239400          USING ASCA-COMMAREA
239500                WS-J1900060
239600                LS-BDAY
239700**              AS5FDBK-COND-AREA
239800                OMITTED
239900
240000     DISPLAY WS-PGMID
240100          "    INPUT JULIAN: " WS-J1900060
240200          "  OUTPUT BASE: " LS-BDAY
240300
240400     DISPLAY WS-PGMID
240500          " 4. TESTING DATE ASUB2JDB - 693654/1900060"
240600     MOVE ZERO TO LS-JULIAN
240700     CALL WS-ASUB2JDB
240800          USING ASCA-COMMAREA
240900                WS-B693654
241000                LS-JULIAN
241100**              AS5FDBK-COND-AREA
241200                OMITTED
241300
241400     DISPLAY WS-PGMID
241500          "    INPUT BASE: " WS-B693654
241600          "  OUTPUT JULIAN: " LS-JULIAN
241700
241800     DISPLAY WS-PGMID
241900          " 5. TESTING DATE ASUJ2WDB - 1900060/1900-W09-4"
242000     MOVE SPACE TO LS-WEEK
242100     CALL WS-ASUJ2WDB
242200          USING ASCA-COMMAREA
242300                WS-J1900060
242400                LS-WEEK
242500**              AS5FDBK-COND-AREA
242600                OMITTED
242700
242800     DISPLAY WS-PGMID
242900          "    INPUT JULIAN: " WS-J1900060
243000          "  OUTPUT WEEK: " LS-WEEK
243100
243200     DISPLAY WS-PGMID
243300          " 6. TESTING DATE ASUW2JDB - 1900 09/1900057"
243400     MOVE SPACE TO LS-WEEK
243500     CALL WS-ASUW2JDB
243600          USING ASCA-COMMAREA
243700                WS-Y1900
243800                WS-W09
243900                LS-JULIAN
244000**              AS5FDBK-COND-AREA
244100                OMITTED
244200
244300     DISPLAY WS-PGMID
244400          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W09
244500          "  OUTPUT JULIAN: " LS-JULIAN
244600
244700     DISPLAY " "
244800     DISPLAY WS-PGMID
244900          " 1. TESTING DATE ASUG2JDB - 19001231/1900365"
245000     MOVE ZERO TO LS-JULIAN
245100     CALL WS-ASUG2JDB
245200          USING ASCA-COMMAREA
245300                WS-G19001231
245400                LS-JULIAN
245500**              AS5FDBK-COND-AREA
245600                OMITTED
245700
245800     DISPLAY WS-PGMID
245900          "    INPUT GREGORIAN: " WS-G19001231
246000          "  OUTPUT JULIAN: " LS-JULIAN
246100
246200     DISPLAY WS-PGMID
246300          " 2. TESTING DATE ASUJ2GDB - 1900365/19001231"
246400     MOVE ZERO TO LS-GREGORIAN
246500     CALL WS-ASUJ2GDB
246600          USING ASCA-COMMAREA
246700                WS-J1900365
246800                LS-GREGORIAN
246900**              AS5FDBK-COND-AREA
247000                OMITTED
247100
247200     DISPLAY WS-PGMID
247300          "    INPUT JULIAN: " WS-J1900365
247400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
247500
247600     DISPLAY WS-PGMID
247700          " 3. TESTING DATE ASUJ2BDB - 1900365/693959"
247800     MOVE ZERO TO LS-BDAY
247900     CALL WS-ASUJ2BDB
248000          USING ASCA-COMMAREA
248100                WS-J1900365
248200                LS-BDAY
248300**              AS5FDBK-COND-AREA
248400                OMITTED
248500
248600     DISPLAY WS-PGMID
248700          "    INPUT JULIAN: " WS-J1900365
248800          "  OUTPUT BASE: " LS-BDAY
248900
249000     DISPLAY WS-PGMID
249100          " 4. TESTING DATE ASUB2JDB - 693959/1900365"
249200     MOVE ZERO TO LS-JULIAN
249300     CALL WS-ASUB2JDB
249400          USING ASCA-COMMAREA
249500                WS-B693959
249600                LS-JULIAN
249700**              AS5FDBK-COND-AREA
249800                OMITTED
249900
250000     DISPLAY WS-PGMID
250100          "    INPUT BASE: " WS-B693959
250200          "  OUTPUT JULIAN: " LS-JULIAN
250300
250400     DISPLAY WS-PGMID
250500          " 5. TESTING DATE ASUJ2WDB - 1900365/1900-W53-1"
250600     MOVE SPACE TO LS-WEEK
250700     CALL WS-ASUJ2WDB
250800          USING ASCA-COMMAREA
250900                WS-J1900365
251000                LS-WEEK
251100**              AS5FDBK-COND-AREA
251200                OMITTED
251300
251400     DISPLAY WS-PGMID
251500          "    INPUT JULIAN: " WS-J1900365
251600          "  OUTPUT WEEK: " LS-WEEK
251700
251800     DISPLAY WS-PGMID
251900          " 6. TESTING DATE ASUW2JDB - 1900 53/1900365"
252000     MOVE SPACE TO LS-WEEK
252100     CALL WS-ASUW2JDB
252200          USING ASCA-COMMAREA
252300                WS-Y1900
252400                WS-W53
252500                LS-JULIAN
252600**              AS5FDBK-COND-AREA
252700                OMITTED
252800
252900     DISPLAY WS-PGMID
253000          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W53
253100          "  OUTPUT JULIAN: " LS-JULIAN
253200
253300     DISPLAY " "
253400     DISPLAY WS-PGMID
253500          " 1. TESTING DATE ASUG2JDB - 19040101/1904001"
253600     MOVE ZERO TO LS-JULIAN
253700     CALL WS-ASUG2JDB
253800          USING ASCA-COMMAREA
253900                WS-G19040101
254000                LS-JULIAN
254100**              AS5FDBK-COND-AREA
254200                OMITTED
254300
254400     DISPLAY WS-PGMID
254500          "    INPUT GREGORIAN: " WS-G19040101
254600          "  OUTPUT JULIAN: " LS-JULIAN
254700
254800     DISPLAY WS-PGMID
254900          " 2. TESTING DATE ASUJ2GDB - 1904001/19040101"
255000     MOVE ZERO TO LS-GREGORIAN
255100     CALL WS-ASUJ2GDB
255200          USING ASCA-COMMAREA
255300                WS-J1904001
255400                LS-GREGORIAN
255500**              AS5FDBK-COND-AREA
255600                OMITTED
255700
255800     DISPLAY WS-PGMID
255900          "    INPUT JULIAN: " WS-J1904001
256000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
256100
256200     DISPLAY WS-PGMID
256300          " 3. TESTING DATE ASUJ2BDB - 1904001/695055"
256400     MOVE ZERO TO LS-BDAY
256500     CALL WS-ASUJ2BDB
256600          USING ASCA-COMMAREA
256700                WS-J1904001
256800                LS-BDAY
256900**              AS5FDBK-COND-AREA
257000                OMITTED
257100
257200     DISPLAY WS-PGMID
257300          "    INPUT JULIAN: " WS-J1904001
257400          "  OUTPUT BASE: " LS-BDAY
257500
257600     DISPLAY WS-PGMID
257700          " 4. TESTING DATE ASUB2JDB - 695055/1904001"
257800     MOVE ZERO TO LS-JULIAN
257900     CALL WS-ASUB2JDB
258000          USING ASCA-COMMAREA
258100                WS-B695055
258200                LS-JULIAN
258300**              AS5FDBK-COND-AREA
258400                OMITTED
258500
258600     DISPLAY WS-PGMID
258700          "    INPUT BASE: " WS-B695055
258800          "  OUTPUT JULIAN: " LS-JULIAN
258900
259000     DISPLAY WS-PGMID
259100          " 5. TESTING DATE ASUJ2WDB - 1904001/1903-W53-5"
259200     MOVE SPACE TO LS-WEEK
259300     CALL WS-ASUJ2WDB
259400          USING ASCA-COMMAREA
259500                WS-J1904001
259600                LS-WEEK
259700**              AS5FDBK-COND-AREA
259800                OMITTED
259900
260000     DISPLAY WS-PGMID
260100          "    INPUT JULIAN: " WS-J1904001
260200          "  OUTPUT WEEK: " LS-WEEK
260300
260400     DISPLAY WS-PGMID
260500          " 6. TESTING DATE ASUW2JDB - 1904 01/1904004"
260600     MOVE SPACE TO LS-WEEK
260700     CALL WS-ASUW2JDB
260800          USING ASCA-COMMAREA
260900                WS-Y1904
261000                WS-W01
261100                LS-JULIAN
261200**              AS5FDBK-COND-AREA
261300                OMITTED
261400
261500     DISPLAY WS-PGMID
261600          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W01
261700          "  OUTPUT JULIAN: " LS-JULIAN
261800
261900     DISPLAY " "
262000     DISPLAY WS-PGMID
262100          " 1. TESTING DATE ASUG2JDB - 19040228/1904059"
262200     MOVE ZERO TO LS-JULIAN
262300     CALL WS-ASUG2JDB
262400          USING ASCA-COMMAREA
262500                WS-G19040228
262600                LS-JULIAN
262700**              AS5FDBK-COND-AREA
262800                OMITTED
262900
263000     DISPLAY WS-PGMID
263100          "    INPUT GREGORIAN: " WS-G19040228
263200          "  OUTPUT JULIAN: " LS-JULIAN
263300
263400     DISPLAY WS-PGMID
263500          " 2. TESTING DATE ASUJ2GDB - 1904059/19040228"
263600     MOVE ZERO TO LS-GREGORIAN
263700     CALL WS-ASUJ2GDB
263800          USING ASCA-COMMAREA
263900                WS-J1904059
264000                LS-GREGORIAN
264100**              AS5FDBK-COND-AREA
264200                OMITTED
264300
264400     DISPLAY WS-PGMID
264500          "    INPUT JULIAN: " WS-J1904059
264600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
264700
264800     DISPLAY WS-PGMID
264900          " 3. TESTING DATE ASUJ2BDB - 1904059/695113"
265000     MOVE ZERO TO LS-BDAY
265100     CALL WS-ASUJ2BDB
265200          USING ASCA-COMMAREA
265300                WS-J1904059
265400                LS-BDAY
265500**              AS5FDBK-COND-AREA
265600                OMITTED
265700
265800     DISPLAY WS-PGMID
265900          "    INPUT JULIAN: " WS-J1904059
266000          "  OUTPUT BASE: " LS-BDAY
266100
266200     DISPLAY WS-PGMID
266300          " 4. TESTING DATE ASUB2JDB - 695113/1904059"
266400     MOVE ZERO TO LS-JULIAN
266500     CALL WS-ASUB2JDB
266600          USING ASCA-COMMAREA
266700                WS-B695113
266800                LS-JULIAN
266900**              AS5FDBK-COND-AREA
267000                OMITTED
267100
267200     DISPLAY WS-PGMID
267300          "    INPUT BASE: " WS-B695113
267400          "  OUTPUT JULIAN: " LS-JULIAN
267500
267600     DISPLAY WS-PGMID
267700          " 5. TESTING DATE ASUJ2WDB - 1904059/1904-W08-7"
267800     MOVE SPACE TO LS-WEEK
267900     CALL WS-ASUJ2WDB
268000          USING ASCA-COMMAREA
268100                WS-J1904059
268200                LS-WEEK
268300**              AS5FDBK-COND-AREA
268400                OMITTED
268500
268600     DISPLAY WS-PGMID
268700          "    INPUT JULIAN: " WS-J1904059
268800          "  OUTPUT WEEK: " LS-WEEK
268900
269000     DISPLAY WS-PGMID
269100          " 6. TESTING DATE ASUW2JDB - 1904 08/1904053"
269200     MOVE SPACE TO LS-WEEK
269300     CALL WS-ASUW2JDB
269400          USING ASCA-COMMAREA
269500                WS-Y1904
269600                WS-W08
269700                LS-JULIAN
269800**              AS5FDBK-COND-AREA
269900                OMITTED
270000
270100     DISPLAY WS-PGMID
270200          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W08
270300          "  OUTPUT JULIAN: " LS-JULIAN
270400
270500     DISPLAY " "
270600     DISPLAY WS-PGMID
270700          " 1. TESTING DATE ASUG2JDB - 19040229/1904060"
270800     MOVE ZERO TO LS-JULIAN
270900     CALL WS-ASUG2JDB
271000          USING ASCA-COMMAREA
271100                WS-G19040229
271200                LS-JULIAN
271300**              AS5FDBK-COND-AREA
271400                OMITTED
271500
271600     DISPLAY WS-PGMID
271700          "    INPUT GREGORIAN: " WS-G19040229
271800          "  OUTPUT JULIAN: " LS-JULIAN
271900
272000     DISPLAY WS-PGMID
272100          " 2. TESTING DATE ASUJ2GDB - 1904060/19040229"
272200     MOVE ZERO TO LS-GREGORIAN
272300     CALL WS-ASUJ2GDB
272400          USING ASCA-COMMAREA
272500                WS-J1904060
272600                LS-GREGORIAN
272700**              AS5FDBK-COND-AREA
272800                OMITTED
272900
273000     DISPLAY WS-PGMID
273100          "    INPUT JULIAN: " WS-J1904060
273200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
273300
273400     DISPLAY WS-PGMID
273500          " 3. TESTING DATE ASUJ2BDB - 1904060/695114"
273600     MOVE ZERO TO LS-BDAY
273700     CALL WS-ASUJ2BDB
273800          USING ASCA-COMMAREA
273900                WS-J1904060
274000                LS-BDAY
274100**              AS5FDBK-COND-AREA
274200                OMITTED
274300
274400     DISPLAY WS-PGMID
274500          "    INPUT JULIAN: " WS-J1904060
274600          "  OUTPUT BASE: " LS-BDAY
274700
274800     DISPLAY WS-PGMID
274900          " 4. TESTING DATE ASUB2JDB - 695114/1904060"
275000     MOVE ZERO TO LS-JULIAN
275100     CALL WS-ASUB2JDB
275200          USING ASCA-COMMAREA
275300                WS-B695114
275400                LS-JULIAN
275500**              AS5FDBK-COND-AREA
275600                OMITTED
275700
275800     DISPLAY WS-PGMID
275900          "    INPUT BASE: " WS-B695114
276000          "  OUTPUT JULIAN: " LS-JULIAN
276100
276200     DISPLAY WS-PGMID
276300          " 5. TESTING DATE ASUJ2WDB - 1904060/1904-W09-1"
276400     MOVE SPACE TO LS-WEEK
276500     CALL WS-ASUJ2WDB
276600          USING ASCA-COMMAREA
276700                WS-J1904060
276800                LS-WEEK
276900**              AS5FDBK-COND-AREA
277000                OMITTED
277100
277200     DISPLAY WS-PGMID
277300          "    INPUT JULIAN: " WS-J1904060
277400          "  OUTPUT WEEK: " LS-WEEK
277500
277600     DISPLAY WS-PGMID
277700          " 6. TESTING DATE ASUW2JDB - 1904 09/1904060"
277800     MOVE SPACE TO LS-WEEK
277900     CALL WS-ASUW2JDB
278000          USING ASCA-COMMAREA
278100                WS-Y1904
278200                WS-W09
278300                LS-JULIAN
278400**              AS5FDBK-COND-AREA
278500                OMITTED
278600
278700     DISPLAY WS-PGMID
278800          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W09
278900          "  OUTPUT JULIAN: " LS-JULIAN
279000
279100     DISPLAY " "
279200     DISPLAY WS-PGMID
279300          " 1. TESTING DATE ASUG2JDB - 19040301/1904061"
279400     MOVE ZERO TO LS-JULIAN
279500     CALL WS-ASUG2JDB
279600          USING ASCA-COMMAREA
279700                WS-G19040301
279800                LS-JULIAN
279900**              AS5FDBK-COND-AREA
280000                OMITTED
280100
280200     DISPLAY WS-PGMID
280300          "    INPUT GREGORIAN: " WS-G19040301
280400          "  OUTPUT JULIAN: " LS-JULIAN
280500
280600     DISPLAY WS-PGMID
280700          " 2. TESTING DATE ASUJ2GDB - 1904061/19040301"
280800     MOVE ZERO TO LS-GREGORIAN
280900     CALL WS-ASUJ2GDB
281000          USING ASCA-COMMAREA
281100                WS-J1904061
281200                LS-GREGORIAN
281300**              AS5FDBK-COND-AREA
281400                OMITTED
281500
281600     DISPLAY WS-PGMID
281700          "    INPUT JULIAN: " WS-J1904061
281800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
281900
282000     DISPLAY WS-PGMID
282100          " 3. TESTING DATE ASUJ2BDB - 1904061/695115"
282200     MOVE ZERO TO LS-BDAY
282300     CALL WS-ASUJ2BDB
282400          USING ASCA-COMMAREA
282500                WS-J1904061
282600                LS-BDAY
282700**              AS5FDBK-COND-AREA
282800                OMITTED
282900
283000     DISPLAY WS-PGMID
283100          "    INPUT JULIAN: " WS-J1904061
283200          "  OUTPUT BASE: " LS-BDAY
283300
283400     DISPLAY WS-PGMID
283500          " 4. TESTING DATE ASUB2JDB - 695115/1904061"
283600     MOVE ZERO TO LS-JULIAN
283700     CALL WS-ASUB2JDB
283800          USING ASCA-COMMAREA
283900                WS-B695115
284000                LS-JULIAN
284100**              AS5FDBK-COND-AREA
284200                OMITTED
284300
284400     DISPLAY WS-PGMID
284500          "    INPUT BASE: " WS-B695115
284600          "  OUTPUT JULIAN: " LS-JULIAN
284700
284800     DISPLAY WS-PGMID
284900          " 5. TESTING DATE ASUJ2WDB - 1904061/1904-W09-2"
285000     MOVE SPACE TO LS-WEEK
285100     CALL WS-ASUJ2WDB
285200          USING ASCA-COMMAREA
285300                WS-J1904061
285400                LS-WEEK
285500**              AS5FDBK-COND-AREA
285600                OMITTED
285700
285800     DISPLAY WS-PGMID
285900          "    INPUT JULIAN: " WS-J1904061
286000          "  OUTPUT WEEK: " LS-WEEK
286100
286200     DISPLAY WS-PGMID
286300          " 6. TESTING DATE ASUW2JDB - 1904 09/1904060"
286400     MOVE SPACE TO LS-WEEK
286500     CALL WS-ASUW2JDB
286600          USING ASCA-COMMAREA
286700                WS-Y1904
286800                WS-W09
286900                LS-JULIAN
287000**              AS5FDBK-COND-AREA
287100                OMITTED
287200
287300     DISPLAY WS-PGMID
287400          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W09
287500          "  OUTPUT JULIAN: " LS-JULIAN
287600
287700     DISPLAY " "
287800     DISPLAY WS-PGMID
287900          " 1. TESTING DATE ASUG2JDB - 19041231/1904366"
288000     MOVE ZERO TO LS-JULIAN
288100     CALL WS-ASUG2JDB
288200          USING ASCA-COMMAREA
288300                WS-G19041231
288400                LS-JULIAN
288500**              AS5FDBK-COND-AREA
288600                OMITTED
288700
288800     DISPLAY WS-PGMID
288900          "    INPUT GREGORIAN: " WS-G19041231
289000          "  OUTPUT JULIAN: " LS-JULIAN
289100
289200     DISPLAY WS-PGMID
289300          " 2. TESTING DATE ASUJ2GDB - 1904366/19041231"
289400     MOVE ZERO TO LS-GREGORIAN
289500     CALL WS-ASUJ2GDB
289600          USING ASCA-COMMAREA
289700                WS-J1904366
289800                LS-GREGORIAN
289900**              AS5FDBK-COND-AREA
290000                OMITTED
290100
290200     DISPLAY WS-PGMID
290300          "    INPUT JULIAN: " WS-J1904366
290400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
290500
290600     DISPLAY WS-PGMID
290700          " 3. TESTING DATE ASUJ2BDB - 1904366/695420"
290800     MOVE ZERO TO LS-BDAY
290900     CALL WS-ASUJ2BDB
291000          USING ASCA-COMMAREA
291100                WS-J1904366
291200                LS-BDAY
291300**              AS5FDBK-COND-AREA
291400                OMITTED
291500
291600     DISPLAY WS-PGMID
291700          "    INPUT JULIAN: " WS-J1904366
291800          "  OUTPUT BASE: " LS-BDAY
291900
292000     DISPLAY WS-PGMID
292100          " 4. TESTING DATE ASUB2JDB - 695420/1904366"
292200     MOVE ZERO TO LS-JULIAN
292300     CALL WS-ASUB2JDB
292400          USING ASCA-COMMAREA
292500                WS-B695420
292600                LS-JULIAN
292700**              AS5FDBK-COND-AREA
292800                OMITTED
292900
293000     DISPLAY WS-PGMID
293100          "    INPUT BASE: " WS-B695420
293200          "  OUTPUT JULIAN: " LS-JULIAN
293300
293400     DISPLAY WS-PGMID
293500          " 5. TESTING DATE ASUJ2WDB - 1904366/1904-W52-6"
293600     MOVE SPACE TO LS-WEEK
293700     CALL WS-ASUJ2WDB
293800          USING ASCA-COMMAREA
293900                WS-J1904366
294000                LS-WEEK
294100**              AS5FDBK-COND-AREA
294200                OMITTED
294300
294400     DISPLAY WS-PGMID
294500          "    INPUT JULIAN: " WS-J1904366
294600          "  OUTPUT WEEK: " LS-WEEK
294700
294800     DISPLAY WS-PGMID
294900          " 6. TESTING DATE ASUW2JDB - 1904 52/1904361"
295000     MOVE SPACE TO LS-WEEK
295100     CALL WS-ASUW2JDB
295200          USING ASCA-COMMAREA
295300                WS-Y1904
295400                WS-W52
295500                LS-JULIAN
295600**              AS5FDBK-COND-AREA
295700                OMITTED
295800
295900     DISPLAY WS-PGMID
296000          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W52
296100          "  OUTPUT JULIAN: " LS-JULIAN
296200
296300     DISPLAY " "
296400     DISPLAY WS-PGMID
296500          " 1. TESTING DATE ASUG2JDB - 19700101/1970001"
296600     MOVE ZERO TO LS-JULIAN
296700     CALL WS-ASUG2JDB
296800          USING ASCA-COMMAREA
296900                WS-G19700101
297000                LS-JULIAN
297100**              AS5FDBK-COND-AREA
297200                OMITTED
297300
297400     DISPLAY WS-PGMID
297500          "    INPUT GREGORIAN: " WS-G19700101
297600          "  OUTPUT JULIAN: " LS-JULIAN
297700
297800     DISPLAY WS-PGMID
297900          " 2. TESTING DATE ASUJ2GDB - 1970001/19700101"
298000     MOVE ZERO TO LS-GREGORIAN
298100     CALL WS-ASUJ2GDB
298200          USING ASCA-COMMAREA
298300                WS-J1970001
298400                LS-GREGORIAN
298500**              AS5FDBK-COND-AREA
298600                OMITTED
298700
298800     DISPLAY WS-PGMID
298900          "    INPUT JULIAN: " WS-J1970001
299000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
299100
299200     DISPLAY WS-PGMID
299300          " 3. TESTING DATE ASUJ2BDB - 1970001/719162"
299400     MOVE ZERO TO LS-BDAY
299500     CALL WS-ASUJ2BDB
299600          USING ASCA-COMMAREA
299700                WS-J1970001
299800                LS-BDAY
299900**              AS5FDBK-COND-AREA
300000                OMITTED
300100
300200     DISPLAY WS-PGMID
300300          "    INPUT JULIAN: " WS-J1970001
300400          "  OUTPUT BASE: " LS-BDAY
300500
300600     DISPLAY WS-PGMID
300700          " 4. TESTING DATE ASUB2JDB - 719162/1970001"
300800     MOVE ZERO TO LS-JULIAN
300900     CALL WS-ASUB2JDB
301000          USING ASCA-COMMAREA
301100                WS-B719162
301200                LS-JULIAN
301300**              AS5FDBK-COND-AREA
301400                OMITTED
301500
301600     DISPLAY WS-PGMID
301700          "    INPUT BASE: " WS-B719162
301800          "  OUTPUT JULIAN: " LS-JULIAN
301900
302000     DISPLAY WS-PGMID
302100          " 5. TESTING DATE ASUJ2WDB - 1970001/1970-W01-4"
302200     MOVE SPACE TO LS-WEEK
302300     CALL WS-ASUJ2WDB
302400          USING ASCA-COMMAREA
302500                WS-J1970001
302600                LS-WEEK
302700**              AS5FDBK-COND-AREA
302800                OMITTED
302900
303000     DISPLAY WS-PGMID
303100          "    INPUT JULIAN: " WS-J1970001
303200          "  OUTPUT WEEK: " LS-WEEK
303300
303400     DISPLAY WS-PGMID
303500          " 6. TESTING DATE ASUW2JDB - 1970 01/1969363"
303600     MOVE SPACE TO LS-WEEK
303700     CALL WS-ASUW2JDB
303800          USING ASCA-COMMAREA
303900                WS-Y1970
304000                WS-W01
304100                LS-JULIAN
304200**              AS5FDBK-COND-AREA
304300                OMITTED
304400
304500     DISPLAY WS-PGMID
304600          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W01
304700          "  OUTPUT JULIAN: " LS-JULIAN
304800
304900     DISPLAY " "
305000     DISPLAY WS-PGMID
305100          " 1. TESTING DATE ASUG2JDB - 19700228/1970059"
305200     MOVE ZERO TO LS-JULIAN
305300     CALL WS-ASUG2JDB
305400          USING ASCA-COMMAREA
305500                WS-G19700228
305600                LS-JULIAN
305700**              AS5FDBK-COND-AREA
305800                OMITTED
305900
306000     DISPLAY WS-PGMID
306100          "    INPUT GREGORIAN: " WS-G19700228
306200          "  OUTPUT JULIAN: " LS-JULIAN
306300
306400     DISPLAY WS-PGMID
306500          " 2. TESTING DATE ASUJ2GDB - 1970059/19700228"
306600     MOVE ZERO TO LS-GREGORIAN
306700     CALL WS-ASUJ2GDB
306800          USING ASCA-COMMAREA
306900                WS-J1970059
307000                LS-GREGORIAN
307100**              AS5FDBK-COND-AREA
307200                OMITTED
307300
307400     DISPLAY WS-PGMID
307500          "    INPUT JULIAN: " WS-J1970059
307600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
307700
307800     DISPLAY WS-PGMID
307900          " 3. TESTING DATE ASUJ2BDB - 1970059/719220"
308000     MOVE ZERO TO LS-BDAY
308100     CALL WS-ASUJ2BDB
308200          USING ASCA-COMMAREA
308300                WS-J1970059
308400                LS-BDAY
308500**              AS5FDBK-COND-AREA
308600                OMITTED
308700
308800     DISPLAY WS-PGMID
308900          "    INPUT JULIAN: " WS-J1970059
309000          "  OUTPUT BASE: " LS-BDAY
309100
309200     DISPLAY WS-PGMID
309300          " 4. TESTING DATE ASUB2JDB - 719220/1970059"
309400     MOVE ZERO TO LS-JULIAN
309500     CALL WS-ASUB2JDB
309600          USING ASCA-COMMAREA
309700                WS-B719220
309800                LS-JULIAN
309900**              AS5FDBK-COND-AREA
310000                OMITTED
310100
310200     DISPLAY WS-PGMID
310300          "    INPUT BASE: " WS-B719220
310400          "  OUTPUT JULIAN: " LS-JULIAN
310500
310600     DISPLAY WS-PGMID
310700          " 5. TESTING DATE ASUJ2WDB - 1970059/1970-W09-6"
310800     MOVE SPACE TO LS-WEEK
310900     CALL WS-ASUJ2WDB
311000          USING ASCA-COMMAREA
311100                WS-J1970059
311200                LS-WEEK
311300**              AS5FDBK-COND-AREA
311400                OMITTED
311500
311600     DISPLAY WS-PGMID
311700          "    INPUT JULIAN: " WS-J1970059
311800          "  OUTPUT WEEK: " LS-WEEK
311900
312000     DISPLAY WS-PGMID
312100          " 6. TESTING DATE ASUW2JDB - 1970 09/1970054"
312200     MOVE SPACE TO LS-WEEK
312300     CALL WS-ASUW2JDB
312400          USING ASCA-COMMAREA
312500                WS-Y1970
312600                WS-W09
312700                LS-JULIAN
312800**              AS5FDBK-COND-AREA
312900                OMITTED
313000
313100     DISPLAY WS-PGMID
313200          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W09
313300          "  OUTPUT JULIAN: " LS-JULIAN
313400
313500     DISPLAY " "
313600     DISPLAY WS-PGMID
313700          " 1. TESTING DATE ASUG2JDB - 19700301/1970060"
313800     MOVE ZERO TO LS-JULIAN
313900     CALL WS-ASUG2JDB
314000          USING ASCA-COMMAREA
314100                WS-G19700301
314200                LS-JULIAN
314300**              AS5FDBK-COND-AREA
314400                OMITTED
314500
314600     DISPLAY WS-PGMID
314700          "    INPUT GREGORIAN: " WS-G19700301
314800          "  OUTPUT JULIAN: " LS-JULIAN
314900
315000     DISPLAY WS-PGMID
315100          " 2. TESTING DATE ASUJ2GDB - 1970060/19700301"
315200     MOVE ZERO TO LS-GREGORIAN
315300     CALL WS-ASUJ2GDB
315400          USING ASCA-COMMAREA
315500                WS-J1970060
315600                LS-GREGORIAN
315700**              AS5FDBK-COND-AREA
315800                OMITTED
315900
316000     DISPLAY WS-PGMID
316100          "    INPUT JULIAN: " WS-J1970060
316200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
316300
316400     DISPLAY WS-PGMID
316500          " 3. TESTING DATE ASUJ2BDB - 1970060/719221"
316600     MOVE ZERO TO LS-BDAY
316700     CALL WS-ASUJ2BDB
316800          USING ASCA-COMMAREA
316900                WS-J1970060
317000                LS-BDAY
317100**              AS5FDBK-COND-AREA
317200                OMITTED
317300
317400     DISPLAY WS-PGMID
317500          "    INPUT JULIAN: " WS-J1970060
317600          "  OUTPUT BASE: " LS-BDAY
317700
317800     DISPLAY WS-PGMID
317900          " 4. TESTING DATE ASUB2JDB - 719221/1970060"
318000     MOVE ZERO TO LS-JULIAN
318100     CALL WS-ASUB2JDB
318200          USING ASCA-COMMAREA
318300                WS-B719221
318400                LS-JULIAN
318500**              AS5FDBK-COND-AREA
318600                OMITTED
318700
318800     DISPLAY WS-PGMID
318900          "    INPUT BASE: " WS-B719221
319000          "  OUTPUT JULIAN: " LS-JULIAN
319100
319200     DISPLAY WS-PGMID
319300          " 5. TESTING DATE ASUJ2WDB - 1970060/1970-W09-7"
319400     MOVE SPACE TO LS-WEEK
319500     CALL WS-ASUJ2WDB
319600          USING ASCA-COMMAREA
319700                WS-J1970060
319800                LS-WEEK
319900**              AS5FDBK-COND-AREA
320000                OMITTED
320100
320200     DISPLAY WS-PGMID
320300          "    INPUT JULIAN: " WS-J1970060
320400          "  OUTPUT WEEK: " LS-WEEK
320500
320600     DISPLAY WS-PGMID
320700          " 6. TESTING DATE ASUW2JDB - 1970 09/1970054"
320800     MOVE SPACE TO LS-WEEK
320900     CALL WS-ASUW2JDB
321000          USING ASCA-COMMAREA
321100                WS-Y1970
321200                WS-W09
321300                LS-JULIAN
321400**              AS5FDBK-COND-AREA
321500                OMITTED
321600
321700     DISPLAY WS-PGMID
321800          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W09
321900          "  OUTPUT JULIAN: " LS-JULIAN
322000
322100     DISPLAY " "
322200     DISPLAY WS-PGMID
322300          " 1. TESTING DATE ASUG2JDB - 19701231/1970365"
322400     MOVE ZERO TO LS-JULIAN
322500     CALL WS-ASUG2JDB
322600          USING ASCA-COMMAREA
322700                WS-G19701231
322800                LS-JULIAN
322900**              AS5FDBK-COND-AREA
323000                OMITTED
323100
323200     DISPLAY WS-PGMID
323300          "    INPUT GREGORIAN: " WS-G19701231
323400          "  OUTPUT JULIAN: " LS-JULIAN
323500
323600     DISPLAY WS-PGMID
323700          " 2. TESTING DATE ASUJ2GDB - 1970365/19701231"
323800     MOVE ZERO TO LS-GREGORIAN
323900     CALL WS-ASUJ2GDB
324000          USING ASCA-COMMAREA
324100                WS-J1970365
324200                LS-GREGORIAN
324300**              AS5FDBK-COND-AREA
324400                OMITTED
324500
324600     DISPLAY WS-PGMID
324700          "    INPUT JULIAN: " WS-J1970365
324800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
324900
325000     DISPLAY WS-PGMID
325100          " 3. TESTING DATE ASUJ2BDB - 1970365/719526"
325200     MOVE ZERO TO LS-BDAY
325300     CALL WS-ASUJ2BDB
325400          USING ASCA-COMMAREA
325500                WS-J1970365
325600                LS-BDAY
325700**              AS5FDBK-COND-AREA
325800                OMITTED
325900
326000     DISPLAY WS-PGMID
326100          "    INPUT JULIAN: " WS-J1970365
326200          "  OUTPUT BASE: " LS-BDAY
326300
326400     DISPLAY WS-PGMID
326500          " 4. TESTING DATE ASUB2JDB - 719526/1970365"
326600     MOVE ZERO TO LS-JULIAN
326700     CALL WS-ASUB2JDB
326800          USING ASCA-COMMAREA
326900                WS-B719526
327000                LS-JULIAN
327100**              AS5FDBK-COND-AREA
327200                OMITTED
327300
327400     DISPLAY WS-PGMID
327500          "    INPUT BASE: " WS-B719526
327600          "  OUTPUT JULIAN: " LS-JULIAN
327700
327800     DISPLAY WS-PGMID
327900          " 5. TESTING DATE ASUJ2WDB - 1970365/1970-W53-4"
328000     MOVE SPACE TO LS-WEEK
328100     CALL WS-ASUJ2WDB
328200          USING ASCA-COMMAREA
328300                WS-J1970365
328400                LS-WEEK
328500**              AS5FDBK-COND-AREA
328600                OMITTED
328700
328800     DISPLAY WS-PGMID
328900          "    INPUT JULIAN: " WS-J1970365
329000          "  OUTPUT WEEK: " LS-WEEK
329100
329200     DISPLAY WS-PGMID
329300          " 6. TESTING DATE ASUW2JDB - 1970 53/1970362"
329400     MOVE SPACE TO LS-WEEK
329500     CALL WS-ASUW2JDB
329600          USING ASCA-COMMAREA
329700                WS-Y1970
329800                WS-W53
329900                LS-JULIAN
330000**              AS5FDBK-COND-AREA
330100                OMITTED
330200
330300     DISPLAY WS-PGMID
330400          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W53
330500          "  OUTPUT JULIAN: " LS-JULIAN
330600
330700     DISPLAY " "
330800     DISPLAY WS-PGMID
330900          " 1. TESTING DATE ASUG2JDB - 20000101/2000001"
331000     MOVE ZERO TO LS-JULIAN
331100     CALL WS-ASUG2JDB
331200          USING ASCA-COMMAREA
331300                WS-G20000101
331400                LS-JULIAN
331500**              AS5FDBK-COND-AREA
331600                OMITTED
331700
331800     DISPLAY WS-PGMID
331900          "    INPUT GREGORIAN: " WS-G20000101
332000          "  OUTPUT JULIAN: " LS-JULIAN
332100
332200     DISPLAY WS-PGMID
332300          " 2. TESTING DATE ASUJ2GDB - 2000001/20000101"
332400     MOVE ZERO TO LS-GREGORIAN
332500     CALL WS-ASUJ2GDB
332600          USING ASCA-COMMAREA
332700                WS-J2000001
332800                LS-GREGORIAN
332900**              AS5FDBK-COND-AREA
333000                OMITTED
333100
333200     DISPLAY WS-PGMID
333300          "    INPUT JULIAN: " WS-J2000001
333400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
333500
333600     DISPLAY WS-PGMID
333700          " 3. TESTING DATE ASUJ2BDB - 2000001/730119"
333800     MOVE ZERO TO LS-BDAY
333900     CALL WS-ASUJ2BDB
334000          USING ASCA-COMMAREA
334100                WS-J2000001
334200                LS-BDAY
334300**              AS5FDBK-COND-AREA
334400                OMITTED
334500
334600     DISPLAY WS-PGMID
334700          "    INPUT JULIAN: " WS-J2000001
334800          "  OUTPUT BASE: " LS-BDAY
334900
335000     DISPLAY WS-PGMID
335100          " 4. TESTING DATE ASUB2JDB - 730119/2000001"
335200     MOVE ZERO TO LS-JULIAN
335300     CALL WS-ASUB2JDB
335400          USING ASCA-COMMAREA
335500                WS-B730119
335600                LS-JULIAN
335700**              AS5FDBK-COND-AREA
335800                OMITTED
335900
336000     DISPLAY WS-PGMID
336100          "    INPUT BASE: " WS-B730119
336200          "  OUTPUT JULIAN: " LS-JULIAN
336300
336400     DISPLAY WS-PGMID
336500          " 5. TESTING DATE ASUJ2WDB - 2000001/1999-W52-6"
336600     MOVE SPACE TO LS-WEEK
336700     CALL WS-ASUJ2WDB
336800          USING ASCA-COMMAREA
336900                WS-J2000001
337000                LS-WEEK
337100**              AS5FDBK-COND-AREA
337200                OMITTED
337300
337400     DISPLAY WS-PGMID
337500          "    INPUT JULIAN: " WS-J2000001
337600          "  OUTPUT WEEK: " LS-WEEK
337700
337800     DISPLAY WS-PGMID
337900          " 6. TESTING DATE ASUW2JDB - 2000 01/2000003"
338000     MOVE SPACE TO LS-WEEK
338100     CALL WS-ASUW2JDB
338200          USING ASCA-COMMAREA
338300                WS-Y2000
338400                WS-W01
338500                LS-JULIAN
338600**              AS5FDBK-COND-AREA
338700                OMITTED
338800
338900     DISPLAY WS-PGMID
339000          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W01
339100          "  OUTPUT JULIAN: " LS-JULIAN
339200
339300     DISPLAY " "
339400     DISPLAY WS-PGMID
339500          " 1. TESTING DATE ASUG2JDB - 20000228/2000059"
339600     MOVE ZERO TO LS-JULIAN
339700     CALL WS-ASUG2JDB
339800          USING ASCA-COMMAREA
339900                WS-G20000228
340000                LS-JULIAN
340100**              AS5FDBK-COND-AREA
340200                OMITTED
340300
340400     DISPLAY WS-PGMID
340500          "    INPUT GREGORIAN: " WS-G20000228
340600          "  OUTPUT JULIAN: " LS-JULIAN
340700
340800     DISPLAY WS-PGMID
340900          " 2. TESTING DATE ASUJ2GDB - 2000059/20000228"
341000     MOVE ZERO TO LS-GREGORIAN
341100     CALL WS-ASUJ2GDB
341200          USING ASCA-COMMAREA
341300                WS-J2000059
341400                LS-GREGORIAN
341500**              AS5FDBK-COND-AREA
341600                OMITTED
341700
341800     DISPLAY WS-PGMID
341900          "    INPUT JULIAN: " WS-J2000059
342000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
342100
342200     DISPLAY WS-PGMID
342300          " 3. TESTING DATE ASUJ2BDB - 2000059/730177"
342400     MOVE ZERO TO LS-BDAY
342500     CALL WS-ASUJ2BDB
342600          USING ASCA-COMMAREA
342700                WS-J2000059
342800                LS-BDAY
342900**              AS5FDBK-COND-AREA
343000                OMITTED
343100
343200     DISPLAY WS-PGMID
343300          "    INPUT JULIAN: " WS-J2000059
343400          "  OUTPUT BASE: " LS-BDAY
343500
343600     DISPLAY WS-PGMID
343700          " 4. TESTING DATE ASUB2JDB - 730177/2000059"
343800     MOVE ZERO TO LS-JULIAN
343900     CALL WS-ASUB2JDB
344000          USING ASCA-COMMAREA
344100                WS-B730177
344200                LS-JULIAN
344300**              AS5FDBK-COND-AREA
344400                OMITTED
344500
344600     DISPLAY WS-PGMID
344700          "    INPUT BASE: " WS-B730177
344800          "  OUTPUT JULIAN: " LS-JULIAN
344900
345000     DISPLAY WS-PGMID
345100          " 5. TESTING DATE ASUJ2WDB - 2000059/2000-W09-1"
345200     MOVE SPACE TO LS-WEEK
345300     CALL WS-ASUJ2WDB
345400          USING ASCA-COMMAREA
345500                WS-J2000059
345600                LS-WEEK
345700**              AS5FDBK-COND-AREA
345800                OMITTED
345900
346000     DISPLAY WS-PGMID
346100          "    INPUT JULIAN: " WS-J2000059
346200          "  OUTPUT WEEK: " LS-WEEK
346300
346400     DISPLAY WS-PGMID
346500          " 6. TESTING DATE ASUW2JDB - 2000 09/2000059"
346600     MOVE SPACE TO LS-WEEK
346700     CALL WS-ASUW2JDB
346800          USING ASCA-COMMAREA
346900                WS-Y2000
347000                WS-W09
347100                LS-JULIAN
347200**              AS5FDBK-COND-AREA
347300                OMITTED
347400
347500     DISPLAY WS-PGMID
347600          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
347700          "  OUTPUT JULIAN: " LS-JULIAN
347800
347900     DISPLAY " "
348000     DISPLAY WS-PGMID
348100          " 1. TESTING DATE ASUG2JDB - 20000229/2000060"
348200     MOVE ZERO TO LS-JULIAN
348300     CALL WS-ASUG2JDB
348400          USING ASCA-COMMAREA
348500                WS-G20000229
348600                LS-JULIAN
348700**              AS5FDBK-COND-AREA
348800                OMITTED
348900
349000     DISPLAY WS-PGMID
349100          "    INPUT GREGORIAN: " WS-G20000229
349200          "  OUTPUT JULIAN: " LS-JULIAN
349300
349400     DISPLAY WS-PGMID
349500          " 2. TESTING DATE ASUJ2GDB - 2000060/20000229"
349600     MOVE ZERO TO LS-GREGORIAN
349700     CALL WS-ASUJ2GDB
349800          USING ASCA-COMMAREA
349900                WS-J2000060
350000                LS-GREGORIAN
350100**              AS5FDBK-COND-AREA
350200                OMITTED
350300
350400     DISPLAY WS-PGMID
350500          "    INPUT JULIAN: " WS-J2000060
350600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
350700
350800     DISPLAY WS-PGMID
350900          " 3. TESTING DATE ASUJ2BDB - 2000060/730178"
351000     MOVE ZERO TO LS-BDAY
351100     CALL WS-ASUJ2BDB
351200          USING ASCA-COMMAREA
351300                WS-J2000060
351400                LS-BDAY
351500**              AS5FDBK-COND-AREA
351600                OMITTED
351700
351800     DISPLAY WS-PGMID
351900          "    INPUT JULIAN: " WS-J2000060
352000          "  OUTPUT BASE: " LS-BDAY
352100
352200     DISPLAY WS-PGMID
352300          " 4. TESTING DATE ASUB2JDB - 730178/2000060"
352400     MOVE ZERO TO LS-JULIAN
352500     CALL WS-ASUB2JDB
352600          USING ASCA-COMMAREA
352700                WS-B730178
352800                LS-JULIAN
352900**              AS5FDBK-COND-AREA
353000                OMITTED
353100
353200     DISPLAY WS-PGMID
353300          "    INPUT BASE: " WS-B730178
353400          "  OUTPUT JULIAN: " LS-JULIAN
353500
353600     DISPLAY WS-PGMID
353700          " 5. TESTING DATE ASUJ2WDB - 2000060/2000-W09-2"
353800     MOVE SPACE TO LS-WEEK
353900     CALL WS-ASUJ2WDB
354000          USING ASCA-COMMAREA
354100                WS-J2000060
354200                LS-WEEK
354300**              AS5FDBK-COND-AREA
354400                OMITTED
354500
354600     DISPLAY WS-PGMID
354700          "    INPUT JULIAN: " WS-J2000060
354800          "  OUTPUT WEEK: " LS-WEEK
354900
355000     DISPLAY WS-PGMID
355100          " 6. TESTING DATE ASUW2JDB - 2000 09/2000059"
355200     MOVE SPACE TO LS-WEEK
355300     CALL WS-ASUW2JDB
355400          USING ASCA-COMMAREA
355500                WS-Y2000
355600                WS-W09
355700                LS-JULIAN
355800**              AS5FDBK-COND-AREA
355900                OMITTED
356000
356100     DISPLAY WS-PGMID
356200          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
356300          "  OUTPUT JULIAN: " LS-JULIAN
356400
356500     DISPLAY " "
356600     DISPLAY WS-PGMID
356700          " 1. TESTING DATE ASUG2JDB - 20000301/2000061"
356800     MOVE ZERO TO LS-JULIAN
356900     CALL WS-ASUG2JDB
357000          USING ASCA-COMMAREA
357100                WS-G20000301
357200                LS-JULIAN
357300**              AS5FDBK-COND-AREA
357400                OMITTED
357500
357600     DISPLAY WS-PGMID
357700          "    INPUT GREGORIAN: " WS-G20000301
357800          "  OUTPUT JULIAN: " LS-JULIAN
357900
358000     DISPLAY WS-PGMID
358100          " 2. TESTING DATE ASUJ2GDB - 2000061/20000301"
358200     MOVE ZERO TO LS-GREGORIAN
358300     CALL WS-ASUJ2GDB
358400          USING ASCA-COMMAREA
358500                WS-J2000061
358600                LS-GREGORIAN
358700**              AS5FDBK-COND-AREA
358800                OMITTED
358900
359000     DISPLAY WS-PGMID
359100          "    INPUT JULIAN: " WS-J2000061
359200          "  OUTPUT GREGORIAN: " LS-GREGORIAN
359300
359400     DISPLAY WS-PGMID
359500          " 3. TESTING DATE ASUJ2BDB - 2000061/730179"
359600     MOVE ZERO TO LS-BDAY
359700     CALL WS-ASUJ2BDB
359800          USING ASCA-COMMAREA
359900                WS-J2000061
360000                LS-BDAY
360100**              AS5FDBK-COND-AREA
360200                OMITTED
360300
360400     DISPLAY WS-PGMID
360500          "    INPUT JULIAN: " WS-J2000061
360600          "  OUTPUT BASE: " LS-BDAY
360700
360800     DISPLAY WS-PGMID
360900          " 4. TESTING DATE ASUB2JDB - 730179/2000061"
361000     MOVE ZERO TO LS-JULIAN
361100     CALL WS-ASUB2JDB
361200          USING ASCA-COMMAREA
361300                WS-B730179
361400                LS-JULIAN
361500**              AS5FDBK-COND-AREA
361600                OMITTED
361700
361800     DISPLAY WS-PGMID
361900          "    INPUT BASE: " WS-B730179
362000          "  OUTPUT JULIAN: " LS-JULIAN
362100
362200     DISPLAY WS-PGMID
362300          " 5. TESTING DATE ASUJ2WDB - 2000061/2000-W09-3"
362400     MOVE SPACE TO LS-WEEK
362500     CALL WS-ASUJ2WDB
362600          USING ASCA-COMMAREA
362700                WS-J2000061
362800                LS-WEEK
362900**              AS5FDBK-COND-AREA
363000                OMITTED
363100
363200     DISPLAY WS-PGMID
363300          "    INPUT JULIAN: " WS-J2000061
363400          "  OUTPUT WEEK: " LS-WEEK
363500
363600     DISPLAY WS-PGMID
363700          " 6. TESTING DATE ASUW2JDB - 2000 09/2000059"
363800     MOVE SPACE TO LS-WEEK
363900     CALL WS-ASUW2JDB
364000          USING ASCA-COMMAREA
364100                WS-Y2000
364200                WS-W09
364300                LS-JULIAN
364400**              AS5FDBK-COND-AREA
364500                OMITTED
364600
364700     DISPLAY WS-PGMID
364800          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
364900          "  OUTPUT JULIAN: " LS-JULIAN
365000
365100     DISPLAY " "
365200     DISPLAY WS-PGMID
365300          " 1. TESTING DATE ASUG2JDB - 20001231/2000366"
365400     MOVE ZERO TO LS-JULIAN
365500     CALL WS-ASUG2JDB
365600          USING ASCA-COMMAREA
365700                WS-G20001231
365800                LS-JULIAN
365900**              AS5FDBK-COND-AREA
366000                OMITTED
366100
366200     DISPLAY WS-PGMID
366300          "    INPUT GREGORIAN: " WS-G20001231
366400          "  OUTPUT JULIAN: " LS-JULIAN
366500
366600     DISPLAY WS-PGMID
366700          " 2. TESTING DATE ASUJ2GDB - 2000366/20001231"
366800     MOVE ZERO TO LS-GREGORIAN
366900     CALL WS-ASUJ2GDB
367000          USING ASCA-COMMAREA
367100                WS-J2000366
367200                LS-GREGORIAN
367300**              AS5FDBK-COND-AREA
367400                OMITTED
367500
367600     DISPLAY WS-PGMID
367700          "    INPUT JULIAN: " WS-J2000366
367800          "  OUTPUT GREGORIAN: " LS-GREGORIAN
367900
368000     DISPLAY WS-PGMID
368100          " 3. TESTING DATE ASUJ2BDB - 2000366/730484"
368200     MOVE ZERO TO LS-BDAY
368300     CALL WS-ASUJ2BDB
368400          USING ASCA-COMMAREA
368500                WS-J2000366
368600                LS-BDAY
368700**              AS5FDBK-COND-AREA
368800                OMITTED
368900
369000     DISPLAY WS-PGMID
369100          "    INPUT JULIAN: " WS-J2000366
369200          "  OUTPUT BASE: " LS-BDAY
369300
369400     DISPLAY WS-PGMID
369500          " 4. TESTING DATE ASUB2JDB - 730484/2000366"
369600     MOVE ZERO TO LS-JULIAN
369700     CALL WS-ASUB2JDB
369800          USING ASCA-COMMAREA
369900                WS-B730484
370000                LS-JULIAN
370100**              AS5FDBK-COND-AREA
370200                OMITTED
370300
370400     DISPLAY WS-PGMID
370500          "    INPUT BASE: " WS-B730484
370600          "  OUTPUT JULIAN: " LS-JULIAN
370700
370800     DISPLAY WS-PGMID
370900          " 5. TESTING DATE ASUJ2WDB - 2000366/2000-W52-7"
371000     MOVE SPACE TO LS-WEEK
371100     CALL WS-ASUJ2WDB
371200          USING ASCA-COMMAREA
371300                WS-J2000366
371400                LS-WEEK
371500**              AS5FDBK-COND-AREA
371600                OMITTED
371700
371800     DISPLAY WS-PGMID
371900          "    INPUT JULIAN: " WS-J2000366
372000          "  OUTPUT WEEK: " LS-WEEK
372100
372200     DISPLAY WS-PGMID
372300          " 6. TESTING DATE ASUW2JDB - 2000 52/2000360"
372400     MOVE SPACE TO LS-WEEK
372500     CALL WS-ASUW2JDB
372600          USING ASCA-COMMAREA
372700                WS-Y2000
372800                WS-W52
372900                LS-JULIAN
373000**              AS5FDBK-COND-AREA
373100                OMITTED
373200
373300     DISPLAY WS-PGMID
373400          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W52
373500          "  OUTPUT JULIAN: " LS-JULIAN
373600
373700     CONTINUE.
373800 3000-99-END.
373900     EXIT.
374000
374100     CONTINUE.
374200 3100-00-TEST-ASU.
374300*    TEST ASU DATE ROUTINES (2-DIGIT YEAR)
374400     DISPLAY " "
374500     DISPLAY WS-PGMID
374600          " 1. TESTING DATE ASUG2JDB - 00100228/?"
374700     MOVE ZERO TO LS-JULIAN
374800     CALL WS-ASUG2JDB
374900          USING ASCA-COMMAREA
375000                WS-G00100228
375100                LS-JULIAN
375200**              AS5FDBK-COND-AREA
375300                OMITTED
375400
375500     DISPLAY WS-PGMID
375600          "    INPUT GREGORIAN: " WS-G00100228
375700          "  OUTPUT JULIAN: " LS-JULIAN
375800
375900     DISPLAY WS-PGMID
376000          " 2. TESTING DATE ASUJ2GDB - 0010059/?"
376100     MOVE ZERO TO LS-GREGORIAN
376200     CALL WS-ASUJ2GDB
376300          USING ASCA-COMMAREA
376400                WS-J0010059
376500                LS-GREGORIAN
376600**              AS5FDBK-COND-AREA
376700                OMITTED
376800
376900     DISPLAY WS-PGMID
377000          "    INPUT JULIAN: " WS-J0010059
377100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
377200
377300     DISPLAY WS-PGMID
377400          " 3. TESTING DATE ASUJ2BDB - 0010059/?"
377500     MOVE ZERO TO LS-BDAY
377600     CALL WS-ASUJ2BDB
377700          USING ASCA-COMMAREA
377800                WS-J0010059
377900                LS-BDAY
378000**              AS5FDBK-COND-AREA
378100                OMITTED
378200
378300     DISPLAY WS-PGMID
378400          "    INPUT JULIAN: " WS-J0010059
378500          "  OUTPUT BASE: " LS-BDAY
378600
378700     DISPLAY WS-PGMID
378800          " 5. TESTING DATE ASUJ2WDB - 0010059/?"
378900     MOVE SPACE TO LS-WEEK
379000     CALL WS-ASUJ2WDB
379100          USING ASCA-COMMAREA
379200                WS-J0010059
379300                LS-WEEK
379400**              AS5FDBK-COND-AREA
379500                OMITTED
379600
379700     DISPLAY WS-PGMID
379800          "    INPUT JULIAN: " WS-J0010059
379900          "  OUTPUT WEEK: " LS-WEEK
380000
380100     DISPLAY WS-PGMID
380200          " 6. TESTING DATE ASUW2JDB - 0010 09/?"
380300     MOVE ZERO TO LS-JULIAN
380400     CALL WS-ASUW2JDB
380500          USING ASCA-COMMAREA
380600                WS-Y0010
380700                WS-W09
380800                LS-JULIAN
380900**              AS5FDBK-COND-AREA
381000                OMITTED
381100
381200     DISPLAY WS-PGMID
381300          "    INPUT YEAR: " WS-Y0010 " WEEK: " WS-W09
381400          "  OUTPUT JULIAN: " LS-JULIAN
381500
381600     DISPLAY " "
381700
381800     DISPLAY WS-PGMID
381900          " 1. TESTING DATE ASUG2JDB - 00300228/?"
382000     MOVE ZERO TO LS-JULIAN
382100     CALL WS-ASUG2JDB
382200          USING ASCA-COMMAREA
382300                WS-G00300228
382400                LS-JULIAN
382500**              AS5FDBK-COND-AREA
382600                OMITTED
382700
382800     DISPLAY WS-PGMID
382900          "    INPUT GREGORIAN: " WS-G00300228
383000          "  OUTPUT JULIAN: " LS-JULIAN
383100
383200     DISPLAY WS-PGMID
383300          " 2. TESTING DATE ASUJ2GDB - 0030059/?"
383400     MOVE ZERO TO LS-GREGORIAN
383500     CALL WS-ASUJ2GDB
383600          USING ASCA-COMMAREA
383700                WS-J0030059
383800                LS-GREGORIAN
383900**              AS5FDBK-COND-AREA
384000                OMITTED
384100
384200     DISPLAY WS-PGMID
384300          "    INPUT JULIAN: " WS-J0030059
384400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
384500
384600     DISPLAY WS-PGMID
384700          " 3. TESTING DATE ASUJ2BDB - 0030059/?"
384800     MOVE ZERO TO LS-BDAY
384900     CALL WS-ASUJ2BDB
385000          USING ASCA-COMMAREA
385100                WS-J0030059
385200                LS-BDAY
385300**              AS5FDBK-COND-AREA
385400                OMITTED
385500
385600     DISPLAY WS-PGMID
385700          "    INPUT JULIAN: " WS-J0030059
385800          "  OUTPUT BASE: " LS-BDAY
385900
386000     DISPLAY WS-PGMID
386100          " 5. TESTING DATE ASUJ2WDB - 0030059/?"
386200     MOVE SPACE TO LS-WEEK
386300     CALL WS-ASUJ2WDB
386400          USING ASCA-COMMAREA
386500                WS-J0030059
386600                LS-WEEK
386700**              AS5FDBK-COND-AREA
386800                OMITTED
386900
387000     DISPLAY WS-PGMID
387100          "    INPUT JULIAN: " WS-J0030059
387200          "  OUTPUT WEEK: " LS-WEEK
387300
387400     DISPLAY WS-PGMID
387500          " 6. TESTING DATE ASUW2JDB - 0030 09/?"
387600     MOVE ZERO TO LS-JULIAN
387700     CALL WS-ASUW2JDB
387800          USING ASCA-COMMAREA
387900                WS-Y0030
388000                WS-W09
388100                LS-JULIAN
388200**              AS5FDBK-COND-AREA
388300                OMITTED
388400
388500     DISPLAY WS-PGMID
388600          "    INPUT YEAR: " WS-Y0030 " WEEK: " WS-W09
388700          "  OUTPUT JULIAN: " LS-JULIAN
388800
388900     DISPLAY " "
389000
389100     DISPLAY WS-PGMID
389200          " 1. TESTING DATE ASUG2JDB - 00500228/?"
389300     MOVE ZERO TO LS-JULIAN
389400     CALL WS-ASUG2JDB
389500          USING ASCA-COMMAREA
389600                WS-G00500228
389700                LS-JULIAN
389800**              AS5FDBK-COND-AREA
389900                OMITTED
390000
390100     DISPLAY WS-PGMID
390200          "    INPUT GREGORIAN: " WS-G00500228
390300          "  OUTPUT JULIAN: " LS-JULIAN
390400
390500     DISPLAY WS-PGMID
390600          " 2. TESTING DATE ASUJ2GDB - 0050059/?"
390700     MOVE ZERO TO LS-GREGORIAN
390800     CALL WS-ASUJ2GDB
390900          USING ASCA-COMMAREA
391000                WS-J0050059
391100                LS-GREGORIAN
391200**              AS5FDBK-COND-AREA
391300                OMITTED
391400
391500     DISPLAY WS-PGMID
391600          "    INPUT JULIAN: " WS-J0050059
391700          "  OUTPUT GREGORIAN: " LS-GREGORIAN
391800
391900     DISPLAY WS-PGMID
392000          " 3. TESTING DATE ASUJ2BDB - 0050059/?"
392100     MOVE ZERO TO LS-BDAY
392200     CALL WS-ASUJ2BDB
392300          USING ASCA-COMMAREA
392400                WS-J0050059
392500                LS-BDAY
392600**              AS5FDBK-COND-AREA
392700                OMITTED
392800
392900     DISPLAY WS-PGMID
393000          "    INPUT JULIAN: " WS-J0050059
393100          "  OUTPUT BASE: " LS-BDAY
393200
393300     DISPLAY WS-PGMID
393400          " 5. TESTING DATE ASUJ2WDB - 0050059/?"
393500     MOVE SPACE TO LS-WEEK
393600     CALL WS-ASUJ2WDB
393700          USING ASCA-COMMAREA
393800                WS-J0050059
393900                LS-WEEK
394000**              AS5FDBK-COND-AREA
394100                OMITTED
394200
394300     DISPLAY WS-PGMID
394400          "    INPUT JULIAN: " WS-J0050059
394500          "  OUTPUT WEEK: " LS-WEEK
394600
394700     DISPLAY WS-PGMID
394800          " 6. TESTING DATE ASUW2JDB - 0050 09/?"
394900     MOVE ZERO TO LS-JULIAN
395000     CALL WS-ASUW2JDB
395100          USING ASCA-COMMAREA
395200                WS-Y0050
395300                WS-W09
395400                LS-JULIAN
395500**              AS5FDBK-COND-AREA
395600                OMITTED
395700
395800     DISPLAY WS-PGMID
395900          "    INPUT YEAR: " WS-Y0050 " WEEK: " WS-W09
396000          "  OUTPUT JULIAN: " LS-JULIAN
396100
396200     DISPLAY " "
396300
396400     DISPLAY WS-PGMID
396500          " 1. TESTING DATE ASUG2JDB - 00700228/?"
396600     MOVE ZERO TO LS-JULIAN
396700     CALL WS-ASUG2JDB
396800          USING ASCA-COMMAREA
396900                WS-G00700228
397000                LS-JULIAN
397100**              AS5FDBK-COND-AREA
397200                OMITTED
397300
397400     DISPLAY WS-PGMID
397500          "    INPUT GREGORIAN: " WS-G00700228
397600          "  OUTPUT JULIAN: " LS-JULIAN
397700
397800     DISPLAY WS-PGMID
397900          " 2. TESTING DATE ASUJ2GDB - 0070059/?"
398000     MOVE ZERO TO LS-GREGORIAN
398100     CALL WS-ASUJ2GDB
398200          USING ASCA-COMMAREA
398300                WS-J0070059
398400                LS-GREGORIAN
398500**              AS5FDBK-COND-AREA
398600                OMITTED
398700
398800     DISPLAY WS-PGMID
398900          "    INPUT JULIAN: " WS-J0070059
399000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
399100
399200     DISPLAY WS-PGMID
399300          " 3. TESTING DATE ASUJ2BDB - 0070059/?"
399400     MOVE ZERO TO LS-BDAY
399500     CALL WS-ASUJ2BDB
399600          USING ASCA-COMMAREA
399700                WS-J0070059
399800                LS-BDAY
399900**              AS5FDBK-COND-AREA
400000                OMITTED
400100
400200     DISPLAY WS-PGMID
400300          "    INPUT JULIAN: " WS-J0070059
400400          "  OUTPUT BASE: " LS-BDAY
400500
400600     DISPLAY WS-PGMID
400700          " 5. TESTING DATE ASUJ2WDB - 0070059/?"
400800     MOVE SPACE TO LS-WEEK
400900     CALL WS-ASUJ2WDB
401000          USING ASCA-COMMAREA
401100                WS-J0070059
401200                LS-WEEK
401300**              AS5FDBK-COND-AREA
401400                OMITTED
401500
401600     DISPLAY WS-PGMID
401700          "    INPUT JULIAN: " WS-J0070059
401800          "  OUTPUT WEEK: " LS-WEEK
401900
402000     DISPLAY WS-PGMID
402100          " 6. TESTING DATE ASUW2JDB - 0070 09/?"
402200     MOVE ZERO TO LS-JULIAN
402300     CALL WS-ASUW2JDB
402400          USING ASCA-COMMAREA
402500                WS-Y0070
402600                WS-W09
402700                LS-JULIAN
402800**              AS5FDBK-COND-AREA
402900                OMITTED
403000
403100     DISPLAY WS-PGMID
403200          "    INPUT YEAR: " WS-Y0070 " WEEK: " WS-W09
403300          "  OUTPUT JULIAN: " LS-JULIAN
403400
403500     DISPLAY " "
403600
403700     DISPLAY WS-PGMID
403800          " 1. TESTING DATE ASUG2JDB - 00900228/?"
403900     MOVE ZERO TO LS-JULIAN
404000     CALL WS-ASUG2JDB
404100          USING ASCA-COMMAREA
404200                WS-G00900228
404300                LS-JULIAN
404400**              AS5FDBK-COND-AREA
404500                OMITTED
404600
404700     DISPLAY WS-PGMID
404800          "    INPUT GREGORIAN: " WS-G00900228
404900          "  OUTPUT JULIAN: " LS-JULIAN
405000
405100     DISPLAY WS-PGMID
405200          " 2. TESTING DATE ASUJ2GDB - 0090059/?"
405300     MOVE ZERO TO LS-GREGORIAN
405400     CALL WS-ASUJ2GDB
405500          USING ASCA-COMMAREA
405600                WS-J0090059
405700                LS-GREGORIAN
405800**              AS5FDBK-COND-AREA
405900                OMITTED
406000
406100     DISPLAY WS-PGMID
406200          "    INPUT JULIAN: " WS-J0090059
406300          "  OUTPUT GREGORIAN: " LS-GREGORIAN
406400
406500     DISPLAY WS-PGMID
406600          " 3. TESTING DATE ASUJ2BDB - 0090059/?"
406700     MOVE ZERO TO LS-BDAY
406800     CALL WS-ASUJ2BDB
406900          USING ASCA-COMMAREA
407000                WS-J0090059
407100                LS-BDAY
407200**              AS5FDBK-COND-AREA
407300                OMITTED
407400
407500     DISPLAY WS-PGMID
407600          "    INPUT JULIAN: " WS-J0090059
407700          "  OUTPUT BASE: " LS-BDAY
407800
407900     DISPLAY WS-PGMID
408000          " 5. TESTING DATE ASUJ2WDB - 0090059/?"
408100     MOVE SPACE TO LS-WEEK
408200     CALL WS-ASUJ2WDB
408300          USING ASCA-COMMAREA
408400                WS-J0090059
408500                LS-WEEK
408600**              AS5FDBK-COND-AREA
408700                OMITTED
408800
408900     DISPLAY WS-PGMID
409000          "    INPUT JULIAN: " WS-J0090059
409100          "  OUTPUT WEEK: " LS-WEEK
409200
409300     DISPLAY WS-PGMID
409400          " 6. TESTING DATE ASUW2JDB - 0090 09/?"
409500     MOVE ZERO TO LS-JULIAN
409600     CALL WS-ASUW2JDB
409700          USING ASCA-COMMAREA
409800                WS-Y0090
409900                WS-W09
410000                LS-JULIAN
410100**              AS5FDBK-COND-AREA
410200                OMITTED
410300
410400     DISPLAY WS-PGMID
410500          "    INPUT YEAR: " WS-Y0090 " WEEK: " WS-W09
410600          "  OUTPUT JULIAN: " LS-JULIAN
410700
410800     CONTINUE.
410900 3100-99-END.
411000     EXIT.
411100
411200     CONTINUE.
411300 4000-00-TEST-DTE.
411400*    TEST DTE DATE ROUTINES
411500     DISPLAY " "
411600     DISPLAY WS-PGMID
411700          " 1. TESTING DATE DTEG2J - 15821015/1582288"
411800     MOVE ZERO TO LS-JULIAN
411900     CALL WS-DTEG2J
412000          USING WS-G15821015
412100                LS-JULIAN
412200     IF RETURN-CODE > ZERO
412300       DISPLAY WS-PGMID " " WS-DTEG2J
412400            " COBOL RETURN CODE = " RETURN-CODE
412500     END-IF
412600
412700     DISPLAY WS-PGMID
412800          "    INPUT GREGORIAN: " WS-G15821015
412900          "  OUTPUT JULIAN: " LS-JULIAN
413000
413100     DISPLAY WS-PGMID
413200          " 2. TESTING DATE DTEJ2G - 1582288/15821015"
413300     MOVE ZERO TO LS-GREGORIAN
413400     CALL WS-DTEJ2G
413500          USING WS-J1582288
413600                LS-GREGORIAN
413700     IF RETURN-CODE > ZERO
413800       DISPLAY WS-PGMID " " WS-DTEJ2G
413900            " RETURN CODE = " RETURN-CODE
414000     END-IF
414100
414200     DISPLAY WS-PGMID
414300          "    INPUT JULIAN: " WS-J1582288
414400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
414500
414600     DISPLAY WS-PGMID
414700          " 3. TESTING DATE DTEG2B - 15821015/577735"
414800     MOVE ZERO TO LS-BDAY
414900     CALL WS-DTEG2B
415000          USING WS-G15821015
415100                LS-BDAY
415200     IF RETURN-CODE > ZERO
415300       DISPLAY WS-PGMID " " WS-DTEG2B
415400            " COBOL RETURN CODE = " RETURN-CODE
415500     END-IF
415600
415700     DISPLAY WS-PGMID
415800          "    INPUT GREGORIAN: " WS-G15821015
415900          "  OUTPUT BASE: " LS-BDAY
416000
416100     DISPLAY WS-PGMID
416200          " 4. TESTING DATE DTEB2G - 577735/15821015"
416300     MOVE ZERO TO LS-GREGORIAN
416400     CALL WS-DTEB2G
416500          USING WS-B577735
416600                LS-GREGORIAN
416700     IF RETURN-CODE > ZERO
416800       DISPLAY WS-PGMID " " WS-DTEB2G
416900            " COBOL RETURN CODE = " RETURN-CODE
417000     END-IF
417100
417200     DISPLAY WS-PGMID
417300          "    INPUT BASE: " WS-B577735
417400          "  OUTPUT GREGORIAN: " LS-GREGORIAN
417500
417600     DISPLAY WS-PGMID
417700          " 5. TESTING DATE DTEG2W - 15821015/1582-W41-5, error"
417800     MOVE SPACE TO LS-WEEK
417900     CALL WS-DTEG2W
418000          USING WS-G15821015
418100                LS-WEEK
418200     IF RETURN-CODE > ZERO
418300       DISPLAY WS-PGMID " " WS-DTEG2W
418400            " COBOL RETURN CODE = " RETURN-CODE
418500     END-IF
418600
418700     DISPLAY WS-PGMID
418800          "    INPUT GREGORIAN: " WS-G15821015
418900          "  OUTPUT WEEK: " LS-WEEK
419000
419100     DISPLAY WS-PGMID
419200          " 6. TESTING DATE DTEW2G - 1582 41/15821011, error"
419300     MOVE ZERO TO LS-GREGORIAN
419400     CALL WS-DTEW2G
419500          USING WS-Y1582
419600                WS-W41
419700                LS-GREGORIAN
419800     IF RETURN-CODE > ZERO
419900       DISPLAY WS-PGMID " " WS-DTEW2G
420000            " COBOL RETURN CODE = " RETURN-CODE
420100     END-IF
420200
420300     DISPLAY WS-PGMID
420400          "    INPUT YEAR: " WS-Y1582 " WEEK: " WS-W41
420500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
420600
420700     DISPLAY WS-PGMID
420800          " 7. TESTING DATE DTEDOW1 - 15821015/6 FRIDAY"
420900     MOVE ZERO TO LS-GREGORIAN
421000     CALL WS-DTEDOW1
421100          USING WS-G15821015
421200                LS-DOW-NBR
421300                LS-DOW-TXT
421400     IF RETURN-CODE > ZERO
421500       DISPLAY WS-PGMID " " WS-DTEDOW1
421600            " COBOL RETURN CODE = " RETURN-CODE
421700     END-IF
421800
421900     DISPLAY WS-PGMID
422000          "    INPUT GREGORIAN: " WS-G15821015
422100          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
422200
422300     DISPLAY WS-PGMID
422400          " 8. TESTING DATE DTEDOW2 - 15821015/5 FRIDAY"
422500     MOVE ZERO TO LS-GREGORIAN
422600     CALL WS-DTEDOW2
422700          USING WS-G15821015
422800                LS-DOW-NBR
422900                LS-DOW-TXT
423000
423100     DISPLAY WS-PGMID
423200          "    INPUT GREGORIAN: " WS-G15821015
423300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
423400
423500     DISPLAY " "
423600
423700     DISPLAY WS-PGMID
423800          " 1. TESTING DATE DTEG2J - 15830101/1583001"
423900     MOVE ZERO TO LS-JULIAN
424000     CALL WS-DTEG2J
424100          USING WS-G15830101
424200                LS-JULIAN
424300     IF RETURN-CODE > ZERO
424400       DISPLAY WS-PGMID " " WS-DTEG2J
424500            " COBOL RETURN CODE = " RETURN-CODE
424600     END-IF
424700
424800     DISPLAY WS-PGMID
424900          "    INPUT GREGORIAN: " WS-G15830101
425000          "  OUTPUT JULIAN: " LS-JULIAN
425100
425200     DISPLAY WS-PGMID
425300          " 2. TESTING DATE DTEJ2G - 1583001/15830101"
425400     MOVE ZERO TO LS-GREGORIAN
425500     CALL WS-DTEJ2G
425600          USING WS-J1583001
425700                LS-GREGORIAN
425800     IF RETURN-CODE > ZERO
425900       DISPLAY WS-PGMID " " WS-DTEJ2G
426000            " COBOL RETURN CODE =  " RETURN-CODE
426100     END-IF
426200
426300     DISPLAY WS-PGMID
426400          "    INPUT JULIAN: " WS-J1583001
426500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
426600
426700     DISPLAY WS-PGMID
426800          " 3. TESTING DATE DTEG2B - 15830101/577813"
426900     MOVE ZERO TO LS-BDAY
427000     CALL WS-DTEG2B
427100          USING WS-G15830101
427200                LS-BDAY
427300     IF RETURN-CODE > ZERO
427400       DISPLAY WS-PGMID " " WS-DTEG2B
427500            " COBOL RETURN CODE =  " RETURN-CODE
427600     END-IF
427700
427800     DISPLAY WS-PGMID
427900          "    INPUT GREGORIAN: " WS-G15830101
428000          "  OUTPUT BASE: " LS-BDAY
428100
428200     DISPLAY WS-PGMID
428300          " 4. TESTING DATE DTEB2G - 577813/15830101"
428400     MOVE ZERO TO LS-GREGORIAN
428500     CALL WS-DTEB2G
428600          USING WS-B577813
428700                LS-GREGORIAN
428800     IF RETURN-CODE > ZERO
428900       DISPLAY WS-PGMID " " WS-DTEB2G
429000            " COBOL RETURN CODE =  " RETURN-CODE
429100     END-IF
429200
429300     DISPLAY WS-PGMID
429400          "    INPUT BASE: " WS-B577813
429500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
429600
429700     DISPLAY WS-PGMID
429800          " 5. TESTING DATE DTEG2W - 15830101/1582-W52-6, error"
429900     MOVE SPACE TO LS-WEEK
430000     CALL WS-DTEG2W
430100          USING WS-G15830101
430200                LS-WEEK
430300     IF RETURN-CODE > ZERO
430400       DISPLAY WS-PGMID " " WS-DTEG2W
430500            " COBOL RETURN CODE =  " RETURN-CODE
430600     END-IF
430700
430800     DISPLAY WS-PGMID
430900          "    INPUT GREGORIAN: " WS-G15830101
431000          "  OUTPUT WEEK: " LS-WEEK
431100
431200     DISPLAY WS-PGMID
431300          " 6. TESTING DATE DTEW2G - 1583 01/15830103"
431400     MOVE ZERO TO LS-GREGORIAN
431500     CALL WS-DTEW2G
431600          USING WS-Y1583
431700                WS-W01
431800                LS-GREGORIAN
431900     IF RETURN-CODE > ZERO
432000       DISPLAY WS-PGMID " " WS-DTEW2G
432100            " COBOL RETURN CODE =  " RETURN-CODE
432200     END-IF
432300
432400     DISPLAY WS-PGMID
432500          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W01
432600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
432700
432800     DISPLAY WS-PGMID
432900          " 7. TESTING DATE DTEDOW1 - 15830101/7 SATURDAY"
433000     MOVE ZERO TO LS-GREGORIAN
433100     CALL WS-DTEDOW1
433200          USING WS-G15830101
433300                LS-DOW-NBR
433400                LS-DOW-TXT
433500     IF RETURN-CODE > ZERO
433600       DISPLAY WS-PGMID " " WS-DTEDOW1
433700            " COBOL RETURN CODE = " RETURN-CODE
433800     END-IF
433900
434000     DISPLAY WS-PGMID
434100          "    INPUT GREGORIAN: " WS-G15830101
434200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
434300
434400     DISPLAY WS-PGMID
434500          " 8. TESTING DATE DTEDOW2 - 15830101/6 SATURDAY"
434600     MOVE ZERO TO LS-GREGORIAN
434700     CALL WS-DTEDOW2
434800          USING WS-G15830101
434900                LS-DOW-NBR
435000                LS-DOW-TXT
435100     IF RETURN-CODE > ZERO
435200       DISPLAY WS-PGMID " " WS-DTEDOW2
435300            " COBOL RETURN CODE = " RETURN-CODE
435400     END-IF
435500
435600     DISPLAY WS-PGMID
435700          "    INPUT GREGORIAN: " WS-G15830101
435800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
435900
436000     DISPLAY " "
436100
436200     DISPLAY WS-PGMID
436300          " 1. TESTING DATE DTEG2J - 15830228/1583059"
436400     MOVE ZERO TO LS-JULIAN
436500     CALL WS-DTEG2J
436600          USING WS-G15830228
436700                LS-JULIAN
436800     IF RETURN-CODE > ZERO
436900       DISPLAY WS-PGMID " " WS-DTEG2J
437000            " COBOL RETURN CODE =  " RETURN-CODE
437100     END-IF
437200
437300     DISPLAY WS-PGMID
437400          "    INPUT GREGORIAN: " WS-G15830228
437500          "  OUTPUT JULIAN: " LS-JULIAN
437600
437700     DISPLAY WS-PGMID
437800          " 2. TESTING DATE DTEJ2G - 1583059/15830228"
437900     MOVE ZERO TO LS-GREGORIAN
438000     CALL WS-DTEJ2G
438100          USING WS-J1583059
438200                LS-GREGORIAN
438300     IF RETURN-CODE > ZERO
438400       DISPLAY WS-PGMID " " WS-DTEJ2G
438500            " COBOL RETURN CODE =  " RETURN-CODE
438600     END-IF
438700
438800     DISPLAY WS-PGMID
438900          "    INPUT JULIAN: " WS-J1583059
439000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
439100
439200     DISPLAY WS-PGMID
439300          " 3. TESTING DATE DTEG2B - 15830228/577871"
439400     MOVE ZERO TO LS-BDAY
439500     CALL WS-DTEG2B
439600          USING WS-G15830228
439700                LS-BDAY
439800     IF RETURN-CODE > ZERO
439900       DISPLAY WS-PGMID " " WS-DTEG2B
440000            " COBOL RETURN CODE =  " RETURN-CODE
440100     END-IF
440200
440300     DISPLAY WS-PGMID
440400          "    INPUT GREGORIAN: " WS-G15830228
440500          "  OUTPUT BASE: " LS-BDAY
440600
440700     DISPLAY WS-PGMID
440800          " 4. TESTING DATE DTEB2G - 577871/15830228"
440900     MOVE ZERO TO LS-GREGORIAN
441000     CALL WS-DTEB2G
441100          USING WS-B577871
441200                LS-GREGORIAN
441300     IF RETURN-CODE > ZERO
441400       DISPLAY WS-PGMID " " WS-DTEB2G
441500            " COBOL RETURN CODE =  " RETURN-CODE
441600     END-IF
441700
441800     DISPLAY WS-PGMID
441900          "    INPUT BASE: " WS-B577871
442000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
442100
442200     DISPLAY WS-PGMID
442300          " 5. TESTING DATE DTEG2W - 15830228/1583-W09-1"
442400     MOVE SPACE TO LS-WEEK
442500     CALL WS-DTEG2W
442600          USING WS-G15830228
442700                LS-WEEK
442800     IF RETURN-CODE > ZERO
442900       DISPLAY WS-PGMID " " WS-DTEG2W
443000            " COBOL RETURN CODE =  " RETURN-CODE
443100     END-IF
443200
443300     DISPLAY WS-PGMID
443400          "    INPUT GREGORIAN: " WS-G15830228
443500          "  OUTPUT WEEK: " LS-WEEK
443600
443700     DISPLAY WS-PGMID
443800          " 6. TESTING DATE DTEW2G - 1583 09/15830228"
443900     MOVE ZERO TO LS-GREGORIAN
444000     CALL WS-DTEW2G
444100          USING WS-Y1583
444200                WS-W09
444300                LS-GREGORIAN
444400     IF RETURN-CODE > ZERO
444500       DISPLAY WS-PGMID " " WS-DTEW2G
444600            " COBOL RETURN CODE =  " RETURN-CODE
444700     END-IF
444800
444900     DISPLAY WS-PGMID
445000          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W09
445100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
445200
445300     DISPLAY WS-PGMID
445400          " 7. TESTING DATE DTEDOW1 - 15830228/2 MONDAY"
445500     MOVE ZERO TO LS-GREGORIAN
445600     CALL WS-DTEDOW1
445700          USING WS-G15830228
445800                LS-DOW-NBR
445900                LS-DOW-TXT
446000     IF RETURN-CODE > ZERO
446100       DISPLAY WS-PGMID " " WS-DTEDOW1
446200            " COBOL RETURN CODE = " RETURN-CODE
446300     END-IF
446400
446500     DISPLAY WS-PGMID
446600          "    INPUT GREGORIAN: " WS-G15830228
446700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
446800
446900     DISPLAY WS-PGMID
447000          " 8. TESTING DATE DTEDOW2 - 15830228/1 MONDAY"
447100     MOVE ZERO TO LS-GREGORIAN
447200     CALL WS-DTEDOW2
447300          USING WS-G15830228
447400                LS-DOW-NBR
447500                LS-DOW-TXT
447600     IF RETURN-CODE > ZERO
447700       DISPLAY WS-PGMID " " WS-DTEDOW2
447800            " COBOL RETURN CODE = " RETURN-CODE
447900     END-IF
448000
448100     DISPLAY WS-PGMID
448200          "    INPUT GREGORIAN: " WS-G15830228
448300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
448400
448500     DISPLAY " "
448600
448700     DISPLAY WS-PGMID
448800          " 1. TESTING DATE DTEG2J - 15830301/1583060"
448900     MOVE ZERO TO LS-JULIAN
449000     CALL WS-DTEG2J
449100          USING WS-G15830301
449200                LS-JULIAN
449300     IF RETURN-CODE > ZERO
449400       DISPLAY WS-PGMID " " WS-DTEG2J
449500            " COBOL RETURN CODE =  " RETURN-CODE
449600     END-IF
449700
449800     DISPLAY WS-PGMID
449900          "    INPUT GREGORIAN: " WS-G15830301
450000          "  OUTPUT JULIAN: " LS-JULIAN
450100
450200     DISPLAY WS-PGMID
450300          " 2. TESTING DATE DTEJ2G - 1583060/15830301"
450400     MOVE ZERO TO LS-GREGORIAN
450500     CALL WS-DTEJ2G
450600          USING WS-J1583060
450700                LS-GREGORIAN
450800     IF RETURN-CODE > ZERO
450900       DISPLAY WS-PGMID " " WS-DTEJ2G
451000            " COBOL RETURN CODE =  " RETURN-CODE
451100     END-IF
451200
451300     DISPLAY WS-PGMID
451400          "    INPUT JULIAN: " WS-J1583060
451500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
451600
451700     DISPLAY WS-PGMID
451800          " 3. TESTING DATE DTEG2B - 15830301/577872"
451900     MOVE ZERO TO LS-BDAY
452000     CALL WS-DTEG2B
452100          USING WS-G15830301
452200                LS-BDAY
452300     IF RETURN-CODE > ZERO
452400       DISPLAY WS-PGMID " " WS-DTEG2B
452500            " COBOL RETURN CODE =  " RETURN-CODE
452600     END-IF
452700
452800     DISPLAY WS-PGMID
452900          "    INPUT GREGORIAN: " WS-G15830301
453000          "  OUTPUT BASE: " LS-BDAY
453100
453200     DISPLAY WS-PGMID
453300          " 4. TESTING DATE DTEB2G - 577872/15830301"
453400     MOVE ZERO TO LS-GREGORIAN
453500     CALL WS-DTEB2G
453600          USING WS-B577872
453700                LS-GREGORIAN
453800     IF RETURN-CODE > ZERO
453900       DISPLAY WS-PGMID " " WS-DTEB2G
454000            " COBOL RETURN CODE =  " RETURN-CODE
454100     END-IF
454200
454300     DISPLAY WS-PGMID
454400          "    INPUT BASE: " WS-B577872
454500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
454600
454700     DISPLAY WS-PGMID
454800          " 5. TESTING DATE DTEG2W - 15830301/1583-W09-2"
454900     MOVE SPACE TO LS-WEEK
455000     CALL WS-DTEG2W
455100          USING WS-G15830301
455200                LS-WEEK
455300     IF RETURN-CODE > ZERO
455400       DISPLAY WS-PGMID " " WS-DTEG2W
455500            " COBOL RETURN CODE =  " RETURN-CODE
455600     END-IF
455700
455800     DISPLAY WS-PGMID
455900          "    INPUT GREGORIAN: " WS-G15830301
456000          "  OUTPUT WEEK: " LS-WEEK
456100
456200     DISPLAY WS-PGMID
456300          " 6. TESTING DATE DTEW2G - 1583 09/15830228"
456400     MOVE ZERO TO LS-GREGORIAN
456500     CALL WS-DTEW2G
456600          USING WS-Y1583
456700                WS-W09
456800                LS-GREGORIAN
456900     IF RETURN-CODE > ZERO
457000       DISPLAY WS-PGMID " " WS-DTEW2G
457100            " COBOL RETURN CODE =  " RETURN-CODE
457200     END-IF
457300
457400     DISPLAY WS-PGMID
457500          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W09
457600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
457700
457800     DISPLAY WS-PGMID
457900          " 7. TESTING DATE DTEDOW1 - 15830301/3 TUESDAY"
458000     MOVE ZERO TO LS-GREGORIAN
458100     CALL WS-DTEDOW1
458200          USING WS-G15830301
458300                LS-DOW-NBR
458400                LS-DOW-TXT
458500     IF RETURN-CODE > ZERO
458600       DISPLAY WS-PGMID " " WS-DTEDOW1
458700            " COBOL RETURN CODE = " RETURN-CODE
458800     END-IF
458900
459000     DISPLAY WS-PGMID
459100          "    INPUT GREGORIAN: " WS-G15830301
459200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
459300
459400     DISPLAY WS-PGMID
459500          " 8. TESTING DATE DTEDOW2 - 15830301/2 TUESDAY"
459600     MOVE ZERO TO LS-GREGORIAN
459700     CALL WS-DTEDOW2
459800          USING WS-G15830301
459900                LS-DOW-NBR
460000                LS-DOW-TXT
460100     IF RETURN-CODE > ZERO
460200       DISPLAY WS-PGMID " " WS-DTEDOW2
460300            " COBOL RETURN CODE = " RETURN-CODE
460400     END-IF
460500
460600     DISPLAY WS-PGMID
460700          "    INPUT GREGORIAN: " WS-G15830301
460800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
460900
461000     DISPLAY " "
461100
461200     DISPLAY WS-PGMID
461300          " 1. TESTING DATE DTEG2J - 15831231/1583365"
461400     MOVE ZERO TO LS-JULIAN
461500     CALL WS-DTEG2J
461600          USING WS-G15831231
461700                LS-JULIAN
461800     IF RETURN-CODE > ZERO
461900       DISPLAY WS-PGMID " " WS-DTEG2J
462000            " COBOL RETURN CODE =  " RETURN-CODE
462100     END-IF
462200
462300     DISPLAY WS-PGMID
462400          "    INPUT GREGORIAN: " WS-G15831231
462500          "  OUTPUT JULIAN: " LS-JULIAN
462600
462700     DISPLAY WS-PGMID
462800          " 2. TESTING DATE DTEJ2G - 1583365/15831231"
462900     MOVE ZERO TO LS-GREGORIAN
463000     CALL WS-DTEJ2G
463100          USING WS-J1583365
463200                LS-GREGORIAN
463300     IF RETURN-CODE > ZERO
463400       DISPLAY WS-PGMID " " WS-DTEJ2G
463500            " COBOL RETURN CODE =  " RETURN-CODE
463600     END-IF
463700
463800     DISPLAY WS-PGMID
463900          "    INPUT JULIAN: " WS-J1583365
464000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
464100
464200     DISPLAY WS-PGMID
464300          " 3. TESTING DATE DTEG2B - 15831231/578177"
464400     MOVE ZERO TO LS-BDAY
464500     CALL WS-DTEG2B
464600          USING WS-G15831231
464700                LS-BDAY
464800     IF RETURN-CODE > ZERO
464900       DISPLAY WS-PGMID " " WS-DTEG2B
465000            " COBOL RETURN CODE =  " RETURN-CODE
465100     END-IF
465200
465300     DISPLAY WS-PGMID
465400          "    INPUT GREGORIAN: " WS-G15831231
465500          "  OUTPUT BASE: " LS-BDAY
465600
465700     DISPLAY WS-PGMID
465800          " 4. TESTING DATE DTEB2G - 578177/15831231"
465900     MOVE ZERO TO LS-GREGORIAN
466000     CALL WS-DTEB2G
466100          USING WS-B578177
466200                LS-GREGORIAN
466300     IF RETURN-CODE > ZERO
466400       DISPLAY WS-PGMID " " WS-DTEB2G
466500            " COBOL RETURN CODE =  " RETURN-CODE
466600     END-IF
466700
466800     DISPLAY WS-PGMID
466900          "    INPUT BASE: " WS-B578177
467000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
467100
467200     DISPLAY WS-PGMID
467300          " 5. TESTING DATE DTEG2W - 15831231/1583-W52-6"
467400     MOVE SPACE TO LS-WEEK
467500     CALL WS-DTEG2W
467600          USING WS-G15831231
467700                LS-WEEK
467800     IF RETURN-CODE > ZERO
467900       DISPLAY WS-PGMID " " WS-DTEG2W
468000            " COBOL RETURN CODE =  " RETURN-CODE
468100     END-IF
468200
468300     DISPLAY WS-PGMID
468400          "    INPUT GREGORIAN: " WS-G15831231
468500          "  OUTPUT WEEK: " LS-WEEK
468600
468700     DISPLAY WS-PGMID
468800          " 6. TESTING DATE DTEW2G - 1583 52/15831226"
468900     MOVE ZERO TO LS-GREGORIAN
469000     CALL WS-DTEW2G
469100          USING WS-Y1583
469200                WS-W52
469300                LS-GREGORIAN
469400     IF RETURN-CODE > ZERO
469500       DISPLAY WS-PGMID " " WS-DTEW2G
469600            " COBOL RETURN CODE =  " RETURN-CODE
469700     END-IF
469800
469900     DISPLAY WS-PGMID
470000          "    INPUT YEAR: " WS-Y1583 " WEEK: " WS-W52
470100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
470200
470300     DISPLAY WS-PGMID
470400          " 7. TESTING DATE DTEDOW1 - 15831231/7 SATURDAY"
470500     MOVE ZERO TO LS-GREGORIAN
470600     CALL WS-DTEDOW1
470700          USING WS-G15831231
470800                LS-DOW-NBR
470900                LS-DOW-TXT
471000     IF RETURN-CODE > ZERO
471100       DISPLAY WS-PGMID " " WS-DTEDOW1
471200            " COBOL RETURN CODE = " RETURN-CODE
471300     END-IF
471400
471500     DISPLAY WS-PGMID
471600          "    INPUT GREGORIAN: " WS-G15831231
471700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
471800
471900     DISPLAY WS-PGMID
472000          " 8. TESTING DATE DTEDOW2 - 15831231/6 SATURDAY"
472100     MOVE ZERO TO LS-GREGORIAN
472200     CALL WS-DTEDOW2
472300          USING WS-G15831231
472400                LS-DOW-NBR
472500                LS-DOW-TXT
472600     IF RETURN-CODE > ZERO
472700       DISPLAY WS-PGMID " " WS-DTEDOW2
472800            " COBOL RETURN CODE = " RETURN-CODE
472900     END-IF
473000
473100     DISPLAY WS-PGMID
473200          "    INPUT GREGORIAN: " WS-G15831231
473300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
473400
473500     DISPLAY " "
473600
473700     DISPLAY WS-PGMID
473800          " 1. TESTING DATE DTEG2J - 16010101/1601001"
473900     MOVE ZERO TO LS-JULIAN
474000     CALL WS-DTEG2J
474100          USING WS-G16010101
474200                LS-JULIAN
474300     IF RETURN-CODE > ZERO
474400       DISPLAY WS-PGMID " " WS-DTEG2J
474500            " COBOL RETURN CODE =  " RETURN-CODE
474600     END-IF
474700
474800     DISPLAY WS-PGMID
474900          "    INPUT GREGORIAN: " WS-G16010101
475000          "  OUTPUT JULIAN: " LS-JULIAN
475100
475200     DISPLAY WS-PGMID
475300          " 2. TESTING DATE DTEJ2G - 1601001/16010101"
475400     MOVE ZERO TO LS-GREGORIAN
475500     CALL WS-DTEJ2G
475600          USING WS-J1601001
475700                LS-GREGORIAN
475800     IF RETURN-CODE > ZERO
475900       DISPLAY WS-PGMID " " WS-DTEJ2G
476000            " COBOL RETURN CODE =  " RETURN-CODE
476100     END-IF
476200
476300     DISPLAY WS-PGMID
476400          "    INPUT JULIAN: " WS-J1601001
476500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
476600
476700     DISPLAY WS-PGMID
476800          " 3. TESTING DATE DTEG2B - 16010101/584388"
476900     MOVE ZERO TO LS-BDAY
477000     CALL WS-DTEG2B
477100          USING WS-G16010101
477200                LS-BDAY
477300     IF RETURN-CODE > ZERO
477400       DISPLAY WS-PGMID " " WS-DTEG2B
477500            " COBOL RETURN CODE =  " RETURN-CODE
477600     END-IF
477700
477800     DISPLAY WS-PGMID
477900          "    INPUT GREGORIAN: " WS-G16010101
478000          "  OUTPUT BASE: " LS-BDAY
478100
478200     DISPLAY WS-PGMID
478300          " 4. TESTING DATE DTEB2G - 584388/16010101"
478400     MOVE ZERO TO LS-GREGORIAN
478500     CALL WS-DTEB2G
478600          USING WS-B584388
478700                LS-GREGORIAN
478800     IF RETURN-CODE > ZERO
478900       DISPLAY WS-PGMID " " WS-DTEB2G
479000            " COBOL RETURN CODE =  " RETURN-CODE
479100     END-IF
479200
479300     DISPLAY WS-PGMID
479400          "    INPUT BASE: " WS-B584388
479500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
479600
479700     DISPLAY WS-PGMID
479800          " 5. TESTING DATE DTEG2W - 16010101/1601-W01-1"
479900     MOVE SPACE TO LS-WEEK
480000     CALL WS-DTEG2W
480100          USING WS-G16010101
480200                LS-WEEK
480300     IF RETURN-CODE > ZERO
480400       DISPLAY WS-PGMID " " WS-DTEG2W
480500            " COBOL RETURN CODE =  " RETURN-CODE
480600     END-IF
480700
480800     DISPLAY WS-PGMID
480900          "    INPUT GREGORIAN: " WS-G16010101
481000          "  OUTPUT WEEK: " LS-WEEK
481100
481200     DISPLAY WS-PGMID
481300          " 6. TESTING DATE DTEW2G - 1601 01/16010101"
481400     MOVE ZERO TO LS-GREGORIAN
481500     CALL WS-DTEW2G
481600          USING WS-Y1601
481700                WS-W01
481800                LS-GREGORIAN
481900     IF RETURN-CODE > ZERO
482000       DISPLAY WS-PGMID " " WS-DTEW2G
482100            " COBOL RETURN CODE =  " RETURN-CODE
482200     END-IF
482300
482400     DISPLAY WS-PGMID
482500          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W01
482600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
482700
482800     DISPLAY WS-PGMID
482900          " 7. TESTING DATE DTEDOW1 - 16010101/2 MONDAY"
483000     MOVE ZERO TO LS-GREGORIAN
483100     CALL WS-DTEDOW1
483200          USING WS-G16010101
483300                LS-DOW-NBR
483400                LS-DOW-TXT
483500     IF RETURN-CODE > ZERO
483600       DISPLAY WS-PGMID " " WS-DTEDOW1
483700            " COBOL RETURN CODE = " RETURN-CODE
483800     END-IF
483900
484000     DISPLAY WS-PGMID
484100          "    INPUT GREGORIAN: " WS-G16010101
484200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
484300
484400     DISPLAY WS-PGMID
484500          " 8. TESTING DATE DTEDOW2 - 16010101/1 MONDAY"
484600     MOVE ZERO TO LS-GREGORIAN
484700     CALL WS-DTEDOW2
484800          USING WS-G16010101
484900                LS-DOW-NBR
485000                LS-DOW-TXT
485100     IF RETURN-CODE > ZERO
485200       DISPLAY WS-PGMID " " WS-DTEDOW2
485300            " COBOL RETURN CODE = " RETURN-CODE
485400     END-IF
485500
485600     DISPLAY WS-PGMID
485700          "    INPUT GREGORIAN: " WS-G16010101
485800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
485900
486000     DISPLAY " "
486100
486200     DISPLAY WS-PGMID
486300          " 1. TESTING DATE DTEG2J - 16010228/1601059"
486400     MOVE ZERO TO LS-JULIAN
486500     CALL WS-DTEG2J
486600          USING WS-G16010228
486700                LS-JULIAN
486800     IF RETURN-CODE > ZERO
486900       DISPLAY WS-PGMID " " WS-DTEG2J
487000            " COBOL RETURN CODE =  " RETURN-CODE
487100     END-IF
487200
487300     DISPLAY WS-PGMID
487400          "    INPUT GREGORIAN: " WS-G16010228
487500          "  OUTPUT JULIAN: " LS-JULIAN
487600
487700     DISPLAY WS-PGMID
487800          " 2. TESTING DATE DTEJ2G - 1601059/16010228"
487900     MOVE ZERO TO LS-GREGORIAN
488000     CALL WS-DTEJ2G
488100          USING WS-J1601059
488200                LS-GREGORIAN
488300     IF RETURN-CODE > ZERO
488400       DISPLAY WS-PGMID " " WS-DTEJ2G
488500            " COBOL RETURN CODE =  " RETURN-CODE
488600     END-IF
488700
488800     DISPLAY WS-PGMID
488900          "    INPUT JULIAN: " WS-J1601059
489000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
489100
489200     DISPLAY WS-PGMID
489300          " 3. TESTING DATE DTEG2B - 16010228/584446"
489400     MOVE ZERO TO LS-BDAY
489500     CALL WS-DTEG2B
489600          USING WS-G16010228
489700                LS-BDAY
489800     IF RETURN-CODE > ZERO
489900       DISPLAY WS-PGMID " " WS-DTEG2B
490000            " COBOL RETURN CODE =  " RETURN-CODE
490100     END-IF
490200
490300     DISPLAY WS-PGMID
490400          "    INPUT GREGORIAN: " WS-G16010228
490500          "  OUTPUT BASE: " LS-BDAY
490600
490700     DISPLAY WS-PGMID
490800          " 4. TESTING DATE DTEB2G - 584446/16010228"
490900     MOVE ZERO TO LS-GREGORIAN
491000     CALL WS-DTEB2G
491100          USING WS-B584446
491200                LS-GREGORIAN
491300     IF RETURN-CODE > ZERO
491400       DISPLAY WS-PGMID " " WS-DTEB2G
491500            " COBOL RETURN CODE =  " RETURN-CODE
491600     END-IF
491700
491800     DISPLAY WS-PGMID
491900          "    INPUT BASE: " WS-B584446
492000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
492100
492200     DISPLAY WS-PGMID
492300          " 5. TESTING DATE DTEG2W - 16010228/1601-W09-3"
492400     MOVE SPACE TO LS-WEEK
492500     CALL WS-DTEG2W
492600          USING WS-G16010228
492700                LS-WEEK
492800     IF RETURN-CODE > ZERO
492900       DISPLAY WS-PGMID " " WS-DTEG2W
493000            " COBOL RETURN CODE =  " RETURN-CODE
493100     END-IF
493200
493300     DISPLAY WS-PGMID
493400          "    INPUT GREGORIAN: " WS-G16010228
493500          "  OUTPUT WEEK: " LS-WEEK
493600
493700     DISPLAY WS-PGMID
493800          " 6. TESTING DATE DTEW2G - 1601 09/16010226"
493900     MOVE ZERO TO LS-GREGORIAN
494000     CALL WS-DTEW2G
494100          USING WS-Y1601
494200                WS-W09
494300                LS-GREGORIAN
494400     IF RETURN-CODE > ZERO
494500       DISPLAY WS-PGMID " " WS-DTEW2G
494600            " COBOL RETURN CODE =  " RETURN-CODE
494700     END-IF
494800
494900     DISPLAY WS-PGMID
495000          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W09
495100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
495200
495300     DISPLAY WS-PGMID
495400          " 7. TESTING DATE DTEDOW1 - 16010228/4 WEDNESDAY"
495500     MOVE ZERO TO LS-GREGORIAN
495600     CALL WS-DTEDOW1
495700          USING WS-G16010228
495800                LS-DOW-NBR
495900                LS-DOW-TXT
496000     IF RETURN-CODE > ZERO
496100       DISPLAY WS-PGMID " " WS-DTEDOW1
496200            " COBOL RETURN CODE = " RETURN-CODE
496300     END-IF
496400
496500     DISPLAY WS-PGMID
496600          "    INPUT GREGORIAN: " WS-G16010228
496700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
496800
496900     DISPLAY WS-PGMID
497000          " 8. TESTING DATE DTEDOW2 - 16010228/3 WEDNESDAY"
497100     MOVE ZERO TO LS-GREGORIAN
497200     CALL WS-DTEDOW2
497300          USING WS-G16010228
497400                LS-DOW-NBR
497500                LS-DOW-TXT
497600     IF RETURN-CODE > ZERO
497700       DISPLAY WS-PGMID " " WS-DTEDOW2
497800            " COBOL RETURN CODE = " RETURN-CODE
497900     END-IF
498000
498100     DISPLAY WS-PGMID
498200          "    INPUT GREGORIAN: " WS-G16010228
498300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
498400
498500     DISPLAY " "
498600
498700     DISPLAY WS-PGMID
498800          " 1. TESTING DATE DTEG2J - 16010301/1601060"
498900     MOVE ZERO TO LS-JULIAN
499000     CALL WS-DTEG2J
499100          USING WS-G16010301
499200                LS-JULIAN
499300     IF RETURN-CODE > ZERO
499400       DISPLAY WS-PGMID " " WS-DTEG2J
499500            " COBOL RETURN CODE =  " RETURN-CODE
499600     END-IF
499700
499800     DISPLAY WS-PGMID
499900          "    INPUT GREGORIAN: " WS-G16010301
500000          "  OUTPUT JULIAN: " LS-JULIAN
500100
500200     DISPLAY WS-PGMID
500300          " 2. TESTING DATE DTEJ2G - 1601060/16010301"
500400     MOVE ZERO TO LS-GREGORIAN
500500     CALL WS-DTEJ2G
500600          USING WS-J1601060
500700                LS-GREGORIAN
500800     IF RETURN-CODE > ZERO
500900       DISPLAY WS-PGMID " " WS-DTEJ2G
501000            " COBOL RETURN CODE =  " RETURN-CODE
501100     END-IF
501200
501300     DISPLAY WS-PGMID
501400          "    INPUT JULIAN: " WS-J1601060
501500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
501600
501700     DISPLAY WS-PGMID
501800          " 3. TESTING DATE DTEG2B - 16010301/584447"
501900     MOVE ZERO TO LS-BDAY
502000     CALL WS-DTEG2B
502100          USING WS-G16010301
502200                LS-BDAY
502300     IF RETURN-CODE > ZERO
502400       DISPLAY WS-PGMID " " WS-DTEG2B
502500            " COBOL RETURN CODE =  " RETURN-CODE
502600     END-IF
502700
502800     DISPLAY WS-PGMID
502900          "    INPUT GREGORIAN: " WS-G16010301
503000          "  OUTPUT BASE: " LS-BDAY
503100
503200     DISPLAY WS-PGMID
503300          " 4. TESTING DATE DTEB2G - 584447/16010301"
503400     MOVE ZERO TO LS-GREGORIAN
503500     CALL WS-DTEB2G
503600          USING WS-B584447
503700                LS-GREGORIAN
503800     IF RETURN-CODE > ZERO
503900       DISPLAY WS-PGMID " " WS-DTEB2G
504000            " COBOL RETURN CODE =  " RETURN-CODE
504100     END-IF
504200
504300     DISPLAY WS-PGMID
504400          "    INPUT BASE: " WS-B584447
504500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
504600
504700     DISPLAY WS-PGMID
504800          " 5. TESTING DATE DTEG2W - 16010301/1601-W09-4"
504900     MOVE SPACE TO LS-WEEK
505000     CALL WS-DTEG2W
505100          USING WS-G16010301
505200                LS-WEEK
505300     IF RETURN-CODE > ZERO
505400       DISPLAY WS-PGMID " " WS-DTEG2W
505500            " COBOL RETURN CODE =  " RETURN-CODE
505600     END-IF
505700
505800     DISPLAY WS-PGMID
505900          "    INPUT GREGORIAN: " WS-G16010301
506000          "  OUTPUT WEEK: " LS-WEEK
506100
506200     DISPLAY WS-PGMID
506300          " 6. TESTING DATE DTEW2G - 1601 09/16010226"
506400     MOVE ZERO TO LS-GREGORIAN
506500     CALL WS-DTEW2G
506600          USING WS-Y1601
506700                WS-W09
506800                LS-GREGORIAN
506900     IF RETURN-CODE > ZERO
507000       DISPLAY WS-PGMID " " WS-DTEW2G
507100            " COBOL RETURN CODE =  " RETURN-CODE
507200     END-IF
507300
507400     DISPLAY WS-PGMID
507500          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W09
507600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
507700
507800     DISPLAY WS-PGMID
507900          " 7. TESTING DATE DTEDOW1 - 16010301/5 THURSDAY"
508000     MOVE ZERO TO LS-GREGORIAN
508100     CALL WS-DTEDOW1
508200          USING WS-G16010301
508300                LS-DOW-NBR
508400                LS-DOW-TXT
508500     IF RETURN-CODE > ZERO
508600       DISPLAY WS-PGMID " " WS-DTEDOW1
508700            " COBOL RETURN CODE = " RETURN-CODE
508800     END-IF
508900
509000     DISPLAY WS-PGMID
509100          "    INPUT GREGORIAN: " WS-G16010301
509200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
509300
509400     DISPLAY WS-PGMID
509500          " 8. TESTING DATE DTEDOW2 - 16010301/4 THURSDAY"
509600     MOVE ZERO TO LS-GREGORIAN
509700     CALL WS-DTEDOW2
509800          USING WS-G16010301
509900                LS-DOW-NBR
510000                LS-DOW-TXT
510100     IF RETURN-CODE > ZERO
510200       DISPLAY WS-PGMID " " WS-DTEDOW2
510300            " COBOL RETURN CODE = " RETURN-CODE
510400     END-IF
510500
510600     DISPLAY WS-PGMID
510700          "    INPUT GREGORIAN: " WS-G16010301
510800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
510900
511000     DISPLAY " "
511100
511200     DISPLAY WS-PGMID
511300          " 1. TESTING DATE DTEG2J - 16011231/1601365"
511400     MOVE ZERO TO LS-JULIAN
511500     CALL WS-DTEG2J
511600          USING WS-G16011231
511700                LS-JULIAN
511800     IF RETURN-CODE > ZERO
511900       DISPLAY WS-PGMID " " WS-DTEG2J
512000            " COBOL RETURN CODE =  " RETURN-CODE
512100     END-IF
512200
512300     DISPLAY WS-PGMID
512400          "    INPUT GREGORIAN: " WS-G16011231
512500          "  OUTPUT JULIAN: " LS-JULIAN
512600
512700     DISPLAY WS-PGMID
512800          " 2. TESTING DATE DTEJ2G - 1601365/16011231"
512900     MOVE ZERO TO LS-GREGORIAN
513000     CALL WS-DTEJ2G
513100          USING WS-J1601365
513200                LS-GREGORIAN
513300     IF RETURN-CODE > ZERO
513400       DISPLAY WS-PGMID " " WS-DTEJ2G
513500            " COBOL RETURN CODE =  " RETURN-CODE
513600     END-IF
513700
513800     DISPLAY WS-PGMID
513900          "    INPUT JULIAN: " WS-J1601365
514000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
514100
514200     DISPLAY WS-PGMID
514300          " 3. TESTING DATE DTEG2B - 16011231/584752"
514400     MOVE ZERO TO LS-BDAY
514500     CALL WS-DTEG2B
514600          USING WS-G16011231
514700                LS-BDAY
514800     IF RETURN-CODE > ZERO
514900       DISPLAY WS-PGMID " " WS-DTEG2B
515000            " COBOL RETURN CODE =  " RETURN-CODE
515100     END-IF
515200
515300     DISPLAY WS-PGMID
515400          "    INPUT GREGORIAN: " WS-G16011231
515500          "  OUTPUT BASE: " LS-BDAY
515600
515700     DISPLAY WS-PGMID
515800          " 4. TESTING DATE DTEB2G - 584752/16011231"
515900     MOVE ZERO TO LS-GREGORIAN
516000     CALL WS-DTEB2G
516100          USING WS-B584752
516200                LS-GREGORIAN
516300     IF RETURN-CODE > ZERO
516400       DISPLAY WS-PGMID " " WS-DTEB2G
516500            " COBOL RETURN CODE =  " RETURN-CODE
516600     END-IF
516700
516800     DISPLAY WS-PGMID
516900          "    INPUT BASE: " WS-B584752
517000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
517100
517200     DISPLAY WS-PGMID
517300          " 5. TESTING DATE DTEG2W - 16011231/1601-W53-1"
517400     MOVE SPACE TO LS-WEEK
517500     CALL WS-DTEG2W
517600          USING WS-G16011231
517700                LS-WEEK
517800     IF RETURN-CODE > ZERO
517900       DISPLAY WS-PGMID " " WS-DTEG2W
518000            " COBOL RETURN CODE =  " RETURN-CODE
518100     END-IF
518200
518300     DISPLAY WS-PGMID
518400          "    INPUT GREGORIAN: " WS-G16011231
518500          "  OUTPUT WEEK: " LS-WEEK
518600
518700     DISPLAY WS-PGMID
518800          " 6. TESTING DATE DTEW2G - 1601 53/16011231"
518900     MOVE ZERO TO LS-GREGORIAN
519000     CALL WS-DTEW2G
519100          USING WS-Y1601
519200                WS-W53
519300                LS-GREGORIAN
519400     IF RETURN-CODE > ZERO
519500       DISPLAY WS-PGMID " " WS-DTEW2G
519600            " COBOL RETURN CODE =  " RETURN-CODE
519700     END-IF
519800
519900     DISPLAY WS-PGMID
520000          "    INPUT YEAR: " WS-Y1601 " WEEK: " WS-W53
520100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
520200
520300     DISPLAY WS-PGMID
520400          " 7. TESTING DATE DTEDOW1 - 16011231/2 MONDAY"
520500     MOVE ZERO TO LS-GREGORIAN
520600     CALL WS-DTEDOW1
520700          USING WS-G16011231
520800                LS-DOW-NBR
520900                LS-DOW-TXT
521000     IF RETURN-CODE > ZERO
521100       DISPLAY WS-PGMID " " WS-DTEDOW1
521200            " COBOL RETURN CODE = " RETURN-CODE
521300     END-IF
521400
521500     DISPLAY WS-PGMID
521600          "    INPUT GREGORIAN: " WS-G16011231
521700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
521800
521900     DISPLAY WS-PGMID
522000          " 8. TESTING DATE DTEDOW2 - 16011231/1 MONDAY"
522100     MOVE ZERO TO LS-GREGORIAN
522200     CALL WS-DTEDOW2
522300          USING WS-G16011231
522400                LS-DOW-NBR
522500                LS-DOW-TXT
522600     IF RETURN-CODE > ZERO
522700       DISPLAY WS-PGMID " " WS-DTEDOW2
522800            " COBOL RETURN CODE = " RETURN-CODE
522900     END-IF
523000
523100     DISPLAY WS-PGMID
523200          "    INPUT GREGORIAN: " WS-G16011231
523300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
523400
523500     DISPLAY " "
523600
523700     DISPLAY WS-PGMID
523800          " 1. TESTING DATE DTEG2J - 18750520/1875140"
523900     MOVE ZERO TO LS-JULIAN
524000     CALL WS-DTEG2J
524100          USING WS-G18750520
524200                LS-JULIAN
524300     IF RETURN-CODE > ZERO
524400       DISPLAY WS-PGMID " " WS-DTEG2J
524500            " COBOL RETURN CODE =  " RETURN-CODE
524600     END-IF
524700
524800     DISPLAY WS-PGMID
524900          "    INPUT GREGORIAN: " WS-G18750520
525000          "  OUTPUT JULIAN: " LS-JULIAN
525100
525200     DISPLAY WS-PGMID
525300          " 2. TESTING DATE DTEJ2G - 1875140/18750520"
525400     MOVE ZERO TO LS-GREGORIAN
525500     CALL WS-DTEJ2G
525600          USING WS-J1875140
525700                LS-GREGORIAN
525800     IF RETURN-CODE > ZERO
525900       DISPLAY WS-PGMID " " WS-DTEJ2G
526000            " COBOL RETURN CODE =  " RETURN-CODE
526100     END-IF
526200
526300     DISPLAY WS-PGMID
526400          "    INPUT JULIAN: " WS-J1875140
526500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
526600
526700     DISPLAY WS-PGMID
526800          " 3. TESTING DATE DTEG2B - 18750520/684603"
526900     MOVE ZERO TO LS-BDAY
527000     CALL WS-DTEG2B
527100          USING WS-G18750520
527200                LS-BDAY
527300     IF RETURN-CODE > ZERO
527400       DISPLAY WS-PGMID " " WS-DTEG2B
527500            " COBOL RETURN CODE =  " RETURN-CODE
527600     END-IF
527700
527800     DISPLAY WS-PGMID
527900          "    INPUT GREGORIAN: " WS-G18750520
528000          "  OUTPUT BASE: " LS-BDAY
528100
528200     DISPLAY WS-PGMID
528300          " 4. TESTING DATE DTEB2G - 684603/18750520"
528400     MOVE ZERO TO LS-GREGORIAN
528500     CALL WS-DTEB2G
528600          USING WS-B684603
528700                LS-GREGORIAN
528800     IF RETURN-CODE > ZERO
528900       DISPLAY WS-PGMID " " WS-DTEB2G
529000            " COBOL RETURN CODE =  " RETURN-CODE
529100     END-IF
529200
529300     DISPLAY WS-PGMID
529400          "    INPUT BASE: " WS-B684603
529500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
529600
529700     DISPLAY WS-PGMID
529800          " 5. TESTING DATE DTEG2W - 18750520/1875-W20-4"
529900     MOVE SPACE TO LS-WEEK
530000     CALL WS-DTEG2W
530100          USING WS-G18750520
530200                LS-WEEK
530300     IF RETURN-CODE > ZERO
530400       DISPLAY WS-PGMID " " WS-DTEG2W
530500            " COBOL RETURN CODE =  " RETURN-CODE
530600     END-IF
530700
530800     DISPLAY WS-PGMID
530900          "    INPUT GREGORIAN: " WS-G18750520
531000          "  OUTPUT WEEK: " LS-WEEK
531100
531200     DISPLAY WS-PGMID
531300          " 6. TESTING DATE DTEW2G - 1875 20/18750517"
531400     MOVE ZERO TO LS-GREGORIAN
531500     CALL WS-DTEW2G
531600          USING WS-Y1875
531700                WS-W20
531800                LS-GREGORIAN
531900     IF RETURN-CODE > ZERO
532000       DISPLAY WS-PGMID " " WS-DTEW2G
532100            " COBOL RETURN CODE =  " RETURN-CODE
532200     END-IF
532300
532400     DISPLAY WS-PGMID
532500          "    INPUT YEAR: " WS-Y1875 " WEEK: " WS-W20
532600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
532700
532800     DISPLAY WS-PGMID
532900          " 7. TESTING DATE DTEDOW1 - 18750520/5 THURSDAY"
533000     MOVE ZERO TO LS-GREGORIAN
533100     CALL WS-DTEDOW1
533200          USING WS-G18750520
533300                LS-DOW-NBR
533400                LS-DOW-TXT
533500     IF RETURN-CODE > ZERO
533600       DISPLAY WS-PGMID " " WS-DTEDOW1
533700            " COBOL RETURN CODE = " RETURN-CODE
533800     END-IF
533900
534000     DISPLAY WS-PGMID
534100          "    INPUT GREGORIAN: " WS-G18750520
534200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
534300
534400     DISPLAY WS-PGMID
534500          " 8. TESTING DATE DTEDOW2 - 18750520/4 THURSDAY"
534600     MOVE ZERO TO LS-GREGORIAN
534700     CALL WS-DTEDOW2
534800          USING WS-G18750520
534900                LS-DOW-NBR
535000                LS-DOW-TXT
535100     IF RETURN-CODE > ZERO
535200       DISPLAY WS-PGMID " " WS-DTEDOW2
535300            " COBOL RETURN CODE = " RETURN-CODE
535400     END-IF
535500
535600     DISPLAY WS-PGMID
535700          "    INPUT GREGORIAN: " WS-G18750520
535800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
535900
536000     DISPLAY " "
536100
536200     DISPLAY WS-PGMID
536300          " 1. TESTING DATE DTEG2J - 18751231/1875365"
536400     MOVE ZERO TO LS-JULIAN
536500     CALL WS-DTEG2J
536600          USING WS-G18751231
536700                LS-JULIAN
536800     IF RETURN-CODE > ZERO
536900       DISPLAY WS-PGMID " " WS-DTEG2J
537000            " COBOL RETURN CODE =  " RETURN-CODE
537100     END-IF
537200
537300     DISPLAY WS-PGMID
537400          "    INPUT GREGORIAN: " WS-G18751231
537500          "  OUTPUT JULIAN: " LS-JULIAN
537600
537700     DISPLAY WS-PGMID
537800          " 2. TESTING DATE DTEJ2G - 1875365/18751231"
537900     MOVE ZERO TO LS-GREGORIAN
538000     CALL WS-DTEJ2G
538100          USING WS-J1875365
538200                LS-GREGORIAN
538300     IF RETURN-CODE > ZERO
538400       DISPLAY WS-PGMID " " WS-DTEJ2G
538500            " COBOL RETURN CODE =  " RETURN-CODE
538600     END-IF
538700
538800     DISPLAY WS-PGMID
538900          "    INPUT JULIAN: " WS-J1875365
539000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
539100
539200     DISPLAY WS-PGMID
539300          " 3. TESTING DATE DTEG2B - 18751231/684828"
539400     MOVE ZERO TO LS-BDAY
539500     CALL WS-DTEG2B
539600          USING WS-G18751231
539700                LS-BDAY
539800     IF RETURN-CODE > ZERO
539900       DISPLAY WS-PGMID " " WS-DTEG2B
540000            " COBOL RETURN CODE =  " RETURN-CODE
540100     END-IF
540200
540300     DISPLAY WS-PGMID
540400          "    INPUT GREGORIAN: " WS-G18751231
540500          "  OUTPUT BASE: " LS-BDAY
540600
540700     DISPLAY WS-PGMID
540800          " 4. TESTING DATE DTEB2G - 684828/18751231"
540900     MOVE ZERO TO LS-GREGORIAN
541000     CALL WS-DTEB2G
541100          USING WS-B684828
541200                LS-GREGORIAN
541300     IF RETURN-CODE > ZERO
541400       DISPLAY WS-PGMID " " WS-DTEB2G
541500            " COBOL RETURN CODE =  " RETURN-CODE
541600     END-IF
541700
541800     DISPLAY WS-PGMID
541900          "    INPUT BASE: " WS-B684828
542000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
542100
542200     DISPLAY WS-PGMID
542300          " 5. TESTING DATE DTEG2W - 18751231/1875-W52-5"
542400     MOVE SPACE TO LS-WEEK
542500     CALL WS-DTEG2W
542600          USING WS-G18751231
542700                LS-WEEK
542800     IF RETURN-CODE > ZERO
542900       DISPLAY WS-PGMID " " WS-DTEG2W
543000            " COBOL RETURN CODE =  " RETURN-CODE
543100     END-IF
543200
543300     DISPLAY WS-PGMID
543400          "    INPUT GREGORIAN: " WS-G18751231
543500          "  OUTPUT WEEK: " LS-WEEK
543600
543700     DISPLAY WS-PGMID
543800          " 6. TESTING DATE DTEW2G - 1875 52/18751227"
543900     MOVE ZERO TO LS-GREGORIAN
544000     CALL WS-DTEW2G
544100          USING WS-Y1875
544200                WS-W52
544300                LS-GREGORIAN
544400     IF RETURN-CODE > ZERO
544500       DISPLAY WS-PGMID " " WS-DTEW2G
544600            " COBOL RETURN CODE =  " RETURN-CODE
544700     END-IF
544800
544900     DISPLAY WS-PGMID
545000          "    INPUT YEAR: " WS-Y1875 " WEEK: " WS-W52
545100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
545200
545300     DISPLAY WS-PGMID
545400          " 7. TESTING DATE DTEDOW1 - 18751231/6 FRIDAY"
545500     MOVE ZERO TO LS-GREGORIAN
545600     CALL WS-DTEDOW1
545700          USING WS-G18751231
545800                LS-DOW-NBR
545900                LS-DOW-TXT
546000     IF RETURN-CODE > ZERO
546100       DISPLAY WS-PGMID " " WS-DTEDOW1
546200            " COBOL RETURN CODE = " RETURN-CODE
546300     END-IF
546400
546500     DISPLAY WS-PGMID
546600          "    INPUT GREGORIAN: " WS-G18751231
546700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
546800
546900     DISPLAY WS-PGMID
547000          " 8. TESTING DATE DTEDOW2 - 18751231/5 FRIDAY"
547100     MOVE ZERO TO LS-GREGORIAN
547200     CALL WS-DTEDOW2
547300          USING WS-G18751231
547400                LS-DOW-NBR
547500                LS-DOW-TXT
547600     IF RETURN-CODE > ZERO
547700       DISPLAY WS-PGMID " " WS-DTEDOW2
547800            " COBOL RETURN CODE = " RETURN-CODE
547900     END-IF
548000
548100     DISPLAY WS-PGMID
548200          "    INPUT GREGORIAN: " WS-G18751231
548300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
548400
548500     DISPLAY " "
548600
548700     DISPLAY WS-PGMID
548800          " 1. TESTING DATE DTEG2J - 19000101/1900001"
548900     MOVE ZERO TO LS-JULIAN
549000     CALL WS-DTEG2J
549100          USING WS-G19000101
549200                LS-JULIAN
549300     IF RETURN-CODE > ZERO
549400       DISPLAY WS-PGMID " " WS-DTEG2J
549500            " COBOL RETURN CODE =  " RETURN-CODE
549600     END-IF
549700
549800     DISPLAY WS-PGMID
549900          "    INPUT GREGORIAN: " WS-G19000101
550000          "  OUTPUT JULIAN: " LS-JULIAN
550100
550200     DISPLAY WS-PGMID
550300          " 2. TESTING DATE DTEJ2G - 1900001/19000101"
550400     MOVE ZERO TO LS-GREGORIAN
550500     CALL WS-DTEJ2G
550600          USING WS-J1900001
550700                LS-GREGORIAN
550800     IF RETURN-CODE > ZERO
550900       DISPLAY WS-PGMID " " WS-DTEJ2G
551000            " RETURN CODE =  " RETURN-CODE
551100     END-IF
551200
551300     DISPLAY WS-PGMID
551400          "    INPUT JULIAN: " WS-J1900001
551500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
551600
551700     DISPLAY WS-PGMID
551800          " 3. TESTING DATE DTEG2B - 19000101/693595"
551900     MOVE ZERO TO LS-BDAY
552000     CALL WS-DTEG2B
552100          USING WS-G19000101
552200                LS-BDAY
552300     IF RETURN-CODE > ZERO
552400       DISPLAY WS-PGMID " " WS-DTEG2B
552500            " COBOL RETURN CODE =  " RETURN-CODE
552600     END-IF
552700
552800     DISPLAY WS-PGMID
552900          "    INPUT GREGORIAN: " WS-G19000101
553000          "  OUTPUT BASE: " LS-BDAY
553100
553200     DISPLAY WS-PGMID
553300          " 4. TESTING DATE DTEB2G - 693595/19000101"
553400     MOVE ZERO TO LS-GREGORIAN
553500     CALL WS-DTEB2G
553600          USING WS-B693595
553700                LS-GREGORIAN
553800     IF RETURN-CODE > ZERO
553900       DISPLAY WS-PGMID " " WS-DTEB2G
554000            " COBOL RETURN CODE =  " RETURN-CODE
554100     END-IF
554200
554300     DISPLAY WS-PGMID
554400          "    INPUT BASE: " WS-B693595
554500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
554600
554700     DISPLAY WS-PGMID
554800          " 5. TESTING DATE DTEG2W - 19000101/1900-W01-1"
554900     MOVE SPACE TO LS-WEEK
555000     CALL WS-DTEG2W
555100          USING WS-G19000101
555200                LS-WEEK
555300     IF RETURN-CODE > ZERO
555400       DISPLAY WS-PGMID " " WS-DTEG2W
555500            " COBOL RETURN CODE =  " RETURN-CODE
555600     END-IF
555700
555800     DISPLAY WS-PGMID
555900          "    INPUT GREGORIAN: " WS-J1900001
556000          "  OUTPUT WEEK: " LS-WEEK
556100
556200     DISPLAY WS-PGMID
556300          " 6. TESTING DATE DTEW2G - 1900 01/19000101"
556400     MOVE ZERO TO LS-GREGORIAN
556500     CALL WS-DTEW2G
556600          USING WS-Y1900
556700                WS-W01
556800                LS-GREGORIAN
556900     IF RETURN-CODE > ZERO
557000       DISPLAY WS-PGMID " " WS-DTEW2G
557100            " COBOL RETURN CODE =  " RETURN-CODE
557200     END-IF
557300
557400     DISPLAY WS-PGMID
557500          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W01
557600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
557700
557800     DISPLAY WS-PGMID
557900          " 7. TESTING DATE DTEDOW1 - 19000101/2 MONDAY"
558000     MOVE ZERO TO LS-GREGORIAN
558100     CALL WS-DTEDOW1
558200          USING WS-G19000101
558300                LS-DOW-NBR
558400                LS-DOW-TXT
558500     IF RETURN-CODE > ZERO
558600       DISPLAY WS-PGMID " " WS-DTEDOW1
558700            " COBOL RETURN CODE = " RETURN-CODE
558800     END-IF
558900
559000     DISPLAY WS-PGMID
559100          "    INPUT GREGORIAN: " WS-G19000101
559200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
559300
559400     DISPLAY WS-PGMID
559500          " 8. TESTING DATE DTEDOW2 - 19000101/1 MONDAY"
559600     MOVE ZERO TO LS-GREGORIAN
559700     CALL WS-DTEDOW2
559800          USING WS-G19000101
559900                LS-DOW-NBR
560000                LS-DOW-TXT
560100     IF RETURN-CODE > ZERO
560200       DISPLAY WS-PGMID " " WS-DTEDOW2
560300            " COBOL RETURN CODE = " RETURN-CODE
560400     END-IF
560500
560600     DISPLAY WS-PGMID
560700          "    INPUT GREGORIAN: " WS-G19000101
560800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
560900
561000     DISPLAY " "
561100
561200     DISPLAY WS-PGMID
561300          " 1. TESTING DATE DTEG2J - 19000228/1900059"
561400     MOVE ZERO TO LS-JULIAN
561500     CALL WS-DTEG2J
561600          USING WS-G19000228
561700                LS-JULIAN
561800     IF RETURN-CODE > ZERO
561900       DISPLAY WS-PGMID " " WS-DTEG2J
562000            " COBOL RETURN CODE =  " RETURN-CODE
562100     END-IF
562200
562300     DISPLAY WS-PGMID
562400          "    INPUT GREGORIAN: " WS-G19000228
562500          "  OUTPUT JULIAN: " LS-JULIAN
562600
562700     DISPLAY WS-PGMID
562800          " 2. TESTING DATE DTEJ2G - 1900059/19000228"
562900     MOVE ZERO TO LS-GREGORIAN
563000     CALL WS-DTEJ2G
563100          USING WS-J1900059
563200                LS-GREGORIAN
563300     IF RETURN-CODE > ZERO
563400       DISPLAY WS-PGMID " " WS-DTEJ2G
563500            " COBOL RETURN CODE =  " RETURN-CODE
563600     END-IF
563700
563800     DISPLAY WS-PGMID
563900          "    INPUT JULIAN: " WS-J1900059
564000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
564100
564200     DISPLAY WS-PGMID
564300          " 3. TESTING DATE DTEG2B - 19000228/693653"
564400     MOVE ZERO TO LS-BDAY
564500     CALL WS-DTEG2B
564600          USING WS-G19000228
564700                LS-BDAY
564800     IF RETURN-CODE > ZERO
564900       DISPLAY WS-PGMID " " WS-DTEG2B
565000            " COBOL RETURN CODE =  " RETURN-CODE
565100     END-IF
565200
565300     DISPLAY WS-PGMID
565400          "    INPUT GREGORIAN: " WS-G19000228
565500          "  OUTPUT BASE: " LS-BDAY
565600
565700     DISPLAY WS-PGMID
565800          " 4. TESTING DATE DTEB2G - 693653/19000228"
565900     MOVE ZERO TO LS-GREGORIAN
566000     CALL WS-DTEB2G
566100          USING WS-B693653
566200                LS-GREGORIAN
566300     IF RETURN-CODE > ZERO
566400       DISPLAY WS-PGMID " " WS-DTEB2G
566500            " COBOL RETURN CODE =  " RETURN-CODE
566600     END-IF
566700
566800     DISPLAY WS-PGMID
566900          "    INPUT BASE: " WS-B693653
567000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
567100
567200     DISPLAY WS-PGMID
567300          " 5. TESTING DATE DTEG2W - 19000228/1900-W09-3"
567400     MOVE SPACE TO LS-WEEK
567500     CALL WS-DTEG2W
567600          USING WS-G19000228
567700                LS-WEEK
567800     IF RETURN-CODE > ZERO
567900       DISPLAY WS-PGMID " " WS-DTEG2W
568000            " COBOL RETURN CODE =  " RETURN-CODE
568100     END-IF
568200
568300     DISPLAY WS-PGMID
568400          "    INPUT GREGORIAN: " WS-G19000228
568500          "  OUTPUT WEEK: " LS-WEEK
568600
568700     DISPLAY WS-PGMID
568800          " 6. TESTING DATE DTEW2G - 1900 09/19000226"
568900     MOVE ZERO TO LS-GREGORIAN
569000     CALL WS-DTEW2G
569100          USING WS-Y1900
569200                WS-W09
569300                LS-GREGORIAN
569400     IF RETURN-CODE > ZERO
569500       DISPLAY WS-PGMID " " WS-DTEW2G
569600            " COBOL RETURN CODE =  " RETURN-CODE
569700     END-IF
569800
569900     DISPLAY WS-PGMID
570000          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W09
570100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
570200
570300     DISPLAY WS-PGMID
570400          " 7. TESTING DATE DTEDOW1 - 19000228/4 WEDNESDAY"
570500     MOVE ZERO TO LS-GREGORIAN
570600     CALL WS-DTEDOW1
570700          USING WS-G19000228
570800                LS-DOW-NBR
570900                LS-DOW-TXT
571000     IF RETURN-CODE > ZERO
571100       DISPLAY WS-PGMID " " WS-DTEDOW1
571200            " COBOL RETURN CODE = " RETURN-CODE
571300     END-IF
571400
571500     DISPLAY WS-PGMID
571600          "    INPUT GREGORIAN: " WS-G19000228
571700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
571800
571900     DISPLAY WS-PGMID
572000          " 8. TESTING DATE DTEDOW2 - 19000228/3 WEDNESDAY"
572100     MOVE ZERO TO LS-GREGORIAN
572200     CALL WS-DTEDOW2
572300          USING WS-G19000228
572400                LS-DOW-NBR
572500                LS-DOW-TXT
572600     IF RETURN-CODE > ZERO
572700       DISPLAY WS-PGMID " " WS-DTEDOW2
572800            " COBOL RETURN CODE = " RETURN-CODE
572900     END-IF
573000
573100     DISPLAY WS-PGMID
573200          "    INPUT GREGORIAN: " WS-G19000228
573300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
573400
573500     DISPLAY " "
573600
573700     DISPLAY WS-PGMID
573800          " 1. TESTING DATE DTEG2J - 19000229/1900060, error"
573900     MOVE ZERO TO LS-JULIAN
574000     CALL WS-DTEG2J
574100          USING WS-G19000229
574200                LS-JULIAN
574300     IF RETURN-CODE > ZERO
574400       DISPLAY WS-PGMID " " WS-DTEG2J
574500            " COBOL RETURN CODE =  " RETURN-CODE
574600     END-IF
574700
574800     DISPLAY WS-PGMID
574900          "    INPUT GREGORIAN: " WS-G19000229
575000          "  OUTPUT JULIAN: " LS-JULIAN
575100
575200     DISPLAY WS-PGMID
575300          " 2. TESTING DATE DTEJ2G - 1900060/19000301"
575400     MOVE ZERO TO LS-GREGORIAN
575500     CALL WS-DTEJ2G
575600          USING WS-J1900060
575700                LS-GREGORIAN
575800     IF RETURN-CODE > ZERO
575900       DISPLAY WS-PGMID " " WS-DTEJ2G
576000            " RETURN CODE =  " RETURN-CODE
576100     END-IF
576200
576300     DISPLAY WS-PGMID
576400          "    INPUT JULIAN: " WS-J1900060
576500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
576600
576700     DISPLAY WS-PGMID
576800          " 3. TESTING DATE DTEG2B - 19000229/693654, error"
576900     MOVE ZERO TO LS-BDAY
577000     CALL WS-DTEG2B
577100          USING WS-G19000229
577200                LS-BDAY
577300     IF RETURN-CODE > ZERO
577400       DISPLAY WS-PGMID " " WS-DTEG2B
577500            " COBOL RETURN CODE =  " RETURN-CODE
577600     END-IF
577700
577800     DISPLAY WS-PGMID
577900          "    INPUT GREGORIAN: " WS-G19000229
578000          "  OUTPUT BASE: " LS-BDAY
578100
578200     DISPLAY WS-PGMID
578300          " 4. TESTING DATE DTEB2G - 693654/19000301"
578400     MOVE ZERO TO LS-GREGORIAN
578500     CALL WS-DTEB2G
578600          USING WS-B693654
578700                LS-GREGORIAN
578800     IF RETURN-CODE > ZERO
578900       DISPLAY WS-PGMID " " WS-DTEB2G
579000            " COBOL RETURN CODE =  " RETURN-CODE
579100     END-IF
579200
579300     DISPLAY WS-PGMID
579400          "    INPUT BASE: " WS-B693654
579500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
579600
579700     DISPLAY WS-PGMID
579800          " 5. TESTING DATE DTEG2W - 19000229/1900-W09-4, error"
579900     MOVE SPACE TO LS-WEEK
580000     CALL WS-DTEG2W
580100          USING WS-G19000229
580200                LS-WEEK
580300     IF RETURN-CODE > ZERO
580400       DISPLAY WS-PGMID " " WS-DTEG2W
580500            " COBOL RETURN CODE =  " RETURN-CODE
580600     END-IF
580700
580800     DISPLAY WS-PGMID
580900          "    INPUT GREGORIAN: " WS-G19000229
581000          "  OUTPUT WEEK: " LS-WEEK
581100
581200     DISPLAY WS-PGMID
581300          " 6. TESTING DATE DTEW2G - 1900 09/19000226"
581400     MOVE ZERO TO LS-GREGORIAN
581500     CALL WS-DTEW2G
581600          USING WS-Y1900
581700                WS-W09
581800                LS-GREGORIAN
581900     IF RETURN-CODE > ZERO
582000       DISPLAY WS-PGMID " " WS-DTEW2G
582100            " COBOL RETURN CODE =  " RETURN-CODE
582200     END-IF
582300
582400     DISPLAY WS-PGMID
582500          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W09
582600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
582700
582800     DISPLAY WS-PGMID
582900          " 7. TESTING DATE DTEDOW1 - 19000229/4 WEDNESDAY, error"
583000     MOVE ZERO TO LS-GREGORIAN
583100     CALL WS-DTEDOW1
583200          USING WS-G19000229
583300                LS-DOW-NBR
583400                LS-DOW-TXT
583500     IF RETURN-CODE > ZERO
583600       DISPLAY WS-PGMID " " WS-DTEDOW1
583700            " COBOL RETURN CODE = " RETURN-CODE
583800     END-IF
583900
584000     DISPLAY WS-PGMID
584100          "    INPUT GREGORIAN: " WS-G19000229
584200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
584300
584400     DISPLAY WS-PGMID
584500          " 8. TESTING DATE DTEDOW2 - 19000229/3 WEDNESDAY, error"
584600     MOVE ZERO TO LS-GREGORIAN
584700     CALL WS-DTEDOW2
584800          USING WS-G19000229
584900                LS-DOW-NBR
585000                LS-DOW-TXT
585100     IF RETURN-CODE > ZERO
585200       DISPLAY WS-PGMID " " WS-DTEDOW2
585300            " COBOL RETURN CODE = " RETURN-CODE
585400     END-IF
585500
585600     DISPLAY WS-PGMID
585700          "    INPUT GREGORIAN: " WS-G19000229
585800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
585900
586000     DISPLAY " "
586100
586200     DISPLAY WS-PGMID
586300          " 1. TESTING DATE DTEG2J - 19000301/1900060"
586400     MOVE ZERO TO LS-JULIAN
586500     CALL WS-DTEG2J
586600          USING WS-G19000301
586700                LS-JULIAN
586800     IF RETURN-CODE > ZERO
586900       DISPLAY WS-PGMID " " WS-DTEG2J
587000            " COBOL RETURN CODE =  " RETURN-CODE
587100     END-IF
587200
587300     DISPLAY WS-PGMID
587400          "    INPUT GREGORIAN: " WS-G19000301
587500          "  OUTPUT JULIAN: " LS-JULIAN
587600
587700     DISPLAY WS-PGMID
587800          " 2. TESTING DATE DTEJ2G - 1900060/19000301"
587900     MOVE ZERO TO LS-GREGORIAN
588000     CALL WS-DTEJ2G
588100          USING WS-J1900060
588200                LS-GREGORIAN
588300     IF RETURN-CODE > ZERO
588400       DISPLAY WS-PGMID " " WS-DTEJ2G
588500            " COBOL RETURN CODE =  " RETURN-CODE
588600     END-IF
588700
588800     DISPLAY WS-PGMID
588900          "    INPUT JULIAN: " WS-J1900060
589000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
589100
589200     DISPLAY WS-PGMID
589300          " 3. TESTING DATE DTEG2B - 19000301/693654"
589400     MOVE ZERO TO LS-BDAY
589500     CALL WS-DTEG2B
589600          USING WS-G19000301
589700                LS-BDAY
589800     IF RETURN-CODE > ZERO
589900       DISPLAY WS-PGMID " " WS-DTEG2B
590000            " COBOL RETURN CODE =  " RETURN-CODE
590100     END-IF
590200
590300     DISPLAY WS-PGMID
590400          "    INPUT GREGORIAN: " WS-G19000301
590500          "  OUTPUT BASE: " LS-BDAY
590600
590700     DISPLAY WS-PGMID
590800          " 4. TESTING DATE DTEB2G - 693654/19000301"
590900     MOVE ZERO TO LS-GREGORIAN
591000     CALL WS-DTEB2G
591100          USING WS-B693654
591200                LS-GREGORIAN
591300     IF RETURN-CODE > ZERO
591400       DISPLAY WS-PGMID " " WS-DTEB2G
591500            " COBOL RETURN CODE =  " RETURN-CODE
591600     END-IF
591700
591800     DISPLAY WS-PGMID
591900          "    INPUT BASE: " WS-B693654
592000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
592100
592200     DISPLAY WS-PGMID
592300          " 5. TESTING DATE DTEG2W - 19000301/1900-W09-4"
592400     MOVE SPACE TO LS-WEEK
592500     CALL WS-DTEG2W
592600          USING WS-G19000301
592700                LS-WEEK
592800     IF RETURN-CODE > ZERO
592900       DISPLAY WS-PGMID " " WS-DTEG2W
593000            " COBOL RETURN CODE =  " RETURN-CODE
593100     END-IF
593200
593300     DISPLAY WS-PGMID
593400          "    INPUT GREGORIAN: " WS-G19000301
593500          "  OUTPUT WEEK: " LS-WEEK
593600
593700     DISPLAY WS-PGMID
593800          " 6. TESTING DATE DTEW2G - 1900 09/19000226"
593900     MOVE ZERO TO LS-GREGORIAN
594000     CALL WS-DTEW2G
594100          USING WS-Y1900
594200                WS-W09
594300                LS-GREGORIAN
594400     IF RETURN-CODE > ZERO
594500       DISPLAY WS-PGMID " " WS-DTEW2G
594600            " COBOL RETURN CODE =  " RETURN-CODE
594700     END-IF
594800
594900     DISPLAY WS-PGMID
595000          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W09
595100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
595200
595300     DISPLAY WS-PGMID
595400          " 7. TESTING DATE DTEDOW1 - 19000301/5 THURSDAY"
595500     MOVE ZERO TO LS-GREGORIAN
595600     CALL WS-DTEDOW1
595700          USING WS-G19000301
595800                LS-DOW-NBR
595900                LS-DOW-TXT
596000     IF RETURN-CODE > ZERO
596100       DISPLAY WS-PGMID " " WS-DTEDOW1
596200            " COBOL RETURN CODE = " RETURN-CODE
596300     END-IF
596400
596500     DISPLAY WS-PGMID
596600          "    INPUT GREGORIAN: " WS-G19000301
596700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
596800
596900     DISPLAY WS-PGMID
597000          " 8. TESTING DATE DTEDOW2 - 19000301/4 THURSDAY"
597100     MOVE ZERO TO LS-GREGORIAN
597200     CALL WS-DTEDOW2
597300          USING WS-G19000301
597400                LS-DOW-NBR
597500                LS-DOW-TXT
597600     IF RETURN-CODE > ZERO
597700       DISPLAY WS-PGMID " " WS-DTEDOW2
597800            " COBOL RETURN CODE = " RETURN-CODE
597900     END-IF
598000
598100     DISPLAY WS-PGMID
598200          "    INPUT GREGORIAN: " WS-G19000301
598300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
598400
598500     DISPLAY " "
598600
598700     DISPLAY WS-PGMID
598800          " 1. TESTING DATE DTEG2J - 19001231/1900365"
598900     MOVE ZERO TO LS-JULIAN
599000     CALL WS-DTEG2J
599100          USING WS-G19001231
599200                LS-JULIAN
599300     IF RETURN-CODE > ZERO
599400       DISPLAY WS-PGMID " " WS-DTEG2J
599500            " COBOL RETURN CODE =  " RETURN-CODE
599600     END-IF
599700
599800     DISPLAY WS-PGMID
599900          "    INPUT GREGORIAN: " WS-G19001231
600000          "  OUTPUT JULIAN: " LS-JULIAN
600100
600200     DISPLAY WS-PGMID
600300          " 2. TESTING DATE DTEJ2G - 1900365/19001231"
600400     MOVE ZERO TO LS-GREGORIAN
600500     CALL WS-DTEJ2G
600600          USING WS-J1900365
600700                LS-GREGORIAN
600800     IF RETURN-CODE > ZERO
600900       DISPLAY WS-PGMID " " WS-DTEJ2G
601000            " COBOL RETURN CODE =  " RETURN-CODE
601100     END-IF
601200
601300     DISPLAY WS-PGMID
601400          "    INPUT JULIAN: " WS-J1900365
601500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
601600
601700     DISPLAY WS-PGMID
601800          " 3. TESTING DATE DTEG2B - 19001231/693959"
601900     MOVE ZERO TO LS-BDAY
602000     CALL WS-DTEG2B
602100          USING WS-G19001231
602200                LS-BDAY
602300     IF RETURN-CODE > ZERO
602400       DISPLAY WS-PGMID " " WS-DTEG2B
602500            " COBOL RETURN CODE =  " RETURN-CODE
602600     END-IF
602700
602800     DISPLAY WS-PGMID
602900          "    INPUT GREGORIAN: " WS-G19001231
603000          "  OUTPUT BASE: " LS-BDAY
603100
603200     DISPLAY WS-PGMID
603300          " 4. TESTING DATE DTEB2G - 693959/19001231"
603400     MOVE ZERO TO LS-GREGORIAN
603500     CALL WS-DTEB2G
603600          USING WS-B693959
603700                LS-GREGORIAN
603800     IF RETURN-CODE > ZERO
603900       DISPLAY WS-PGMID " " WS-DTEB2G
604000            " COBOL RETURN CODE =  " RETURN-CODE
604100     END-IF
604200
604300     DISPLAY WS-PGMID
604400          "    INPUT BASE: " WS-B693959
604500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
604600
604700     DISPLAY WS-PGMID
604800          " 5. TESTING DATE DTEG2W - 19001231/1900-W53-1"
604900     MOVE SPACE TO LS-WEEK
605000     CALL WS-DTEG2W
605100          USING WS-G19001231
605200                LS-WEEK
605300     IF RETURN-CODE > ZERO
605400       DISPLAY WS-PGMID " " WS-DTEG2W
605500            " COBOL RETURN CODE =  " RETURN-CODE
605600     END-IF
605700
605800     DISPLAY WS-PGMID
605900          "    INPUT GREGORIAN: " WS-G19001231
606000          "  OUTPUT WEEK: " LS-WEEK
606100
606200     DISPLAY WS-PGMID
606300          " 6. TESTING DATE DTEW2G - 1900 53/19001231"
606400     MOVE ZERO TO LS-GREGORIAN
606500     CALL WS-DTEW2G
606600          USING WS-Y1900
606700                WS-W53
606800                LS-GREGORIAN
606900     IF RETURN-CODE > ZERO
607000       DISPLAY WS-PGMID " " WS-DTEW2G
607100            " COBOL RETURN CODE =  " RETURN-CODE
607200     END-IF
607300
607400     DISPLAY WS-PGMID
607500          "    INPUT YEAR: " WS-Y1900 " WEEK: " WS-W53
607600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
607700
607800     DISPLAY WS-PGMID
607900          " 7. TESTING DATE DTEDOW1 - 19001231/2 MONDAY"
608000     MOVE ZERO TO LS-GREGORIAN
608100     CALL WS-DTEDOW1
608200          USING WS-G19001231
608300                LS-DOW-NBR
608400                LS-DOW-TXT
608500     IF RETURN-CODE > ZERO
608600       DISPLAY WS-PGMID " " WS-DTEDOW1
608700            " COBOL RETURN CODE = " RETURN-CODE
608800     END-IF
608900
609000     DISPLAY WS-PGMID
609100          "    INPUT GREGORIAN: " WS-G19001231
609200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
609300
609400     DISPLAY WS-PGMID
609500          " 8. TESTING DATE DTEDOW2 - 19001231/1 MONDAY"
609600     MOVE ZERO TO LS-GREGORIAN
609700     CALL WS-DTEDOW2
609800          USING WS-G19001231
609900                LS-DOW-NBR
610000                LS-DOW-TXT
610100     IF RETURN-CODE > ZERO
610200       DISPLAY WS-PGMID " " WS-DTEDOW2
610300            " COBOL RETURN CODE = " RETURN-CODE
610400     END-IF
610500
610600     DISPLAY WS-PGMID
610700          "    INPUT GREGORIAN: " WS-G19001231
610800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
610900
611000     DISPLAY " "
611100
611200     DISPLAY WS-PGMID
611300          " 1. TESTING DATE DTEG2J - 19040101/1904001"
611400     MOVE ZERO TO LS-JULIAN
611500     CALL WS-DTEG2J
611600          USING WS-G19040101
611700                LS-JULIAN
611800     IF RETURN-CODE > ZERO
611900       DISPLAY WS-PGMID " " WS-DTEG2J
612000            " COBOL RETURN CODE =  " RETURN-CODE
612100     END-IF
612200
612300     DISPLAY WS-PGMID
612400          "    INPUT GREGORIAN: " WS-G19040101
612500          "  OUTPUT JULIAN: " LS-JULIAN
612600
612700     DISPLAY WS-PGMID
612800          " 2. TESTING DATE DTEJ2G - 1904001/19040101"
612900     MOVE ZERO TO LS-GREGORIAN
613000     CALL WS-DTEJ2G
613100          USING WS-J1904001
613200                LS-GREGORIAN
613300     IF RETURN-CODE > ZERO
613400       DISPLAY WS-PGMID " " WS-DTEJ2G
613500            " COBOL RETURN CODE =  " RETURN-CODE
613600     END-IF
613700
613800     DISPLAY WS-PGMID
613900          "    INPUT JULIAN: " WS-J1904001
614000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
614100
614200     DISPLAY WS-PGMID
614300          " 3. TESTING DATE ASUG2B - 19040101/695055"
614400     MOVE ZERO TO LS-BDAY
614500     CALL WS-DTEG2B
614600          USING WS-G19040101
614700                LS-BDAY
614800     IF RETURN-CODE > ZERO
614900       DISPLAY WS-PGMID " " WS-DTEG2B
615000            " COBOL RETURN CODE =  " RETURN-CODE
615100     END-IF
615200
615300     DISPLAY WS-PGMID
615400          "    INPUT GREGORIAN: " WS-G19040101
615500          "  OUTPUT BASE: " LS-BDAY
615600
615700     DISPLAY WS-PGMID
615800          " 4. TESTING DATE DTEB2G - 695055/19040101"
615900     MOVE ZERO TO LS-GREGORIAN
616000     CALL WS-DTEB2G
616100          USING WS-B695055
616200                LS-GREGORIAN
616300     IF RETURN-CODE > ZERO
616400       DISPLAY WS-PGMID " " WS-DTEB2G
616500            " COBOL RETURN CODE =  " RETURN-CODE
616600     END-IF
616700
616800     DISPLAY WS-PGMID
616900          "    INPUT BASE: " WS-B695055
617000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
617100
617200     DISPLAY WS-PGMID
617300          " 5. TESTING DATE DTEG2W - 19040101/1903-W53-5"
617400     MOVE SPACE TO LS-WEEK
617500     CALL WS-DTEG2W
617600          USING WS-G19040101
617700                LS-WEEK
617800     IF RETURN-CODE > ZERO
617900       DISPLAY WS-PGMID " " WS-DTEG2W
618000            " COBOL RETURN CODE =  " RETURN-CODE
618100     END-IF
618200
618300     DISPLAY WS-PGMID
618400          "    INPUT GREGORIAN: " WS-G19040101
618500          "  OUTPUT WEEK: " LS-WEEK
618600
618700     DISPLAY WS-PGMID
618800          " 6. TESTING DATE DTEW2G - 1904 01/19040104"
618900     MOVE ZERO TO LS-GREGORIAN
619000     CALL WS-DTEW2G
619100          USING WS-Y1904
619200                WS-W01
619300                LS-GREGORIAN
619400     IF RETURN-CODE > ZERO
619500       DISPLAY WS-PGMID " " WS-DTEW2G
619600            " COBOL RETURN CODE =  " RETURN-CODE
619700     END-IF
619800
619900     DISPLAY WS-PGMID
620000          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W01
620100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
620200
620300     DISPLAY WS-PGMID
620400          " 7. TESTING DATE DTEDOW1 - 19040101/6 FRIDAY"
620500     MOVE ZERO TO LS-GREGORIAN
620600     CALL WS-DTEDOW1
620700          USING WS-G19040101
620800                LS-DOW-NBR
620900                LS-DOW-TXT
621000     IF RETURN-CODE > ZERO
621100       DISPLAY WS-PGMID " " WS-DTEDOW1
621200            " COBOL RETURN CODE = " RETURN-CODE
621300     END-IF
621400
621500     DISPLAY WS-PGMID
621600          "    INPUT GREGORIAN: " WS-G19040101
621700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
621800
621900     DISPLAY WS-PGMID
622000          " 8. TESTING DATE DTEDOW2 - 19040101/5 FRIDAY"
622100     MOVE ZERO TO LS-GREGORIAN
622200     CALL WS-DTEDOW2
622300          USING WS-G19040101
622400                LS-DOW-NBR
622500                LS-DOW-TXT
622600     IF RETURN-CODE > ZERO
622700       DISPLAY WS-PGMID " " WS-DTEDOW2
622800            " COBOL RETURN CODE = " RETURN-CODE
622900     END-IF
623000
623100     DISPLAY WS-PGMID
623200          "    INPUT GREGORIAN: " WS-G19040101
623300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
623400
623500     DISPLAY " "
623600
623700     DISPLAY WS-PGMID
623800          " 1. TESTING DATE DTEG2J - 19040228/1904059"
623900     MOVE ZERO TO LS-JULIAN
624000     CALL WS-DTEG2J
624100          USING WS-G19040228
624200                LS-JULIAN
624300     IF RETURN-CODE > ZERO
624400       DISPLAY WS-PGMID " " WS-DTEG2J
624500            " COBOL RETURN CODE =  " RETURN-CODE
624600     END-IF
624700
624800     DISPLAY WS-PGMID
624900          "    INPUT GREGORIAN: " WS-G19040228
625000          "  OUTPUT JULIAN: " LS-JULIAN
625100
625200     DISPLAY WS-PGMID
625300          " 2. TESTING DATE DTEJ2G - 1904059/19040228"
625400     MOVE ZERO TO LS-GREGORIAN
625500     CALL WS-DTEJ2G
625600          USING WS-J1904059
625700                LS-GREGORIAN
625800     IF RETURN-CODE > ZERO
625900       DISPLAY WS-PGMID " " WS-DTEJ2G
626000            " COBOL RETURN CODE =  " RETURN-CODE
626100     END-IF
626200
626300     DISPLAY WS-PGMID
626400          "    INPUT JULIAN: " WS-J1904059
626500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
626600
626700     DISPLAY WS-PGMID
626800          " 3. TESTING DATE DTEG2B - 19040228/695113"
626900     MOVE ZERO TO LS-BDAY
627000     CALL WS-DTEG2B
627100          USING WS-G19040228
627200                LS-BDAY
627300     IF RETURN-CODE > ZERO
627400       DISPLAY WS-PGMID " " WS-DTEG2B
627500            " COBOL RETURN CODE =  " RETURN-CODE
627600     END-IF
627700
627800     DISPLAY WS-PGMID
627900          "    INPUT GREGORIAN: " WS-G19040228
628000          "  OUTPUT BASE: " LS-BDAY
628100
628200     DISPLAY WS-PGMID
628300          " 4. TESTING DATE DTEB2G - 695113/19040228"
628400     MOVE ZERO TO LS-GREGORIAN
628500     CALL WS-DTEB2G
628600          USING WS-B695113
628700                LS-GREGORIAN
628800     IF RETURN-CODE > ZERO
628900       DISPLAY WS-PGMID " " WS-DTEB2G
629000            " COBOL RETURN CODE =  " RETURN-CODE
629100     END-IF
629200
629300     DISPLAY WS-PGMID
629400          "    INPUT BASE: " WS-B695113
629500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
629600
629700     DISPLAY WS-PGMID
629800          " 5. TESTING DATE DTEG2W - 19040228/1904-W08-7"
629900     MOVE SPACE TO LS-WEEK
630000     CALL WS-DTEG2W
630100          USING WS-G19040228
630200                LS-WEEK
630300     IF RETURN-CODE > ZERO
630400       DISPLAY WS-PGMID " " WS-DTEG2W
630500            " COBOL RETURN CODE =  " RETURN-CODE
630600     END-IF
630700
630800     DISPLAY WS-PGMID
630900          "    INPUT GREGORIAN: " WS-G19040228
631000          "  OUTPUT WEEK: " LS-WEEK
631100
631200     DISPLAY WS-PGMID
631300          " 6. TESTING DATE DTEW2G - 1904 08/19040222"
631400     MOVE ZERO TO LS-GREGORIAN
631500     CALL WS-DTEW2G
631600          USING WS-Y1904
631700                WS-W08
631800                LS-GREGORIAN
631900     IF RETURN-CODE > ZERO
632000       DISPLAY WS-PGMID " " WS-DTEW2G
632100            " COBOL RETURN CODE =  " RETURN-CODE
632200     END-IF
632300
632400     DISPLAY WS-PGMID
632500          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W08
632600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
632700
632800     DISPLAY WS-PGMID
632900          " 7. TESTING DATE DTEDOW1 - 19040228/1 SUNDAY"
633000     MOVE ZERO TO LS-GREGORIAN
633100     CALL WS-DTEDOW1
633200          USING WS-G19040228
633300                LS-DOW-NBR
633400                LS-DOW-TXT
633500     IF RETURN-CODE > ZERO
633600       DISPLAY WS-PGMID " " WS-DTEDOW1
633700            " COBOL RETURN CODE = " RETURN-CODE
633800     END-IF
633900
634000     DISPLAY WS-PGMID
634100          "    INPUT GREGORIAN: " WS-G19040228
634200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
634300
634400     DISPLAY WS-PGMID
634500          " 8. TESTING DATE DTEDOW2 - 19040228/7 SUNDAY"
634600     MOVE ZERO TO LS-GREGORIAN
634700     CALL WS-DTEDOW2
634800          USING WS-G19040228
634900                LS-DOW-NBR
635000                LS-DOW-TXT
635100     IF RETURN-CODE > ZERO
635200       DISPLAY WS-PGMID " " WS-DTEDOW2
635300            " COBOL RETURN CODE = " RETURN-CODE
635400     END-IF
635500
635600     DISPLAY WS-PGMID
635700          "    INPUT GREGORIAN: " WS-G19040228
635800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
635900
636000     DISPLAY " "
636100
636200     DISPLAY WS-PGMID
636300          " 1. TESTING DATE DTEG2J - 19040229/1904060"
636400     MOVE ZERO TO LS-JULIAN
636500     CALL WS-DTEG2J
636600          USING WS-G19040229
636700                LS-JULIAN
636800     IF RETURN-CODE > ZERO
636900       DISPLAY WS-PGMID " " WS-DTEG2J
637000            " COBOL RETURN CODE =  " RETURN-CODE
637100     END-IF
637200
637300     DISPLAY WS-PGMID
637400          "    INPUT GREGORIAN: " WS-G19040229
637500          "  OUTPUT JULIAN: " LS-JULIAN
637600
637700     DISPLAY WS-PGMID
637800          " 2. TESTING DATE DTEJ2G - 1904060/19040229"
637900     MOVE ZERO TO LS-GREGORIAN
638000     CALL WS-DTEJ2G
638100          USING WS-J1904060
638200                LS-GREGORIAN
638300     IF RETURN-CODE > ZERO
638400       DISPLAY WS-PGMID " " WS-DTEJ2G
638500            " COBOL RETURN CODE =  " RETURN-CODE
638600     END-IF
638700
638800     DISPLAY WS-PGMID
638900          "    INPUT JULIAN: " WS-J1904060
639000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
639100
639200     DISPLAY WS-PGMID
639300          " 3. TESTING DATE DTEG2B - 19040229/695114"
639400     MOVE ZERO TO LS-BDAY
639500     CALL WS-DTEG2B
639600          USING WS-G19040229
639700                LS-BDAY
639800     IF RETURN-CODE > ZERO
639900       DISPLAY WS-PGMID " " WS-DTEG2B
640000            " COBOL RETURN CODE =  " RETURN-CODE
640100     END-IF
640200
640300     DISPLAY WS-PGMID
640400          "    INPUT GREGORIAN: " WS-G19040229
640500          "  OUTPUT BASE: " LS-BDAY
640600
640700     DISPLAY WS-PGMID
640800          " 4. TESTING DATE DTEB2G - 695114/19040229"
640900     MOVE ZERO TO LS-GREGORIAN
641000     CALL WS-DTEB2G
641100          USING WS-B695114
641200                LS-GREGORIAN
641300     IF RETURN-CODE > ZERO
641400       DISPLAY WS-PGMID " " WS-DTEB2G
641500            " COBOL RETURN CODE =  " RETURN-CODE
641600     END-IF
641700
641800     DISPLAY WS-PGMID
641900          "    INPUT BASE: " WS-B695114
642000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
642100
642200     DISPLAY WS-PGMID
642300          " 5. TESTING DATE DTEG2W - 19040229/1904-W09-1"
642400     MOVE SPACE TO LS-WEEK
642500     CALL WS-DTEG2W
642600          USING WS-G19040229
642700                LS-WEEK
642800     IF RETURN-CODE > ZERO
642900       DISPLAY WS-PGMID " " WS-DTEG2W
643000            " COBOL RETURN CODE =  " RETURN-CODE
643100     END-IF
643200
643300     DISPLAY WS-PGMID
643400          "    INPUT GREGORIAN: " WS-G19040229
643500          "  OUTPUT WEEK: " LS-WEEK
643600
643700     DISPLAY WS-PGMID
643800          " 6. TESTING DATE DTEW2G - 1904 09/19040229"
643900     MOVE ZERO TO LS-GREGORIAN
644000     CALL WS-DTEW2G
644100          USING WS-Y1904
644200                WS-W09
644300                LS-GREGORIAN
644400     IF RETURN-CODE > ZERO
644500       DISPLAY WS-PGMID " " WS-DTEW2G
644600            " COBOL RETURN CODE =  " RETURN-CODE
644700     END-IF
644800
644900     DISPLAY WS-PGMID
645000          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W09
645100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
645200
645300     DISPLAY WS-PGMID
645400          " 7. TESTING DATE DTEDOW1 - 19040229/2 MONDAY"
645500     MOVE ZERO TO LS-GREGORIAN
645600     CALL WS-DTEDOW1
645700          USING WS-G19040229
645800                LS-DOW-NBR
645900                LS-DOW-TXT
646000     IF RETURN-CODE > ZERO
646100       DISPLAY WS-PGMID " " WS-DTEDOW1
646200            " COBOL RETURN CODE = " RETURN-CODE
646300     END-IF
646400
646500     DISPLAY WS-PGMID
646600          "    INPUT GREGORIAN: " WS-G19040229
646700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
646800
646900     DISPLAY WS-PGMID
647000          " 8. TESTING DATE DTEDOW2 - 19040229/1 MONDAY"
647100     MOVE ZERO TO LS-GREGORIAN
647200     CALL WS-DTEDOW2
647300          USING WS-G19040229
647400                LS-DOW-NBR
647500                LS-DOW-TXT
647600     IF RETURN-CODE > ZERO
647700       DISPLAY WS-PGMID " " WS-DTEDOW2
647800            " COBOL RETURN CODE = " RETURN-CODE
647900     END-IF
648000
648100     DISPLAY WS-PGMID
648200          "    INPUT GREGORIAN: " WS-G19040229
648300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
648400
648500     DISPLAY " "
648600
648700     DISPLAY WS-PGMID
648800          " 1. TESTING DATE DTEG2J - 19040301/1904061"
648900     MOVE ZERO TO LS-JULIAN
649000     CALL WS-DTEG2J
649100          USING WS-G19040301
649200                LS-JULIAN
649300     IF RETURN-CODE > ZERO
649400       DISPLAY WS-PGMID " " WS-DTEG2J
649500            " COBOL RETURN CODE =  " RETURN-CODE
649600     END-IF
649700
649800     DISPLAY WS-PGMID
649900          "    INPUT GREGORIAN: " WS-G19040301
650000          "  OUTPUT JULIAN: " LS-JULIAN
650100
650200     DISPLAY WS-PGMID
650300          " 2. TESTING DATE DTEJ2G - 1904061/19040301"
650400     MOVE ZERO TO LS-GREGORIAN
650500     CALL WS-DTEJ2G
650600          USING WS-J1904061
650700                LS-GREGORIAN
650800     IF RETURN-CODE > ZERO
650900       DISPLAY WS-PGMID " " WS-DTEJ2G
651000            " COBOL RETURN CODE =  " RETURN-CODE
651100     END-IF
651200
651300     DISPLAY WS-PGMID
651400          "    INPUT JULIAN: " WS-J1904061
651500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
651600
651700     DISPLAY WS-PGMID
651800          " 3. TESTING DATE DTEG2B - 19040301/695115"
651900     MOVE ZERO TO LS-BDAY
652000     CALL WS-DTEG2B
652100          USING WS-G19040301
652200                LS-BDAY
652300     IF RETURN-CODE > ZERO
652400       DISPLAY WS-PGMID " " WS-DTEG2B
652500            " COBOL RETURN CODE =  " RETURN-CODE
652600     END-IF
652700
652800     DISPLAY WS-PGMID
652900          "    INPUT GREGORIAN: " WS-G19040301
653000          "  OUTPUT BASE: " LS-BDAY
653100
653200     DISPLAY WS-PGMID
653300          " 4. TESTING DATE DTEB2G - 695115/19040301"
653400     MOVE ZERO TO LS-GREGORIAN
653500     CALL WS-DTEB2G
653600          USING WS-B695115
653700                LS-GREGORIAN
653800     IF RETURN-CODE > ZERO
653900       DISPLAY WS-PGMID " " WS-DTEB2G
654000            " COBOL RETURN CODE =  " RETURN-CODE
654100     END-IF
654200
654300     DISPLAY WS-PGMID
654400          "    INPUT BASE: " WS-B695115
654500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
654600
654700     DISPLAY WS-PGMID
654800          " 5. TESTING DATE DTEG2W - 19040301/1904-W09-2"
654900     MOVE SPACE TO LS-WEEK
655000     CALL WS-DTEG2W
655100          USING WS-G19040301
655200                LS-WEEK
655300     IF RETURN-CODE > ZERO
655400       DISPLAY WS-PGMID " " WS-DTEG2W
655500            " COBOL RETURN CODE =  " RETURN-CODE
655600     END-IF
655700
655800     DISPLAY WS-PGMID
655900          "    INPUT GREGORIAN: " WS-G19040301
656000          "  OUTPUT WEEK: " LS-WEEK
656100
656200     DISPLAY WS-PGMID
656300          " 6. TESTING DATE DTEW2G - 1904 09/19040229"
656400     MOVE ZERO TO LS-GREGORIAN
656500     CALL WS-DTEW2G
656600          USING WS-Y1904
656700                WS-W09
656800                LS-GREGORIAN
656900     IF RETURN-CODE > ZERO
657000       DISPLAY WS-PGMID " " WS-DTEW2G
657100            " COBOL RETURN CODE =  " RETURN-CODE
657200     END-IF
657300
657400     DISPLAY WS-PGMID
657500          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W09
657600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
657700
657800     DISPLAY WS-PGMID
657900          " 7. TESTING DATE DTEDOW1 - 19040301/3 TUESDAY"
658000     MOVE ZERO TO LS-GREGORIAN
658100     CALL WS-DTEDOW1
658200          USING WS-G19040301
658300                LS-DOW-NBR
658400                LS-DOW-TXT
658500     IF RETURN-CODE > ZERO
658600       DISPLAY WS-PGMID " " WS-DTEDOW1
658700            " COBOL RETURN CODE = " RETURN-CODE
658800     END-IF
658900
659000     DISPLAY WS-PGMID
659100          "    INPUT GREGORIAN: " WS-G19040301
659200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
659300
659400     DISPLAY WS-PGMID
659500          " 8. TESTING DATE DTEDOW2 - 19040301/2 TUESDAY"
659600     MOVE ZERO TO LS-GREGORIAN
659700     CALL WS-DTEDOW2
659800          USING WS-G19040301
659900                LS-DOW-NBR
660000                LS-DOW-TXT
660100     IF RETURN-CODE > ZERO
660200       DISPLAY WS-PGMID " " WS-DTEDOW2
660300            " COBOL RETURN CODE = " RETURN-CODE
660400     END-IF
660500
660600     DISPLAY WS-PGMID
660700          "    INPUT GREGORIAN: " WS-G19040301
660800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
660900
661000     DISPLAY " "
661100
661200     DISPLAY WS-PGMID
661300          " 1. TESTING DATE DTEG2J - 19041231/1904366"
661400     MOVE ZERO TO LS-JULIAN
661500     CALL WS-DTEG2J
661600          USING WS-G19041231
661700                LS-JULIAN
661800     IF RETURN-CODE > ZERO
661900       DISPLAY WS-PGMID " " WS-DTEG2J
662000            " COBOL RETURN CODE =  " RETURN-CODE
662100     END-IF
662200
662300     DISPLAY WS-PGMID
662400          "    INPUT GREGORIAN: " WS-G19041231
662500          "  OUTPUT JULIAN: " LS-JULIAN
662600
662700     DISPLAY WS-PGMID
662800          " 2. TESTING DATE DTEJ2G - 1904366/19041231"
662900     MOVE ZERO TO LS-GREGORIAN
663000     CALL WS-DTEJ2G
663100          USING WS-J1904366
663200                LS-GREGORIAN
663300     IF RETURN-CODE > ZERO
663400       DISPLAY WS-PGMID " " WS-DTEJ2G
663500            " COBOL RETURN CODE =  " RETURN-CODE
663600     END-IF
663700
663800     DISPLAY WS-PGMID
663900          "    INPUT JULIAN: " WS-J1904366
664000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
664100
664200     DISPLAY WS-PGMID
664300          " 3. TESTING DATE DTEG2B - 19041231/695420"
664400     MOVE ZERO TO LS-BDAY
664500     CALL WS-DTEG2B
664600          USING WS-G19041231
664700                LS-BDAY
664800     IF RETURN-CODE > ZERO
664900       DISPLAY WS-PGMID " " WS-DTEG2B
665000            " COBOL RETURN CODE =  " RETURN-CODE
665100     END-IF
665200
665300     DISPLAY WS-PGMID
665400          "    INPUT GREGORIAN: " WS-G19041231
665500          "  OUTPUT BASE: " LS-BDAY
665600
665700     DISPLAY WS-PGMID
665800          " 4. TESTING DATE DTEB2G - 695420/19041231"
665900     MOVE ZERO TO LS-GREGORIAN
666000     CALL WS-DTEB2G
666100          USING WS-B695420
666200                LS-GREGORIAN
666300     IF RETURN-CODE > ZERO
666400       DISPLAY WS-PGMID " " WS-DTEB2G
666500            " COBOL RETURN CODE =  " RETURN-CODE
666600     END-IF
666700
666800     DISPLAY WS-PGMID
666900          "    INPUT BASE: " WS-B695420
667000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
667100
667200     DISPLAY WS-PGMID
667300          " 5. TESTING DATE DTEG2W - 19041231/1904-W52-6"
667400     MOVE SPACE TO LS-WEEK
667500     CALL WS-DTEG2W
667600          USING WS-G19041231
667700                LS-WEEK
667800     IF RETURN-CODE > ZERO
667900       DISPLAY WS-PGMID " " WS-DTEG2W
668000            " COBOL RETURN CODE =  " RETURN-CODE
668100     END-IF
668200
668300     DISPLAY WS-PGMID
668400          "    INPUT GREGORIAN: " WS-G19041231
668500          "  OUTPUT WEEK: " LS-WEEK
668600
668700     DISPLAY WS-PGMID
668800          " 6. TESTING DATE DTEW2G - 1904 52/19041226"
668900     MOVE ZERO TO LS-GREGORIAN
669000     CALL WS-DTEW2G
669100          USING WS-Y1904
669200                WS-W52
669300                LS-GREGORIAN
669400     IF RETURN-CODE > ZERO
669500       DISPLAY WS-PGMID " " WS-DTEW2G
669600            " COBOL RETURN CODE =  " RETURN-CODE
669700     END-IF
669800
669900     DISPLAY WS-PGMID
670000          "    INPUT YEAR: " WS-Y1904 " WEEK: " WS-W52
670100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
670200
670300     DISPLAY WS-PGMID
670400          " 7. TESTING DATE DTEDOW1 - 19041231/7 SATURDAY"
670500     MOVE ZERO TO LS-GREGORIAN
670600     CALL WS-DTEDOW1
670700          USING WS-G19041231
670800                LS-DOW-NBR
670900                LS-DOW-TXT
671000     IF RETURN-CODE > ZERO
671100       DISPLAY WS-PGMID " " WS-DTEDOW1
671200            " COBOL RETURN CODE = " RETURN-CODE
671300     END-IF
671400
671500     DISPLAY WS-PGMID
671600          "    INPUT GREGORIAN: " WS-G19041231
671700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
671800
671900     DISPLAY WS-PGMID
672000          " 8. TESTING DATE DTEDOW2 - 19041231/6 SATURDAY"
672100     MOVE ZERO TO LS-GREGORIAN
672200     CALL WS-DTEDOW2
672300          USING WS-G19041231
672400                LS-DOW-NBR
672500                LS-DOW-TXT
672600     IF RETURN-CODE > ZERO
672700       DISPLAY WS-PGMID " " WS-DTEDOW2
672800            " COBOL RETURN CODE = " RETURN-CODE
672900     END-IF
673000
673100     DISPLAY WS-PGMID
673200          "    INPUT GREGORIAN: " WS-G19041231
673300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
673400
673500     DISPLAY " "
673600
673700     DISPLAY WS-PGMID
673800          " 1. TESTING DATE DTEG2J - 19700101/1970001"
673900     MOVE ZERO TO LS-JULIAN
674000     CALL WS-DTEG2J
674100          USING WS-G19700101
674200                LS-JULIAN
674300     IF RETURN-CODE > ZERO
674400       DISPLAY WS-PGMID " " WS-DTEG2J
674500            " COBOL RETURN CODE =  " RETURN-CODE
674600     END-IF
674700
674800     DISPLAY WS-PGMID
674900          "    INPUT GREGORIAN: " WS-G19700101
675000          "  OUTPUT JULIAN: " LS-JULIAN
675100
675200     DISPLAY WS-PGMID
675300          " 2. TESTING DATE DTEJ2G - 1970001/19700101"
675400     MOVE ZERO TO LS-GREGORIAN
675500     CALL WS-DTEJ2G
675600          USING WS-J1970001
675700                LS-GREGORIAN
675800     IF RETURN-CODE > ZERO
675900       DISPLAY WS-PGMID " " WS-DTEJ2G
676000            " COBOL RETURN CODE =  " RETURN-CODE
676100     END-IF
676200
676300     DISPLAY WS-PGMID
676400          "    INPUT JULIAN: " WS-J1970001
676500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
676600
676700     DISPLAY WS-PGMID
676800          " 3. TESTING DATE DTEG2B - 19700101/719162"
676900     MOVE ZERO TO LS-BDAY
677000     CALL WS-DTEG2B
677100          USING WS-G19700101
677200                LS-BDAY
677300     IF RETURN-CODE > ZERO
677400       DISPLAY WS-PGMID " " WS-DTEG2B
677500            " COBOL RETURN CODE =  " RETURN-CODE
677600     END-IF
677700
677800     DISPLAY WS-PGMID
677900          "    INPUT GREGORIAN: " WS-G19700101
678000          "  OUTPUT BASE: " LS-BDAY
678100
678200     DISPLAY WS-PGMID
678300          " 4. TESTING DATE DTEB2G - 719162/19700101"
678400     MOVE ZERO TO LS-GREGORIAN
678500     CALL WS-DTEB2G
678600          USING WS-B719162
678700                LS-GREGORIAN
678800     IF RETURN-CODE > ZERO
678900       DISPLAY WS-PGMID " " WS-DTEB2G
679000            " COBOL RETURN CODE =  " RETURN-CODE
679100     END-IF
679200
679300     DISPLAY WS-PGMID
679400          "    INPUT BASE: " WS-B719162
679500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
679600
679700     DISPLAY WS-PGMID
679800          " 5. TESTING DATE DTEG2W - 19700101/1970-W01-4"
679900     MOVE SPACE TO LS-WEEK
680000     CALL WS-DTEG2W
680100          USING WS-G19700101
680200                LS-WEEK
680300     IF RETURN-CODE > ZERO
680400       DISPLAY WS-PGMID " " WS-DTEG2W
680500            " COBOL RETURN CODE =  " RETURN-CODE
680600     END-IF
680700
680800     DISPLAY WS-PGMID
680900          "    INPUT GREGORIAN: " WS-G19700101
681000          "  OUTPUT WEEK: " LS-WEEK
681100
681200     DISPLAY WS-PGMID
681300          " 6. TESTING DATE DTEW2G - 1970 01/19691229"
681400     MOVE ZERO TO LS-GREGORIAN
681500     CALL WS-DTEW2G
681600          USING WS-Y1970
681700                WS-W01
681800                LS-GREGORIAN
681900     IF RETURN-CODE > ZERO
682000       DISPLAY WS-PGMID " " WS-DTEW2G
682100            " COBOL RETURN CODE =  " RETURN-CODE
682200     END-IF
682300
682400     DISPLAY WS-PGMID
682500          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W01
682600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
682700
682800     DISPLAY WS-PGMID
682900          " 7. TESTING DATE DTEDOW1 - 19700101/5 THURSDAY"
683000     MOVE ZERO TO LS-GREGORIAN
683100     CALL WS-DTEDOW1
683200          USING WS-G19700101
683300                LS-DOW-NBR
683400                LS-DOW-TXT
683500     IF RETURN-CODE > ZERO
683600       DISPLAY WS-PGMID " " WS-DTEDOW1
683700            " COBOL RETURN CODE = " RETURN-CODE
683800     END-IF
683900
684000     DISPLAY WS-PGMID
684100          "    INPUT GREGORIAN: " WS-G19700101
684200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
684300
684400     DISPLAY WS-PGMID
684500          " 8. TESTING DATE DTEDOW2 - 19700101/4 THURSDY"
684600     MOVE ZERO TO LS-GREGORIAN
684700     CALL WS-DTEDOW2
684800          USING WS-G19700101
684900                LS-DOW-NBR
685000                LS-DOW-TXT
685100     IF RETURN-CODE > ZERO
685200       DISPLAY WS-PGMID " " WS-DTEDOW2
685300            " COBOL RETURN CODE = " RETURN-CODE
685400     END-IF
685500
685600     DISPLAY WS-PGMID
685700          "    INPUT GREGORIAN: " WS-G19700101
685800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
685900
686000     DISPLAY " "
686100
686200     DISPLAY WS-PGMID
686300          " 1. TESTING DATE DTEG2J - 19700228/1970059"
686400     MOVE ZERO TO LS-JULIAN
686500     CALL WS-DTEG2J
686600          USING WS-G19700228
686700                LS-JULIAN
686800     IF RETURN-CODE > ZERO
686900       DISPLAY WS-PGMID " " WS-DTEG2J
687000            " COBOL RETURN CODE =  " RETURN-CODE
687100     END-IF
687200
687300     DISPLAY WS-PGMID
687400          "    INPUT GREGORIAN: " WS-G19700228
687500          "  OUTPUT JULIAN: " LS-JULIAN
687600
687700     DISPLAY WS-PGMID
687800          " 2. TESTING DATE DTEJ2G - 1970059/19700228"
687900     MOVE ZERO TO LS-GREGORIAN
688000     CALL WS-DTEJ2G
688100          USING WS-J1970059
688200                LS-GREGORIAN
688300     IF RETURN-CODE > ZERO
688400       DISPLAY WS-PGMID " " WS-DTEJ2G
688500            " COBOL RETURN CODE =  " RETURN-CODE
688600     END-IF
688700
688800     DISPLAY WS-PGMID
688900          "    INPUT JULIAN: " WS-J1970059
689000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
689100
689200     DISPLAY WS-PGMID
689300          " 3. TESTING DATE DTEG2B - 19700228/719220"
689400     MOVE ZERO TO LS-BDAY
689500     CALL WS-DTEG2B
689600          USING WS-G19700228
689700                LS-BDAY
689800     IF RETURN-CODE > ZERO
689900       DISPLAY WS-PGMID " " WS-DTEG2B
690000            " COBOL RETURN CODE =  " RETURN-CODE
690100     END-IF
690200
690300     DISPLAY WS-PGMID
690400          "    INPUT GREGORIAN: " WS-G19700228
690500          "  OUTPUT BASE: " LS-BDAY
690600
690700     DISPLAY WS-PGMID
690800          " 4. TESTING DATE DTEB2G - 719220/19700228"
690900     MOVE ZERO TO LS-GREGORIAN
691000     CALL WS-DTEB2G
691100          USING WS-B719220
691200                LS-GREGORIAN
691300     IF RETURN-CODE > ZERO
691400       DISPLAY WS-PGMID " " WS-DTEB2G
691500            " COBOL RETURN CODE =  " RETURN-CODE
691600     END-IF
691700
691800     DISPLAY WS-PGMID
691900          "    INPUT BASE: " WS-B719220
692000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
692100
692200     DISPLAY WS-PGMID
692300          " 5. TESTING DATE DTEG2W - 19700228/1970-W09-6"
692400     MOVE SPACE TO LS-WEEK
692500     CALL WS-DTEG2W
692600          USING WS-G19700228
692700                LS-WEEK
692800     IF RETURN-CODE > ZERO
692900       DISPLAY WS-PGMID " " WS-DTEG2W
693000            " COBOL RETURN CODE =  " RETURN-CODE
693100     END-IF
693200
693300     DISPLAY WS-PGMID
693400          "    INPUT GREGORIAN: " WS-G19700228
693500          "  OUTPUT WEEK: " LS-WEEK
693600
693700     DISPLAY WS-PGMID
693800          " 6. TESTING DATE DTEW2G - 1970 09/19700223"
693900     MOVE ZERO TO LS-GREGORIAN
694000     CALL WS-DTEW2G
694100          USING WS-Y1970
694200                WS-W09
694300                LS-GREGORIAN
694400     IF RETURN-CODE > ZERO
694500       DISPLAY WS-PGMID " " WS-DTEW2G
694600            " COBOL RETURN CODE =  " RETURN-CODE
694700     END-IF
694800
694900     DISPLAY WS-PGMID
695000          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W09
695100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
695200
695300     DISPLAY WS-PGMID
695400          " 7. TESTING DATE DTEDOW1 - 19700228/7 SATURDAY"
695500     MOVE ZERO TO LS-GREGORIAN
695600     CALL WS-DTEDOW1
695700          USING WS-G19700228
695800                LS-DOW-NBR
695900                LS-DOW-TXT
696000     IF RETURN-CODE > ZERO
696100       DISPLAY WS-PGMID " " WS-DTEDOW1
696200            " COBOL RETURN CODE = " RETURN-CODE
696300     END-IF
696400
696500     DISPLAY WS-PGMID
696600          "    INPUT GREGORIAN: " WS-G19700228
696700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
696800
696900     DISPLAY WS-PGMID
697000          " 8. TESTING DATE DTEDOW2 - 19700228/6 SATURDAY"
697100     MOVE ZERO TO LS-GREGORIAN
697200     CALL WS-DTEDOW2
697300          USING WS-G19700228
697400                LS-DOW-NBR
697500                LS-DOW-TXT
697600     IF RETURN-CODE > ZERO
697700       DISPLAY WS-PGMID " " WS-DTEDOW2
697800            " COBOL RETURN CODE = " RETURN-CODE
697900     END-IF
698000
698100     DISPLAY WS-PGMID
698200          "    INPUT GREGORIAN: " WS-G19700228
698300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
698400
698500     DISPLAY " "
698600
698700     DISPLAY WS-PGMID
698800          " 1. TESTING DATE DTEG2J - 19700301/1970060"
698900     MOVE ZERO TO LS-JULIAN
699000     CALL WS-DTEG2J
699100          USING WS-G19700301
699200                LS-JULIAN
699300     IF RETURN-CODE > ZERO
699400       DISPLAY WS-PGMID " " WS-DTEG2J
699500            " COBOL RETURN CODE =  " RETURN-CODE
699600     END-IF
699700
699800     DISPLAY WS-PGMID
699900          "    INPUT GREGORIAN: " WS-G19700301
700000          "  OUTPUT JULIAN: " LS-JULIAN
700100
700200     DISPLAY WS-PGMID
700300          " 2. TESTING DATE DTEJ2G - 1970060/19700301"
700400     MOVE ZERO TO LS-GREGORIAN
700500     CALL WS-DTEJ2G
700600          USING WS-J1970060
700700                LS-GREGORIAN
700800     IF RETURN-CODE > ZERO
700900       DISPLAY WS-PGMID " " WS-DTEJ2G
701000            " COBOL RETURN CODE =  " RETURN-CODE
701100     END-IF
701200
701300     DISPLAY WS-PGMID
701400          "    INPUT JULIAN: " WS-J1970060
701500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
701600
701700     DISPLAY WS-PGMID
701800          " 3. TESTING DATE DTEG2B - 19700301/719221"
701900     MOVE ZERO TO LS-BDAY
702000     CALL WS-DTEG2B
702100          USING WS-G19700301
702200                LS-BDAY
702300     IF RETURN-CODE > ZERO
702400       DISPLAY WS-PGMID " " WS-DTEG2B
702500            " COBOL RETURN CODE =  " RETURN-CODE
702600     END-IF
702700
702800     DISPLAY WS-PGMID
702900          "    INPUT GREGORIAN: " WS-G19700301
703000          "  OUTPUT BASE: " LS-BDAY
703100
703200     DISPLAY WS-PGMID
703300          " 4. TESTING DATE DTEB2G - 719221/19700301"
703400     MOVE ZERO TO LS-GREGORIAN
703500     CALL WS-DTEB2G
703600          USING WS-B719221
703700                LS-GREGORIAN
703800     IF RETURN-CODE > ZERO
703900       DISPLAY WS-PGMID " " WS-DTEB2G
704000            " COBOL RETURN CODE =  " RETURN-CODE
704100     END-IF
704200
704300     DISPLAY WS-PGMID
704400          "    INPUT BASE: " WS-B719221
704500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
704600
704700     DISPLAY WS-PGMID
704800          " 5. TESTING DATE DTEG2W - 19700301/1970-W09-7"
704900     MOVE SPACE TO LS-WEEK
705000     CALL WS-DTEG2W
705100          USING WS-G19700301
705200                LS-WEEK
705300     IF RETURN-CODE > ZERO
705400       DISPLAY WS-PGMID " " WS-DTEG2W
705500            " COBOL RETURN CODE =  " RETURN-CODE
705600     END-IF
705700
705800     DISPLAY WS-PGMID
705900          "    INPUT GREGORIAN: " WS-G19700301
706000          "  OUTPUT WEEK: " LS-WEEK
706100
706200     DISPLAY WS-PGMID
706300          " 6. TESTING DATE DTEW2G - 1970 09/19700223"
706400     MOVE ZERO TO LS-GREGORIAN
706500     CALL WS-DTEW2G
706600          USING WS-Y1970
706700                WS-W09
706800                LS-GREGORIAN
706900     IF RETURN-CODE > ZERO
707000       DISPLAY WS-PGMID " " WS-DTEW2G
707100            " COBOL RETURN CODE =  " RETURN-CODE
707200     END-IF
707300
707400     DISPLAY WS-PGMID
707500          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W09
707600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
707700
707800     DISPLAY WS-PGMID
707900          " 7. TESTING DATE DTEDOW1 - 19700301/1 SUNDAY"
708000     MOVE ZERO TO LS-GREGORIAN
708100     CALL WS-DTEDOW1
708200          USING WS-G19700301
708300                LS-DOW-NBR
708400                LS-DOW-TXT
708500     IF RETURN-CODE > ZERO
708600       DISPLAY WS-PGMID " " WS-DTEDOW1
708700            " COBOL RETURN CODE = " RETURN-CODE
708800     END-IF
708900
709000     DISPLAY WS-PGMID
709100          "    INPUT GREGORIAN: " WS-G19700301
709200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
709300
709400     DISPLAY WS-PGMID
709500          " 8. TESTING DATE DTEDOW2 - 19700301/7 SUNDAY"
709600     MOVE ZERO TO LS-GREGORIAN
709700     CALL WS-DTEDOW2
709800          USING WS-G19700301
709900                LS-DOW-NBR
710000                LS-DOW-TXT
710100     IF RETURN-CODE > ZERO
710200       DISPLAY WS-PGMID " " WS-DTEDOW2
710300            " COBOL RETURN CODE = " RETURN-CODE
710400     END-IF
710500
710600     DISPLAY WS-PGMID
710700          "    INPUT GREGORIAN: " WS-G19700301
710800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
710900
711000     DISPLAY " "
711100
711200     DISPLAY WS-PGMID
711300          " 1. TESTING DATE DTEG2J - 19701231/1970365"
711400     MOVE ZERO TO LS-JULIAN
711500     CALL WS-DTEG2J
711600          USING WS-G19701231
711700                LS-JULIAN
711800     IF RETURN-CODE > ZERO
711900       DISPLAY WS-PGMID " " WS-DTEG2J
712000            " COBOL RETURN CODE =  " RETURN-CODE
712100     END-IF
712200
712300     DISPLAY WS-PGMID
712400          "    INPUT GREGORIAN: " WS-G19701231
712500          "  OUTPUT JULIAN: " LS-JULIAN
712600
712700     DISPLAY WS-PGMID
712800          " 2. TESTING DATE DTEJ2G - 1970365/19701231"
712900     MOVE ZERO TO LS-GREGORIAN
713000     CALL WS-DTEJ2G
713100          USING WS-J1970365
713200                LS-GREGORIAN
713300     IF RETURN-CODE > ZERO
713400       DISPLAY WS-PGMID " " WS-DTEJ2G
713500            " COBOL RETURN CODE =  " RETURN-CODE
713600     END-IF
713700
713800     DISPLAY WS-PGMID
713900          "    INPUT JULIAN: " WS-J1970365
714000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
714100
714200     DISPLAY WS-PGMID
714300          " 3. TESTING DATE DTEG2B - 19701231/719526"
714400     MOVE ZERO TO LS-BDAY
714500     CALL WS-DTEG2B
714600          USING WS-G19701231
714700                LS-BDAY
714800     IF RETURN-CODE > ZERO
714900       DISPLAY WS-PGMID " " WS-DTEG2B
715000            " COBOL RETURN CODE =  " RETURN-CODE
715100     END-IF
715200
715300     DISPLAY WS-PGMID
715400          "    INPUT GREGORIAN: " WS-G19701231
715500          "  OUTPUT BASE: " LS-BDAY
715600
715700     DISPLAY WS-PGMID
715800          " 4. TESTING DATE DTEB2G - 719526/19701231"
715900     MOVE ZERO TO LS-GREGORIAN
716000     CALL WS-DTEB2G
716100          USING WS-B719526
716200                LS-GREGORIAN
716300     IF RETURN-CODE > ZERO
716400       DISPLAY WS-PGMID " " WS-DTEB2G
716500            " COBOL RETURN CODE =  " RETURN-CODE
716600     END-IF
716700
716800     DISPLAY WS-PGMID
716900          "    INPUT BASE: " WS-B719526
717000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
717100
717200     DISPLAY WS-PGMID
717300          " 5. TESTING DATE DTEG2W - 19701231/1970-W53-4"
717400     MOVE SPACE TO LS-WEEK
717500     CALL WS-DTEG2W
717600          USING WS-G19701231
717700                LS-WEEK
717800     IF RETURN-CODE > ZERO
717900       DISPLAY WS-PGMID " " WS-DTEG2W
718000            " COBOL RETURN CODE =  " RETURN-CODE
718100     END-IF
718200
718300     DISPLAY WS-PGMID
718400          "    INPUT GREGORIAN: " WS-G19701231
718500          "  OUTPUT WEEK: " LS-WEEK
718600
718700     DISPLAY WS-PGMID
718800          " 6. TESTING DATE DTEW2G - 1970 53/19701228"
718900     MOVE ZERO TO LS-GREGORIAN
719000     CALL WS-DTEW2G
719100          USING WS-Y1970
719200                WS-W53
719300                LS-GREGORIAN
719400     IF RETURN-CODE > ZERO
719500       DISPLAY WS-PGMID " " WS-DTEW2G
719600            " COBOL RETURN CODE =  " RETURN-CODE
719700     END-IF
719800
719900     DISPLAY WS-PGMID
720000          "    INPUT YEAR: " WS-Y1970 " WEEK: " WS-W53
720100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
720200
720300     DISPLAY WS-PGMID
720400          " 7. TESTING DATE DTEDOW1 - 19701231/5 THURSDAY"
720500     MOVE ZERO TO LS-GREGORIAN
720600     CALL WS-DTEDOW1
720700          USING WS-G19701231
720800                LS-DOW-NBR
720900                LS-DOW-TXT
721000     IF RETURN-CODE > ZERO
721100       DISPLAY WS-PGMID " " WS-DTEDOW1
721200            " COBOL RETURN CODE = " RETURN-CODE
721300     END-IF
721400
721500     DISPLAY WS-PGMID
721600          "    INPUT GREGORIAN: " WS-G19701231
721700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
721800
721900     DISPLAY WS-PGMID
722000          " 8. TESTING DATE DTEDOW2 - 19701231/4 THURSDAY"
722100     MOVE ZERO TO LS-GREGORIAN
722200     CALL WS-DTEDOW2
722300          USING WS-G19701231
722400                LS-DOW-NBR
722500                LS-DOW-TXT
722600     IF RETURN-CODE > ZERO
722700       DISPLAY WS-PGMID " " WS-DTEDOW2
722800            " COBOL RETURN CODE = " RETURN-CODE
722900     END-IF
723000
723100     DISPLAY WS-PGMID
723200          "    INPUT GREGORIAN: " WS-G19701231
723300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
723400
723500     DISPLAY " "
723600
723700     DISPLAY WS-PGMID
723800          " 1. TESTING DATE DTEG2J - 20000101/2000001"
723900     MOVE ZERO TO LS-JULIAN
724000     CALL WS-DTEG2J
724100          USING WS-G20000101
724200                LS-JULIAN
724300     IF RETURN-CODE > ZERO
724400       DISPLAY WS-PGMID " " WS-DTEG2J
724500            " COBOL RETURN CODE =  " RETURN-CODE
724600     END-IF
724700
724800     DISPLAY WS-PGMID
724900          "    INPUT GREGORIAN: " WS-G20000101
725000          "  OUTPUT JULIAN: " LS-JULIAN
725100
725200     DISPLAY WS-PGMID
725300          " 2. TESTING DATE DTEJ2G - 2000001/20000101"
725400     MOVE ZERO TO LS-GREGORIAN
725500     CALL WS-DTEJ2G
725600          USING WS-J2000001
725700                LS-GREGORIAN
725800     IF RETURN-CODE > ZERO
725900       DISPLAY WS-PGMID " " WS-DTEJ2G
726000            " COBOL RETURN CODE =  " RETURN-CODE
726100     END-IF
726200
726300     DISPLAY WS-PGMID
726400          "    INPUT JULIAN: " WS-J2000001
726500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
726600
726700     DISPLAY WS-PGMID
726800          " 3. TESTING DATE DTEG2B - 20000101/730119"
726900     MOVE ZERO TO LS-BDAY
727000     CALL WS-DTEG2B
727100          USING WS-G20000101
727200                LS-BDAY
727300     IF RETURN-CODE > ZERO
727400       DISPLAY WS-PGMID " " WS-DTEG2B
727500            " COBOL RETURN CODE =  " RETURN-CODE
727600     END-IF
727700
727800     DISPLAY WS-PGMID
727900          "    INPUT GREGORIAN: " WS-G20000101
728000          "  OUTPUT BASE: " LS-BDAY
728100
728200     DISPLAY WS-PGMID
728300          " 4. TESTING DATE DTEB2G - 730119/20000101"
728400     MOVE ZERO TO LS-GREGORIAN
728500     CALL WS-DTEB2G
728600          USING WS-B730119
728700                LS-GREGORIAN
728800     IF RETURN-CODE > ZERO
728900       DISPLAY WS-PGMID " " WS-DTEB2G
729000            " COBOL RETURN CODE =  " RETURN-CODE
729100     END-IF
729200
729300     DISPLAY WS-PGMID
729400          "    INPUT BASE: " WS-B730119
729500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
729600
729700     DISPLAY WS-PGMID
729800          " 5. TESTING DATE DTEG2W - 20000101/1999-W52-6"
729900     MOVE SPACE TO LS-WEEK
730000     CALL WS-DTEG2W
730100          USING WS-G20000101
730200                LS-WEEK
730300     IF RETURN-CODE > ZERO
730400       DISPLAY WS-PGMID " " WS-DTEG2W
730500            " COBOL RETURN CODE =  " RETURN-CODE
730600     END-IF
730700
730800     DISPLAY WS-PGMID
730900          "    INPUT GREGORIAN: " WS-G20000101
731000          "  OUTPUT WEEK: " LS-WEEK
731100
731200     DISPLAY WS-PGMID
731300          " 6. TESTING DATE DTEW2G - 2000 01/20000103"
731400     MOVE ZERO TO LS-GREGORIAN
731500     CALL WS-DTEW2G
731600          USING WS-Y2000
731700                WS-W01
731800                LS-GREGORIAN
731900     IF RETURN-CODE > ZERO
732000       DISPLAY WS-PGMID " " WS-DTEW2G
732100            " COBOL RETURN CODE =  " RETURN-CODE
732200     END-IF
732300
732400     DISPLAY WS-PGMID
732500          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W01
732600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
732700
732800     DISPLAY WS-PGMID
732900          " 7. TESTING DATE DTEDOW1 - 20000101/7 SATURDAY"
733000     MOVE ZERO TO LS-GREGORIAN
733100     CALL WS-DTEDOW1
733200          USING WS-G20000101
733300                LS-DOW-NBR
733400                LS-DOW-TXT
733500     IF RETURN-CODE > ZERO
733600       DISPLAY WS-PGMID " " WS-DTEDOW1
733700            " COBOL RETURN CODE = " RETURN-CODE
733800     END-IF
733900
734000     DISPLAY WS-PGMID
734100          "    INPUT GREGORIAN: " WS-G20000101
734200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
734300
734400     DISPLAY WS-PGMID
734500          " 8. TESTING DATE DTEDOW2 - 20000101/6 SATURDAY"
734600     MOVE ZERO TO LS-GREGORIAN
734700     CALL WS-DTEDOW2
734800          USING WS-G20000101
734900                LS-DOW-NBR
735000                LS-DOW-TXT
735100     IF RETURN-CODE > ZERO
735200       DISPLAY WS-PGMID " " WS-DTEDOW2
735300            " COBOL RETURN CODE = " RETURN-CODE
735400     END-IF
735500
735600     DISPLAY WS-PGMID
735700          "    INPUT GREGORIAN: " WS-G20000101
735800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
735900
736000     DISPLAY " "
736100
736200     DISPLAY WS-PGMID
736300          " 1. TESTING DATE DTEG2J - 20000228/2000059"
736400     MOVE ZERO TO LS-JULIAN
736500     CALL WS-DTEG2J
736600          USING WS-G20000228
736700                LS-JULIAN
736800     IF RETURN-CODE > ZERO
736900       DISPLAY WS-PGMID " " WS-DTEG2J
737000            " COBOL RETURN CODE =  " RETURN-CODE
737100     END-IF
737200
737300     DISPLAY WS-PGMID
737400          "    INPUT GREGORIAN: " WS-G20000228
737500          "  OUTPUT JULIAN: " LS-JULIAN
737600
737700     DISPLAY WS-PGMID
737800          " 2. TESTING DATE DTEJ2G - 2000059/20000228"
737900     MOVE ZERO TO LS-GREGORIAN
738000     CALL WS-DTEJ2G
738100          USING WS-J2000059
738200                LS-GREGORIAN
738300     IF RETURN-CODE > ZERO
738400       DISPLAY WS-PGMID " " WS-DTEJ2G
738500            " COBOL RETURN CODE =  " RETURN-CODE
738600     END-IF
738700
738800     DISPLAY WS-PGMID
738900          "    INPUT JULIAN: " WS-J2000059
739000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
739100
739200     DISPLAY WS-PGMID
739300          " 3. TESTING DATE DTEG2B - 20000228/730177"
739400     MOVE ZERO TO LS-BDAY
739500     CALL WS-DTEG2B
739600          USING WS-G20000228
739700                LS-BDAY
739800     IF RETURN-CODE > ZERO
739900       DISPLAY WS-PGMID " " WS-DTEG2B
740000            " COBOL RETURN CODE =  " RETURN-CODE
740100     END-IF
740200
740300     DISPLAY WS-PGMID
740400          "    INPUT GREGORIAN: " WS-G20000228
740500          "  OUTPUT BASE: " LS-BDAY
740600
740700     DISPLAY WS-PGMID
740800          " 4. TESTING DATE DTEB2G - 730177/20000228"
740900     MOVE ZERO TO LS-GREGORIAN
741000     CALL WS-DTEB2G
741100          USING WS-B730177
741200                LS-GREGORIAN
741300     IF RETURN-CODE > ZERO
741400       DISPLAY WS-PGMID " " WS-DTEB2G
741500            " COBOL RETURN CODE =  " RETURN-CODE
741600     END-IF
741700
741800     DISPLAY WS-PGMID
741900          "    INPUT BASE: " WS-B730177
742000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
742100
742200     DISPLAY WS-PGMID
742300          " 5. TESTING DATE DTEG2W - 20000228/2000-W09-1"
742400     MOVE SPACE TO LS-WEEK
742500     CALL WS-DTEG2W
742600          USING WS-G20000228
742700                LS-WEEK
742800     IF RETURN-CODE > ZERO
742900       DISPLAY WS-PGMID " " WS-DTEG2W
743000            " COBOL RETURN CODE =  " RETURN-CODE
743100     END-IF
743200
743300     DISPLAY WS-PGMID
743400          "    INPUT GREGORIAN: " WS-G20000228
743500          "  OUTPUT WEEK: " LS-WEEK
743600
743700     DISPLAY WS-PGMID
743800          " 6. TESTING DATE DTEW2G - 2000 09/20000228"
743900     MOVE ZERO TO LS-GREGORIAN
744000     CALL WS-DTEW2G
744100          USING WS-Y2000
744200                WS-W09
744300                LS-GREGORIAN
744400     IF RETURN-CODE > ZERO
744500       DISPLAY WS-PGMID " " WS-DTEW2G
744600            " COBOL RETURN CODE =  " RETURN-CODE
744700     END-IF
744800
744900     DISPLAY WS-PGMID
745000          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
745100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
745200
745300     DISPLAY WS-PGMID
745400          " 7. TESTING DATE DTEDOW1 - 20000228/2 MONDAY"
745500     MOVE ZERO TO LS-GREGORIAN
745600     CALL WS-DTEDOW1
745700          USING WS-G20000228
745800                LS-DOW-NBR
745900                LS-DOW-TXT
746000     IF RETURN-CODE > ZERO
746100       DISPLAY WS-PGMID " " WS-DTEDOW1
746200            " COBOL RETURN CODE = " RETURN-CODE
746300     END-IF
746400
746500     DISPLAY WS-PGMID
746600          "    INPUT GREGORIAN: " WS-G20000228
746700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
746800
746900     DISPLAY WS-PGMID
747000          " 8. TESTING DATE DTEDOW2 - 20000228/1 MONDAY"
747100     MOVE ZERO TO LS-GREGORIAN
747200     CALL WS-DTEDOW2
747300          USING WS-G20000228
747400                LS-DOW-NBR
747500                LS-DOW-TXT
747600     IF RETURN-CODE > ZERO
747700       DISPLAY WS-PGMID " " WS-DTEDOW2
747800            " COBOL RETURN CODE = " RETURN-CODE
747900     END-IF
748000
748100     DISPLAY WS-PGMID
748200          "    INPUT GREGORIAN: " WS-G20000228
748300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
748400
748500     DISPLAY " "
748600
748700     DISPLAY WS-PGMID
748800          " 1. TESTING DATE DTEG2J - 20000229/2000060"
748900     MOVE ZERO TO LS-JULIAN
749000     CALL WS-DTEG2J
749100          USING WS-G20000229
749200                LS-JULIAN
749300     IF RETURN-CODE > ZERO
749400       DISPLAY WS-PGMID " " WS-DTEG2J
749500            " COBOL RETURN CODE =  " RETURN-CODE
749600     END-IF
749700
749800     DISPLAY WS-PGMID
749900          "    INPUT GREGORIAN: " WS-G20000229
750000          "  OUTPUT JULIAN: " LS-JULIAN
750100
750200     DISPLAY WS-PGMID
750300          " 2. TESTING DATE DTEJ2G - 2000060/20000229"
750400     MOVE ZERO TO LS-GREGORIAN
750500     CALL WS-DTEJ2G
750600          USING WS-J2000060
750700                LS-GREGORIAN
750800     IF RETURN-CODE > ZERO
750900       DISPLAY WS-PGMID " " WS-DTEJ2G
751000            " COBOL RETURN CODE =  " RETURN-CODE
751100     END-IF
751200
751300     DISPLAY WS-PGMID
751400          "    INPUT JULIAN: " WS-J2000060
751500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
751600
751700     DISPLAY WS-PGMID
751800          " 3. TESTING DATE DTEG2B - 20000229/730178"
751900     MOVE ZERO TO LS-BDAY
752000     CALL WS-DTEG2B
752100          USING WS-G20000229
752200                LS-BDAY
752300     IF RETURN-CODE > ZERO
752400       DISPLAY WS-PGMID " " WS-DTEG2B
752500            " COBOL RETURN CODE =  " RETURN-CODE
752600     END-IF
752700
752800     DISPLAY WS-PGMID
752900          "    INPUT GREGORIAN: " WS-G20000229
753000          "  OUTPUT BASE: " LS-BDAY
753100
753200     DISPLAY WS-PGMID
753300          " 4. TESTING DATE DTEB2G - 730178/20000229"
753400     MOVE ZERO TO LS-GREGORIAN
753500     CALL WS-DTEB2G
753600          USING WS-B730178
753700                LS-GREGORIAN
753800     IF RETURN-CODE > ZERO
753900       DISPLAY WS-PGMID " " WS-DTEB2G
754000            " COBOL RETURN CODE =  " RETURN-CODE
754100     END-IF
754200
754300     DISPLAY WS-PGMID
754400          "    INPUT BASE: " WS-B730178
754500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
754600
754700     DISPLAY WS-PGMID
754800          " 5. TESTING DATE DTEG2W - 20000229/2000-W09-2"
754900     MOVE SPACE TO LS-WEEK
755000     CALL WS-DTEG2W
755100          USING WS-G20000229
755200                LS-WEEK
755300     IF RETURN-CODE > ZERO
755400       DISPLAY WS-PGMID " " WS-DTEG2W
755500            " COBOL RETURN CODE =  " RETURN-CODE
755600     END-IF
755700
755800     DISPLAY WS-PGMID
755900          "    INPUT GREGORIAN: " WS-G20000229
756000          "  OUTPUT WEEK: " LS-WEEK
756100
756200     DISPLAY WS-PGMID
756300          " 6. TESTING DATE DTEW2G - 2000 09/20000228"
756400     MOVE ZERO TO LS-GREGORIAN
756500     CALL WS-DTEW2G
756600          USING WS-Y2000
756700                WS-W09
756800                LS-GREGORIAN
756900     IF RETURN-CODE > ZERO
757000       DISPLAY WS-PGMID " " WS-DTEW2G
757100            " COBOL RETURN CODE =  " RETURN-CODE
757200     END-IF
757300
757400     DISPLAY WS-PGMID
757500          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
757600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
757700
757800     DISPLAY WS-PGMID
757900          " 7. TESTING DATE DTEDOW1 - 20000229/3 TUESDAY"
758000     MOVE ZERO TO LS-GREGORIAN
758100     CALL WS-DTEDOW1
758200          USING WS-G20000229
758300                LS-DOW-NBR
758400                LS-DOW-TXT
758500     IF RETURN-CODE > ZERO
758600       DISPLAY WS-PGMID " " WS-DTEDOW1
758700            " COBOL RETURN CODE = " RETURN-CODE
758800     END-IF
758900
759000     DISPLAY WS-PGMID
759100          "    INPUT GREGORIAN: " WS-G20000229
759200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
759300
759400     DISPLAY WS-PGMID
759500          " 8. TESTING DATE DTEDOW2 - 20000229/2 TUESDAY"
759600     MOVE ZERO TO LS-GREGORIAN
759700     CALL WS-DTEDOW2
759800          USING WS-G20000229
759900                LS-DOW-NBR
760000                LS-DOW-TXT
760100     IF RETURN-CODE > ZERO
760200       DISPLAY WS-PGMID " " WS-DTEDOW2
760300            " COBOL RETURN CODE = " RETURN-CODE
760400     END-IF
760500
760600     DISPLAY WS-PGMID
760700          "    INPUT GREGORIAN: " WS-G20000229
760800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
760900
761000     DISPLAY " "
761100
761200     DISPLAY WS-PGMID
761300          " 1. TESTING DATE DTEG2J - 20000301/2000061"
761400     MOVE ZERO TO LS-JULIAN
761500     CALL WS-DTEG2J
761600          USING WS-G20000301
761700                LS-JULIAN
761800     IF RETURN-CODE > ZERO
761900       DISPLAY WS-PGMID " " WS-DTEG2J
762000            " COBOL RETURN CODE =  " RETURN-CODE
762100     END-IF
762200
762300     DISPLAY WS-PGMID
762400          "    INPUT GREGORIAN: " WS-G20000301
762500          "  OUTPUT JULIAN: " LS-JULIAN
762600
762700     DISPLAY WS-PGMID
762800          " 2. TESTING DATE DTEJ2G - 2000061/20000301"
762900     MOVE ZERO TO LS-GREGORIAN
763000     CALL WS-DTEJ2G
763100          USING WS-J2000061
763200                LS-GREGORIAN
763300     IF RETURN-CODE > ZERO
763400       DISPLAY WS-PGMID " " WS-DTEJ2G
763500            " COBOL RETURN CODE =  " RETURN-CODE
763600     END-IF
763700
763800     DISPLAY WS-PGMID
763900          "    INPUT JULIAN: " WS-J2000061
764000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
764100
764200     DISPLAY WS-PGMID
764300          " 3. TESTING DATE DTEG2B - 20000301/730179"
764400     MOVE ZERO TO LS-BDAY
764500     CALL WS-DTEG2B
764600          USING WS-G20000301
764700                LS-BDAY
764800     IF RETURN-CODE > ZERO
764900       DISPLAY WS-PGMID " " WS-DTEG2B
765000            " COBOL RETURN CODE =  " RETURN-CODE
765100     END-IF
765200
765300     DISPLAY WS-PGMID
765400          "    INPUT GREGORIAN: " WS-G20000301
765500          "  OUTPUT BASE: " LS-BDAY
765600
765700     DISPLAY WS-PGMID
765800          " 4. TESTING DATE DTEB2G - 730179/20000301"
765900     MOVE ZERO TO LS-GREGORIAN
766000     CALL WS-DTEB2G
766100          USING WS-B730179
766200                LS-GREGORIAN
766300     IF RETURN-CODE > ZERO
766400       DISPLAY WS-PGMID " " WS-DTEB2G
766500            " COBOL RETURN CODE =  " RETURN-CODE
766600     END-IF
766700
766800     DISPLAY WS-PGMID
766900          "    INPUT BASE: " WS-B730179
767000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
767100
767200     DISPLAY WS-PGMID
767300          " 5. TESTING DATE DTEG2W - 20000301/2000-W09-3"
767400     MOVE SPACE TO LS-WEEK
767500     CALL WS-DTEG2W
767600          USING WS-G20000301
767700                LS-WEEK
767800     IF RETURN-CODE > ZERO
767900       DISPLAY WS-PGMID " " WS-DTEG2W
768000            " COBOL RETURN CODE =  " RETURN-CODE
768100     END-IF
768200
768300     DISPLAY WS-PGMID
768400          "    INPUT GREGORIAN: " WS-G20000301
768500          "  OUTPUT WEEK: " LS-WEEK
768600
768700     DISPLAY WS-PGMID
768800          " 6. TESTING DATE DTEW2G - 2000 09/20000228"
768900     MOVE ZERO TO LS-GREGORIAN
769000     CALL WS-DTEW2G
769100          USING WS-Y2000
769200                WS-W09
769300                LS-GREGORIAN
769400     IF RETURN-CODE > ZERO
769500       DISPLAY WS-PGMID " " WS-DTEW2G
769600            " COBOL RETURN CODE =  " RETURN-CODE
769700     END-IF
769800
769900     DISPLAY WS-PGMID
770000          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W09
770100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
770200
770300     DISPLAY WS-PGMID
770400          " 7. TESTING DATE DTEDOW1 - 20000301/4 WEDNESDAY"
770500     MOVE ZERO TO LS-GREGORIAN
770600     CALL WS-DTEDOW1
770700          USING WS-G20000301
770800                LS-DOW-NBR
770900                LS-DOW-TXT
771000     IF RETURN-CODE > ZERO
771100       DISPLAY WS-PGMID " " WS-DTEDOW1
771200            " COBOL RETURN CODE = " RETURN-CODE
771300     END-IF
771400
771500     DISPLAY WS-PGMID
771600          "    INPUT GREGORIAN: " WS-G20000301
771700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
771800
771900     DISPLAY WS-PGMID
772000          " 8. TESTING DATE DTEDOW2 - 20000301/3 WEDNESDAY"
772100     MOVE ZERO TO LS-GREGORIAN
772200     CALL WS-DTEDOW2
772300          USING WS-G20000301
772400                LS-DOW-NBR
772500                LS-DOW-TXT
772600     IF RETURN-CODE > ZERO
772700       DISPLAY WS-PGMID " " WS-DTEDOW2
772800            " COBOL RETURN CODE = " RETURN-CODE
772900     END-IF
773000
773100     DISPLAY WS-PGMID
773200          "    INPUT GREGORIAN: " WS-G20000301
773300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
773400
773500     DISPLAY " "
773600
773700     DISPLAY WS-PGMID
773800          " 1. TESTING DATE DTEG2J - 20000931/2000275, error"
773900     MOVE ZERO TO LS-JULIAN
774000     CALL WS-DTEG2J
774100          USING WS-G20000931
774200                LS-JULIAN
774300     IF RETURN-CODE > ZERO
774400       DISPLAY WS-PGMID " " WS-DTEG2J
774500            " COBOL RETURN CODE =  " RETURN-CODE
774600     END-IF
774700
774800     DISPLAY WS-PGMID
774900          "    INPUT GREGORIAN: " WS-G20000931
775000          "  OUTPUT JULIAN: " LS-JULIAN
775100
775200     DISPLAY WS-PGMID
775300          " 2. TESTING DATE DTEJ2G - 2000275/20001001"
775400     MOVE ZERO TO LS-GREGORIAN
775500     CALL WS-DTEJ2G
775600          USING WS-J2000275
775700                LS-GREGORIAN
775800     IF RETURN-CODE > ZERO
775900       DISPLAY WS-PGMID " " WS-DTEJ2G
776000            " COBOL RETURN CODE =  " RETURN-CODE
776100     END-IF
776200
776300     DISPLAY WS-PGMID
776400          "    INPUT JULIAN: " WS-J2000275
776500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
776600
776700     DISPLAY WS-PGMID
776800          " 3. TESTING DATE DTEG2B - 20000931/730393, error"
776900     MOVE ZERO TO LS-BDAY
777000     CALL WS-DTEG2B
777100          USING WS-G20000931
777200                LS-BDAY
777300     IF RETURN-CODE > ZERO
777400       DISPLAY WS-PGMID " " WS-DTEG2B
777500            " COBOL RETURN CODE =  " RETURN-CODE
777600     END-IF
777700
777800     DISPLAY WS-PGMID
777900          "    INPUT GREGORIAN: " WS-G20000931
778000          "  OUTPUT BASE: " LS-BDAY
778100
778200     DISPLAY WS-PGMID
778300          " 4. TESTING DATE DTEB2G - 730393/20001001"
778400     MOVE ZERO TO LS-GREGORIAN
778500     CALL WS-DTEB2G
778600          USING WS-B730393
778700                LS-GREGORIAN
778800     IF RETURN-CODE > ZERO
778900       DISPLAY WS-PGMID " " WS-DTEB2G
779000            " COBOL RETURN CODE =  " RETURN-CODE
779100     END-IF
779200
779300     DISPLAY WS-PGMID
779400          "    INPUT BASE: " WS-B730393
779500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
779600
779700     DISPLAY WS-PGMID
779800          " 5. TESTING DATE DTEG2W - 20000931/2000-W39-7, error"
779900     MOVE SPACE TO LS-WEEK
780000     CALL WS-DTEG2W
780100          USING WS-G20000931
780200                LS-WEEK
780300     IF RETURN-CODE > ZERO
780400       DISPLAY WS-PGMID " " WS-DTEG2W
780500            " COBOL RETURN CODE =  " RETURN-CODE
780600     END-IF
780700
780800     DISPLAY WS-PGMID
780900          "    INPUT GREGORIAN: " WS-G20000931
781000          "  OUTPUT WEEK: " LS-WEEK
781100
781200     DISPLAY WS-PGMID
781300          " 6. TESTING DATE DTEW2G - 2000 39/20000925"
781400     MOVE ZERO TO LS-GREGORIAN
781500     CALL WS-DTEW2G
781600          USING WS-Y2000
781700                WS-W39
781800                LS-GREGORIAN
781900     IF RETURN-CODE > ZERO
782000       DISPLAY WS-PGMID " " WS-DTEW2G
782100            " COBOL RETURN CODE =  " RETURN-CODE
782200     END-IF
782300
782400     DISPLAY WS-PGMID
782500          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W39
782600          "  OUTPUT GREGORIAN: " LS-GREGORIAN
782700
782800     DISPLAY WS-PGMID
782900          " 7. TESTING DATE DTEDOW1 - 20000931/1 SUNDAY,  error"
783000     MOVE ZERO TO LS-GREGORIAN
783100     CALL WS-DTEDOW1
783200          USING WS-G20000931
783300                LS-DOW-NBR
783400                LS-DOW-TXT
783500     IF RETURN-CODE > ZERO
783600       DISPLAY WS-PGMID " " WS-DTEDOW1
783700            " COBOL RETURN CODE = " RETURN-CODE
783800     END-IF
783900
784000     DISPLAY WS-PGMID
784100          "    INPUT GREGORIAN: " WS-G20000931
784200          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
784300
784400     DISPLAY WS-PGMID
784500          " 8. TESTING DATE DTEDOW2 - 20000931/7 SUNDAY, error"
784600     MOVE ZERO TO LS-GREGORIAN
784700     CALL WS-DTEDOW2
784800          USING WS-G20000931
784900                LS-DOW-NBR
785000                LS-DOW-TXT
785100     IF RETURN-CODE > ZERO
785200       DISPLAY WS-PGMID " " WS-DTEDOW2
785300            " COBOL RETURN CODE = " RETURN-CODE
785400     END-IF
785500
785600     DISPLAY WS-PGMID
785700          "    INPUT GREGORIAN: " WS-G20000931
785800          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
785900
786000     DISPLAY " "
786100
786200     DISPLAY WS-PGMID
786300          " 1. TESTING DATE DTEG2J - 20001231/2000366"
786400     MOVE ZERO TO LS-JULIAN
786500     CALL WS-DTEG2J
786600          USING WS-G20001231
786700                LS-JULIAN
786800     IF RETURN-CODE > ZERO
786900       DISPLAY WS-PGMID " " WS-DTEG2J
787000            " COBOL RETURN CODE =  " RETURN-CODE
787100     END-IF
787200
787300     DISPLAY WS-PGMID
787400          "    INPUT GREGORIAN: " WS-G20001231
787500          "  OUTPUT JULIAN: " LS-JULIAN
787600
787700     DISPLAY WS-PGMID
787800          " 2. TESTING DATE DTEJ2G - 2000366/20001231"
787900     MOVE ZERO TO LS-GREGORIAN
788000     CALL WS-DTEJ2G
788100          USING WS-J2000366
788200                LS-GREGORIAN
788300     IF RETURN-CODE > ZERO
788400       DISPLAY WS-PGMID " " WS-DTEJ2G
788500            " COBOL RETURN CODE =  " RETURN-CODE
788600     END-IF
788700
788800     DISPLAY WS-PGMID
788900          "    INPUT JULIAN: " WS-J2000366
789000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
789100
789200     DISPLAY WS-PGMID
789300          " 3. TESTING DATE DTEG2B - 20001231/730484"
789400     MOVE ZERO TO LS-BDAY
789500     CALL WS-DTEG2B
789600          USING WS-G20001231
789700                LS-BDAY
789800     IF RETURN-CODE > ZERO
789900       DISPLAY WS-PGMID " " WS-DTEG2B
790000            " COBOL RETURN CODE =  " RETURN-CODE
790100     END-IF
790200
790300     DISPLAY WS-PGMID
790400          "    INPUT GREGORIAN: " WS-G20001231
790500          "  OUTPUT BASE: " LS-BDAY
790600
790700     DISPLAY WS-PGMID
790800          " 4. TESTING DATE DTEB2G - 730484/20001231"
790900     MOVE ZERO TO LS-GREGORIAN
791000     CALL WS-DTEB2G
791100          USING WS-B730484
791200                LS-GREGORIAN
791300     IF RETURN-CODE > ZERO
791400       DISPLAY WS-PGMID " " WS-DTEB2G
791500            " COBOL RETURN CODE =  " RETURN-CODE
791600     END-IF
791700
791800     DISPLAY WS-PGMID
791900          "    INPUT BASE: " WS-B730484
792000          "  OUTPUT GREGORIAN: " LS-GREGORIAN
792100
792200     DISPLAY WS-PGMID
792300          " 5. TESTING DATE DTEG2W - 20001231/2000-W52-7"
792400     MOVE SPACE TO LS-WEEK
792500     CALL WS-DTEG2W
792600          USING WS-G20001231
792700                LS-WEEK
792800     IF RETURN-CODE > ZERO
792900       DISPLAY WS-PGMID " " WS-DTEG2W
793000            " COBOL RETURN CODE =  " RETURN-CODE
793100     END-IF
793200
793300     DISPLAY WS-PGMID
793400          "    INPUT GREGORIAN: " WS-G20001231
793500          "  OUTPUT WEEK: " LS-WEEK
793600
793700     DISPLAY WS-PGMID
793800          " 6. TESTING DATE DTEW2G - 2000 52/20001225"
793900     MOVE ZERO TO LS-GREGORIAN
794000     CALL WS-DTEW2G
794100          USING WS-Y2000
794200                WS-W52
794300                LS-GREGORIAN
794400     IF RETURN-CODE > ZERO
794500       DISPLAY WS-PGMID " " WS-DTEW2G
794600            " COBOL RETURN CODE =  " RETURN-CODE
794700     END-IF
794800
794900     DISPLAY WS-PGMID
795000          "    INPUT YEAR: " WS-Y2000 " WEEK: " WS-W52
795100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
795200
795300     DISPLAY WS-PGMID
795400          " 7. TESTING DATE DTEDOW1 - 20001231/1 SUNDAY"
795500     MOVE ZERO TO LS-GREGORIAN
795600     CALL WS-DTEDOW1
795700          USING WS-G20001231
795800                LS-DOW-NBR
795900                LS-DOW-TXT
796000     IF RETURN-CODE > ZERO
796100       DISPLAY WS-PGMID " " WS-DTEDOW1
796200            " COBOL RETURN CODE = " RETURN-CODE
796300     END-IF
796400
796500     DISPLAY WS-PGMID
796600          "    INPUT GREGORIAN: " WS-G20001231
796700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
796800
796900     DISPLAY WS-PGMID
797000          " 8. TESTING DATE DTEDOW2 - 20001231/7 SUNDAY"
797100     MOVE ZERO TO LS-GREGORIAN
797200     CALL WS-DTEDOW2
797300          USING WS-G20001231
797400                LS-DOW-NBR
797500                LS-DOW-TXT
797600     IF RETURN-CODE > ZERO
797700       DISPLAY WS-PGMID " " WS-DTEDOW2
797800            " COBOL RETURN CODE = " RETURN-CODE
797900     END-IF
798000
798100     DISPLAY WS-PGMID
798200          "    INPUT GREGORIAN: " WS-G20001231
798300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
798400
798500     CONTINUE.
798600 4000-99-END.
798700     EXIT.
798800
798900     CONTINUE.
799000 4100-00-TEST-DTE.
799100*    TEST DTE DATE ROUTINES (2-DIGIT YEAR)
799200     DISPLAY " "
799300     DISPLAY WS-PGMID
799400          " 1. TESTING DATE DTEG2J - 00100228/?"
799500     MOVE ZERO TO LS-JULIAN
799600     CALL WS-DTEG2J
799700          USING WS-G00100228
799800                LS-JULIAN
799900     IF RETURN-CODE > ZERO
800000       DISPLAY WS-PGMID " " WS-DTEG2J
800100            " COBOL RETURN CODE = " RETURN-CODE
800200     END-IF
800300
800400     DISPLAY WS-PGMID
800500          "    INPUT GREGORIAN: " WS-G00100228
800600          "  OUTPUT JULIAN: " LS-JULIAN
800700
800800     DISPLAY WS-PGMID
800900          " 2. TESTING DATE DTEJ2G - 0010059/?"
801000     MOVE ZERO TO LS-GREGORIAN
801100     CALL WS-DTEJ2G
801200          USING WS-J0010059
801300                LS-GREGORIAN
801400     IF RETURN-CODE > ZERO
801500       DISPLAY WS-PGMID " " WS-DTEJ2G
801600            " RETURN CODE = " RETURN-CODE
801700     END-IF
801800
801900     DISPLAY WS-PGMID
802000          "    INPUT JULIAN: " WS-J0010059
802100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
802200
802300     DISPLAY WS-PGMID
802400          " 3. TESTING DATE DTEG2B - 00100228/?"
802500     MOVE ZERO TO LS-BDAY
802600     CALL WS-DTEG2B
802700          USING WS-G00100228
802800                LS-BDAY
802900     IF RETURN-CODE > ZERO
803000       DISPLAY WS-PGMID " " WS-DTEG2B
803100            " COBOL RETURN CODE = " RETURN-CODE
803200     END-IF
803300
803400     DISPLAY WS-PGMID
803500          "    INPUT GREGORIAN: " WS-G00100228
803600          "  OUTPUT BASE: " LS-BDAY
803700
803800     DISPLAY WS-PGMID
803900          " 5. TESTING DATE DTEG2W - 00100228/?"
804000     MOVE SPACE TO LS-WEEK
804100     CALL WS-DTEG2W
804200          USING WS-G00100228
804300                LS-WEEK
804400     IF RETURN-CODE > ZERO
804500       DISPLAY WS-PGMID " " WS-DTEG2W
804600            " COBOL RETURN CODE = " RETURN-CODE
804700     END-IF
804800
804900     DISPLAY WS-PGMID
805000          "    INPUT GREGORIAN: " WS-G00100228
805100          "  OUTPUT WEEK: " LS-WEEK
805200
805300     DISPLAY WS-PGMID
805400          " 6. TESTING DATE DTEW2G - 0010 09/?"
805500     MOVE ZERO TO LS-GREGORIAN
805600     CALL WS-DTEW2G
805700          USING WS-Y0010
805800                WS-W09
805900                LS-GREGORIAN
806000     IF RETURN-CODE > ZERO
806100       DISPLAY WS-PGMID " " WS-DTEW2G
806200            " COBOL RETURN CODE = " RETURN-CODE
806300     END-IF
806400
806500     DISPLAY WS-PGMID
806600          "    INPUT YEAR: " WS-Y0010 " WEEK: " WS-W09
806700          "  OUTPUT GREGORIAN: " LS-GREGORIAN
806800
806900     DISPLAY WS-PGMID
807000          " 7. TESTING DATE DTEDOW1 - 00100228/?"
807100     MOVE ZERO TO LS-GREGORIAN
807200     CALL WS-DTEDOW1
807300          USING WS-G00100228
807400                LS-DOW-NBR
807500                LS-DOW-TXT
807600     IF RETURN-CODE > ZERO
807700       DISPLAY WS-PGMID " " WS-DTEDOW1
807800            " COBOL RETURN CODE = " RETURN-CODE
807900     END-IF
808000
808100     DISPLAY WS-PGMID
808200          "    INPUT GREGORIAN: " WS-G00100228
808300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
808400
808500     DISPLAY WS-PGMID
808600          " 8. TESTING DATE DTEDOW2 - 00100228/?"
808700     MOVE ZERO TO LS-GREGORIAN
808800     CALL WS-DTEDOW2
808900          USING WS-G00100228
809000                LS-DOW-NBR
809100                LS-DOW-TXT
809200
809300     DISPLAY WS-PGMID
809400          "    INPUT GREGORIAN: " WS-G00100228
809500          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
809600
809700     DISPLAY " "
809800
809900     DISPLAY WS-PGMID
810000          " 1. TESTING DATE DTEG2J - 00300228/?"
810100     MOVE ZERO TO LS-JULIAN
810200     CALL WS-DTEG2J
810300          USING WS-G00300228
810400                LS-JULIAN
810500     IF RETURN-CODE > ZERO
810600       DISPLAY WS-PGMID " " WS-DTEG2J
810700            " COBOL RETURN CODE = " RETURN-CODE
810800     END-IF
810900
811000     DISPLAY WS-PGMID
811100          "    INPUT GREGORIAN: " WS-G00300228
811200          "  OUTPUT JULIAN: " LS-JULIAN
811300
811400     DISPLAY WS-PGMID
811500          " 2. TESTING DATE DTEJ2G - 0030059/?"
811600     MOVE ZERO TO LS-GREGORIAN
811700     CALL WS-DTEJ2G
811800          USING WS-J0030059
811900                LS-GREGORIAN
812000     IF RETURN-CODE > ZERO
812100       DISPLAY WS-PGMID " " WS-DTEJ2G
812200            " RETURN CODE = " RETURN-CODE
812300     END-IF
812400
812500     DISPLAY WS-PGMID
812600          "    INPUT JULIAN: " WS-J0030059
812700          "  OUTPUT GREGORIAN: " LS-GREGORIAN
812800
812900     DISPLAY WS-PGMID
813000          " 3. TESTING DATE DTEG2B - 00300228/?"
813100     MOVE ZERO TO LS-BDAY
813200     CALL WS-DTEG2B
813300          USING WS-G00300228
813400                LS-BDAY
813500     IF RETURN-CODE > ZERO
813600       DISPLAY WS-PGMID " " WS-DTEG2B
813700            " COBOL RETURN CODE = " RETURN-CODE
813800     END-IF
813900
814000     DISPLAY WS-PGMID
814100          "    INPUT GREGORIAN: " WS-G00300228
814200          "  OUTPUT BASE: " LS-BDAY
814300
814400     DISPLAY WS-PGMID
814500          " 5. TESTING DATE DTEG2W - 00300228/?"
814600     MOVE SPACE TO LS-WEEK
814700     CALL WS-DTEG2W
814800          USING WS-G00300228
814900                LS-WEEK
815000     IF RETURN-CODE > ZERO
815100       DISPLAY WS-PGMID " " WS-DTEG2W
815200            " COBOL RETURN CODE = " RETURN-CODE
815300     END-IF
815400
815500     DISPLAY WS-PGMID
815600          "    INPUT GREGORIAN: " WS-G00300228
815700          "  OUTPUT WEEK: " LS-WEEK
815800
815900     DISPLAY WS-PGMID
816000          " 6. TESTING DATE DTEW2G - 0030 09/?"
816100     MOVE ZERO TO LS-GREGORIAN
816200     CALL WS-DTEW2G
816300          USING WS-Y0030
816400                WS-W09
816500                LS-GREGORIAN
816600     IF RETURN-CODE > ZERO
816700       DISPLAY WS-PGMID " " WS-DTEW2G
816800            " COBOL RETURN CODE = " RETURN-CODE
816900     END-IF
817000
817100     DISPLAY WS-PGMID
817200          "    INPUT YEAR: " WS-Y0030 " WEEK: " WS-W09
817300          "  OUTPUT GREGORIAN: " LS-GREGORIAN
817400
817500     DISPLAY WS-PGMID
817600          " 7. TESTING DATE DTEDOW1 - 00300228/?"
817700     MOVE ZERO TO LS-GREGORIAN
817800     CALL WS-DTEDOW1
817900          USING WS-G00300228
818000                LS-DOW-NBR
818100                LS-DOW-TXT
818200     IF RETURN-CODE > ZERO
818300       DISPLAY WS-PGMID " " WS-DTEDOW1
818400            " COBOL RETURN CODE = " RETURN-CODE
818500     END-IF
818600
818700     DISPLAY WS-PGMID
818800          "    INPUT GREGORIAN: " WS-G00300228
818900          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
819000
819100     DISPLAY WS-PGMID
819200          " 8. TESTING DATE DTEDOW2 - 00300228/?"
819300     MOVE ZERO TO LS-GREGORIAN
819400     CALL WS-DTEDOW2
819500          USING WS-G00300228
819600                LS-DOW-NBR
819700                LS-DOW-TXT
819800
819900     DISPLAY WS-PGMID
820000          "    INPUT GREGORIAN: " WS-G00300228
820100          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
820200
820300     DISPLAY " "
820400
820500     DISPLAY WS-PGMID
820600          " 1. TESTING DATE DTEG2J - 00500228/?"
820700     MOVE ZERO TO LS-JULIAN
820800     CALL WS-DTEG2J
820900          USING WS-G00500228
821000                LS-JULIAN
821100     IF RETURN-CODE > ZERO
821200       DISPLAY WS-PGMID " " WS-DTEG2J
821300            " COBOL RETURN CODE = " RETURN-CODE
821400     END-IF
821500
821600     DISPLAY WS-PGMID
821700          "    INPUT GREGORIAN: " WS-G00500228
821800          "  OUTPUT JULIAN: " LS-JULIAN
821900
822000     DISPLAY WS-PGMID
822100          " 2. TESTING DATE DTEJ2G - 0050059/?"
822200     MOVE ZERO TO LS-GREGORIAN
822300     CALL WS-DTEJ2G
822400          USING WS-J0050059
822500                LS-GREGORIAN
822600     IF RETURN-CODE > ZERO
822700       DISPLAY WS-PGMID " " WS-DTEJ2G
822800            " RETURN CODE = " RETURN-CODE
822900     END-IF
823000
823100     DISPLAY WS-PGMID
823200          "    INPUT JULIAN: " WS-J0050059
823300          "  OUTPUT GREGORIAN: " LS-GREGORIAN
823400
823500     DISPLAY WS-PGMID
823600          " 3. TESTING DATE DTEG2B - 00500228/?"
823700     MOVE ZERO TO LS-BDAY
823800     CALL WS-DTEG2B
823900          USING WS-G00500228
824000                LS-BDAY
824100     IF RETURN-CODE > ZERO
824200       DISPLAY WS-PGMID " " WS-DTEG2B
824300            " COBOL RETURN CODE = " RETURN-CODE
824400     END-IF
824500
824600     DISPLAY WS-PGMID
824700          "    INPUT GREGORIAN: " WS-G00500228
824800          "  OUTPUT BASE: " LS-BDAY
824900
825000     DISPLAY WS-PGMID
825100          " 5. TESTING DATE DTEG2W - 00500228/?"
825200     MOVE SPACE TO LS-WEEK
825300     CALL WS-DTEG2W
825400          USING WS-G00500228
825500                LS-WEEK
825600     IF RETURN-CODE > ZERO
825700       DISPLAY WS-PGMID " " WS-DTEG2W
825800            " COBOL RETURN CODE = " RETURN-CODE
825900     END-IF
826000
826100     DISPLAY WS-PGMID
826200          "    INPUT GREGORIAN: " WS-G00500228
826300          "  OUTPUT WEEK: " LS-WEEK
826400
826500     DISPLAY WS-PGMID
826600          " 6. TESTING DATE DTEW2G - 0050 09/?"
826700     MOVE ZERO TO LS-GREGORIAN
826800     CALL WS-DTEW2G
826900          USING WS-Y0050
827000                WS-W09
827100                LS-GREGORIAN
827200     IF RETURN-CODE > ZERO
827300       DISPLAY WS-PGMID " " WS-DTEW2G
827400            " COBOL RETURN CODE = " RETURN-CODE
827500     END-IF
827600
827700     DISPLAY WS-PGMID
827800          "    INPUT YEAR: " WS-Y0050 " WEEK: " WS-W09
827900          "  OUTPUT GREGORIAN: " LS-GREGORIAN
828000
828100     DISPLAY WS-PGMID
828200          " 7. TESTING DATE DTEDOW1 - 00500228/?"
828300     MOVE ZERO TO LS-GREGORIAN
828400     CALL WS-DTEDOW1
828500          USING WS-G00500228
828600                LS-DOW-NBR
828700                LS-DOW-TXT
828800     IF RETURN-CODE > ZERO
828900       DISPLAY WS-PGMID " " WS-DTEDOW1
829000            " COBOL RETURN CODE = " RETURN-CODE
829100     END-IF
829200
829300     DISPLAY WS-PGMID
829400          "    INPUT GREGORIAN: " WS-G00500228
829500          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
829600
829700     DISPLAY WS-PGMID
829800          " 8. TESTING DATE DTEDOW2 - 00500228/?"
829900     MOVE ZERO TO LS-GREGORIAN
830000     CALL WS-DTEDOW2
830100          USING WS-G00500228
830200                LS-DOW-NBR
830300                LS-DOW-TXT
830400
830500     DISPLAY WS-PGMID
830600          "    INPUT GREGORIAN: " WS-G00500228
830700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
830800
830900     DISPLAY " "
831000
831100     DISPLAY WS-PGMID
831200          " 1. TESTING DATE DTEG2J - 00700228/?"
831300     MOVE ZERO TO LS-JULIAN
831400     CALL WS-DTEG2J
831500          USING WS-G00700228
831600                LS-JULIAN
831700     IF RETURN-CODE > ZERO
831800       DISPLAY WS-PGMID " " WS-DTEG2J
831900            " COBOL RETURN CODE = " RETURN-CODE
832000     END-IF
832100
832200     DISPLAY WS-PGMID
832300          "    INPUT GREGORIAN: " WS-G00700228
832400          "  OUTPUT JULIAN: " LS-JULIAN
832500
832600     DISPLAY WS-PGMID
832700          " 2. TESTING DATE DTEJ2G - 0070059/?"
832800     MOVE ZERO TO LS-GREGORIAN
832900     CALL WS-DTEJ2G
833000          USING WS-J0070059
833100                LS-GREGORIAN
833200     IF RETURN-CODE > ZERO
833300       DISPLAY WS-PGMID " " WS-DTEJ2G
833400            " RETURN CODE = " RETURN-CODE
833500     END-IF
833600
833700     DISPLAY WS-PGMID
833800          "    INPUT JULIAN: " WS-J0070059
833900          "  OUTPUT GREGORIAN: " LS-GREGORIAN
834000
834100     DISPLAY WS-PGMID
834200          " 3. TESTING DATE DTEG2B - 00700228/?"
834300     MOVE ZERO TO LS-BDAY
834400     CALL WS-DTEG2B
834500          USING WS-G00700228
834600                LS-BDAY
834700     IF RETURN-CODE > ZERO
834800       DISPLAY WS-PGMID " " WS-DTEG2B
834900            " COBOL RETURN CODE = " RETURN-CODE
835000     END-IF
835100
835200     DISPLAY WS-PGMID
835300          "    INPUT GREGORIAN: " WS-G00700228
835400          "  OUTPUT BASE: " LS-BDAY
835500
835600     DISPLAY WS-PGMID
835700          " 5. TESTING DATE DTEG2W - 00700228/?"
835800     MOVE SPACE TO LS-WEEK
835900     CALL WS-DTEG2W
836000          USING WS-G00700228
836100                LS-WEEK
836200     IF RETURN-CODE > ZERO
836300       DISPLAY WS-PGMID " " WS-DTEG2W
836400            " COBOL RETURN CODE = " RETURN-CODE
836500     END-IF
836600
836700     DISPLAY WS-PGMID
836800          "    INPUT GREGORIAN: " WS-G00700228
836900          "  OUTPUT WEEK: " LS-WEEK
837000
837100     DISPLAY WS-PGMID
837200          " 6. TESTING DATE DTEW2G - 0070 09/?"
837300     MOVE ZERO TO LS-GREGORIAN
837400     CALL WS-DTEW2G
837500          USING WS-Y0070
837600                WS-W09
837700                LS-GREGORIAN
837800     IF RETURN-CODE > ZERO
837900       DISPLAY WS-PGMID " " WS-DTEW2G
838000            " COBOL RETURN CODE = " RETURN-CODE
838100     END-IF
838200
838300     DISPLAY WS-PGMID
838400          "    INPUT YEAR: " WS-Y0070 " WEEK: " WS-W09
838500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
838600
838700     DISPLAY WS-PGMID
838800          " 7. TESTING DATE DTEDOW1 - 00700228/?"
838900     MOVE ZERO TO LS-GREGORIAN
839000     CALL WS-DTEDOW1
839100          USING WS-G00700228
839200                LS-DOW-NBR
839300                LS-DOW-TXT
839400     IF RETURN-CODE > ZERO
839500       DISPLAY WS-PGMID " " WS-DTEDOW1
839600            " COBOL RETURN CODE = " RETURN-CODE
839700     END-IF
839800
839900     DISPLAY WS-PGMID
840000          "    INPUT GREGORIAN: " WS-G00700228
840100          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
840200
840300     DISPLAY WS-PGMID
840400          " 8. TESTING DATE DTEDOW2 - 00700228/?"
840500     MOVE ZERO TO LS-GREGORIAN
840600     CALL WS-DTEDOW2
840700          USING WS-G00700228
840800                LS-DOW-NBR
840900                LS-DOW-TXT
841000
841100     DISPLAY WS-PGMID
841200          "    INPUT GREGORIAN: " WS-G00700228
841300          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
841400
841500     DISPLAY " "
841600
841700     DISPLAY WS-PGMID
841800          " 1. TESTING DATE DTEG2J - 00900228/?"
841900     MOVE ZERO TO LS-JULIAN
842000     CALL WS-DTEG2J
842100          USING WS-G00900228
842200                LS-JULIAN
842300     IF RETURN-CODE > ZERO
842400       DISPLAY WS-PGMID " " WS-DTEG2J
842500            " COBOL RETURN CODE = " RETURN-CODE
842600     END-IF
842700
842800     DISPLAY WS-PGMID
842900          "    INPUT GREGORIAN: " WS-G00900228
843000          "  OUTPUT JULIAN: " LS-JULIAN
843100
843200     DISPLAY WS-PGMID
843300          " 2. TESTING DATE DTEJ2G - 0090059/?"
843400     MOVE ZERO TO LS-GREGORIAN
843500     CALL WS-DTEJ2G
843600          USING WS-J0090059
843700                LS-GREGORIAN
843800     IF RETURN-CODE > ZERO
843900       DISPLAY WS-PGMID " " WS-DTEJ2G
844000            " RETURN CODE = " RETURN-CODE
844100     END-IF
844200
844300     DISPLAY WS-PGMID
844400          "    INPUT JULIAN: " WS-J0090059
844500          "  OUTPUT GREGORIAN: " LS-GREGORIAN
844600
844700     DISPLAY WS-PGMID
844800          " 3. TESTING DATE DTEG2B - 00900228/?"
844900     MOVE ZERO TO LS-BDAY
845000     CALL WS-DTEG2B
845100          USING WS-G00900228
845200                LS-BDAY
845300     IF RETURN-CODE > ZERO
845400       DISPLAY WS-PGMID " " WS-DTEG2B
845500            " COBOL RETURN CODE = " RETURN-CODE
845600     END-IF
845700
845800     DISPLAY WS-PGMID
845900          "    INPUT GREGORIAN: " WS-G00900228
846000          "  OUTPUT BASE: " LS-BDAY
846100
846200     DISPLAY WS-PGMID
846300          " 5. TESTING DATE DTEG2W - 00900228/?"
846400     MOVE SPACE TO LS-WEEK
846500     CALL WS-DTEG2W
846600          USING WS-G00900228
846700                LS-WEEK
846800     IF RETURN-CODE > ZERO
846900       DISPLAY WS-PGMID " " WS-DTEG2W
847000            " COBOL RETURN CODE = " RETURN-CODE
847100     END-IF
847200
847300     DISPLAY WS-PGMID
847400          "    INPUT GREGORIAN: " WS-G00900228
847500          "  OUTPUT WEEK: " LS-WEEK
847600
847700     DISPLAY WS-PGMID
847800          " 6. TESTING DATE DTEW2G - 0090 09/?"
847900     MOVE ZERO TO LS-GREGORIAN
848000     CALL WS-DTEW2G
848100          USING WS-Y0090
848200                WS-W09
848300                LS-GREGORIAN
848400     IF RETURN-CODE > ZERO
848500       DISPLAY WS-PGMID " " WS-DTEW2G
848600            " COBOL RETURN CODE = " RETURN-CODE
848700     END-IF
848800
848900     DISPLAY WS-PGMID
849000          "    INPUT YEAR: " WS-Y0090 " WEEK: " WS-W09
849100          "  OUTPUT GREGORIAN: " LS-GREGORIAN
849200
849300     DISPLAY WS-PGMID
849400          " 7. TESTING DATE DTEDOW1 - 00900228/?"
849500     MOVE ZERO TO LS-GREGORIAN
849600     CALL WS-DTEDOW1
849700          USING WS-G00900228
849800                LS-DOW-NBR
849900                LS-DOW-TXT
850000     IF RETURN-CODE > ZERO
850100       DISPLAY WS-PGMID " " WS-DTEDOW1
850200            " COBOL RETURN CODE = " RETURN-CODE
850300     END-IF
850400
850500     DISPLAY WS-PGMID
850600          "    INPUT GREGORIAN: " WS-G00900228
850700          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
850800
850900     DISPLAY WS-PGMID
851000          " 8. TESTING DATE DTEDOW2 - 00900228/?"
851100     MOVE ZERO TO LS-GREGORIAN
851200     CALL WS-DTEDOW2
851300          USING WS-G00900228
851400                LS-DOW-NBR
851500                LS-DOW-TXT
851600
851700     DISPLAY WS-PGMID
851800          "    INPUT GREGORIAN: " WS-G00900228
851900          "  OUTPUT DOW / TEXT: " LS-DOW-NBR " " LS-DOW-TXT
852000
852100     CONTINUE.
852200 4100-99-END.
852300     EXIT.
852400
852500     CONTINUE.
852600 8000-00-DUMPHEX.
852700
852800     DISPLAY " "
852900     DISPLAY WS-PGMID
853000          " SOME STORAGE = "
853100          WS-Y2020
853200          WS-W01
853300          WS-W08
853400          WS-W09
853500          WS-W20
853600          WS-W39
853700          WS-W41
853800          WS-W52
853900          WS-W53
854000
854100     MOVE +20 TO AS5DMPRB-DATA-LEN
854200     MOVE "SOME OF WS" TO AS5DMPRB-TITLE
854300     MOVE "ASUMDHEX" TO LS-ASMODULE
854400     CALL LS-ASMODULE
854500          USING ASCA-COMMAREA
854600                AS5DMPRB-REQUEST-BLOCK
854700                WS-Y2020
854800                OMITTED
854900     DISPLAY " "
855000
855100     CONTINUE.
855200 8000-99-END.
855300     EXIT.
./ ADD NAME=ASTSVC2B 0135-19158-21272-1413-01227-00992-00000-APLKS   11
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASTSVC2B.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600*  SOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.
000700*--------------------------------------------------------------*
000800*               ** PROGRAM DESCRIPTION **                      *
000900*                                                              *
001000* ASTSVC1B test C/C++ library services                         *
001100*    NAME: ASTSVC2B                                            *
001200*    APPL: Architecture Services Utility                       *
001300*    DESC: Test program to access C/C++ library services       *
001400* PURPOSE: show how to CALL C/C++ functions in COBOL           *
001500*                                                              *
001600* Called Routine(s):                                           *
001700*    ASU3I01B      init AS control blocks                      *
001800*    ASU3T03B      CEEMOUT open DCB/ACB via DEB chain          *
001900*    ASUMDHEX      CEEMOUT hex in dump format                  *
002000*    ASUMVHEX      CEEMOUT hex in vertical format              *
002100*    CEESISET      set bit on|off                              *
002200*    CEESISHF      shift bits left or right                    *
002300*    CEESITST      test bit settings                           *
002400*    CUSERID()     retrieve RACF userid                        *
002500*    CTIME()       return time as a char string 26             *
002600*    DIFFTIME()    return difference between two times         *
002700*    FCLOSE()      close MVS file                              *
002800*    FEOF()        return EOF indicator                        *
002900*    FERROR()      return I/O return code                      *
003000*    FLDATA()      return file information                     *
003100*    FOPEN()       open MVS file                               *
003200*    FREAD()       read MVS file                               *
003300*    REGCOMP()     compile regular expression                  *
003400*    REGERR()      output regular expression error messages    *
003500*    REGEXEC()     exec compiled regular expression            *
003600*    REGFREE()     free storage acquired by regular expression *
003700*    STRCPY()      string copy                                 *
003800*    STRLEN()      string length                               *
003900*    SPRINTF()     return a formated string to print           *
004000*    TIME()        retrieve time in seconds from 19700101      *
004100*                                                              *
004200*--------------------------------------------------------------*
004300     SKIP2
004400***************************************************************
004500*  BCT CUSTOM CODE REVISION LIST
004600*     DATE     PROGRAMMER  DESCRIPTION
004700*--------------------------------------------------------------
004800*  yyyy/mm/dd   xxxxxxxx
004900*  2019/08/29   lks        new
005000*  2020/06/22   lks        chg fix return code processing
005100*  2020/09/01   lks  01.02 add new test cases
005200***************************************************************
005300     SKIP2
005400 DATA DIVISION.
005500     SKIP2
005600 WORKING-STORAGE SECTION.
005700 01  FILLER.
005800     03  WS-EYE-CATCHER PIC X(25)
005900              VALUE "BUZZARD CREEK TECH, INC. ".
006000     03  WS-PGMID       PIC X(08) VALUE "ASTSVC2B".
006100     03  WS-ASU3I01B    PIC X(08) VALUE "ASU3I01B".
006200     03  WS-ASU3T03B    PIC X(08) VALUE "ASU3T03B".
006300     03  WS-ASUMDHEX    PIC X(08) VALUE "ASUMDHEX".
006400     03  WS-ASUMVHEX    PIC X(08) VALUE "ASUMVHEX".
006500
006600 01  WS-CSTRINGS.
006700     03  WS-DD-SYSIN    PIC X(11) VALUE Z"dd:SYSIN".
006800     03  WS-DD-SEQ1     PIC X(11) VALUE Z"dd:SEQ1".
006900     03  WS-DD-DIR1     PIC X(11) VALUE Z"dd:PDS1".
007000     03  WS-DD-PDS1     PIC X(11) VALUE Z"dd:PDS1".
007100     03  WS-DD-VSAM1    PIC X(11) VALUE Z"dd:VSAM1".
007200     03  WS-MODE-RD     PIC X(21) VALUE Z"rb,samethread,noseek".
007300     03  WS-MODE-WR     PIC X(14) VALUE Z"wb,samethread".
007400     03  WS-MODE-EXT    PIC X(21) VALUE Z"ab,samethread,noseek".
007500     03  WS-MODE-RDWR   PIC X(15) VALUE Z"rb+,samethread".
007600     03  WS-MODE-WRRD   PIC X(15) VALUE Z"wb+,samethread".
007700     03  WS-SPACE       PIC X(02) VALUE Z" ".
007800     03  WS-FRMT-1      PIC X(03) VALUE Z"%s".
007900     03  WS-FRMT-2      PIC X(03) VALUE Z"%d".
008000     03  WS-FRMT-3      PIC X(07) VALUE Z"%s%s%d".
008100     03  WS-GREP-INPUT1 PIC X(70) VALUE Z"Now is the time for all
008200-    "good men to come to the aid of their country.".
008300     03  WS-GREP-INPUT2 PIC X(46) VALUE Z"The quick brown fox jump
008400-    "ed over the lazy dog.".
008500     03  WS-GREP-INPUT3 PIC X(22) VALUE Z"GOOD good GOODE goode".
008600     03  WS-MATCH-BROWN PIC X(12) VALUE Z".*(brown).*".
008700**   03  WS-MATCH-BROWN PIC X(12) VALUE Z".*brown.*".
008800
008900***  COPY CEEIGZLC.
009000
009100     COPY AS5FDBK.
009200
009300     COPY AS5RECA.
009400     SKIP2
009500 LOCAL-STORAGE SECTION.
009600 01  LS-POINTERS.
009700     03  LS-PTR-EYE     PIC X(8) VALUE 'POINTERS'.
009800     03  LS-ASCA-PTR         POINTER.
009900     03  LS-VAR-PTR          POINTER.
010000     03  LS-FWORD-0 REDEFINES LS-VAR-PTR PIC 9(9) COMP-5.
010100     03  LS-XS-VAR-PTR       POINTER.
010200     03  LS-SYSIN-FPTR       POINTER.
010300     03  LS-SEQ1-FPTR        POINTER.
010400     03  LS-DIR1-FPTR        POINTER.
010500     03  LS-PDS1-FPTR        POINTER.
010600     03  LS-VSAM1-FPTR       POINTER.
010700     03  LS-FILE-FPTR        POINTER.
010800     03  LS-FILE-KPTR        POINTER.
010900     03  LS-FLDATA-PTR       POINTER.
011000     03  LS-INPBUF-PTR       POINTER.
011100     03  LS-DIRNTRY-PTR      POINTER.
011200     03  LS-ADDR1 REDEFINES LS-DIRNTRY-PTR PIC 9(9) COMP-5.
011300     03  LS-DIREND-PTR       POINTER.
011400     03  LS-ADDR2 REDEFINES LS-DIREND-PTR  PIC 9(9) COMP-5.
011500
011600 01  LS-BINARY.
011700     03  LS-BIN-EYE     PIC X(8) VALUE 'BINARY>>'.
011800     03  LS-FP-1        COMP-2.
011900     03  LS-RTNCD       PIC S9(9) BINARY.
012000     03  LS-LEMSGDEST   PIC S9(9) BINARY.
012100     03  LS-BIT-SHIFT   PIC S9(9) BINARY.
012200***  03  LS-FILE-POS    PIC S9(9) BINARY.
012300     03  LS-FILE-OPT    PIC S9(9) BINARY.
012400       88  RBA_EQ           VALUE ZERO.
012500       88  KEY-FIRST        VALUE 1.
012600       88  KEY-LAST         VALUE 2.
012700       88  KEY-EQ           VALUE 3.
012800       88  KEY-EQ-BWD       VALUE 4.
012900       88  KEY-GE           VALUE 5.
013000       88  RBA-EQ-BWD       VALUE 6.
013100     03  LS-FILE-KEYLEN PIC S9(9) BINARY.
013200     03  LS-RECORD-CNT  PIC S9(9) BINARY.
013300     03  LS-REC-SIZE    PIC S9(9) BINARY.
013400     03  LS-MAX-LRECL   PIC S9(9) BINARY.
013500     03  LS-DATA-PASSED PIC S9(9) BINARY.
013600     03  LS-STRING-LEN  PIC S9(9) BINARY.
013700     03  LS-FWORD-1     PIC  9(9) COMP-5.
013800     03  LS-FWORD-2     PIC  9(9) COMP-5.
013900     03  LS-FWORD-3     PIC  9(9) COMP-5.
014000     03  FILLER REDEFINES LS-FWORD-3.
014100         05  FILLER          PIC  X(3).
014200         05  LS-FWORD-3-4    PIC  X(1).
014300     03  FILLER REDEFINES LS-FWORD-3.
014400         05  FILLER          PIC  X(2).
014500         05  LS-FWORD-3-3    PIC  X(2).
014600     03  FILLER REDEFINES LS-FWORD-3.
014700         05  FILLER          PIC  X(1).
014800         05  LS-PD-3         PIC  9(5) COMP-3.
014900     03  FILLER REDEFINES LS-FWORD-3.
015000         05  FILLER          PIC  X(2).
015100         05  LS-HW-3         PIC  9(4) COMP-5.
015200     03  LS-POS         PIC  9(4) BINARY.
015300     03  LS-I           PIC S9(4) BINARY.
015400
015500 01  LS-CSTRINGS.
015600     03  LS-FILE-DD     PIC X(50).
015700     03  LS-FILE-MODE   PIC X(80).
015800     03  LS-STRING      PIC X(256).
015900
016000 01  LS-STRINGS.
016100     03  LS-FLAG-EOF    PIC X(01).
016200     03  FILLER         PIC X(07).
016300     03  LS-INP-EYE     PIC X(08) VALUE 'INPUT>>>'.
016400     03  LS-INPUT-BUF   PIC X(200).
016500     03  LS-DIR-EYE     PIC X(08) VALUE 'PDSDIR>>'.
016600     03  LS-PDSDIR-BUF  PIC X(264).
016700     03  LS-STUFF.
016800         05  LS-STUFF-EYE    PIC X(8) VALUE 'STUFF>>>'.
016900         05  LS-FILENAME     PIC X(80).
017000         05  LS-FILEINFO     PIC X(64).
017100         05  LS-MTAG         PIC X(16).
017200     03  LS-MORE-STUFF.
017300         05  LS-DIR1-EYE     PIC X(8) VALUE 'DIR>>>>>'.
017400         05  LS-MBR-ALIAS    PIC X(5).
017500         05  LS-UDATA-LEN    PIC 9(2).
017600         05  LS-SMBR-VER     PIC 9(3).
017700         05  LS-SMBR-REL     PIC 9(3).
017800         05  LS-SMBR-CRDTE   PIC 9(7).
017900         05  LS-SMBR-LCDTE   PIC 9(7).
018000         05  LS-SMBR-LCTME   PIC 9(4).
018100         05  LS-SMBR-EDTME   PIC 99B99.
018200         05  LS-SMBR-SIZE    PIC 9(5).
018300         05  LS-SMBR-CRSZ    PIC 9(5).
018400         05  LS-SMBR-MODROW  PIC 9(5).
018500         05  LS-SMBR-USERID  PIC X(8).
018600
018700***  COPY AS5CTOK.
018800
018900     COPY AS5DMPRB.
019000     EJECT
019100 LINKAGE SECTION.
019200     COPY AS5CA.
019300     SKIP1
019400 01  XS-STRING          PIC X(256).
019500     SKIP1
019600     COPY AS5PODIR.
019700     COPY AS5CFDTA.
019800     EJECT
019900 PROCEDURE DIVISION USING
020000     ASCA-COMMAREA
020100     XS-STRING
020200     AS5PODIR-DATA-AREA
020300     AS5CFDTA-DATA-AREA.
020400     SKIP2
020500 DECLARATIVES.
020600 0010-00-DEBUG SECTION.
020700     USE FOR DEBUGGING ON ALL PROCEDURES.
020800     SKIP1
020900 0010-10-DEBUG.
021000     DISPLAY DEBUG-ITEM
021100     SKIP1
021200     CONTINUE.
021300*0020-00-DEBUG SECTION.
021400**   USE FOR DEBUGGING ON PARAGRAPH_NAME
021500     SKIP1
021600*0020-10-DEBUG.
021700*    STATEMENTS ...
021800     SKIP1
021900     CONTINUE.
022000*0030-00-DEBUG SECTION.
022100**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
022200     SKIP1
022300*0030-10-DEBUG.
022400*    STATEMENTS ...
022500     SKIP2
022600     CONTINUE.
022700 END DECLARATIVES.
022800     SKIP2
022900     CONTINUE.
023000 0090-00-INITIAL.
023100     DISPLAY WS-PGMID
023200          " Testing C/C++ library services"
023300     SKIP2
023400*    * ------------------------------------------------------- *
023500*    * CALL ASU3I01B TO CREATE AND POPULATE THE ASCA
023600*    * ------------------------------------------------------- *
023700
023800     SET LS-ASCA-PTR TO NULL
023900     CALL WS-ASU3I01B
024000          USING LS-ASCA-PTR
024100**              AS5FDBK-COND-AREA
024200                OMITTED
024300
024400     IF LS-ASCA-PTR = NULL
024500       DISPLAY WS-PGMID
024600            " "
024700            WS-ASU3I01B
024800            " failed to create the ASCA"
024900       GOBACK
025000     END-IF
025100
025200     SET ADDRESS OF ASCA-COMMAREA TO LS-ASCA-PTR
025300     DISPLAY " "
025400
025500*    DUMP AS5CA COMMUNICATION AREA
025600     MOVE LENGTH OF ASCA-COMMAREA TO AS5DMPRB-DATA-LEN
025700     MOVE +1 TO AS5DMPRB-NUMBER
025800     MOVE "ASCA COMMAREA" TO AS5DMPRB-TITLE
025900     CALL WS-ASUMDHEX
026000          USING ASCA-COMMAREA
026100                AS5DMPRB-REQUEST-BLOCK
026200                ASCA-COMMAREA
026300**              AS5FDBK-COND-AREA
026400                OMITTED
026500
026600     DISPLAY " "
026700
026800     CONTINUE.
026900 0100-00-MAINLINE.
027000     INITIALIZE LS-BINARY
027100                LS-STRINGS
027200     MOVE +2 TO LS-LEMSGDEST
027300
027400     MOVE "POINTERS" TO LS-PTR-EYE
027500     MOVE "BINARY>>" TO LS-BIN-EYE
027600     MOVE "INPUT>>>" TO LS-INP-EYE
027700     MOVE "PDSDIR>>" TO LS-DIR-EYE
027800     MOVE "STUFF>>>" TO LS-STUFF-EYE
027900     MOVE "DIR>>>>>" TO LS-DIR1-EYE
028000
028100     PERFORM 1000-00-MISC THRU 1000-99-END
028200     PERFORM 2000-00-IO THRU 2000-99-END
028300     PERFORM 3000-00-IOFORMAT THRU 3000-99-END
028400     PERFORM 4000-00-REFUN THRU 4000-99-END
028500
028600     MOVE ZERO TO RETURN-CODE
028700
028800     DISPLAY WS-PGMID
028900          ' STOP RUN/GOBACK/EXIT'
029000     STOP RUN
029100
029200     CONTINUE.
029300 1000-00-MISC.
029400*    MISC FUNCTIONS
029500
029600*    Return number of seconds from 1970101 00:00:00
029700*    get ready for CALL to difftime()
029800     MOVE ZERO TO LS-FWORD-2
029900     CALL 'TIME'
030000          USING BY VALUE ADDRESS OF LS-FWORD-2
030100
030200*    Return the RACF Userid
030300     DISPLAY WS-PGMID
030400          " Testing C/C++ function CUSERID"
030500
030600     MOVE SPACE TO LS-STRING
030700     CALL 'CUSERID'
030800          USING LS-STRING
030900          RETURNING LS-VAR-PTR
031000     IF LS-VAR-PTR = NULL
031100       DISPLAY WS-PGMID
031200            "   CUSERID failed"
031300     ELSE
031400       DISPLAY WS-PGMID
031500            "   CUSERID RACF USERID = " LS-STRING (1:8)
031600     END-IF
031700
031800     MOVE SPACE TO LS-STRING
031900     CALL 'CUSERID'
032000          USING BY VALUE ADDRESS OF LS-STRING
032100          RETURNING LS-VAR-PTR
032200     IF LS-VAR-PTR = NULL
032300       DISPLAY WS-PGMID
032400            "   CUSERID failed"
032500     ELSE
032600       DISPLAY WS-PGMID
032700            "   CUSERID RACF USERID = " LS-STRING (1:8)
032800     END-IF
032900
033000     MOVE SPACE TO LS-STRING
033100     CALL 'CUSERID'
033200          USING BY VALUE ADDRESS OF LS-STRING
033300     DISPLAY WS-PGMID
033400          "   CUSERID RACF USERID = " LS-STRING (1:8)
033500
033600     DISPLAY " "
033700
033800*    Return number of seconds from 1970101 00:00:00
033900     DISPLAY WS-PGMID
034000          " Testing C/C++ function TIME"
034100
034200     MOVE ZERO TO LS-FWORD-1
034300     CALL 'TIME'
034400          USING LS-FWORD-1
034500          RETURNING LS-VAR-PTR
034600     IF LS-VAR-PTR = NULL
034700       DISPLAY WS-PGMID
034800            "   TIME failed"
034900     ELSE
035000       DISPLAY WS-PGMID
035100            "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
035200     END-IF
035300
035400     MOVE ZERO TO LS-FWORD-1
035500     CALL 'TIME'
035600          USING BY VALUE ADDRESS OF LS-FWORD-1
035700     DISPLAY WS-PGMID
035800          "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
035900
036000     MOVE ZERO TO LS-FWORD-1
036100     CALL 'TIME'
036200          USING BY VALUE ADDRESS OF LS-FWORD-1
036300          RETURNING LS-VAR-PTR
036400     IF LS-VAR-PTR = NULL
036500       DISPLAY WS-PGMID
036600            "   TIME failed"
036700     ELSE
036800       DISPLAY WS-PGMID
036900            "   TIME nbr of seconds from 19700101 = " LS-FWORD-1
037000     END-IF
037100
037200*    Return date string(26) Ddd Mmm dd hh:mm:ss yyyy\n\0
037300     CALL 'CTIME'
037400          USING BY VALUE ADDRESS OF LS-FWORD-1
037500          RETURNING LS-XS-VAR-PTR
037600     IF LS-XS-VAR-PTR NOT = NULL
037700       SET ADDRESS OF XS-STRING TO LS-XS-VAR-PTR
037800       DISPLAY WS-PGMID
037900            "   CTIME Date/Time = " XS-STRING (1:24)
038000     END-IF
038100
038200*    Return the time difference between LS-FWORD-1 & LS-FWORD-2
038300     COMPUTE LS-FWORD-3 = LS-FWORD-1 - LS-FWORD-2
038400     DISPLAY WS-PGMID
038500          "   end - start = " LS-FWORD-3 " seconds"
038600     MOVE ZERO TO LS-FWORD-3
038700
038800     CALL 'DIFFTIME'
038900          USING BY VALUE LS-FWORD-1
039000                         LS-FWORD-2
039100          RETURNING LS-FP-1
039200     DISPLAY WS-PGMID
039300          "   DIFFTIME end - start = " LS-FP-1 " seconds"
039400
039500     DISPLAY " "
039600
039700     CONTINUE.
039800 1000-99-END.
039900     EXIT.
040000
040100     CONTINUE.
040200 2000-00-IO.
040300     DISPLAY WS-PGMID
040400          " Testing C/C++ function FOPEN, FLDATA, FREAD, FCLOSE"
040500
040600     MOVE WS-DD-SYSIN TO LS-FILE-DD
040700     MOVE WS-MODE-RD  TO LS-FILE-MODE
040800     SET LS-FILE-FPTR TO NULL
040900     PERFORM 7000-11-OPEN THRU 7000-11-END
041000     IF LS-FILE-FPTR NOT = NULL
041100       SET LS-SYSIN-FPTR TO LS-FILE-FPTR
041200     END-IF
041300
041400     PERFORM 7000-23-FLDATA THRU 7000-23-END
041500
041600     DISPLAY WS-PGMID
041700          " Testing C/C++ function FREAD (inline card file)"
041800
041900     MOVE SPACE TO LS-FLAG-EOF
042000     MOVE ZERO TO LS-DATA-PASSED
042100     SET LS-INPBUF-PTR TO ADDRESS OF LS-INPUT-BUF
042200     MOVE +80 TO LS-MAX-LRECL
042300     PERFORM
042400          UNTIL LS-FLAG-EOF = "Y"
042500       PERFORM 7000-41-READ THRU 7000-41-END
042600       IF LS-FLAG-EOF = "N"
042700         DISPLAY WS-PGMID
042800              "   SYSIN record length: " LS-DATA-PASSED
042900         DISPLAY WS-PGMID
043000              "   SYSIN record is: " LS-INPUT-BUF (1:80)
043100       END-IF
043200     END-PERFORM
043300
043400**   SET LS-FILE-FPTR TO LS-SYSIN-FPTR
043500**   PERFORM 7000-21-CLOSE THRU 7000-21-END
043600
043700     DISPLAY " "
043800
043900     MOVE WS-DD-SEQ1 TO LS-FILE-DD
044000     MOVE WS-MODE-RD TO LS-FILE-MODE
044100     SET LS-FILE-FPTR TO NULL
044200     PERFORM 7000-11-OPEN THRU 7000-11-END
044300     IF LS-FILE-FPTR NOT = NULL
044400       SET LS-SEQ1-FPTR TO LS-FILE-FPTR
044500     END-IF
044600
044700     PERFORM 7000-23-FLDATA THRU 7000-23-END
044800
044900     DISPLAY WS-PGMID
045000          " Testing C/C++ function FREAD (mbr of PDS file)"
045100
045200     MOVE SPACE TO LS-FLAG-EOF
045300     MOVE ZERO TO LS-DATA-PASSED
045400     SET LS-INPBUF-PTR TO ADDRESS OF LS-INPUT-BUF
045500     MOVE +80 TO LS-MAX-LRECL
045600     PERFORM
045700          UNTIL LS-FLAG-EOF = "Y"
045800       PERFORM 7000-41-READ THRU 7000-41-END
045900       IF LS-FLAG-EOF = "N"
046000         DISPLAY WS-PGMID
046100              "   SEQ1 record length: " LS-DATA-PASSED
046200         DISPLAY WS-PGMID
046300              "   SEQ1 record is: " LS-INPUT-BUF (1:80)
046400       END-IF
046500     END-PERFORM
046600
046700**   SET LS-FILE-FPTR TO LS-SEQ1-FPTR
046800**   PERFORM 7000-21-CLOSE THRU 7000-21-END
046900
047000     DISPLAY " "
047100
047200     MOVE WS-DD-DIR1 TO LS-FILE-DD
047300     MOVE WS-MODE-RD TO LS-FILE-MODE
047400     SET LS-FILE-FPTR TO NULL
047500     PERFORM 7000-11-OPEN THRU 7000-11-END
047600     IF LS-FILE-FPTR NOT = NULL
047700       SET LS-DIR1-FPTR TO LS-FILE-FPTR
047800     END-IF
047900
048000     PERFORM 7000-23-FLDATA THRU 7000-23-END
048100
048200     DISPLAY WS-PGMID
048300          " Testing C/C++ function FREAD (dir of PDS file)"
048400
048500     MOVE SPACE TO LS-FLAG-EOF
048600     MOVE ZERO TO LS-DATA-PASSED
048700     SET LS-INPBUF-PTR TO ADDRESS OF LS-PDSDIR-BUF
048800     MOVE +256 TO LS-MAX-LRECL
048900     PERFORM
049000          UNTIL LS-FLAG-EOF = "Y"
049100       MOVE LOW-VALUE TO LS-PDSDIR-BUF
049200       PERFORM 7000-41-READ THRU 7000-41-END
049300       IF LS-FLAG-EOF = "N"
049400         DISPLAY WS-PGMID
049500              "   PDSDIR record length: " LS-DATA-PASSED
049600*        DUMP PDS DIR RECORD
049700         MOVE LENGTH OF LS-PDSDIR-BUF TO AS5DMPRB-DATA-LEN
049800         MOVE +3 TO AS5DMPRB-NUMBER
049900         MOVE "PDS DIR RECORD" TO AS5DMPRB-TITLE
050000         CALL WS-ASUMVHEX
050100              USING ASCA-COMMAREA
050200                    AS5DMPRB-REQUEST-BLOCK
050300                    LS-PDSDIR-BUF
050400**                  AS5FDBK-COND-AREA
050500                    OMITTED
050600         MOVE ZERO TO LS-FWORD-3
050700         MOVE LS-PDSDIR-BUF (1:2) TO LS-FWORD-3-3
050800         SET LS-DIREND-PTR TO ADDRESS OF LS-PDSDIR-BUF
050900         ADD LS-FWORD-3 TO LS-ADDR2
051000         SET LS-DIRNTRY-PTR TO ADDRESS OF LS-PDSDIR-BUF
051100         ADD +2 TO LS-ADDR1
051200         PERFORM
051300              UNTIL LS-DIRNTRY-PTR = LS-DIREND-PTR
051400           SET ADDRESS OF AS5PODIR-DATA-AREA TO LS-DIRNTRY-PTR
051500           PERFORM 2100-00-PDSDIR THRU 2100-99-END
051600         END-PERFORM
051700       END-IF
051800     END-PERFORM
051900
052000**   SET LS-FILE-FPTR TO LS-DIR1-FPTR
052100**   PERFORM 7000-21-CLOSE THRU 7000-21-END
052200
052300     DISPLAY " "
052400
052500     MOVE WS-DD-VSAM1 TO LS-FILE-DD
052600     MOVE WS-MODE-RD  TO LS-FILE-MODE
052700     SET LS-FILE-FPTR TO NULL
052800     PERFORM 7000-11-OPEN THRU 7000-11-END
052900     IF LS-FILE-FPTR NOT = NULL
053000       SET LS-VSAM1-FPTR TO LS-FILE-FPTR
053100     END-IF
053200
053300     PERFORM 7000-23-FLDATA THRU 7000-23-END
053400
053500     DISPLAY WS-PGMID
053600          " Testing C/C++ function FREAD (VSAM KSDS file)"
053700
053800     MOVE SPACE TO LS-FLAG-EOF
053900     MOVE ZERO TO LS-DATA-PASSED
054000                  LS-RECORD-CNT
054100     SET LS-INPBUF-PTR TO ADDRESS OF LS-INPUT-BUF
054200     MOVE +150 TO LS-MAX-LRECL
054300     PERFORM
054400          UNTIL LS-FLAG-EOF = "Y"
054500       PERFORM 7000-41-READ THRU 7000-41-END
054600       IF LS-FLAG-EOF = "N"
054700         DISPLAY WS-PGMID
054800              "   VSAM record length: " LS-DATA-PASSED
054900*        DUMP VSAM RECORD
055000         MOVE LENGTH OF LS-INPUT-BUF TO AS5DMPRB-DATA-LEN
055100         MOVE +4 TO AS5DMPRB-NUMBER
055200         MOVE "VSAM RECORD" TO AS5DMPRB-TITLE
055300         CALL WS-ASUMVHEX
055400              USING ASCA-COMMAREA
055500                    AS5DMPRB-REQUEST-BLOCK
055600                    LS-INPUT-BUF
055700**                  AS5FDBK-COND-AREA
055800                    OMITTED
055900         ADD +1 TO LS-RECORD-CNT
056000       END-IF
056100       IF LS-RECORD-CNT > 4
056200         MOVE "Y" TO LS-FLAG-EOF
056300       END-IF
056400     END-PERFORM
056500
056600     DISPLAY " "
056700
056800     DISPLAY WS-PGMID
056900          " Testing C/C++ function FLOCATE (VSAM KSDS file)"
057000
057100     MOVE SPACE TO LS-FLAG-EOF
057200     MOVE ZERO TO LS-DATA-PASSED
057300                  LS-RECORD-CNT
057400     SET LS-INPBUF-PTR TO ADDRESS OF LS-INPUT-BUF
057500     MOVE +150 TO LS-MAX-LRECL
057600     MOVE +10 TO LS-FILE-KEYLEN
057700     SET KEY-EQ TO TRUE
057800     MOVE "ZZAPAC1" TO LS-STRING
057900     SET LS-FILE-KPTR TO ADDRESS OF LS-STRING
058000     PERFORM 7000-42-START THRU 7000-42-END
058100     IF LS-RTNCD = ZERO
058200       PERFORM 7000-41-READ THRU 7000-41-END
058300       IF LS-RTNCD = ZERO
058400         DISPLAY WS-PGMID
058500              "   VSAM record length: " LS-DATA-PASSED
058600*        DUMP VSAM RECORD
058700         MOVE LENGTH OF LS-INPUT-BUF TO AS5DMPRB-DATA-LEN
058800         MOVE +4 TO AS5DMPRB-NUMBER
058900         MOVE "VSAM RECORD" TO AS5DMPRB-TITLE
059000         CALL WS-ASUMVHEX
059100              USING ASCA-COMMAREA
059200                    AS5DMPRB-REQUEST-BLOCK
059300                    LS-INPUT-BUF
059400**                  AS5FDBK-COND-AREA
059500                    OMITTED
059600       END-IF
059700     END-IF
059800
059900**   SET LS-FILE-FPTR TO LS-VSAM1-FPTR
060000**   PERFORM 7000-21-CLOSE THRU 7000-21-END
060100
060200     DISPLAY " "
060300
060400     CONTINUE.
060500 2000-20-CONT.
060600
060700     CALL WS-ASU3T03B
060800          USING ASCA-COMMAREA
060900**              AS5FDBK-COND-AREA
061000                OMITTED
061100
061200     DISPLAY " "
061300
061400     SET LS-FILE-FPTR TO LS-SYSIN-FPTR
061500     PERFORM 7000-21-CLOSE THRU 7000-21-END
061600
061700     SET LS-FILE-FPTR TO LS-SEQ1-FPTR
061800     PERFORM 7000-21-CLOSE THRU 7000-21-END
061900
062000     SET LS-FILE-FPTR TO LS-DIR1-FPTR
062100     PERFORM 7000-21-CLOSE THRU 7000-21-END
062200
062300     SET LS-FILE-FPTR TO LS-VSAM1-FPTR
062400     PERFORM 7000-21-CLOSE THRU 7000-21-END
062500
062600     CONTINUE.
062700 2000-99-END.
062800     EXIT.
062900
063000     CONTINUE.
063100 2100-00-PDSDIR.
063200     MOVE ZERO TO LS-FWORD-1
063300                  LS-FWORD-2
063400                  LS-FWORD-3
063500                  LS-UDATA-LEN
063600                  LS-SMBR-VER
063700                  LS-SMBR-REL
063800                  LS-SMBR-CRDTE
063900                  LS-SMBR-LCDTE
064000                  LS-SMBR-LCTME
064100                  LS-SMBR-SIZE
064200                  LS-SMBR-CRSZ
064300                  LS-SMBR-MODROW
064400     MOVE SPACE TO LS-MBR-ALIAS
064500                   LS-SMBR-USERID
064600
064700     MOVE +7 TO LS-FWORD-2
064800     MOVE AS5PODIR-INDC TO LS-FWORD-3-4
064900*    test bit setting 0|1 (count right to left 0:31)
065000     CALL 'CEESITST'
065100          USING LS-FWORD-3
065200                LS-FWORD-2
065300**              AS5FDBK-COND-AREA
065400                OMITTED
065500                LS-FWORD-1
065600     IF LS-FWORD-1 = +1
065700       MOVE "ALIAS" TO LS-MBR-ALIAS
065800     END-IF
065900
066000*    shift left +27 bits shift right -26 bits
066100*    result will be the length of directory userdata
066200     MOVE +27 TO LS-BIT-SHIFT
066300     CALL 'CEESISHF'
066400          USING LS-FWORD-3
066500                LS-BIT-SHIFT
066600**              AS5FDBK-COND-AREA
066700                OMITTED
066800                LS-FWORD-3
066900     MOVE -26 TO LS-BIT-SHIFT
067000     CALL 'CEESISHF'
067100          USING LS-FWORD-3
067200                LS-BIT-SHIFT
067300**              AS5FDBK-COND-AREA
067400                OMITTED
067500                LS-FWORD-3
067600     MOVE LS-FWORD-3 TO LS-UDATA-LEN
067700
067800     IF AS5PODIR-MBR = HIGH-VALUE
067900       GO TO 2100-20-CONT
068000     END-IF
068100
068200     IF LS-UDATA-LEN = 30
068300       MOVE AS5PODIR-VER TO LS-FWORD-3-4
068400       MOVE LS-FWORD-3 TO LS-SMBR-VER
068500       MOVE AS5PODIR-REL TO LS-FWORD-3-4
068600       MOVE LS-FWORD-3 TO LS-SMBR-REL
068700       COMPUTE LS-SMBR-CRDTE = AS5PODIR-CRDTE + 1900000
068800       COMPUTE LS-SMBR-LCDTE = AS5PODIR-LCDTE + 1900000
068900       MOVE AS5PODIR-LCTME TO LS-FWORD-3-3
069000*      shift left +4 bits
069100       MOVE +4 TO LS-BIT-SHIFT
069200       CALL 'CEESISHF'
069300            USING LS-FWORD-3
069400                  LS-BIT-SHIFT
069500**                AS5FDBK-COND-AREA
069600                  OMITTED
069700                  LS-FWORD-3
069800*      set all sign bits on
069900       MOVE +3 TO LS-FWORD-2
070000       CALL 'CEESISET'
070100            USING LS-FWORD-3
070200                  LS-FWORD-2
070300**                AS5FDBK-COND-AREA
070400                  OMITTED
070500                  LS-FWORD-3
070600       MOVE +2 TO LS-FWORD-2
070700       CALL 'CEESISET'
070800            USING LS-FWORD-3
070900                  LS-FWORD-2
071000**                AS5FDBK-COND-AREA
071100                  OMITTED
071200                  LS-FWORD-3
071300       MOVE +1 TO LS-FWORD-2
071400       CALL 'CEESISET'
071500            USING LS-FWORD-3
071600                  LS-FWORD-2
071700**                AS5FDBK-COND-AREA
071800                  OMITTED
071900                  LS-FWORD-3
072000       MOVE ZERO TO LS-FWORD-2
072100       CALL 'CEESISET'
072200            USING LS-FWORD-3
072300                  LS-FWORD-2
072400**                AS5FDBK-COND-AREA
072500                  OMITTED
072600                  LS-FWORD-3
072700       MOVE LS-PD-3 TO LS-SMBR-LCTME
072800       MOVE LS-SMBR-LCTME TO LS-SMBR-EDTME
072900       MOVE ":" TO LS-SMBR-EDTME (3:1)
073000       MOVE AS5PODIR-SIZE TO LS-SMBR-SIZE
073100       MOVE AS5PODIR-CRSZ TO LS-SMBR-CRSZ
073200       MOVE AS5PODIR-MODROW TO LS-SMBR-MODROW
073300       MOVE AS5PODIR-USERID TO LS-SMBR-USERID
073400       DISPLAY WS-PGMID
073500            "   PDS dir entry: " AS5PODIR-MBR
073600            "  " LS-MBR-ALIAS
073700            "  " LS-UDATA-LEN
073800            "  " LS-SMBR-CRDTE
073900            "  " LS-SMBR-LCDTE
074000            "  " LS-SMBR-EDTME
074100            "  " LS-SMBR-SIZE
074200            "  " LS-SMBR-CRSZ
074300            "  " LS-SMBR-MODROW
074400            "  " LS-SMBR-USERID
074500       GO TO 2100-20-CONT
074600     END-IF
074700
074800     DISPLAY WS-PGMID
074900          "   PDS dir entry: " AS5PODIR-MBR
075000          "  " LS-MBR-ALIAS
075100
075200     CONTINUE.
075300 2100-20-CONT.
075400     COMPUTE LS-ADDR1 = LS-ADDR1 + 12 + LS-UDATA-LEN
075500
075600     CONTINUE.
075700 2100-99-END.
075800     EXIT.
075900
076000     CONTINUE.
076100 3000-00-IOFORMAT.
076200*    FORMATING FUNCTIONS
076300*    %<flags><width><. precision><opt prefix>
076400     DISPLAY " "
076500
076600     DISPLAY WS-PGMID
076700          " Testing C/C++ function SPRINTF"
076800
076900     MOVE ZERO  TO LS-STRING-LEN
077000     MOVE SPACE TO LS-STRING
077100     CALL 'SPRINTF'
077200          USING BY VALUE ADDRESS OF LS-STRING
077300                         ADDRESS OF WS-FRMT-1
077400                         ADDRESS OF WS-GREP-INPUT1
077500          RETURNING LS-STRING-LEN
077600     DISPLAY WS-PGMID
077700          "   " LS-STRING
077800
077900     MOVE ZERO  TO LS-FWORD-1
078000                   LS-STRING-LEN
078100     MOVE SPACE TO LS-STRING
078200     CALL 'SPRINTF'
078300          USING BY VALUE ADDRESS OF LS-STRING
078400                         ADDRESS OF WS-FRMT-1
078500                         ADDRESS OF WS-GREP-INPUT3
078600          RETURNING LS-STRING-LEN
078700     DISPLAY WS-PGMID
078800          "   SPRINTF string length = " LS-STRING-LEN
078900     ADD LS-STRING-LEN TO LS-FWORD-1
079000     DISPLAY WS-PGMID
079100          "   string combined length = " LS-FWORD-1
079200     SET LS-VAR-PTR TO ADDRESS OF LS-STRING
079300     COMPUTE LS-FWORD-2 = LS-FWORD-0 + LS-FWORD-1
079400     MOVE ZERO TO LS-STRING-LEN
079500     CALL 'SPRINTF'
079600          USING BY VALUE LS-FWORD-2
079700                         ADDRESS OF WS-FRMT-1
079800                         ADDRESS OF WS-SPACE
079900          RETURNING LS-STRING-LEN
080000     DISPLAY WS-PGMID
080100          "   SPRINTF string length = " LS-STRING-LEN
080200     ADD LS-STRING-LEN TO LS-FWORD-1
080300     DISPLAY WS-PGMID
080400          "   string combined length = " LS-FWORD-1
080500     COMPUTE LS-FWORD-2 = LS-FWORD-0 + LS-FWORD-1
080600     MOVE ZERO TO LS-STRING-LEN
080700     CALL 'SPRINTF'
080800          USING BY VALUE LS-FWORD-2
080900                         ADDRESS OF WS-FRMT-2
081000                         LS-FWORD-1
081100          RETURNING LS-STRING-LEN
081200     DISPLAY WS-PGMID
081300          "   SPRINTF string length = " LS-STRING-LEN
081400     ADD LS-STRING-LEN TO LS-FWORD-1
081500     ADD +1 TO LS-FWORD-1
081600     DISPLAY WS-PGMID
081700          "   string combined length = " LS-FWORD-1
081800     DISPLAY WS-PGMID
081900          "   " LS-STRING (1:LS-FWORD-1)
082000
082100     MOVE ZERO TO LS-STRING-LEN
082200     MOVE SPACE TO LS-STRING
082300     CALL 'SPRINTF'
082400          USING BY VALUE ADDRESS OF LS-STRING
082500                         ADDRESS OF WS-FRMT-3
082600                         ADDRESS OF WS-GREP-INPUT3
082700                         ADDRESS OF WS-SPACE
082800                         LS-FWORD-1
082900          RETURNING LS-STRING-LEN
083000     DISPLAY WS-PGMID
083100          "   " LS-STRING (1:LS-STRING-LEN)
083200
083300     DISPLAY ' '
083400
083500     CONTINUE.
083600 3000-99-END.
083700     EXIT.
083800
083900     CONTINUE.
084000 4000-00-REFUN.
084100*    REGULAR EXPRESSIONS FUNCTIONS
084200*       . period matches any one character except \n
084300*       [char-char] character thru character
084400*       [string] match on any character in string
084500*       {m}{m,}{m,u} minimum,maximum nbr of times to apply the
084600*         preceding RE
084700*       * 0 or more of any characters
084800*       $ matches the end of the string
084900*       char+ 1 or more occurrences of a char
085000*       [^string] negate or not any of the characters in string
085100*       (expression)$n stores the value matched by the enclosed
085200*         RE in the (n+1)th return parameter (maximum of 10)
085300*       (expression) parentheses alow you to create sub-expression
085400*         sub-expressions (maximum of 10)
085500*
085600     DISPLAY WS-PGMID
085700          " Testing C/C++ function REGCOMP"
085800
085900     INITIALIZE AS5RECA-COMMAREA
086000     MOVE ZERO TO AS5RECA-RE-CFLAGS
086100                  LS-RTNCD
086200     SET USE-EXTENDED-RULES TO TRUE
086300     CALL 'REGCOMP'
086400          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
086500                         ADDRESS OF WS-MATCH-BROWN
086600                         AS5RECA-RE-CFLAGS
086700          RETURNING LS-RTNCD
086800
086900     IF LS-RTNCD NOT = ZERO
087000       DISPLAY WS-PGMID
087100            "   REGCOMP failed - " LS-RTNCD
087200       CALL 'REGERROR'
087300            USING BY VALUE LS-RTNCD
087400                           ADDRESS OF AS5RECA-COMMAREA
087500                           ADDRESS OF LS-STRING
087600                  BY CONTENT LENGTH OF LS-STRING
087700       DISPLAY WS-PGMID
087800            "   REGCOMP failed - " LS-STRING (1:80)
087900       GO TO 4000-99-END
088000     END-IF
088100
088200*    DUMP AS5RECA COMMUNICATION AREA
088300     MOVE LENGTH OF AS5RECA-COMMAREA TO AS5DMPRB-DATA-LEN
088400     MOVE +3 TO AS5DMPRB-NUMBER
088500     MOVE "RE COMMAREA" TO AS5DMPRB-TITLE
088600     CALL WS-ASUMDHEX
088700          USING ASCA-COMMAREA
088800                AS5DMPRB-REQUEST-BLOCK
088900                AS5RECA-COMMAREA
089000**              AS5FDBK-COND-AREA
089100                OMITTED
089200
089300     DISPLAY " "
089400
089500     DISPLAY WS-PGMID
089600          " Testing C/C++ function REGEXEC"
089700
089800     MOVE ZERO TO LS-FWORD-1
089900                  AS5RECA-RE-ECODE
090000                  LS-RTNCD
090100**   MOVE +1 TO LS-FWORD-1
090200     MOVE +2 TO LS-FWORD-1
090300     CALL 'REGEXEC'
090400          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
090500                         ADDRESS OF WS-GREP-INPUT2
090600                         LS-FWORD-1
090700                         ADDRESS OF AS5RECA-RE-MATCH
090800                         AS5RECA-RE-ECODE
090900          RETURNING LS-RTNCD
091000
091100     DISPLAY WS-PGMID
091200          "   REGEXEC EC=" AS5RECA-RE-ECODE
091300
091400     IF LS-RTNCD NOT = ZERO
091500       DISPLAY WS-PGMID
091600            "   REGEXEC failed - " LS-RTNCD
091700            "  " AS5RECA-RE-ECODE
091800       MOVE SPACE TO LS-STRING
091900       CALL 'REGERROR'
092000            USING BY VALUE LS-RTNCD
092100                           ADDRESS OF AS5RECA-COMMAREA
092200                           ADDRESS OF LS-STRING
092300                  BY CONTENT LENGTH OF LS-STRING
092400       DISPLAY WS-PGMID
092500            "   REGEXEC failed - " LS-STRING (1:80)
092600       GO TO 4000-99-END
092700     END-IF
092800
092900     MOVE ZERO TO LS-POS
093000     MOVE +1 TO LS-I
093100     PERFORM
093200          UNTIL LS-RTNCD NOT = ZERO
093300       ADD +1 TO LS-I
093400       DISPLAY WS-PGMID
093500            "   found arg <" WS-MATCH-BROWN
093600            "> in string <" WS-GREP-INPUT2
093700            "> at offset " AS5RECA-RE-MSOFFSET (LS-I)
093800       DISPLAY " "
093900*      DUMP AS5RECA MATCH AREA
094000       MOVE LENGTH OF AS5RECA-RE-MATCH TO AS5DMPRB-DATA-LEN
094100       MOVE +3 TO AS5DMPRB-NUMBER
094200       MOVE "RE MATCH" TO AS5DMPRB-TITLE
094300       CALL WS-ASUMDHEX
094400            USING ASCA-COMMAREA
094500                  AS5DMPRB-REQUEST-BLOCK
094600                  AS5RECA-RE-MATCH
094700**                AS5FDBK-COND-AREA
094800                  OMITTED
094900       ADD AS5RECA-RE-MNOFFSET (LS-I) TO LS-POS
095000       ADD +1 TO LS-POS
095100       CALL 'REGEXEC'
095200            USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
095300                           ADDRESS OF WS-GREP-INPUT2 (LS-POS:)
095400                           LS-FWORD-1
095500                           ADDRESS OF AS5RECA-RE-MATCH
095600                           AS5RECA-RE-ECODE
095700            RETURNING LS-RTNCD
095800     END-PERFORM
095900
096000     DISPLAY " "
096100
096200     CALL 'REGFREE'
096300          USING BY VALUE ADDRESS OF AS5RECA-COMMAREA
096400
096500     CONTINUE.
096600 4000-99-END.
096700     EXIT.
096800
096900     CONTINUE.
097000 7000-00-IOFUN.
097100*    I/O FUNCTIONS
097200*       Record model
097300*         OS/IO - process the following organization of files
097400*           library
097500*             PDS, PDSE
097600*           sequential
097700*             GDG, DASD, tape, printer, punch, card, optical,
097800*             inline JCL, spool, striped
097900*         VSAM/IO - process the following organization of files
098000*           ESDS, KSDS, RRDS, VRRDS
098100*
098200*       recfm=F|V|U  fixed|variable|undefined
098300*         additonal attr:  A|B|M|S
098400*                          printer ASA ctl chr
098500*                          blocked
098600*                          printer machine ctl chr
098700*                          If FS then std format
098800*                          If VS then spanned format
098900*       recfm=F|FA|FB|FM|FS|FBA|FBM|FBS|FSA|FSM|FBSA|FBSM
099000*       recfm=V|VA|VB|VM|VS|VBA|VBM|VBS|VSA|VSM|VBSA|VBSM
099100*       recfm=U|UA|UM
099200*
099300*    OPEN mode
099400*       file declaration
099500*         dd:ddname
099600*         dd:ddname(0|+-n)
099700*         dd:pdsname(mbr)
099800*           w|wb for create mode write to file then close
099900*           r+|rb+ for update mode
100000*         dd:pdsname  for read access to directory
100100*         //'dsname'
100200*         //'dsname(0|+-n)'
100300*         //'dsname.GnnnnVmm'  n=0001:9999  m=00:99
100400*         //'pdsname(mbrname)'
100500*         //&&dsname
100600*       positional
100700*         1st pos - r=read,w=write
100800*         2nd pos - b=binary
100900*         2nd|3rd pos - +=update
101000*       keyword
101100*         samethread
101200*         noseek (QSAM) omit (BSAM)
101300*           disables repositioning functions ftell(), fseek(),
101400*           fgetpos(), & fsetpos()
101500*         byteseek
101600*         abend=abend|recover
101700*         for DSNAME recfm=value
101800*         for DSNAME lrecl=value
101900*         for DSNAME blksize=value
102000*         for DSNAME space
102100*         for VSAM acc=fwd|bwd
102200*         type=blocked|record
102300*         default for VSAM type=record
102400*    READ mode VSAM
102500*
102600     CONTINUE.
102700 7000-11-OPEN.
102800     DISPLAY WS-PGMID
102900          " Testing C/C++ function FOPEN"
103000
103100     CALL 'FOPEN'
103200          USING BY VALUE ADDRESS OF LS-FILE-DD
103300                         ADDRESS OF LS-FILE-MODE
103400          RETURNING LS-FILE-FPTR
103500     IF LS-FILE-FPTR = NULL
103600       DISPLAY WS-PGMID
103700            "   FOPEN failed " LS-FILE-DD "  " LS-FILE-MODE
103800       EXIT PROGRAM
103900     END-IF
104000
104100     CONTINUE.
104200 7000-11-END.
104300     EXIT.
104400
104500     CONTINUE.
104600 7000-12-OPEN.
104700*    CALL 'OPENDIR'
104800
104900     CONTINUE.
105000 7000-12-END.
105100     EXIT.
105200
105300     CONTINUE.
105400 7000-21-CLOSE.
105500     DISPLAY WS-PGMID
105600          " Testing C/C++ function FCLOSE"
105700
105800     MOVE ZERO TO LS-RTNCD
105900     CALL 'FCLOSE'
106000          USING BY VALUE LS-FILE-FPTR
106100          RETURNING LS-RTNCD
106200     IF LS-RTNCD NOT = ZERO
106300       DISPLAY WS-PGMID
106400            "   FCLOSE failed - " LS-RTNCD
106500     END-IF
106600
106700     CONTINUE.
106800 7000-21-END.
106900     EXIT.
107000
107100     CONTINUE.
107200 7000-22-CLOSEDIR.
107300*    CALL 'CLOSEDIR'
107400
107500     CONTINUE.
107600 7000-22-END.
107700     EXIT.
107800
107900     CONTINUE.
108000 7000-23-FLDATA.
108100     DISPLAY WS-PGMID
108200          " Testing C/C++ function FLDATA"
108300
108400     MOVE ALL X'FA' TO LS-FILENAME
108500     MOVE ALL X'FB' TO LS-FILEINFO
108600     MOVE ALL X'FE' TO LS-MTAG
108700
108800     CALL 'FLDATA'
108900          USING BY VALUE LS-FILE-FPTR
109000                         ADDRESS OF LS-FILENAME
109100                         ADDRESS OF LS-FILEINFO
109200          RETURNING LS-RTNCD
109300     IF LS-RTNCD NOT = ZERO
109400       DISPLAY WS-PGMID
109500            "   FLDATA failed - " LS-RTNCD
109600       EXIT PROGRAM
109700     END-IF
109800
109900*    DUMP C/C++ FLDATA AREA
110000     MOVE LENGTH OF LS-STUFF TO AS5DMPRB-DATA-LEN
110100     MOVE +2 TO AS5DMPRB-NUMBER
110200     MOVE "C/C++ FLDATA AREA" TO AS5DMPRB-TITLE
110300     CALL WS-ASUMDHEX
110400          USING ASCA-COMMAREA
110500                AS5DMPRB-REQUEST-BLOCK
110600                LS-STUFF
110700**              AS5FDBK-COND-AREA
110800                OMITTED
110900     SET LS-FLDATA-PTR TO ADDRESS OF LS-FILEINFO
111000     SET ADDRESS OF AS5CFDTA-DATA-AREA TO LS-FLDATA-PTR
111100     IF AS5CFDTA-DSNAME-PTR NOT = NULL
111200       CALL 'STRCPY'
111300            USING BY VALUE ADDRESS OF LS-STRING
111400                           AS5CFDTA-DSNAME-PTR
111500            RETURNING LS-VAR-PTR
111600       CALL 'STRLEN'
111700            USING BY VALUE AS5CFDTA-DSNAME-PTR
111800            RETURNING LS-FWORD-3
111900       DISPLAY WS-PGMID
112000            "   DSNAME LEN: " LS-FWORD-3
112100            "  DSNAME: " LS-STRING (1:LS-HW-3)
112200     END-IF
112300
112400     DISPLAY " "
112500
112600     CONTINUE.
112700 7000-23-END.
112800     EXIT.
112900
113000     CONTINUE.
113100 7000-31-NOTE.
113200***  CALL 'FGETPOS'
113300***       USING BY VALUE LS-FILE-FPTR
113400***                      ADDRESS OF LS-FILE-POS
113500***       RETURNING LS-RTNCD
113600***  IF LS-RTNCD NOT = ZERO
113700***    DISPLAY WS-PGMID
113800***         "   FGETPOS failed - " LS-RTNCD
113900***  END-IF
114000
114100     CONTINUE.
114200 7000-31-END.
114300     EXIT.
114400
114500     CONTINUE.
114600 7000-32-POINT.
114700***  CALL 'FSETPOS'
114800***       USING BY VALUE LS-FILE-FPTR
114900***                      ADDRESS OF LS-FILE-POS
115000***       RETURNING LS-RTNCD
115100***  IF LS-RTNCD NOT = ZERO
115200***    DISPLAY WS-PGMID
115300***         "   FSETPOS failed"
115400***  END-IF
115500
115600     CONTINUE.
115700 7000-32-END.
115800     EXIT.
115900
116000     CONTINUE.
116100 7000-41-READ.
116200*    record i/o
116300*      fread() reads a record
116400*      if size = 1 and count = maxlrecl, fread() returns the
116500*        length in bytes
116600*      if size = maxlrecl and count = 1 fread() returns 0 or 1
116700*        indicating whether a record of length size was read
116800*      if a record is read successfully but
116900*        < size, fread() returns 0
117000*
117100     MOVE "N" TO LS-FLAG-EOF
117200     MOVE +1  TO LS-REC-SIZE
117300     CALL 'FREAD'
117400          USING BY VALUE LS-INPBUF-PTR
117500                         LS-REC-SIZE
117600                         LS-MAX-LRECL
117700                         LS-FILE-FPTR
117800          RETURNING LS-DATA-PASSED
117900     CALL 'FERROR'
118000          USING BY VALUE LS-FILE-FPTR
118100          RETURNING LS-RTNCD
118200     IF LS-RTNCD NOT = ZERO
118300       DISPLAY WS-PGMID
118400            "   FREAD error - " LS-RTNCD
118500     ELSE
118600       CALL 'FEOF'
118700            USING BY VALUE LS-FILE-FPTR
118800            RETURNING LS-RTNCD
118900       IF LS-RTNCD NOT = ZERO
119000         MOVE 'Y' TO LS-FLAG-EOF
119100       END-IF
119200     END-IF
119300
119400     CONTINUE.
119500 7000-41-END.
119600     EXIT.
119700
119800     CONTINUE.
119900 7000-42-START.
120000*    flocate() positions on a VSAM record, if successful
120100*         follow with a fread()
120200*      RBA_EQ     = 0
120300*      KEY-FIRST  = 1
120400*      KEY-LAST   = 2
120500*      KEY-EQ     = 3
120600*      KEY-EQ-BWD = 4
120700*      KEY-GE     = 5
120800*      RBA-EQ-BWD = 6
120900*
121000     CALL 'FLOCATE'
121100          USING BY VALUE LS-FILE-FPTR
121200                         LS-FILE-KPTR
121300                         LS-FILE-KEYLEN
121400                         LS-FILE-OPT
121500          RETURNING LS-RTNCD
121600     IF LS-RTNCD NOT = ZERO
121700       DISPLAY WS-PGMID
121800            "   FLOCATE failed - " LS-RTNCD
121900     END-IF
122000
122100     CONTINUE.
122200 7000-42-END.
122300     EXIT.
122400
122500     CONTINUE.
122600 7000-99-END.
122700     EXIT.
./ ADD NAME=ASUDNOFB 0111-18295-18304-1004-00263-01265-00000-APLKS   38
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUDNOFB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUDNOFB
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to return the number of finds.
001100* PURPOSE: Return a result field (4-byte integer)
001200*          containing the number of times the search
001300*          argument is found in the source field.
001400*
001500*          If two result fields are specified, a vector
001600*          containing the position (2-byte integer) of
001700*          each occurrence of the search argument in the
001800*          source field.
001900*
002000*          The internal vector used to keep track of each
002100*          find in the source field is a fixed length of
002200*          512 bytes.  Which is enough space to track 256
002300*          finds.  The internal vector will be copied to
002400*          the optional supplied result template, if
002500*          present.  Therefore, make sure that the second
002600*          result field is a minimum of 512 bytes in
002700*          length.
002800*
002900*          Subroutine ASUDBPOS (Boyer-Moore) is used to
003000*          find the search argument in the source string.
003100*          So, refer to it's documentation to determine
003200*          capabilities.
003300*
003400*          If the template count < 2.
003500*          LE/COBOL RETURN-CODE = +4
003600*
003700*          If the 6th parm in the call list is not
003800*          a result template.
003900*          LE/COBOL RETURN-CODE = +8
004000*
004100*          If the 7th parm in the call list is not
004200*          a result template.
004300*          LE/COBOL RETURN-CODE = +8
004400*
004500*          If the 7th parm is specified in such a way that
004600*          the temporary position vector can not be copied
004700*          to it (i.e. too short, etc.).
004800*          LE/COBOL RETURN-CODE = +8
004900*
005000* Called Routine(s):
005100*    ASUDBPOS
005200*    CEESISET
005300*
005400* INPUT: CALL 'ASUDNOFB'
005500*             USING ASCA-COMMAREA
005600*                   AS5LARO1-OPTIONS
005700*                   AS5LAST1-SOURCE
005800*                   XS-TMPLATE-CNT
005900*                   AS5LAIT1-INPUT-TEMPLATE
006000*                   AS5LART1-RESULT-TEMPLATE
006100*        (optional) AS5LART3-RESULT-TEMPLATE
006200*
006300*--------------------------------------------------------------*
006400     SKIP2
006500*--------------------------------------------------------------*
006600*               ** HISTORY OF REVISIONS **                     *
006700* DESCRIPTION                                           CHNGID *
006800* ____________________________________________________  _______*
006900*                                                              *
007000* 2018/10/02 New                                               *
007100*                                                              *
007200*--------------------------------------------------------------*
007300     SKIP2
007400 DATA DIVISION.
007500     SKIP2
007600 WORKING-STORAGE SECTION.
007700     SKIP1
007800 01  FILLER.
007900     03  WS-EYE-CATCHER PIC X(25)
008000              VALUE "BUZZARD CREEK TECH, INC. ".
008100     03  WS-PGMID       PIC X(08) VALUE 'ASUDNOFB'.
008200     SKIP2
008300 LOCAL-STORAGE SECTION.
008400     SKIP1
008500 01  LS-AS-MODULE       PIC X(08).
008600 01  LS-LE-MODULE       PIC X(08).
008700 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
008800
008900 01  FILLER.
009000     03  LS-BIT         PIC S9(9) BINARY SYNC.
009100     03  LS-FOUND-COUNT      PIC S9(9) BINARY SYNC.
009200     03  LS-FOUND-LENGTH     PIC S9(9) BINARY SYNC.
009300     03  LS-FOUND-VECTOR.
009400         05  LS-FOUND-ENTRY
009500                   OCCURS 257 TIMES
009600                   INDEXED BY LS-FOUND-IDX.
009700             07  LS-FOUND-POS     PIC S9(4) COMP-5.
009800     03  LS-4BYTES.
009900         05  FILLER          PIC X(01).
010000         05  FILLER          PIC X(01).
010100         05  FILLER          PIC X(01).
010200         05  LS-4BYTES4      PIC X(01).
010300     03  LS-4BYTES-N REDEFINES LS-4BYTES    PIC S9(9) BINARY.
010400     03  LS-EOL         PIC X(01).
010500     SKIP1
010600     COPY AS5LAREQ.
010700     SKIP2
010800 LINKAGE SECTION.
010900     SKIP1
011000     COPY AS5CA.
011100     SKIP1
011200     COPY AS5LARO1.
011300     SKIP1
011400     COPY AS5LAST1.
011500     SKIP1
011600 01  XS-TMPLATE-CNT     PIC S9(9) BINARY.
011700     SKIP1
011800     COPY AS5LAIT1.
011900     SKIP1
012000     COPY AS5LART1.
012100     SKIP1
012200     COPY AS5LART3.
012300     EJECT
012400 PROCEDURE DIVISION USING
012500     ASCA-COMMAREA
012600     AS5LARO1-OPTIONS
012700     AS5LAST1-SOURCE
012800     XS-TMPLATE-CNT
012900     AS5LAIT1-INPUT-TEMPLATE
013000     AS5LART1-RESULT-TEMPLATE
013100     AS5LART3-RESULT-TEMPLATE.
013200     SKIP2
013300     CONTINUE.
013400 0100-00-INIT.
013500
013600     IF NOT (XS-TMPLATE-CNT >= +2)
013700       MOVE +4 TO LS-ENCLAVE-RC
013800       GO TO 1000-99-END
013900     END-IF
014000
014100     MOVE ZERO       TO LS-BIT
014200                        LS-ENCLAVE-RC
014300                        LS-FOUND-COUNT
014400
014500     MOVE AS5LARO1-OPTIONS TO AS5LAREQ-OPTIONS
014600     MOVE LOW-VALUE TO AS5LAREQ-PSTATE
014700     MOVE ZERO      TO AS5LAREQ-COUNT
014800     MOVE +288      TO AS5LAREQ-PSA-LEN
014900
015000     CONTINUE.
015100 1000-00-MAINLINE.
015200
015300     MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (1)
015400     MOVE +4    TO AS5LAREQ-RSLT-STR-SIZE (1)
015500     MOVE ZERO  TO LS-FOUND-COUNT
015600     MOVE "N"   TO LS-EOL
015700     PERFORM
015800          UNTIL LS-EOL = "Y"
015900       MOVE ZERO  TO AS5LAREQ-RSLT-STR-LEN (1)
016000       MOVE LOW-VALUE
016100            TO AS5LAREQ-RSLT-STR-FLD (1)
016200               (1:AS5LAREQ-RSLT-STR-SIZE (1))
016300       PERFORM 7000-00-CALL-ASUDBPOS THRU 7000-99-END
016400       IF AS5LAREQ-RSLT-STR-LEN (1) = +4
016500         MOVE AS5LAREQ-RSLT-STR-FLD (1) (1:4)
016600              TO LS-4BYTES
016700         IF LS-4BYTES-N > ZERO
016800           ADD +1 TO LS-FOUND-COUNT
016900           IF LS-FOUND-COUNT <= 256
017000             SET LS-FOUND-IDX TO LS-FOUND-COUNT
017100             MOVE LS-4BYTES-N TO LS-FOUND-POS (LS-FOUND-IDX)
017200           END-IF
017300         ELSE
017400           MOVE "Y" TO LS-EOL
017500         END-IF
017600       ELSE
017700         MOVE "Y" TO LS-EOL
017800       END-IF
017900       MOVE ZERO TO LS-4BYTES-N
018000*      SET CONTINUE OPTION ON FOR NEXT CALL
018100       MOVE AS5LAREQ-OPT-FLAG TO LS-4BYTES4
018200       CALL 'CEESISET'
018300            USING LS-4BYTES-N
018400                  LS-BIT
018500                  OMITTED
018600                  LS-4BYTES-N
018700       END-CALL
018800       MOVE LS-4BYTES4 TO AS5LAREQ-OPT-FLAG
018900     END-PERFORM
019000
019100     IF AS5LART1-RSLT-PATTYPE NOT = X'04'
019200       MOVE +8 TO LS-ENCLAVE-RC
019300       GO TO 1000-99-END
019400     END-IF
019500
019600     IF AS5LART1-RSLT-STR-SIZE >= +4
019700       MOVE +4 TO AS5LART1-RSLT-STR-LEN
019800       MOVE LS-FOUND-COUNT TO LS-4BYTES-N
019900       MOVE LS-4BYTES
020000            TO AS5LART1-RSLT-STR-FLD (1:AS5LART1-RSLT-STR-LEN)
020100     END-IF
020200
020300     IF XS-TMPLATE-CNT = +2
020400       GO TO 1000-99-END
020500     END-IF
020600
020700     IF ADDRESS OF AS5LART3-RESULT-TEMPLATE = NULL
020800       GO TO 1000-99-END
020900     END-IF
021000
021100     IF AS5LART3-RSLT-PATTYPE NOT = X'04'
021200       MOVE +8 TO LS-ENCLAVE-RC
021300       GO TO 1000-99-END
021400     END-IF
021500
021600     COMPUTE LS-FOUND-LENGTH = LS-FOUND-COUNT * 2
021700
021800     IF LS-FOUND-LENGTH > AS5LART3-RSLT-STR-SIZE
021900       MOVE +8 TO LS-ENCLAVE-RC
022000       GO TO 1000-99-END
022100     END-IF.
022200
022300     MOVE LS-FOUND-LENGTH
022400          TO AS5LART3-RSLT-STR-LEN
022500     MOVE LS-FOUND-VECTOR
022600          (1:LS-FOUND-LENGTH)
022700          TO AS5LART3-RSLT-STR-FLD (1:AS5LART3-RSLT-STR-LEN)
022800
022900     CONTINUE.
023000 1000-99-END.
023100     EXIT.
023200
023300     GO TO 9000-00-TERMINATE
023400     SKIP2
023500     CONTINUE.
023600 7000-00-CALL-ASUDBPOS.
023700
023800     MOVE +2 TO AS5LAREQ-TEMPLATE-CNT
023900     MOVE "ASUDBPOS" TO LS-AS-MODULE
024000     CALL LS-AS-MODULE
024100          USING ASCA-COMMAREA
024200                AS5LAREQ-OPTIONS
024300                AS5LAST1-SOURCE
024400                AS5LAREQ-TEMPLATE-CNT
024500                AS5LAIT1-INPUT-TEMPLATE
024600                AS5LAREQ-RESULT-TEMPLATE (1)
024700                OMITTED
024800     END-CALL
024900
025000     CONTINUE.
025100 7000-99-END.
025200     EXIT.
025300     SKIP2
025400 9000-00-TERMINATE.
025500
025600*    LE SET RETURN CODE
025700     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
025800     GOBACK
025900     EXIT PROGRAM
026000     SKIP1
026100     CONTINUE.
026200 9000-99-END.
026300     EXIT.
./ ADD NAME=ASUDN2TB 0130-18275-18316-1133-01282-00303-00000-APLKS   29
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUDN2TB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUDN2TB
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to convert a number into words/text.
001100* PURPOSE: Convert pack decimal or zone decimal or edited
001200*          numeric fields to text in one of the following
001300*          formats:
001400*            + word - text [AND] text
001500*            + currency - text [DOLLARS] [AND] text [CENTS]
001600*            + check - text [AND] nn/100 [DOLLARS]
001700*
001800*          Input number may contain up to 18 digits.  There can
001900*          be at most 9 digits to the right of decimal.
002000*
002100*          If template count <= +1.
002200*          LE/COBOL RETURN-CODE = +4
002300*
002400*          If format = currency then there can not be
002500*          more than 2 decimal digits.  The routine will
002600*          return with zero length RESULT.
002700*          LE/COBOL RETURN-CODE = +4
002800*
002900*          If format = check then the source number can not
003000*          be negative.  The routine will return with zero
003100*          length RESULT.
003200*          LE/COBOL RETURN-CODE = +4
003300*
003400*          If the result is longer than the caller's
003500*          RESULT area, the routine will return with zero
003600*          length RESULT.
003700*          LE/COBOL RETURN-CODE = +8
003800*
003900*          If input can not be determined the routine will
004000*          return with zero length RESULT.
004100*          LE/COBOL RETURN-CODE = +16
004200*
004300*          Call ASUDDEDT to convert edited numeric to a
004400*          zone decimal.
004500*
004600*          Call ASUDAPND to build the result string.
004700*
004800* Called Routine(s):
004900*    ASUDDEDT
005000*    ASUDAPND
005100*
005200* INPUT: CALL 'ASUDN2TB'
005300*             USING ASCA-COMMAREA
005400*                   AS5LARO1-OPTIONS
005500*                   AS5LAST1-SOURCE
005600*                   XS-TMPLATE-CNT
005700*                   AS5LART1-RESULT-TEMPLATE
005800*                   AS5FDBK-COND-AREA
005900*
006000*--------------------------------------------------------------*
006100     SKIP2
006200*--------------------------------------------------------------*
006300*               ** HISTORY OF REVISIONS **                     *
006400* DESCRIPTION                                           CHNGID *
006500* ____________________________________________________  _______*
006600*                                                              *
006700* 2018/10/02 New                                               *
006800*                                                              *
006900*--------------------------------------------------------------*
007000     SKIP2
007100 DATA DIVISION.
007200     SKIP2
007300 WORKING-STORAGE SECTION.
007400     SKIP1
007500 01  FILLER.
007600     03  WS-EYE-CATCHER PIC X(25)
007700              VALUE "BUZZARD CREEK TECH, INC. ".
007800     03  WS-PGMID       PIC X(08) VALUE 'ASUDN2TB'.
007900     SKIP1
008000 01  WS-CONSTANTS.
008100     03  WS-NEGATIVE.
008200         05  FILLER     PIC S9(4) BINARY VALUE +8.
008300         05  FILLER     PIC X(08) VALUE 'NEGATIVE'.
008400     03  WS-AND.
008500         05  FILLER     PIC S9(4) BINARY VALUE +3.
008600         05  FILLER     PIC X(08) VALUE 'AND'.
008700     03  WS-NO.
008800         05  FILLER     PIC S9(4) BINARY VALUE +2.
008900         05  FILLER     PIC X(08) VALUE 'NO'.
009000     03  WS-FRACTION.
009100         05  FILLER     PIC S9(4) BINARY VALUE +4.
009200         05  FILLER     PIC X(08) VALUE '/100'.
009300     03  WS-ZERO.
009400         05  FILLER     PIC S9(4) BINARY VALUE +4.
009500         05  FILLER     PIC X(08) VALUE 'ZERO'.
009600     03  WS-CENTS.
009700         05  FILLER     PIC S9(4) BINARY VALUE +5.
009800         05  FILLER     PIC X(08) VALUE 'CENTS'.
009900     03  WS-DOLLARS.
010000         05  FILLER     PIC S9(4) BINARY VALUE +7.
010100         05  FILLER     PIC X(08) VALUE 'DOLLARS'.
010200     03  WS-HUNDRED.
010300         05  FILLER     PIC S9(4) BINARY VALUE +7.
010400         05  FILLER     PIC X(08) VALUE 'HUNDRED'.
010500     SKIP1
010600 01  WS-COMMA-VECTOR-VALUES.
010700     03  FILLER.
010800         05  FILLER     PIC S9(4) BINARY VALUE +16.
010900         05  FILLER     PIC S9(4) BINARY VALUE +18.
011000         05  FILLER     PIC S9(4) BINARY VALUE +11.
011100         05  FILLER     PIC X(12) VALUE 'QUADRILLION'.
011200     03  FILLER.
011300         05  FILLER     PIC S9(4) BINARY VALUE +13.
011400         05  FILLER     PIC S9(4) BINARY VALUE +15.
011500         05  FILLER     PIC S9(4) BINARY VALUE +8.
011600         05  FILLER     PIC X(12) VALUE 'TRILLION'.
011700     03  FILLER.
011800         05  FILLER     PIC S9(4) BINARY VALUE +10.
011900         05  FILLER     PIC S9(4) BINARY VALUE +12.
012000         05  FILLER     PIC S9(4) BINARY VALUE +7.
012100         05  FILLER     PIC X(12) VALUE 'BILLION'.
012200     03  FILLER.
012300         05  FILLER     PIC S9(4) BINARY VALUE +7.
012400         05  FILLER     PIC S9(4) BINARY VALUE +9.
012500         05  FILLER     PIC S9(4) BINARY VALUE +7.
012600         05  FILLER     PIC X(12) VALUE 'MILLION'.
012700     03  FILLER.
012800         05  FILLER     PIC S9(4) BINARY VALUE +4.
012900         05  FILLER     PIC S9(4) BINARY VALUE +6.
013000         05  FILLER     PIC S9(4) BINARY VALUE +8.
013100         05  FILLER     PIC X(12) VALUE 'THOUSAND'.
013200     03  FILLER.
013300         05  FILLER     PIC S9(4) BINARY VALUE +1.
013400         05  FILLER     PIC S9(4) BINARY VALUE +3.
013500         05  FILLER     PIC S9(4) BINARY VALUE ZERO.
013600         05  FILLER     PIC X(12) VALUE 'N/A'.
013700 01  WS-COMMA-VECTOR REDEFINES WS-COMMA-VECTOR-VALUES.
013800     03  WS-COMMA-ENTRY
013900                   OCCURS 6 TIMES
014000                   INDEXED BY WS-COMMA-IDX1.
014100         05  WS-COMMA-LO-DIGIT    PIC S9(4) BINARY.
014200         05  WS-COMMA-HI-DIGIT    PIC S9(4) BINARY.
014300         05  WS-COMMA-SOURCE.
014400             07  FILLER      PIC S9(4) BINARY.
014500             07  FILLER      PIC X(12).
014600     SKIP1
014700 01  WS-HUNDREDS-VECTOR-VALUES.
014800     03  FILLER.
014900         05  FILLER     PIC S9(4) BINARY VALUE +3.
015000         05  FILLER     PIC X(14) VALUE 'ONE'.
015100     03  FILLER.
015200         05  FILLER     PIC S9(4) BINARY VALUE +3.
015300         05  FILLER     PIC X(14) VALUE 'TWO'.
015400     03  FILLER.
015500         05  FILLER     PIC S9(4) BINARY VALUE +5.
015600         05  FILLER     PIC X(14) VALUE 'THREE'.
015700     03  FILLER.
015800         05  FILLER     PIC S9(4) BINARY VALUE +4.
015900         05  FILLER     PIC X(14) VALUE 'FOUR'.
016000     03  FILLER.
016100         05  FILLER     PIC S9(4) BINARY VALUE +4.
016200         05  FILLER     PIC X(14) VALUE 'FIVE'.
016300     03  FILLER.
016400         05  FILLER     PIC S9(4) BINARY VALUE +3.
016500         05  FILLER     PIC X(14) VALUE 'SIX'.
016600     03  FILLER.
016700         05  FILLER     PIC S9(4) BINARY VALUE +5.
016800         05  FILLER     PIC X(14) VALUE 'SEVEN'.
016900     03  FILLER.
017000         05  FILLER     PIC S9(4) BINARY VALUE +5.
017100         05  FILLER     PIC X(14) VALUE 'EIGHT'.
017200     03  FILLER.
017300         05  FILLER     PIC S9(4) BINARY VALUE +4.
017400         05  FILLER     PIC X(14) VALUE 'NINE'.
017500     03  FILLER.
017600         05  FILLER     PIC S9(4) BINARY VALUE +3.
017700         05  FILLER     PIC X(14) VALUE 'TEN'.
017800     03  FILLER.
017900         05  FILLER     PIC S9(4) BINARY VALUE +6.
018000         05  FILLER     PIC X(14) VALUE 'ELEVEN'.
018100     03  FILLER.
018200         05  FILLER     PIC S9(4) BINARY VALUE +6.
018300         05  FILLER     PIC X(14) VALUE 'TWELVE'.
018400     03  FILLER.
018500         05  FILLER     PIC S9(4) BINARY VALUE +8.
018600         05  FILLER     PIC X(14) VALUE 'THIRTEEN'.
018700     03  FILLER.
018800         05  FILLER     PIC S9(4) BINARY VALUE +8.
018900         05  FILLER     PIC X(14) VALUE 'FOURTEEN'.
019000     03  FILLER.
019100         05  FILLER     PIC S9(4) BINARY VALUE +7.
019200         05  FILLER     PIC X(14) VALUE 'FIFTEEN'.
019300     03  FILLER.
019400         05  FILLER     PIC S9(4) BINARY VALUE +7.
019500         05  FILLER     PIC X(14) VALUE 'SIXTEEN'.
019600     03  FILLER.
019700         05  FILLER     PIC S9(4) BINARY VALUE +9.
019800         05  FILLER     PIC X(14) VALUE 'SEVENTEEN'.
019900     03  FILLER.
020000         05  FILLER     PIC S9(4) BINARY VALUE +8.
020100         05  FILLER     PIC X(14) VALUE 'EIGHTEEN'.
020200     03  FILLER.
020300         05  FILLER     PIC S9(4) BINARY VALUE +8.
020400         05  FILLER     PIC X(14) VALUE 'NINETEEN'.
020500     03  FILLER.
020600         05  FILLER     PIC S9(4) BINARY VALUE +6.
020700         05  FILLER     PIC X(14) VALUE 'TWENTY'.
020800     03  FILLER.
020900         05  FILLER     PIC S9(4) BINARY VALUE +10.
021000         05  FILLER     PIC X(14) VALUE 'TWENTY-ONE'.
021100     03  FILLER.
021200         05  FILLER     PIC S9(4) BINARY VALUE +10.
021300         05  FILLER     PIC X(14) VALUE 'TWENTY-TWO'.
021400     03  FILLER.
021500         05  FILLER     PIC S9(4) BINARY VALUE +12.
021600         05  FILLER     PIC X(14) VALUE 'TWENTY-THREE'.
021700     03  FILLER.
021800         05  FILLER     PIC S9(4) BINARY VALUE +11.
021900         05  FILLER     PIC X(14) VALUE 'TWENTY-FOUR'.
022000     03  FILLER.
022100         05  FILLER     PIC S9(4) BINARY VALUE +11.
022200         05  FILLER     PIC X(14) VALUE 'TWENTY-FIVE'.
022300     03  FILLER.
022400         05  FILLER     PIC S9(4) BINARY VALUE +10.
022500         05  FILLER     PIC X(14) VALUE 'TWENTY-SIX'.
022600     03  FILLER.
022700         05  FILLER     PIC S9(4) BINARY VALUE +12.
022800         05  FILLER     PIC X(14) VALUE 'TWENTY-SEVEN'.
022900     03  FILLER.
023000         05  FILLER     PIC S9(4) BINARY VALUE +12.
023100         05  FILLER     PIC X(14) VALUE 'TWENTY-EIGHT'.
023200     03  FILLER.
023300         05  FILLER     PIC S9(4) BINARY VALUE +11.
023400         05  FILLER     PIC X(14) VALUE 'TWENTY-NINE'.
023500     03  FILLER.
023600         05  FILLER     PIC S9(4) BINARY VALUE +6.
023700         05  FILLER     PIC X(14) VALUE 'THIRTY'.
023800     03  FILLER.
023900         05  FILLER     PIC S9(4) BINARY VALUE +10.
024000         05  FILLER     PIC X(14) VALUE 'THIRTY-ONE'.
024100     03  FILLER.
024200         05  FILLER     PIC S9(4) BINARY VALUE +10.
024300         05  FILLER     PIC X(14) VALUE 'THIRTY-TWO'.
024400     03  FILLER.
024500         05  FILLER     PIC S9(4) BINARY VALUE +12.
024600         05  FILLER     PIC X(14) VALUE 'THIRTY-THREE'.
024700     03  FILLER.
024800         05  FILLER     PIC S9(4) BINARY VALUE +11.
024900         05  FILLER     PIC X(14) VALUE 'THIRTY-FOUR'.
025000     03  FILLER.
025100         05  FILLER     PIC S9(4) BINARY VALUE +11.
025200         05  FILLER     PIC X(14) VALUE 'THIRTY-FIVE'.
025300     03  FILLER.
025400         05  FILLER     PIC S9(4) BINARY VALUE +10.
025500         05  FILLER     PIC X(14) VALUE 'THIRTY-SIX'.
025600     03  FILLER.
025700         05  FILLER     PIC S9(4) BINARY VALUE +12.
025800         05  FILLER     PIC X(14) VALUE 'THIRTY-SEVEN'.
025900     03  FILLER.
026000         05  FILLER     PIC S9(4) BINARY VALUE +12.
026100         05  FILLER     PIC X(14) VALUE 'THIRTY-EIGHT'.
026200     03  FILLER.
026300         05  FILLER     PIC S9(4) BINARY VALUE +11.
026400         05  FILLER     PIC X(14) VALUE 'THIRTY-NINE'.
026500     03  FILLER.
026600         05  FILLER     PIC S9(4) BINARY VALUE +5.
026700         05  FILLER     PIC X(14) VALUE 'FORTY'.
026800     03  FILLER.
026900         05  FILLER     PIC S9(4) BINARY VALUE +9.
027000         05  FILLER     PIC X(14) VALUE 'FORTY-ONE'.
027100     03  FILLER.
027200         05  FILLER     PIC S9(4) BINARY VALUE +9.
027300         05  FILLER     PIC X(14) VALUE 'FORTY-TWO'.
027400     03  FILLER.
027500         05  FILLER     PIC S9(4) BINARY VALUE +11.
027600         05  FILLER     PIC X(14) VALUE 'FORTY-THREE'.
027700     03  FILLER.
027800         05  FILLER     PIC S9(4) BINARY VALUE +10.
027900         05  FILLER     PIC X(14) VALUE 'FORTY-FOUR'.
028000     03  FILLER.
028100         05  FILLER     PIC S9(4) BINARY VALUE +10.
028200         05  FILLER     PIC X(14) VALUE 'FORTY-FIVE'.
028300     03  FILLER.
028400         05  FILLER     PIC S9(4) BINARY VALUE +9.
028500         05  FILLER     PIC X(14) VALUE 'FORTY-SIX'.
028600     03  FILLER.
028700         05  FILLER     PIC S9(4) BINARY VALUE +11.
028800         05  FILLER     PIC X(14) VALUE 'FORTY-SEVEN'.
028900     03  FILLER.
029000         05  FILLER     PIC S9(4) BINARY VALUE +11.
029100         05  FILLER     PIC X(14) VALUE 'FORTY-EIGHT'.
029200     03  FILLER.
029300         05  FILLER     PIC S9(4) BINARY VALUE +10.
029400         05  FILLER     PIC X(14) VALUE 'FORTY-NINE'.
029500     03  FILLER.
029600         05  FILLER     PIC S9(4) BINARY VALUE +5.
029700         05  FILLER     PIC X(14) VALUE 'FIFTY'.
029800     03  FILLER.
029900         05  FILLER     PIC S9(4) BINARY VALUE +9.
030000         05  FILLER     PIC X(14) VALUE 'FIFTY-ONE'.
030100     03  FILLER.
030200         05  FILLER     PIC S9(4) BINARY VALUE +9.
030300         05  FILLER     PIC X(14) VALUE 'FIFTY-TWO'.
030400     03  FILLER.
030500         05  FILLER     PIC S9(4) BINARY VALUE +11.
030600         05  FILLER     PIC X(14) VALUE 'FIFTY-THREE'.
030700     03  FILLER.
030800         05  FILLER     PIC S9(4) BINARY VALUE +10.
030900         05  FILLER     PIC X(14) VALUE 'FIFTY-FOUR'.
031000     03  FILLER.
031100         05  FILLER     PIC S9(4) BINARY VALUE +10.
031200         05  FILLER     PIC X(14) VALUE 'FIFTY-FIVE'.
031300     03  FILLER.
031400         05  FILLER     PIC S9(4) BINARY VALUE +9.
031500         05  FILLER     PIC X(14) VALUE 'FIFTY-SIX'.
031600     03  FILLER.
031700         05  FILLER     PIC S9(4) BINARY VALUE +11.
031800         05  FILLER     PIC X(14) VALUE 'FIFTY-SEVEN'.
031900     03  FILLER.
032000         05  FILLER     PIC S9(4) BINARY VALUE +11.
032100         05  FILLER     PIC X(14) VALUE 'FIFTY-EIGHT'.
032200     03  FILLER.
032300         05  FILLER     PIC S9(4) BINARY VALUE +10.
032400         05  FILLER     PIC X(14) VALUE 'FIFTY-NINE'.
032500     03  FILLER.
032600         05  FILLER     PIC S9(4) BINARY VALUE +5.
032700         05  FILLER     PIC X(14) VALUE 'SIXTY'.
032800     03  FILLER.
032900         05  FILLER     PIC S9(4) BINARY VALUE +9.
033000         05  FILLER     PIC X(14) VALUE 'SIXTY-ONE'.
033100     03  FILLER.
033200         05  FILLER     PIC S9(4) BINARY VALUE +9.
033300         05  FILLER     PIC X(14) VALUE 'SIXTY-TWO'.
033400     03  FILLER.
033500         05  FILLER     PIC S9(4) BINARY VALUE +11.
033600         05  FILLER     PIC X(14) VALUE 'SIXTY-THREE'.
033700     03  FILLER.
033800         05  FILLER     PIC S9(4) BINARY VALUE +10.
033900         05  FILLER     PIC X(14) VALUE 'SIXTY-FOUR'.
034000     03  FILLER.
034100         05  FILLER     PIC S9(4) BINARY VALUE +10.
034200         05  FILLER     PIC X(14) VALUE 'SIXTY-FIVE'.
034300     03  FILLER.
034400         05  FILLER     PIC S9(4) BINARY VALUE +9.
034500         05  FILLER     PIC X(14) VALUE 'SIXTY-SIX'.
034600     03  FILLER.
034700         05  FILLER     PIC S9(4) BINARY VALUE +11.
034800         05  FILLER     PIC X(14) VALUE 'SIXTY-SEVEN'.
034900     03  FILLER.
035000         05  FILLER     PIC S9(4) BINARY VALUE +11.
035100         05  FILLER     PIC X(14) VALUE 'SIXTY-EIGHT'.
035200     03  FILLER.
035300         05  FILLER     PIC S9(4) BINARY VALUE +10.
035400         05  FILLER     PIC X(14) VALUE 'SIXTY-NINE'.
035500     03  FILLER.
035600         05  FILLER     PIC S9(4) BINARY VALUE +7.
035700         05  FILLER     PIC X(14) VALUE 'SEVENTY'.
035800     03  FILLER.
035900         05  FILLER     PIC S9(4) BINARY VALUE +11.
036000         05  FILLER     PIC X(14) VALUE 'SEVENTY-ONE'.
036100     03  FILLER.
036200         05  FILLER     PIC S9(4) BINARY VALUE +11.
036300         05  FILLER     PIC X(14) VALUE 'SEVENTY-TWO'.
036400     03  FILLER.
036500         05  FILLER     PIC S9(4) BINARY VALUE +13.
036600         05  FILLER     PIC X(14) VALUE 'SEVENTY-THREE'.
036700     03  FILLER.
036800         05  FILLER     PIC S9(4) BINARY VALUE +12.
036900         05  FILLER     PIC X(14) VALUE 'SEVENTY-FOUR'.
037000     03  FILLER.
037100         05  FILLER     PIC S9(4) BINARY VALUE +12.
037200         05  FILLER     PIC X(14) VALUE 'SEVENTY-FIVE'.
037300     03  FILLER.
037400         05  FILLER     PIC S9(4) BINARY VALUE +11.
037500         05  FILLER     PIC X(14) VALUE 'SEVENTY-SIX'.
037600     03  FILLER.
037700         05  FILLER     PIC S9(4) BINARY VALUE +13.
037800         05  FILLER     PIC X(14) VALUE 'SEVENTY-SEVEN'.
037900     03  FILLER.
038000         05  FILLER     PIC S9(4) BINARY VALUE +13.
038100         05  FILLER     PIC X(14) VALUE 'SEVENTY-EIGHT'.
038200     03  FILLER.
038300         05  FILLER     PIC S9(4) BINARY VALUE +12.
038400         05  FILLER     PIC X(14) VALUE 'SEVENTY-NINE'.
038500     03  FILLER.
038600         05  FILLER     PIC S9(4) BINARY VALUE +6.
038700         05  FILLER     PIC X(14) VALUE 'EIGHTY'.
038800     03  FILLER.
038900         05  FILLER     PIC S9(4) BINARY VALUE +10.
039000         05  FILLER     PIC X(14) VALUE 'EIGHTY-ONE'.
039100     03  FILLER.
039200         05  FILLER     PIC S9(4) BINARY VALUE +11.
039300         05  FILLER     PIC X(14) VALUE 'EIGHTY-TWO'.
039400     03  FILLER.
039500         05  FILLER     PIC S9(4) BINARY VALUE +12.
039600         05  FILLER     PIC X(14) VALUE 'EIGHTY-THREE'.
039700     03  FILLER.
039800         05  FILLER     PIC S9(4) BINARY VALUE +11.
039900         05  FILLER     PIC X(14) VALUE 'EIGHTY-FOUR'.
040000     03  FILLER.
040100         05  FILLER     PIC S9(4) BINARY VALUE +11.
040200         05  FILLER     PIC X(14) VALUE 'EIGHTY-FIVE'.
040300     03  FILLER.
040400         05  FILLER     PIC S9(4) BINARY VALUE +10.
040500         05  FILLER     PIC X(14) VALUE 'EIGHTY-SIX'.
040600     03  FILLER.
040700         05  FILLER     PIC S9(4) BINARY VALUE +12.
040800         05  FILLER     PIC X(14) VALUE 'EIGHTY-SEVEN'.
040900     03  FILLER.
041000         05  FILLER     PIC S9(4) BINARY VALUE +12.
041100         05  FILLER     PIC X(14) VALUE 'EIGHTY-EIGHT'.
041200     03  FILLER.
041300         05  FILLER     PIC S9(4) BINARY VALUE +11.
041400         05  FILLER     PIC X(14) VALUE 'EIGHTY-NINE'.
041500     03  FILLER.
041600         05  FILLER     PIC S9(4) BINARY VALUE +6.
041700         05  FILLER     PIC X(14) VALUE 'NINETY'.
041800     03  FILLER.
041900         05  FILLER     PIC S9(4) BINARY VALUE +10.
042000         05  FILLER     PIC X(14) VALUE 'NINETY-ONE'.
042100     03  FILLER.
042200         05  FILLER     PIC S9(4) BINARY VALUE +10.
042300         05  FILLER     PIC X(14) VALUE 'NINETY-TWO'.
042400     03  FILLER.
042500         05  FILLER     PIC S9(4) BINARY VALUE +12.
042600         05  FILLER     PIC X(14) VALUE 'NINETY-THREE'.
042700     03  FILLER.
042800         05  FILLER     PIC S9(4) BINARY VALUE +11.
042900         05  FILLER     PIC X(14) VALUE 'NINETY-FOUR'.
043000     03  FILLER.
043100         05  FILLER     PIC S9(4) BINARY VALUE +11.
043200         05  FILLER     PIC X(14) VALUE 'NINETY-FIVE'.
043300     03  FILLER.
043400         05  FILLER     PIC S9(4) BINARY VALUE +10.
043500         05  FILLER     PIC X(14) VALUE 'NINETY-SIX'.
043600     03  FILLER.
043700         05  FILLER     PIC S9(4) BINARY VALUE +12.
043800         05  FILLER     PIC X(14) VALUE 'NINETY-SEVEN'.
043900     03  FILLER.
044000         05  FILLER     PIC S9(4) BINARY VALUE +12.
044100         05  FILLER     PIC X(14) VALUE 'NINETY-EIGHT'.
044200     03  FILLER.
044300         05  FILLER     PIC S9(4) BINARY VALUE +11.
044400         05  FILLER     PIC X(14) VALUE 'NINETY-NINE'.
044500 01  WS-HUNDREDS-VECTOR REDEFINES WS-HUNDREDS-VECTOR-VALUES.
044600     03  WS-HUNDREDS-ENTRY
044700                  OCCURS 99 TIMES
044800                  INDEXED BY WS-HUNDREDS-IDX1.
044900         05  FILLER     PIC S9(4) BINARY.
045000         05  FILLER     PIC X(14).
045100     SKIP1
045200 01  WS-DECIMAL-VECTOR-VALUES.
045300     03  FILLER.
045400         05  FILLER     PIC S9(4) BINARY VALUE +6.
045500         05  FILLER     PIC X(20) VALUE 'TENTHS'.
045600     03  FILLER.
045700         05  FILLER     PIC S9(4) BINARY VALUE +10.
045800         05  FILLER     PIC X(20) VALUE 'HUNDREDTHS'.
045900     03  FILLER.
046000         05  FILLER     PIC S9(4) BINARY VALUE +11.
046100         05  FILLER     PIC X(20) VALUE 'THOUSANDTHS'.
046200     03  FILLER.
046300         05  FILLER     PIC S9(4) BINARY VALUE +15.
046400         05  FILLER     PIC X(20) VALUE 'TEN-THOUSANDTHS'.
046500     03  FILLER.
046600         05  FILLER     PIC S9(4) BINARY VALUE +19.
046700         05  FILLER     PIC X(20) VALUE 'HUNDRED-THOUSANDTHS'.
046800     03  FILLER.
046900         05  FILLER     PIC S9(4) BINARY VALUE +10.
047000         05  FILLER     PIC X(20) VALUE 'MILLIONTHS'.
047100     03  FILLER.
047200         05  FILLER     PIC S9(4) BINARY VALUE +14.
047300         05  FILLER     PIC X(20) VALUE 'TEN-MILLIONTHS'.
047400     03  FILLER.
047500         05  FILLER     PIC S9(4) BINARY VALUE +18.
047600         05  FILLER     PIC X(20) VALUE 'HUNDRED-MILLIONTHS'.
047700     03  FILLER.
047800         05  FILLER     PIC S9(4) BINARY VALUE +10.
047900         05  FILLER     PIC X(20) VALUE 'BILLIONTHS'.
048000 01  WS-DECIMAL-VECTOR REDEFINES WS-DECIMAL-VECTOR-VALUES.
048100     03  WS-DECIMAL-ENTRY
048200                  OCCURS 9 TIMES
048300                  INDEXED BY WS-DECIMAL-IDX1.
048400         05  FILLER     PIC S9(4) BINARY.
048500         05  FILLER     PIC X(20).
048600     SKIP2
048700 LOCAL-STORAGE SECTION.
048800     SKIP1
048900 01  LS-AS-MODULE       PIC X(08).
049000 01  LS-ENCLAVE-RC      PIC S9(9) BINARY SYNC.
049100 01  LS-OUTPUT-FORMAT   PIC X(01).
049200   88  LS-OUTPUT-WRD        VALUE '1'.
049300   88  LS-OUTPUT-CUR        VALUE '2'.
049400   88  LS-OUTPUT-CHK        VALUE '3'.
049500 01  LS-PROCESS-FLAG    PIC X(01).
049600   88  LS-NEG-ON            VALUE 'Y'.
049700
049800 01  FILLER.
049900     03  LS-TEMP        PIC S9(4) BINARY SYNC.
050000     03  LS-DATA-LEN    PIC S9(4) BINARY SYNC.
050100     03  LS-DATA-POS    PIC S9(4) BINARY SYNC.
050200     03  LS-DIGITS-LOD  PIC S9(4) BINARY SYNC.
050300     03  LS-DIGITS-SLOD PIC S9(4) BINARY SYNC.
050400     03  LS-NBRDIG-ROD  PIC S9(4) BINARY SYNC.
050500     03  LS-DIGITS-ROD  PIC S9(4) BINARY SYNC.
050600     03  LS-DIGITS-SROD PIC S9(4) BINARY SYNC.
050700     03  LS-ZONE-NBR    PIC S9(18).
050800     03  LS-ZONE-DATA REDEFINES LS-ZONE-NBR PIC X(18).
050900     03  LS-3BYTES-X.
051000         05  LS-3BYTES-N     PIC S9(03).
051100     03  LS-3BYTES-9         PIC  9(03).
051200     03  FILLER REDEFINES LS-3BYTES-9.
051300         05  LS-1BYTES-9     PIC  9(01).
051400         05  LS-2BYTES-9     PIC  9(02).
051500     03  LS-2BYTES-X    PIC X(02).
051600     03  LS-2BYTES-N REDEFINES LS-2BYTES-X  PIC S9(02).
051700     03  LS-4DIGITS     PIC 9(04).
051800
051900 01  FILLER.
052000     03  LS-ZONE-FILLER PIC X(18).
052100     03  FILLER REDEFINES LS-ZONE-FILLER.
052200         05  LS-ZONE-1       PIC S9(1).
052300         05  FILLER          PIC X(17).
052400     03  FILLER REDEFINES LS-ZONE-FILLER.
052500         05  LS-ZONE-2       PIC S9(2).
052600         05  FILLER          PIC X(16).
052700     03  FILLER REDEFINES LS-ZONE-FILLER.
052800         05  LS-ZONE-3       PIC S9(3).
052900         05  FILLER          PIC X(15).
053000     03  FILLER REDEFINES LS-ZONE-FILLER.
053100         05  LS-ZONE-4       PIC S9(4).
053200         05  FILLER          PIC X(14).
053300     03  FILLER REDEFINES LS-ZONE-FILLER.
053400         05  LS-ZONE-5       PIC S9(5).
053500         05  FILLER          PIC X(13).
053600     03  FILLER REDEFINES LS-ZONE-FILLER.
053700         05  LS-ZONE-6       PIC S9(6).
053800         05  FILLER          PIC X(12).
053900     03  FILLER REDEFINES LS-ZONE-FILLER.
054000         05  LS-ZONE-7       PIC S9(7).
054100         05  FILLER          PIC X(11).
054200     03  FILLER REDEFINES LS-ZONE-FILLER.
054300         05  LS-ZONE-8       PIC S9(8).
054400         05  FILLER          PIC X(10).
054500     03  FILLER REDEFINES LS-ZONE-FILLER.
054600         05  LS-ZONE-9       PIC S9(9).
054700         05  FILLER          PIC X(09).
054800     03  FILLER REDEFINES LS-ZONE-FILLER.
054900         05  LS-ZONE-10      PIC S9(10).
055000         05  FILLER          PIC X(08).
055100     03  FILLER REDEFINES LS-ZONE-FILLER.
055200         05  LS-ZONE-11      PIC S9(11).
055300         05  FILLER          PIC X(07).
055400     03  FILLER REDEFINES LS-ZONE-FILLER.
055500         05  LS-ZONE-12      PIC S9(12).
055600         05  FILLER          PIC X(06).
055700     03  FILLER REDEFINES LS-ZONE-FILLER.
055800         05  LS-ZONE-13      PIC S9(13).
055900         05  FILLER          PIC X(05).
056000     03  FILLER REDEFINES LS-ZONE-FILLER.
056100         05  LS-ZONE-14      PIC S9(14).
056200         05  FILLER          PIC X(04).
056300     03  FILLER REDEFINES LS-ZONE-FILLER.
056400         05  LS-ZONE-15      PIC S9(15).
056500         05  FILLER          PIC X(03).
056600     03  FILLER REDEFINES LS-ZONE-FILLER.
056700         05  LS-ZONE-16      PIC S9(16).
056800         05  FILLER          PIC X(02).
056900     03  FILLER REDEFINES LS-ZONE-FILLER.
057000         05  LS-ZONE-17      PIC S9(17).
057100         05  FILLER          PIC X(01).
057200     03  FILLER REDEFINES LS-ZONE-FILLER.
057300         05  LS-ZONE-18      PIC S9(18).
057400     SKIP1
057500 01  FILLER.
057600     03  LS-PACK-FILLER PIC X(18).
057700     03  FILLER REDEFINES LS-PACK-FILLER.
057800         05  LS-PACK-1       PIC S9(1) PACKED-DECIMAL.
057900         05  FILLER          PIC X(17).
058000     03  FILLER REDEFINES LS-PACK-FILLER.
058100         05  LS-PACK-2       PIC S9(3) PACKED-DECIMAL.
058200         05  FILLER          PIC X(16).
058300     03  FILLER REDEFINES LS-PACK-FILLER.
058400         05  LS-PACK-3       PIC S9(5) PACKED-DECIMAL.
058500         05  FILLER          PIC X(15).
058600     03  FILLER REDEFINES LS-PACK-FILLER.
058700         05  LS-PACK-4       PIC S9(7) PACKED-DECIMAL.
058800         05  FILLER          PIC X(14).
058900     03  FILLER REDEFINES LS-PACK-FILLER.
059000         05  LS-PACK-5       PIC S9(9) PACKED-DECIMAL.
059100         05  FILLER          PIC X(13).
059200     03  FILLER REDEFINES LS-PACK-FILLER.
059300         05  LS-PACK-6       PIC S9(11) PACKED-DECIMAL.
059400         05  FILLER          PIC X(12).
059500     03  FILLER REDEFINES LS-PACK-FILLER.
059600         05  LS-PACK-7       PIC S9(13) PACKED-DECIMAL.
059700         05  FILLER          PIC X(11).
059800     03  FILLER REDEFINES LS-PACK-FILLER.
059900         05  LS-PACK-8       PIC S9(15) PACKED-DECIMAL.
060000         05  FILLER          PIC X(10).
060100     03  FILLER REDEFINES LS-PACK-FILLER.
060200         05  LS-PACK-9       PIC S9(17) PACKED-DECIMAL.
060300         05  FILLER          PIC X(09).
060400     03  FILLER REDEFINES LS-PACK-FILLER.
060500         05  LS-PACK-10      PIC S9(18) PACKED-DECIMAL.
060600         05  FILLER          PIC X(08).
060700     SKIP1
060800     COPY AS5LAREQ.
060900     SKIP1
061000     COPY AS5CTOK.
061100     SKIP2
061200 LINKAGE SECTION.
061300     SKIP1
061400     COPY AS5CA.
061500     SKIP1
061600     COPY AS5LARO1.
061700     SKIP1
061800     COPY AS5LAST1.
061900     SKIP1
062000 01  XS-TMPLATE-CNT     PIC S9(9) BINARY.
062100     SKIP1
062200     COPY AS5LART1.
062300     SKIP1
062400     COPY AS5FDBK.
062500     EJECT
062600 PROCEDURE DIVISION USING
062700     ASCA-COMMAREA
062800     AS5LARO1-OPTIONS
062900     AS5LAST1-SOURCE
063000     XS-TMPLATE-CNT
063100     AS5LART1-RESULT-TEMPLATE
063200     AS5FDBK-COND-AREA.
063300     SKIP2
063400     CONTINUE.
063500 0100-00-INIT.
063600
063700     IF NOT (XS-TMPLATE-CNT >= +1)
063800       MOVE +4 TO LS-ENCLAVE-RC
063900       GO TO 1000-99-END
064000     END-IF
064100
064200     MOVE LOW-VALUE TO LS-PROCESS-FLAG
064300                       AS5CTOK-OCTOKEN
064400     MOVE ZERO      TO LS-ENCLAVE-RC
064500
064600     CONTINUE.
064700 1000-00-MAINLINE.
064800
064900*    ESTABLISH THE OUTPUT FORMAT i.e. word, currency, check
065000     SET LS-OUTPUT-CHK TO TRUE
065100     IF AS5LARO1-NBR2WRD
065200       SET LS-OUTPUT-WRD TO TRUE
065300     END-IF
065400     IF AS5LARO1-NBR2CUR
065500       SET LS-OUTPUT-CUR TO TRUE
065600     END-IF
065700
065800     MOVE ZERO TO AS5LAREQ-RSLT-TOKEN-EXPS (1)
065900
066000     IF AS5LARO1-COUNT > 0
066100       MOVE 'R' TO AS5LAREQ-RSLT-TOKEN-TYPE (1)
066200       MOVE AS5LARO1-COUNT TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
066300     ELSE
066400       MOVE 'Z' TO AS5LAREQ-RSLT-TOKEN-TYPE (1)
066500       MOVE ZERO TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
066600     END-IF
066700
066800     MOVE ZERO TO LS-ZONE-NBR
066900     IF AS5LAST1-SRC-LEN <= +18
067000*      DETERMINE IF SOURCE DATA IS VALID ZONE DECIMAL FORMAT
067100       EVALUATE TRUE
067200         WHEN AS5LAST1-SRC-LEN = +1
067300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
067400                TO LS-ZONE-FILLER
067500           IF LS-ZONE-1 NUMERIC
067600             MOVE LS-ZONE-1 TO LS-ZONE-NBR
067700           END-IF
067800         WHEN AS5LAST1-SRC-LEN = +2
067900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
068000                TO LS-ZONE-FILLER
068100           IF LS-ZONE-2 NUMERIC
068200             MOVE LS-ZONE-2 TO LS-ZONE-NBR
068300           END-IF
068400         WHEN AS5LAST1-SRC-LEN = +3
068500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
068600                TO LS-ZONE-FILLER
068700           IF LS-ZONE-3 NUMERIC
068800             MOVE LS-ZONE-3 TO LS-ZONE-NBR
068900           END-IF
069000         WHEN AS5LAST1-SRC-LEN = +4
069100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
069200                TO LS-ZONE-FILLER
069300           IF LS-ZONE-4 NUMERIC
069400             MOVE LS-ZONE-4 TO LS-ZONE-NBR
069500           END-IF
069600         WHEN AS5LAST1-SRC-LEN = +5
069700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
069800                TO LS-ZONE-FILLER
069900           IF LS-ZONE-5 NUMERIC
070000             MOVE LS-ZONE-5 TO LS-ZONE-NBR
070100           END-IF
070200         WHEN AS5LAST1-SRC-LEN = +6
070300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
070400                TO LS-ZONE-FILLER
070500           IF LS-ZONE-6 NUMERIC
070600             MOVE LS-ZONE-6 TO LS-ZONE-NBR
070700           END-IF
070800         WHEN AS5LAST1-SRC-LEN = +7
070900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
071000                TO LS-ZONE-FILLER
071100           IF LS-ZONE-7 NUMERIC
071200             MOVE LS-ZONE-7 TO LS-ZONE-NBR
071300           END-IF
071400         WHEN AS5LAST1-SRC-LEN = +8
071500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
071600                TO LS-ZONE-FILLER
071700           IF LS-ZONE-8 NUMERIC
071800             MOVE LS-ZONE-8 TO LS-ZONE-NBR
071900           END-IF
072000         WHEN AS5LAST1-SRC-LEN = +9
072100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
072200                TO LS-ZONE-FILLER
072300           IF LS-ZONE-9 NUMERIC
072400             MOVE LS-ZONE-9 TO LS-ZONE-NBR
072500           END-IF
072600         WHEN AS5LAST1-SRC-LEN = +10
072700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
072800                TO LS-ZONE-FILLER
072900           IF LS-ZONE-10 NUMERIC
073000             MOVE LS-ZONE-10 TO LS-ZONE-NBR
073100           END-IF
073200         WHEN AS5LAST1-SRC-LEN = +11
073300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
073400                TO LS-ZONE-FILLER
073500           IF LS-ZONE-11 NUMERIC
073600             MOVE LS-ZONE-11 TO LS-ZONE-NBR
073700           END-IF
073800         WHEN AS5LAST1-SRC-LEN = +12
073900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
074000                TO LS-ZONE-FILLER
074100           IF LS-ZONE-12 NUMERIC
074200             MOVE LS-ZONE-12 TO LS-ZONE-NBR
074300           END-IF
074400         WHEN AS5LAST1-SRC-LEN = +13
074500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
074600                TO LS-ZONE-FILLER
074700           IF LS-ZONE-13 NUMERIC
074800             MOVE LS-ZONE-13 TO LS-ZONE-NBR
074900           END-IF
075000         WHEN AS5LAST1-SRC-LEN = +14
075100           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
075200                TO LS-ZONE-FILLER
075300           IF LS-ZONE-14 NUMERIC
075400             MOVE LS-ZONE-14 TO LS-ZONE-NBR
075500           END-IF
075600         WHEN AS5LAST1-SRC-LEN = +15
075700           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
075800                TO LS-ZONE-FILLER
075900           IF LS-ZONE-15 NUMERIC
076000             MOVE LS-ZONE-15 TO LS-ZONE-NBR
076100           END-IF
076200         WHEN AS5LAST1-SRC-LEN = +16
076300           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
076400                TO LS-ZONE-FILLER
076500           IF LS-ZONE-16 NUMERIC
076600             MOVE LS-ZONE-16 TO LS-ZONE-NBR
076700           END-IF
076800         WHEN AS5LAST1-SRC-LEN = +17
076900           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
077000                TO LS-ZONE-FILLER
077100           IF LS-ZONE-17 NUMERIC
077200             MOVE LS-ZONE-17 TO LS-ZONE-NBR
077300           END-IF
077400         WHEN AS5LAST1-SRC-LEN = +18
077500           MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
077600                TO LS-ZONE-FILLER
077700           IF LS-ZONE-18 NUMERIC
077800             MOVE LS-ZONE-18 TO LS-ZONE-NBR
077900           END-IF
078000       END-EVALUATE
078100     END-IF
078200
078300     IF LS-ZONE-NBR = ZERO
078400*      DETERMINE IF SOURCE DATA IS VALID PACK DECIMAL FORMAT
078500       IF AS5LAST1-SRC-LEN <= +10
078600         EVALUATE TRUE
078700           WHEN AS5LAST1-SRC-LEN = +1
078800             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
078900                  TO LS-PACK-FILLER
079000             IF LS-PACK-1 NUMERIC
079100               MOVE LS-PACK-1 TO LS-ZONE-NBR
079200             END-IF
079300           WHEN AS5LAST1-SRC-LEN = +2
079400             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
079500                  TO LS-PACK-FILLER
079600             IF LS-PACK-2 NUMERIC
079700               MOVE LS-PACK-2 TO LS-ZONE-NBR
079800             END-IF
079900           WHEN AS5LAST1-SRC-LEN = +3
080000             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
080100                  TO LS-PACK-FILLER
080200             IF LS-PACK-3 NUMERIC
080300               MOVE LS-PACK-3 TO LS-ZONE-NBR
080400             END-IF
080500           WHEN AS5LAST1-SRC-LEN = +4
080600             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
080700                  TO LS-PACK-FILLER
080800             IF LS-PACK-4 NUMERIC
080900               MOVE LS-PACK-4 TO LS-ZONE-NBR
081000             END-IF
081100           WHEN AS5LAST1-SRC-LEN = +5
081200             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
081300                  TO LS-PACK-FILLER
081400             IF LS-PACK-5 NUMERIC
081500               MOVE LS-PACK-5 TO LS-ZONE-NBR
081600             END-IF
081700           WHEN AS5LAST1-SRC-LEN = +6
081800             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
081900                  TO LS-PACK-FILLER
082000             IF LS-PACK-6 NUMERIC
082100               MOVE LS-PACK-6 TO LS-ZONE-NBR
082200             END-IF
082300           WHEN AS5LAST1-SRC-LEN = +7
082400             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
082500                  TO LS-PACK-FILLER
082600             IF LS-PACK-7 NUMERIC
082700               MOVE LS-PACK-7 TO LS-ZONE-NBR
082800             END-IF
082900           WHEN AS5LAST1-SRC-LEN = +8
083000             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
083100                  TO LS-PACK-FILLER
083200             IF LS-PACK-8 NUMERIC
083300               MOVE LS-PACK-8 TO LS-ZONE-NBR
083400             END-IF
083500           WHEN AS5LAST1-SRC-LEN = +9
083600             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
083700                  TO LS-PACK-FILLER
083800             IF LS-PACK-9 NUMERIC
083900               MOVE LS-PACK-9 TO LS-ZONE-NBR
084000             END-IF
084100           WHEN AS5LAST1-SRC-LEN = +10
084200             MOVE AS5LAST1-SRC-FLD (1:AS5LAST1-SRC-LEN)
084300                  TO LS-PACK-FILLER
084400             IF LS-PACK-10 NUMERIC
084500               MOVE LS-PACK-10 TO LS-ZONE-NBR
084600             END-IF
084700         END-EVALUATE
084800       END-IF
084900     END-IF
085000
085100     IF LS-ZONE-NBR NOT = ZERO
085200*      SAVE NBR WITH NO LEADING ZEROS
085300       MOVE LENGTH OF LS-ZONE-NBR TO LS-DATA-LEN
085400       PERFORM VARYING LS-DATA-POS FROM +1 BY +1
085500            UNTIL LS-ZONE-DATA (LS-DATA-POS:1) > ZERO
085600               OR LS-DATA-POS > +17
085700         SUBTRACT +1 FROM LS-DATA-LEN
085800       END-PERFORM
085900       MOVE LS-DATA-LEN TO AS5LAREQ-RSLT-TOKEN-DIGITS (1)
086000       MOVE LS-ZONE-DATA (LS-DATA-POS:LS-DATA-LEN)
086100            TO AS5LAREQ-RSLT-TOKEN-NBR (1)
086200     END-IF
086300
086400     IF LS-ZONE-NBR = ZERO
086500*      DETERMINE IF SOURCE DATA IS VALID EDITED NUMERIC FORMAT
086600       INITIALIZE AS5LAREQ-OPTIONS
086700       MOVE AS5LARO1-OPT-FLAG TO AS5LAREQ-OPT-FLAG
086800       INITIALIZE AS5LAREQ-SOURCE
086900       MOVE AS5LAST1-SRC-LEN  TO AS5LAREQ-SRC-LEN
087000       MOVE AS5LAST1-SRC-FLD  TO AS5LAREQ-SRC-FLD
087100       MOVE +1 TO AS5LAREQ-TEMPLATE-CNT
087200       INITIALIZE AS5LAREQ-RESULT-TEMPLATE (1)
087300       MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (1)
087400       MOVE +50 TO AS5LAREQ-RSLT-STR-SIZE (1)
087500       PERFORM 7000-00-CALL-ASUDDEDT THRU 7000-99-END
087600     END-IF
087700
087800     IF LS-OUTPUT-CUR
087900       IF AS5LAREQ-RSLT-TOKEN-SCALES (1) > 2
088000         MOVE +4 TO LS-ENCLAVE-RC
088100         GO TO 1000-99-END
088200       END-IF
088300     END-IF
088400
088500*    DETERMINE SIGN
088600     MOVE AS5LAREQ-RSLT-TOKEN-DIGITS (1)
088700          TO LS-DATA-POS
088800
088900     IF LS-DATA-POS NOT > ZERO
089000       MOVE +16 TO LS-ENCLAVE-RC
089100       GO TO 1000-99-END
089200     END-IF
089300
089400     IF AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1) =
089500          X'D0' OR
089600          (AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
089700          >= 'J' AND <= 'R')
089800       SET LS-NEG-ON TO TRUE
089900     END-IF
090000
090100*    CALCULATE NBR OF SIGNIFICANT DIGITS LEFT OF DECIMAL
090200     COMPUTE LS-DIGITS-LOD = AS5LAREQ-RSLT-TOKEN-DIGITS (1)
090300          - AS5LAREQ-RSLT-TOKEN-SCALES (1)
090400
090500*    CALCULATE NBR OF SIGNIFICANT DIGITS RIGHT OF DECIMAL
090600     MOVE AS5LAREQ-RSLT-TOKEN-SCALES (1)
090700          TO LS-NBRDIG-ROD
090800     IF LS-NBRDIG-ROD > ZERO
090900       COMPUTE LS-TEMP = LS-DIGITS-LOD + 1
091000       PERFORM VARYING LS-DATA-POS FROM LS-TEMP BY +1
091100            UNTIL AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
091200                 > ZERO
091300               OR LS-DATA-POS > AS5LAREQ-RSLT-TOKEN-DIGITS (1)
091400         SUBTRACT +1 FROM LS-NBRDIG-ROD
091500       END-PERFORM
091600     END-IF
091700
091800*    GET STARTING ENTRY IN VIRTUAL COMMA VECTOR
091900     MOVE ZERO TO LS-TEMP
092000     PERFORM VARYING WS-COMMA-IDX1 FROM +1 BY +1
092100          UNTIL WS-COMMA-IDX1 > 6
092200             OR LS-TEMP > 0
092300       IF NOT LS-DIGITS-LOD < WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
092400         SET LS-TEMP TO WS-COMMA-IDX1
092500       END-IF
092600     END-PERFORM
092700     SET WS-COMMA-IDX1 TO LS-TEMP
092800
092900     INITIALIZE AS5LAREQ-OPTIONS
093000     MOVE +1 TO AS5LAREQ-TEMPLATE-CNT
093100     INITIALIZE AS5LAREQ-RESULT-TEMPLATE (2)
093200     MOVE X'04' TO AS5LAREQ-RSLT-PATTYPE (2)
093300     MOVE +250 TO AS5LAREQ-RSLT-STR-SIZE (2)
093400
093500     IF LS-NEG-ON
093600       EVALUATE TRUE
093700         WHEN LS-OUTPUT-WRD
093800         WHEN LS-OUTPUT-CUR
093900           MOVE WS-NEGATIVE TO AS5LAREQ-SOURCE
094000           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
094100         WHEN LS-OUTPUT-CHK
094200           MOVE +4 TO LS-ENCLAVE-RC
094300           GO TO 1000-99-END
094400         WHEN OTHER
094500           CONTINUE
094600       END-EVALUATE
094700     END-IF
094800
094900     MOVE +1 TO LS-DATA-POS
095000     IF LS-DIGITS-LOD > ZERO
095100       MOVE LS-DIGITS-LOD TO LS-DIGITS-SLOD
095200       PERFORM 2000-00-CONVERT-LOD THRU 2000-99-END
095300     ELSE
095400       MOVE WS-ZERO TO AS5LAREQ-SOURCE
095500       PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
095600       IF LS-OUTPUT-CUR
095700         MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
095800         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
095900       END-IF
096000     END-IF
096100
096200     IF AS5LAREQ-RSLT-TOKEN-SCALES (1) > ZERO
096300       EVALUATE TRUE
096400         WHEN LS-OUTPUT-WRD
096500         WHEN LS-OUTPUT-CUR
096600         WHEN LS-OUTPUT-CHK
096700           MOVE WS-AND TO AS5LAREQ-SOURCE
096800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
096900         WHEN OTHER
097000           CONTINUE
097100       END-EVALUATE
097200*      GET STARTING ENTRY IN RIGHT OF DECIMAL VECTOR
097300       SET WS-DECIMAL-IDX1 TO AS5LAREQ-RSLT-TOKEN-SCALES (1)
097400*      GET STARTING ENTRY IN VIRTUAL COMMA VECTOR
097500       MOVE AS5LAREQ-RSLT-TOKEN-SCALES (1) TO LS-DIGITS-ROD
097600       PERFORM VARYING WS-COMMA-IDX1 FROM +1 BY +1
097700            UNTIL LS-NBRDIG-ROD >=
097800                 WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
097900       END-PERFORM
098000       COMPUTE LS-DATA-POS = AS5LAREQ-RSLT-TOKEN-DIGITS (1)
098100            - LS-NBRDIG-ROD + 1
098200       MOVE LS-NBRDIG-ROD TO LS-DIGITS-SROD
098300       EVALUATE TRUE
098400         WHEN LS-OUTPUT-WRD
098500         WHEN LS-OUTPUT-CUR
098600           PERFORM 2100-00-CONVERT-ROD THRU 2100-99-END
098700         WHEN LS-OUTPUT-CHK
098800           MOVE WS-NO TO AS5LAREQ-SOURCE
098900           IF AS5LAREQ-RSLT-TOKEN-SCALES (1) >= 2
099000             COMPUTE LS-DATA-POS = LS-DIGITS-LOD + 1
099100             MOVE AS5LAREQ-RSLT-TOKEN-NBR (1)
099200                  (LS-DATA-POS:2) TO LS-2BYTES-X
099300             IF LS-2BYTES-N > ZERO
099400               MOVE LS-2BYTES-N TO LS-2BYTES-9
099500               MOVE LS-2BYTES-9 TO AS5LAREQ-SRC-FLD
099600             END-IF
099700           END-IF
099800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
099900           MOVE ZERO TO AS5LAREQ-COUNT
100000           MOVE WS-FRACTION TO AS5LAREQ-SOURCE
100100           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
100200           MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
100300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
100400         WHEN OTHER
100500           CONTINUE
100600       END-EVALUATE
100700     END-IF
100800
100900     IF AS5LAREQ-RSLT-STR-LEN (2) > AS5LART1-RSLT-STR-SIZE
101000       MOVE +8 TO LS-ENCLAVE-RC
101100       GO TO 1000-99-END
101200     END-IF.
101300
101400     MOVE AS5LAREQ-RSLT-STR-LEN (2)
101500          TO AS5LART1-RSLT-STR-LEN
101600     MOVE AS5LAREQ-RSLT-STR-FLD (2)
101700          (1:AS5LAREQ-RSLT-STR-LEN (2))
101800          TO AS5LART1-RSLT-STR-FLD
101900
102000     CONTINUE.
102100 1000-99-END.
102200     EXIT.
102300
102400     GO TO 9000-00-TERMINATE
102500     SKIP2
102600     CONTINUE.
102700 2000-00-CONVERT-LOD.
102800
102900     EVALUATE TRUE
103000       WHEN LS-DIGITS-SLOD = WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
103100*        THREE DIGITS IN THE GROUP
103200         MOVE ZERO TO LS-3BYTES-X
103300         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:3)
103400              TO LS-3BYTES-X
103500         MOVE LS-3BYTES-N TO LS-3BYTES-9
103600         EVALUATE TRUE
103700           WHEN LS-3BYTES-9 = ZERO
103800             ADD +3 TO LS-DATA-POS
103900             SUBTRACT +3 FROM LS-DIGITS-SLOD
104000             SET WS-COMMA-IDX1 UP BY +1
104100           WHEN OTHER
104200             IF LS-1BYTES-9 > ZERO
104300*              LEADING DIGIT > ZERO, SO DO LOOKUP
104400               SET WS-HUNDREDS-IDX1 TO LS-1BYTES-9
104500               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
104600                    TO AS5LAREQ-SOURCE
104700               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
104800               MOVE WS-HUNDRED
104900                    TO AS5LAREQ-SOURCE
105000               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
105100             END-IF
105200             IF LS-2BYTES-9 > ZERO
105300               SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
105400               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
105500                    TO AS5LAREQ-SOURCE
105600               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
105700             END-IF
105800             ADD +3 TO LS-DATA-POS
105900             SUBTRACT +3 FROM LS-DIGITS-SLOD
106000             MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
106100                  TO AS5LAREQ-SOURCE
106200             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
106300             SET WS-COMMA-IDX1 UP BY +1
106400         END-EVALUATE
106500       WHEN LS-DIGITS-SLOD = WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
106600*        ONE DIGIT IN THE GROUP
106700         MOVE ZERO TO LS-3BYTES-X
106800         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
106900              TO LS-3BYTES-X (3:1)
107000         MOVE LS-3BYTES-N TO LS-3BYTES-9
107100         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
107200         IF LS-2BYTES-9 > ZERO
107300           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
107400                TO AS5LAREQ-SOURCE
107500           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
107600         END-IF
107700         ADD +1 TO LS-DATA-POS
107800         SUBTRACT +1 FROM LS-DIGITS-SLOD
107900         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
108000              TO AS5LAREQ-SOURCE
108100         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
108200         SET WS-COMMA-IDX1 UP BY +1
108300       WHEN LS-DIGITS-SLOD < WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
108400*        TWO DIGITS IN THE GROUP
108500         MOVE ZERO TO LS-3BYTES-X
108600         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:2)
108700              TO LS-3BYTES-X (2:2)
108800         MOVE LS-3BYTES-N TO LS-3BYTES-9
108900         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
109000         IF LS-2BYTES-9 > ZERO
109100           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
109200                TO AS5LAREQ-SOURCE
109300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
109400         END-IF
109500         ADD +2 TO LS-DATA-POS
109600         SUBTRACT +2 FROM LS-DIGITS-SLOD
109700         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
109800              TO AS5LAREQ-SOURCE
109900         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
110000         SET WS-COMMA-IDX1 UP BY +1
110100     END-EVALUATE
110200
110300     IF WS-COMMA-IDX1 > 6
110400       EVALUATE TRUE
110500         WHEN LS-OUTPUT-CUR
110600           MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
110700           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
110800         WHEN LS-OUTPUT-CHK
110900           IF AS5LAREQ-RSLT-TOKEN-SCALES (1) = ZERO
111000             MOVE WS-DOLLARS TO AS5LAREQ-SOURCE
111100             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
111200           END-IF
111300         WHEN OTHER
111400           CONTINUE
111500       END-EVALUATE
111600       GO TO 2000-99-END
111700     END-IF
111800
111900     IF LS-DIGITS-SLOD > ZERO
112000       GO TO 2000-00-CONVERT-LOD
112100     END-IF
112200
112300     CONTINUE.
112400 2000-99-END.
112500     EXIT.
112600     SKIP2
112700     CONTINUE.
112800 2100-00-CONVERT-ROD.
112900
113000     EVALUATE TRUE
113100       WHEN LS-DIGITS-SROD = WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
113200*        THREE DIGITS IN THE GROUP
113300         MOVE ZERO TO LS-3BYTES-X
113400         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:3)
113500              TO LS-3BYTES-X
113600         MOVE LS-3BYTES-N TO LS-3BYTES-9
113700         EVALUATE TRUE
113800           WHEN LS-3BYTES-9 = ZERO
113900             ADD +3 TO LS-DATA-POS
114000             SUBTRACT +3 FROM LS-DIGITS-SROD
114100             SET WS-COMMA-IDX1 UP BY +1
114200           WHEN OTHER
114300             IF LS-1BYTES-9 > ZERO
114400*              LEADING DIGIT > ZERO, SO DO LOOKUP
114500               SET WS-HUNDREDS-IDX1 TO LS-1BYTES-9
114600               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
114700                    TO AS5LAREQ-SOURCE
114800               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
114900               MOVE WS-HUNDRED TO AS5LAREQ-SOURCE
115000               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
115100             END-IF
115200             SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
115300             IF LS-2BYTES-9 > ZERO
115400               MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
115500                    TO AS5LAREQ-SOURCE
115600               PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
115700             END-IF
115800             ADD +3 TO LS-DATA-POS
115900             SUBTRACT +3 FROM LS-DIGITS-SROD
116000             MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
116100                  TO AS5LAREQ-SOURCE
116200             PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
116300             SET WS-COMMA-IDX1 UP BY +1
116400         END-EVALUATE
116500       WHEN LS-DIGITS-SROD = WS-COMMA-LO-DIGIT (WS-COMMA-IDX1)
116600*        ONE DIGIT IN THE GROUP
116700         MOVE ZERO TO LS-3BYTES-X
116800         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:1)
116900              TO LS-3BYTES-X (3:1)
117000         MOVE LS-3BYTES-N TO LS-3BYTES-9
117100         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
117200         IF LS-2BYTES-9 > ZERO
117300           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
117400                TO AS5LAREQ-SOURCE
117500           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
117600         END-IF
117700         ADD +1 TO LS-DATA-POS
117800         SUBTRACT +1 FROM LS-DIGITS-SROD
117900         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
118000              TO AS5LAREQ-SOURCE
118100         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
118200         SET WS-COMMA-IDX1 UP BY +1
118300       WHEN LS-DIGITS-SROD < WS-COMMA-HI-DIGIT (WS-COMMA-IDX1)
118400*        TWO DIGITS IN THE GROUP
118500         MOVE ZERO TO LS-3BYTES-X
118600         MOVE AS5LAREQ-RSLT-TOKEN-NBR (1) (LS-DATA-POS:2)
118700              TO LS-3BYTES-X (2:2)
118800         MOVE LS-3BYTES-N TO LS-3BYTES-9
118900         SET WS-HUNDREDS-IDX1 TO LS-2BYTES-9
119000         IF LS-2BYTES-9 > ZERO
119100           MOVE WS-HUNDREDS-ENTRY (WS-HUNDREDS-IDX1)
119200                TO AS5LAREQ-SOURCE
119300           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
119400         END-IF
119500         ADD +2 TO LS-DATA-POS
119600         SUBTRACT +2 FROM LS-DIGITS-SROD
119700         MOVE WS-COMMA-SOURCE (WS-COMMA-IDX1)
119800              TO AS5LAREQ-SOURCE
119900         PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
120000         SET WS-COMMA-IDX1 UP BY +1
120100     END-EVALUATE
120200
120300     IF WS-COMMA-IDX1 > 6
120400       EVALUATE TRUE
120500         WHEN LS-OUTPUT-WRD
120600           MOVE WS-DECIMAL-ENTRY (WS-DECIMAL-IDX1)
120700                TO AS5LAREQ-SOURCE
120800           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
120900         WHEN LS-OUTPUT-CUR
121000           MOVE WS-CENTS TO AS5LAREQ-SOURCE
121100           PERFORM 7100-00-CALL-ASUDAPND THRU 7100-99-END
121200         WHEN OTHER
121300           CONTINUE
121400       END-EVALUATE
121500       GO TO 2100-99-END
121600     END-IF
121700
121800     GO TO 2100-00-CONVERT-ROD
121900
122000     CONTINUE.
122100 2100-99-END.
122200     EXIT.
122300     SKIP2
122400     CONTINUE.
122500 7000-00-CALL-ASUDDEDT.
122600     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
122700     MOVE "ASUDDEDT" TO LS-AS-MODULE
122800     CALL LS-AS-MODULE
122900          USING ASCA-COMMAREA
123000                AS5LAREQ-OPTIONS
123100                AS5LAREQ-SOURCE
123200                AS5LAREQ-TEMPLATE-CNT
123300                AS5LAREQ-RESULT-TEMPLATE (1)
123400                AS5CTOK-OCTOKEN
123500**              OMITTED
123600     END-CALL
123700
123800     SKIP1
123900     CONTINUE.
124000 7000-99-END.
124100     EXIT.
124200     SKIP1
124300     CONTINUE.
124400 7100-00-CALL-ASUDAPND.
124500     IF AS5LAREQ-SRC-LEN NOT > ZERO
124600       GO TO 7100-99-END
124700     END-IF
124800
124900     MOVE LOW-VALUE TO AS5CTOK-OCTOKEN
125000     MOVE "ASUDAPND" TO LS-AS-MODULE
125100     CALL LS-AS-MODULE
125200          USING ASCA-COMMAREA
125300                AS5LAREQ-OPTIONS
125400                AS5LAREQ-SOURCE
125500                AS5LAREQ-TEMPLATE-CNT
125600                AS5LAREQ-RESULT-TEMPLATE (2)
125700                AS5CTOK-OCTOKEN
125800**              OMITTED
125900     END-CALL
126000
126100     MOVE +1 TO AS5LAREQ-COUNT
126200
126300     SKIP1
126400     CONTINUE.
126500 7100-99-END.
126600     EXIT.
126700     SKIP2
126800 9000-00-TERMINATE.
126900     MOVE AS5CTOK-OCTOKEN TO AS5FDBK-COND-AREA
127000
127100     IF AS5CTOK-SEVNBR > ZERO
127200       COMPUTE LS-ENCLAVE-RC = AS5CTOK-SEVNBR * 2
127300     END-IF
127400
127500*    LE SET RETURN CODE
127600     CALL 'CEE3SRC' USING LS-ENCLAVE-RC OMITTED
127700     GOBACK
127800     EXIT PROGRAM
127900     SKIP1
128000     CONTINUE.
128100 9000-99-END.
128200     EXIT.
./ ADD NAME=ASUIGZCT 0107-15061-18310-1408-00081-00001-00000-APLKS   48
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, PERSISTANT DATA
000400*    *
000500*    * COPYBOOK NAME: ASUIGZCT
000600*    *         TITLE: LE COBOL CONDITION TOKENS
000700*    *          DATE: 03/02/2015
000800*    *          DESC:
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2015/03/02 REGENNED USING REXX EXEC CEEBLDTX
001200*    * 2016/08/09 REGENNED USING REXX EXEC CEEBLDTX
001300*    * 2018/05/11 REGENNED USING REXX EXEC CEEBLDTX
001400*    * 2018/11/06 REGENNED USING REXX EXEC CEEBLDTX
001500*    * ------------------------------------------------------- *
001600      88  ASU035_0001  VALUE X'0001006588C1E2E4'.
001700      88  ASU035_0002  VALUE X'0002006590C1E2E4'.
001800      88  ASU035_0003  VALUE X'0003006598C1E2E4'.
001900      88  ASU035_0004  VALUE X'00040065A0C1E2E4'.
002000      88  ASU036       VALUE X'0000006640C1E2E4'.
002100      88  ASU037_0001  VALUE X'0001006788C1E2E4'.
002200      88  ASU037_0002  VALUE X'0002006790C1E2E4'.
002300      88  ASU038       VALUE X'0000006840C1E2E4'.
002400      88  ASU039_0001  VALUE X'0001006988C1E2E4'.
002500      88  ASU039_0002  VALUE X'0002006990C1E2E4'.
002600      88  ASU039_0003  VALUE X'0003006998C1E2E4'.
002700      88  ASU039_0004  VALUE X'00040069A0C1E2E4'.
002800      88  ASU03A       VALUE X'0000006A40C1E2E4'.
002900      88  ASU03B_0001  VALUE X'0001006B88C1E2E4'.
003000      88  ASU03B_0002  VALUE X'0002006B90C1E2E4'.
003100      88  ASU03B_0003  VALUE X'0003006B98C1E2E4'.
003200      88  ASU03B_0004  VALUE X'0004006BA0C1E2E4'.
003300      88  ASU03C_0001  VALUE X'0001006C88C1E2E4'.
003400      88  ASU03C_0002  VALUE X'0002006C90C1E2E4'.
003500      88  ASU03C_0003  VALUE X'0003006C98C1E2E4'.
003600      88  ASU03C_0004  VALUE X'0004006CA0C1E2E4'.
003700      88  ASU03D_0001  VALUE X'0001006D88C1E2E4'.
003800      88  ASU03D_0002  VALUE X'0002006D90C1E2E4'.
003900      88  ASU03D_0003  VALUE X'0003006D98C1E2E4'.
004000      88  ASU03D_0004  VALUE X'0004006DA0C1E2E4'.
004100      88  ASU03E_0001  VALUE X'0001006E88C1E2E4'.
004200      88  ASU03E_0002  VALUE X'0002006E90C1E2E4'.
004300      88  ASU03E_0003  VALUE X'0003006E98C1E2E4'.
004400      88  ASU03E_0004  VALUE X'0004006EA0C1E2E4'.
004500      88  ASU03F_0001  VALUE X'0001006F88C1E2E4'.
004600      88  ASU03F_0002  VALUE X'0002006F90C1E2E4'.
004700      88  ASU03F_0003  VALUE X'0003006F98C1E2E4'.
004800      88  ASU03F_0004  VALUE X'0004006FA0C1E2E4'.
004900      88  ASU03G_0001  VALUE X'0001007088C1E2E4'.
005000      88  ASU03G_0002  VALUE X'0002007090C1E2E4'.
005100      88  ASU03G_0003  VALUE X'0003007098C1E2E4'.
005200      88  ASU03H_0001  VALUE X'0001007188C1E2E4'.
005300      88  ASU03H_0002  VALUE X'0002007190C1E2E4'.
005400      88  ASU03H_0003  VALUE X'0003007198C1E2E4'.
005500      88  ASU03H_0004  VALUE X'00040071A0C1E2E4'.
005600      88  ASU03I_0001  VALUE X'0001007288C1E2E4'.
005700      88  ASU03I_0002  VALUE X'0002007290C1E2E4'.
005800      88  ASU03I_0003  VALUE X'0003007298C1E2E4'.
005900      88  ASU03I_0004  VALUE X'00040072A0C1E2E4'.
006000      88  ASU03J_0001  VALUE X'0001007388C1E2E4'.
006100      88  ASU03J_0002  VALUE X'0002007390C1E2E4'.
006200      88  ASU03J_0003  VALUE X'0003007398C1E2E4'.
006300      88  ASU03J_0004  VALUE X'00040073A0C1E2E4'.
006400      88  ASU03K_0001  VALUE X'0001007488C1E2E4'.
006500      88  ASU03K_0002  VALUE X'0002007490C1E2E4'.
006600      88  ASU03K_0003  VALUE X'0003007498C1E2E4'.
006700      88  ASU03K_0004  VALUE X'00040074A0C1E2E4'.
006800      88  ASU03L_0001  VALUE X'0001007588C1E2E4'.
006900      88  ASU03L_0002  VALUE X'0002007590C1E2E4'.
007000      88  ASU03L_0003  VALUE X'0003007598C1E2E4'.
007100      88  ASU03L_0004  VALUE X'00040075A0C1E2E4'.
007200      88  ASU03M_0001  VALUE X'0001007688C1E2E4'.
007300      88  ASU03M_0002  VALUE X'0002007690C1E2E4'.
007400      88  ASU03M_0003  VALUE X'0003007698C1E2E4'.
007500      88  ASU03M_0004  VALUE X'00040076A0C1E2E4'.
007600      88  ASU03N       VALUE X'0000007740C1E2E4'.
007700      88  ASU03O       VALUE X'0000007840C1E2E4'.
007800      88  ASU03P_0001  VALUE X'0001007988C1E2E4'.
007900      88  ASU03P_0002  VALUE X'0002007990C1E2E4'.
008000      88  ASU03P_0003  VALUE X'0003007998C1E2E4'.
008100      88  ASU03P_0004  VALUE X'00040079A0C1E2E4'.
./ ADD NAME=ASUMDHEX 0138-17153-21188-0853-00673-00311-00000-APLKS   56
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUMDHEX.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUMDHEX
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to dump storage to LE message file.
001100* PURPOSE: Subroutine to receive a request block, data and
001200*          length from caller.  Call subroutine ASUDHHEX to
001300*          convert the data to horizontal hex format.  Then
001400*          call LE subroutine CEEMOUT to direct output to
001500*          LE message file.
001600*
001700* Called Routine(s):
001800*    ASUDHHEX
001900*    CEEMOUT
002000*
002100* INPUT: CALL 'ASUMDHEX'
002200*             USING ASCA-COMMAREA
002300*                   AS5DMPRB-REQUEST-BLOCK
002400*                   XS-DATA
002500*
002600*--------------------------------------------------------------*
002700     SKIP2
002800*--------------------------------------------------------------*
002900*               ** HISTORY OF REVISIONS **                     *
003000* DESCRIPTION                                           CHNGID *
003100* ____________________________________________________  _______*
003200*                                                              *
003300* 2017/06/10 New                                               *
003400*                                                              *
003500*--------------------------------------------------------------*
003600     SKIP2
003700 DATA DIVISION.
003800     SKIP2
003900 WORKING-STORAGE SECTION.
004000     SKIP1
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC. ".
004400     03  WS-PGMID       PIC X(08) VALUE 'ASUMDHEX'.
004500     SKIP1
004600 01  WS-DUMP-HEX.
004700     03  WS-DH-LINE-1.
004800         05  FILLER          PIC X(10)  VALUE 'ASUMDHEX: '.
004900         05  FILLER          PIC X(07)  VALUE 'NUMBER('.
005000         05  WS-DHL1-NBR     PIC Z(5)9(1).
005100         05  FILLER          PIC X(03)  VALUE ')'.
005200         05  FILLER          PIC X(07)  VALUE 'LENGTH('.
005300         05  WS-DHL1-LEN     PIC Z(4)9(1).
005400         05  FILLER          PIC X(03)  VALUE ')'.
005500         05  WS-DHL1-ADDR    PIC X(08)  VALUE SPACE.
005600         05  FILLER          PIC X(02)  VALUE SPACE.
005700         05  WS-DHL1-TITLE   PIC X(44)  VALUE SPACE.
005800         05  FILLER          PIC X(25)  VALUE SPACE.
005900     03  WS-DH-LINE-2.
006000         05  FILLER          PIC X(20)  VALUE SPACE.
006100         05  FILLER          PIC X(09)  VALUE '0+++++++'.
006200         05  FILLER          PIC X(10)  VALUE '4+++++++'.
006300         05  FILLER          PIC X(09)  VALUE '8+++++++'.
006400         05  FILLER          PIC X(11)  VALUE 'C+++++++'.
006500         05  FILLER          PIC X(16)  VALUE '0+++4+++8+++C+++'.
006600     03  WS-DH-LINE-3.
006700         05  FILLER          PIC X(10)  VALUE SPACE.
006800         05  WS-DHL3-ADDR    PIC X(08)  VALUE SPACE.
006900         05  FILLER          PIC X(02)  VALUE SPACE.
007000         05  WS-DHL3-DATA1   PIC X(08)  VALUE SPACE.
007100         05  FILLER          PIC X(01)  VALUE SPACE.
007200         05  WS-DHL3-DATA2   PIC X(08)  VALUE SPACE.
007300         05  FILLER          PIC X(02)  VALUE SPACE.
007400         05  WS-DHL3-DATA3   PIC X(08)  VALUE SPACE.
007500         05  FILLER          PIC X(01)  VALUE SPACE.
007600         05  WS-DHL3-DATA4   PIC X(08)  VALUE SPACE.
007700         05  FILLER          PIC X(02)  VALUE SPACE.
007800         05  FILLER          PIC X(01)  VALUE '*'.
007900         05  WS-DHL3-DATA5   PIC X(16)  VALUE SPACE.
008000         05  FILLER          PIC X(01)  VALUE '*'.
008100     SKIP1
008200 01  WS-HEX-VALUES      PIC X(16) VALUE '0123456789ABCDEF'.
008300 01  WS-BIT-NBR         PIC  9(9) BINARY SYNC VALUE 31.
008400     SKIP2
008500 LOCAL-STORAGE SECTION.
008600     SKIP1
008700 01  LS-AS-MODULE       PIC X(08) VALUE SPACE.
008800 01  FILLER.
008900     03  LS-LE-MSG-DEST      PIC S9(9) BINARY SYNC.
009000         SKIP1
009100     03  LS-DATA-LEN         PIC S9(9) BINARY SYNC.
009200     03  LS-DATA-LEN-1       PIC S9(9) BINARY SYNC.
009300     03  LS-CPOS             PIC S9(9) BINARY SYNC.
009400     03  LS-XPOS             PIC S9(9) BINARY SYNC.
009500     03  LS-XLEN             PIC S9(9) BINARY SYNC.
009600     03  LS-BIT-SHIFT        PIC S9(9) BINARY SYNC.
009700         SKIP1
009800     03  LS-ORIGIN-NBR       PIC 9(9) BINARY SYNC.
009900     03  LS-LINE-NBR         PIC 9(9) BINARY SYNC.
010000     03  LS-LINE-OFFSET      PIC 9(9) BINARY SYNC.
010100     SKIP1
010200 01  LS-USER-VSTR.
010300     03  LS-USER-VLEN   PIC S9(4) BINARY SYNC.
010400     03  LS-USER-VTXT.
010500         05  LS-USER-FTXT    PIC X(80).
010600         05  FILLER          PIC X(40).
010700     SKIP1
010800 01  LS-CONVERT-TO-HEX.
010900     03  LS-C2H-PTR     POINTER.
011000     03  LS-C2H-NBR     REDEFINES LS-C2H-PTR
011100                        PIC 9(9) BINARY SYNC.
011200     03  LS-C2H-HEXADDR REDEFINES LS-C2H-PTR
011300                        PIC X(04).
011400     03  LS-C2H-HWD     PIC S9(4) BINARY SYNC.
011500     03  FILLER REDEFINES LS-C2H-HWD.
011600         05  FILLER     PIC X(01).
011700         05  LS-C2H-LAST-BYTE     PIC X(01).
011800     03  LS-C2H-I       PIC S9(9) BINARY SYNC.
011900     03  LS-C2H-J       PIC S9(9) BINARY SYNC.
012000     03  LS-C2H-JP1     PIC S9(9) BINARY SYNC.
012100     03  LS-C2H-Q       PIC S9(9) BINARY SYNC.
012200     03  LS-C2H-QP1     PIC S9(9) BINARY SYNC.
012300     03  LS-C2H-R       PIC S9(9) BINARY SYNC.
012400     03  LS-C2H-RP1     PIC S9(9) BINARY SYNC.
012500     03  LS-C2H-STRING  PIC X(08).
012600     SKIP1
012700     COPY AS5LAREQ.
012800     SKIP1
012900     COPY AS5FDBK.
013000     SKIP2
013100 LINKAGE SECTION.
013200     SKIP1
013300     COPY AS5CA.
013400     SKIP1
013500     COPY AS5DMPRB.
013600 01  XS-DATA            PIC X(32767).
013700     EJECT
013800 PROCEDURE DIVISION USING
013900     ASCA-COMMAREA
014000     AS5DMPRB-REQUEST-BLOCK
014100     XS-DATA.
014200     SKIP2
014300     CONTINUE.
014400 0100-00-INIT.
014500     MOVE +2         TO LS-LE-MSG-DEST
014600
014700     INITIALIZE AS5LAREQ-OPTIONS
014800     INITIALIZE AS5LAREQ-SOURCE
014900
015000     IF AS5DMPRB-NUMBER = ZERO
015100       MOVE +1 TO AS5DMPRB-NUMBER
015200     END-IF
015300     IF AS5DMPRB-TITLE <= SPACE
015400       MOVE 'DUMP STORAGE' TO AS5DMPRB-TITLE
015500     END-IF
015600
015700*    convert address to printable hex
015800     SET LS-C2H-PTR TO ADDRESS OF XS-DATA
015900     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
016000     MOVE LS-C2H-STRING TO WS-DHL1-ADDR
016100     SKIP1
016200     CONTINUE.
016300 1000-00-MAINLINE.
016400*    print blank line
016500     MOVE +1                TO LS-USER-VLEN
016600     MOVE SPACE             TO LS-USER-VTXT
016700     PERFORM 8100-00-MESSAGE THRU 8100-99-END
016800
016900*    print heading line 1
017000     MOVE AS5DMPRB-NUMBER   TO WS-DHL1-NBR
017100     MOVE AS5DMPRB-DATA-LEN TO WS-DHL1-LEN
017200     MOVE AS5DMPRB-TITLE    TO WS-DHL1-TITLE
017300     MOVE +120              TO LS-USER-VLEN
017400     MOVE WS-DH-LINE-1      TO LS-USER-VTXT
017500     PERFORM 8100-00-MESSAGE THRU 8100-99-END
017600
017700*    print blank line
017800     MOVE +1                TO LS-USER-VLEN
017900     MOVE SPACE             TO LS-USER-VTXT
018000     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018100
018200*    print heading line 2 (scale line)
018300     MOVE +120              TO LS-USER-VLEN
018400     MOVE WS-DH-LINE-2      TO LS-USER-VTXT
018500     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018600
018700     IF AS5DMPRB-DATA-LEN <= ZERO
018800       GO TO 1000-99-END
018900     END-IF
019000
019100*    clear high order bit of address
019200*    WS-BIT-NBR is 0:31 counting right to left
019300     CALL 'CEESICLR'
019400          USING LS-C2H-NBR
019500                WS-BIT-NBR
019600**              AS5FDBK-COND-AREA
019700                OMITTED
019800                LS-C2H-NBR
019900
020000     MOVE LS-C2H-NBR TO LS-ORIGIN-NBR
020100
020200*    align storage address on previous 16 byte boundry
020300*    shift right -4 bits shift left +4 bits
020400     MOVE -4 TO LS-BIT-SHIFT
020500     CALL 'CEESISHF'
020600          USING LS-C2H-NBR
020700                LS-BIT-SHIFT
020800**              AS5FDBK-COND-AREA
020900                OMITTED
021000                LS-C2H-NBR
021100     MOVE +4 TO LS-BIT-SHIFT
021200     CALL 'CEESISHF'
021300          USING LS-C2H-NBR
021400                LS-BIT-SHIFT
021500**              AS5FDBK-COND-AREA
021600                OMITTED
021700                LS-C2H-NBR
021800
021900     MOVE LS-C2H-NBR TO LS-LINE-NBR
022000     COMPUTE LS-LINE-OFFSET = LS-ORIGIN-NBR - LS-LINE-NBR
022100
022200*    convert address to printable hex
022300     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
022400
022500*    initialize ASUDHHEX source field
022600     SET AS5LAREQ-SRC-PTR TO ADDRESS OF XS-DATA
022700
022800*    make length (-) so that src fld is treated as addr
022900     COMPUTE AS5LAREQ-SRC-LEN = AS5DMPRB-DATA-LEN * -1
023000
023100     MOVE AS5DMPRB-DATA-LEN TO LS-DATA-LEN
023200     MOVE +2                TO AS5LAREQ-TEMPLATE-CNT
023300
023400*    initialize ASUDHHEX result templates
023500     IF AS5DMPRB-DATA-LEN >= +128
023600       MOVE +128  TO AS5LAREQ-RSLT-STR-SIZE (1)
023700     ELSE
023800       MOVE AS5DMPRB-DATA-LEN TO AS5LAREQ-RSLT-STR-SIZE (1)
023900     END-IF
024000     COMPUTE AS5LAREQ-RSLT-STR-SIZE (2) =
024100          AS5LAREQ-RSLT-STR-SIZE (1) * 2
024200     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (1)
024300     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (2)
024400
024500     MOVE +1 TO AS5LAREQ-START
024600     PERFORM
024700          UNTIL LS-DATA-LEN <= ZERO
024800*      convert data area to horizontal hex 128-bytes at a time
024900       PERFORM 7000-00-CALL-ASUDHHEX THRU 7000-99-END
025000       MOVE AS5LAREQ-RSLT-STR-LEN (1) TO LS-DATA-LEN-1
025100       MOVE +1 TO LS-CPOS
025200                  LS-XPOS
025300       PERFORM
025400            UNTIL LS-DATA-LEN-1 <= ZERO
025500*        print data area 16-bytes at a time
025600         MOVE SPACE TO WS-DHL3-ADDR
025700                       WS-DHL3-DATA1
025800                       WS-DHL3-DATA2
025900                       WS-DHL3-DATA3
026000                       WS-DHL3-DATA4
026100                       WS-DHL3-DATA5
026200         MOVE LS-C2H-STRING TO WS-DHL3-ADDR
026300         EVALUATE TRUE
026400           WHEN LS-LINE-OFFSET > ZERO
026500*            print 1st partial detail line of dump
026600             PERFORM 5000-00-FORMAT-PARTIAL THRU 5000-99-END
026700             MOVE ZERO TO LS-LINE-OFFSET
026800             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
026900           WHEN LS-DATA-LEN-1 >= +16
027000*            print full detail line of dump
027100             MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:16)
027200                  TO WS-DHL3-DATA5
027300             ADD +16 TO LS-CPOS
027400             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
027500                  TO WS-DHL3-DATA1
027600             ADD +8 TO LS-XPOS
027700             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
027800                  TO WS-DHL3-DATA2
027900             ADD +8 TO LS-XPOS
028000             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
028100                  TO WS-DHL3-DATA3
028200             ADD +8 TO LS-XPOS
028300             MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
028400                  TO WS-DHL3-DATA4
028500             ADD +8 TO LS-XPOS
028600             ADD +16 TO AS5LAREQ-START
028700             SUBTRACT +16 FROM LS-DATA-LEN
028800                               LS-DATA-LEN-1
028900             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
029000           WHEN LS-DATA-LEN < +16 AND LS-DATA-LEN-1 < +16
029100*            print last partial line of dump
029200             MOVE AS5LAREQ-RSLT-STR-FLD (1)
029300                  (LS-CPOS:LS-DATA-LEN-1)
029400                  TO WS-DHL3-DATA5
029500             ADD LS-DATA-LEN-1 TO LS-CPOS
029600             EVALUATE TRUE
029700               WHEN LS-DATA-LEN-1 > +12
029800                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
029900                      TO WS-DHL3-DATA1
030000                 ADD +8 TO LS-XPOS
030100                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
030200                      TO WS-DHL3-DATA2
030300                 ADD +8 TO LS-XPOS
030400                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
030500                      TO WS-DHL3-DATA3
030600                 ADD +8 TO LS-XPOS
030700                 SUBTRACT +12 FROM LS-DATA-LEN
030800                                   LS-DATA-LEN-1
030900                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 2
031000                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
031100                      TO WS-DHL3-DATA4
031200                 ADD LS-DATA-LEN-1 TO LS-XPOS
031300                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
031400                                             LS-DATA-LEN-1
031500               WHEN LS-DATA-LEN-1 > +8
031600                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
031700                      TO WS-DHL3-DATA1
031800                 ADD +8 TO LS-XPOS
031900                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
032000                      TO WS-DHL3-DATA2
032100                 ADD +8 TO LS-XPOS
032200                 SUBTRACT +8 FROM LS-DATA-LEN
032300                                  LS-DATA-LEN-1
032400                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 2
032500                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
032600                      TO WS-DHL3-DATA3
032700                 ADD LS-DATA-LEN-1 TO LS-XPOS
032800                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
032900                                             LS-DATA-LEN-1
033000               WHEN LS-DATA-LEN-1 > +4
033100                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
033200                      TO WS-DHL3-DATA1
033300                 ADD +8 TO LS-XPOS
033400                 SUBTRACT +4 FROM LS-DATA-LEN
033500                                  LS-DATA-LEN-1
033600                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 2
033700                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
033800                      TO WS-DHL3-DATA2
033900                 ADD LS-DATA-LEN-1 TO LS-XPOS
034000                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
034100                                             LS-DATA-LEN-1
034200               WHEN LS-DATA-LEN-1 > ZERO
034300                 COMPUTE LS-XLEN = LS-DATA-LEN-1 * 2
034400                 MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:LS-XLEN)
034500                      TO WS-DHL3-DATA1
034600                 ADD LS-DATA-LEN-1 TO LS-XPOS
034700                 SUBTRACT LS-DATA-LEN-1 FROM LS-DATA-LEN
034800                                             LS-DATA-LEN-1
034900             END-EVALUATE
035000             PERFORM 5100-00-PRINT-DETAIL THRU 5100-99-END
035100           WHEN LS-DATA-LEN > +16 AND LS-DATA-LEN-1 < +16
035200*            do not have enough data to complete a detail line
035300*            loop back and get another chunk of data
035400             MOVE ZERO TO LS-DATA-LEN-1
035500           WHEN OTHER
035600*            failsafe
035700             MOVE ZERO TO LS-DATA-LEN
035800                          LS-DATA-LEN-1
035900         END-EVALUATE
036000       END-PERFORM
036100         MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (1)
036200                      AS5LAREQ-RSLT-STR-LEN (2)
036300         IF LS-DATA-LEN < +128
036400           MOVE LS-DATA-LEN TO AS5LAREQ-RSLT-STR-SIZE (1)
036500           COMPUTE AS5LAREQ-RSLT-STR-SIZE (2) =
036600                LS-DATA-LEN * 2
036700         END-IF
036800     END-PERFORM
036900     SKIP1
037000     CONTINUE.
037100 1000-99-END.
037200     EXIT.
037300     SKIP1
037400     GO TO 9000-00-TERMINATE
037500     SKIP2
037600     CONTINUE.
037700 5000-00-FORMAT-PARTIAL.
037800     EVALUATE LS-LINE-OFFSET
037900       WHEN +1
038000         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:15)
038100              TO WS-DHL3-DATA5 (2:15)
038200         ADD +15 TO LS-CPOS
038300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
038400              TO WS-DHL3-DATA1 (3:6)
038500         ADD +6 TO LS-XPOS
038600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
038700              TO WS-DHL3-DATA2
038800         ADD +8 TO LS-XPOS
038900         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
039000              TO WS-DHL3-DATA3
039100         ADD +8 TO LS-XPOS
039200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
039300              TO WS-DHL3-DATA4
039400         ADD +8 TO LS-XPOS
039500         ADD +15 TO AS5LAREQ-START
039600         SUBTRACT +15 FROM LS-DATA-LEN
039700                           LS-DATA-LEN-1
039800       WHEN +2
039900         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:14)
040000              TO WS-DHL3-DATA5 (3:14)
040100         ADD +14 TO LS-CPOS
040200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
040300              TO WS-DHL3-DATA1 (5:4)
040400         ADD +4 TO LS-XPOS
040500         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
040600              TO WS-DHL3-DATA2
040700         ADD +8 TO LS-XPOS
040800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
040900              TO WS-DHL3-DATA3
041000         ADD +8 TO LS-XPOS
041100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
041200              TO WS-DHL3-DATA4
041300         ADD +8 TO LS-XPOS
041400         ADD +14 TO AS5LAREQ-START
041500         SUBTRACT +14 FROM LS-DATA-LEN
041600                           LS-DATA-LEN-1
041700       WHEN +3
041800         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:13)
041900              TO WS-DHL3-DATA5 (4:13)
042000         ADD +13 TO LS-CPOS
042100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
042200              TO WS-DHL3-DATA1 (7:2)
042300         ADD +2 TO LS-XPOS
042400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
042500              TO WS-DHL3-DATA2
042600         ADD +8 TO LS-XPOS
042700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
042800              TO WS-DHL3-DATA3
042900         ADD +8 TO LS-XPOS
043000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
043100              TO WS-DHL3-DATA4
043200         ADD +8 TO LS-XPOS
043300         ADD +13 TO AS5LAREQ-START
043400         SUBTRACT +13 FROM LS-DATA-LEN
043500                           LS-DATA-LEN-1
043600       WHEN +4
043700         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:12)
043800              TO WS-DHL3-DATA5 (5:12)
043900         ADD +12 TO LS-CPOS
044000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
044100              TO WS-DHL3-DATA2
044200         ADD +8 TO LS-XPOS
044300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
044400              TO WS-DHL3-DATA3
044500         ADD +8 TO LS-XPOS
044600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
044700              TO WS-DHL3-DATA4
044800         ADD +8 TO LS-XPOS
044900         ADD +12 TO AS5LAREQ-START
045000         SUBTRACT +12 FROM LS-DATA-LEN
045100                           LS-DATA-LEN-1
045200       WHEN +5
045300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:11)
045400              TO WS-DHL3-DATA5 (6:11)
045500         ADD +11 TO LS-CPOS
045600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
045700              TO WS-DHL3-DATA2 (3:6)
045800         ADD +6 TO LS-XPOS
045900         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
046000              TO WS-DHL3-DATA3
046100         ADD +8 TO LS-XPOS
046200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
046300              TO WS-DHL3-DATA4
046400         ADD +8 TO LS-XPOS
046500         ADD +11 TO AS5LAREQ-START
046600         SUBTRACT +11 FROM LS-DATA-LEN
046700                           LS-DATA-LEN-1
046800       WHEN +6
046900         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:10)
047000              TO WS-DHL3-DATA5 (7:10)
047100         ADD +10 TO LS-CPOS
047200         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
047300              TO WS-DHL3-DATA2 (5:4)
047400         ADD +4 TO LS-XPOS
047500         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
047600              TO WS-DHL3-DATA3
047700         ADD +8 TO LS-XPOS
047800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
047900              TO WS-DHL3-DATA4
048000         ADD +8 TO LS-XPOS
048100         ADD +10 TO AS5LAREQ-START
048200         SUBTRACT +10 FROM LS-DATA-LEN
048300                           LS-DATA-LEN-1
048400       WHEN +7
048500         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:9)
048600              TO WS-DHL3-DATA5 (8:9)
048700         ADD +9 TO LS-CPOS
048800         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
048900              TO WS-DHL3-DATA2 (7:2)
049000         ADD +2 TO LS-XPOS
049100         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
049200              TO WS-DHL3-DATA3
049300         ADD +8 TO LS-XPOS
049400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
049500              TO WS-DHL3-DATA4
049600         ADD +8 TO LS-XPOS
049700         ADD +9 TO AS5LAREQ-START
049800         SUBTRACT +9 FROM LS-DATA-LEN
049900                          LS-DATA-LEN-1
050000       WHEN +8
050100         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:8)
050200              TO WS-DHL3-DATA5 (9:8)
050300         ADD +8 TO LS-CPOS
050400         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
050500              TO WS-DHL3-DATA3
050600         ADD +8 TO LS-XPOS
050700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
050800              TO WS-DHL3-DATA4
050900         ADD +8 TO LS-XPOS
051000         ADD +8 TO AS5LAREQ-START
051100         SUBTRACT +8 FROM LS-DATA-LEN
051200                          LS-DATA-LEN-1
051300       WHEN +9
051400         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:7)
051500              TO WS-DHL3-DATA5 (10:7)
051600         ADD +7 TO LS-CPOS
051700         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
051800              TO WS-DHL3-DATA3 (3:6)
051900         ADD +6 TO LS-XPOS
052000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
052100              TO WS-DHL3-DATA4
052200         ADD +8 TO LS-XPOS
052300         ADD +7 TO AS5LAREQ-START
052400         SUBTRACT +7 FROM LS-DATA-LEN
052500                          LS-DATA-LEN-1
052600       WHEN +10
052700         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:6)
052800              TO WS-DHL3-DATA5 (11:6)
052900         ADD +6 TO LS-CPOS
053000         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
053100              TO WS-DHL3-DATA3 (5:4)
053200         ADD +4 TO LS-XPOS
053300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
053400              TO WS-DHL3-DATA4
053500         ADD +8 TO LS-XPOS
053600         ADD +6 TO AS5LAREQ-START
053700         SUBTRACT +6 FROM LS-DATA-LEN
053800                          LS-DATA-LEN-1
053900       WHEN +11
054000         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:5)
054100              TO WS-DHL3-DATA5 (12:5)
054200         ADD +5 TO LS-CPOS
054300         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
054400              TO WS-DHL3-DATA3 (7:2)
054500         ADD +2 TO LS-XPOS
054600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
054700              TO WS-DHL3-DATA4
054800         ADD +8 TO LS-XPOS
054900         ADD +5 TO AS5LAREQ-START
055000         SUBTRACT +5 FROM LS-DATA-LEN
055100                          LS-DATA-LEN-1
055200       WHEN +12
055300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:4)
055400              TO WS-DHL3-DATA5 (13:4)
055500         ADD +4 TO LS-CPOS
055600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:8)
055700              TO WS-DHL3-DATA4
055800         ADD +8 TO LS-XPOS
055900         ADD +4 TO AS5LAREQ-START
056000         SUBTRACT +4 FROM LS-DATA-LEN
056100                          LS-DATA-LEN-1
056200       WHEN +13
056300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:3)
056400              TO WS-DHL3-DATA5 (14:3)
056500         ADD +3 TO LS-CPOS
056600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:6)
056700              TO WS-DHL3-DATA4 (3:6)
056800         ADD +6 TO LS-XPOS
056900         ADD +3 TO AS5LAREQ-START
057000         SUBTRACT +3 FROM LS-DATA-LEN
057100                          LS-DATA-LEN-1
057200       WHEN +14
057300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:2)
057400              TO WS-DHL3-DATA5 (15:2)
057500         ADD +2 TO LS-CPOS
057600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:4)
057700              TO WS-DHL3-DATA4 (5:4)
057800         ADD +4 TO LS-XPOS
057900         ADD +2 TO AS5LAREQ-START
058000         SUBTRACT +2 FROM LS-DATA-LEN
058100                          LS-DATA-LEN-1
058200       WHEN +15
058300         MOVE AS5LAREQ-RSLT-STR-FLD (1) (LS-CPOS:1)
058400              TO WS-DHL3-DATA5 (16:1)
058500         ADD +1 TO LS-CPOS
058600         MOVE AS5LAREQ-RSLT-STR-FLD (2) (LS-XPOS:2)
058700              TO WS-DHL3-DATA4 (7:2)
058800         ADD +2 TO LS-XPOS
058900         ADD +1 TO AS5LAREQ-START
059000         SUBTRACT +1 FROM LS-DATA-LEN
059100                          LS-DATA-LEN-1
059200     END-EVALUATE
059300     SKIP1
059400     CONTINUE.
059500 5000-99-END.
059600     SKIP2
059700     CONTINUE.
059800 5100-00-PRINT-DETAIL.
059900*    print horizontal hex detail line
060000     MOVE +120 TO LS-USER-VLEN
060100     MOVE WS-DH-LINE-3 TO LS-USER-VTXT
060200     PERFORM 8100-00-MESSAGE THRU 8100-99-END
060300*    recompute storage address
060400     ADD +16 TO LS-LINE-NBR
060500     MOVE LS-LINE-NBR TO LS-C2H-NBR
060600*    convert address to printable hex
060700     PERFORM 6000-00-CONVERT-2-HEX THRU 6000-99-END
060800     SKIP1
060900     CONTINUE.
061000 5100-99-END.
061100     SKIP2
061200     CONTINUE.
061300 6000-00-CONVERT-2-HEX.
061400     MOVE ZERO TO LS-C2H-HWD
061500     PERFORM
061600          VARYING LS-C2H-I FROM 1 BY 1 UNTIL LS-C2H-I > 4
061700       COMPUTE LS-C2H-J = 2 * LS-C2H-I - 1
061800       MOVE LS-C2H-HEXADDR (LS-C2H-I:1) TO LS-C2H-LAST-BYTE
061900       DIVIDE LS-C2H-HWD BY 16
062000            GIVING LS-C2H-Q
062100            REMAINDER LS-C2H-R
062200       COMPUTE LS-C2H-JP1 = LS-C2H-J + 1
062300       COMPUTE LS-C2H-QP1 = LS-C2H-Q + 1
062400       COMPUTE LS-C2H-RP1 = LS-C2H-R + 1
062500       MOVE WS-HEX-VALUES (LS-C2H-QP1:1)
062600            TO LS-C2H-STRING (LS-C2H-J:1)
062700       MOVE WS-HEX-VALUES (LS-C2H-RP1:1)
062800            TO LS-C2H-STRING (LS-C2H-JP1:1)
062900     END-PERFORM
063000     SKIP1
063100     CONTINUE.
063200 6000-99-END.
063300     EXIT.
063400     SKIP2
063500     CONTINUE.
063600 7000-00-CALL-ASUDHHEX.
063700     MOVE 'ASUDHHEX' TO LS-AS-MODULE
063800     CALL LS-AS-MODULE
063900          USING ASCA-COMMAREA
064000                AS5LAREQ-OPTIONS
064100                AS5LAREQ-SOURCE
064200                AS5LAREQ-TEMPLATE-CNT
064300                AS5LAREQ-RESULT-TEMPLATE (1)
064400                AS5LAREQ-RESULT-TEMPLATE (2)
064500**              AS5FDBK-COND-AREA
064600                OMITTED
064700     END-CALL
064800     SKIP1
064900     CONTINUE.
065000 7000-99-END.
065100     EXIT.
065200     SKIP2
065300     CONTINUE.
065400 8100-00-MESSAGE.
065500     CALL 'CEEMOUT'
065600          USING LS-USER-VSTR
065700                LS-LE-MSG-DEST
065800**              AS5FDBK-COND-AREA
065900                OMITTED
066000     END-CALL
066100
066200     INITIALIZE LS-USER-VSTR
066300     SKIP1
066400     CONTINUE.
066500 8100-99-END.
066600     EXIT.
066700     SKIP2
066800 9000-00-TERMINATE.
066900     GOBACK
067000     SKIP1
067100     CONTINUE.
067200 9000-99-END.
067300     EXIT.
./ ADD NAME=ASUMETXT 0122-17264-21293-1510-00187-01120-00000-APLKS   08
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASUMETXT.
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000600* SOURCE-COMPUTER.  IBM-390 WITH DEBUGGING MODE.
000700* ------------------------------------------------------------ *
000800* ARCHITECTURE SERVICES FACILITY
000900* DISPATCH ERROR MESSAGE(S)
001000* COBOL ROUTINE
001100*
001200* PROGRAM ID: ASUMETXT
001300*      TITLE: DISPATCH ERROR MESSAGE(S)
001400*       DATE: 2017/09/21
001500*
001600*       DESC: CALL LE MODULE CEECMI TO INSERT VARIABLE TEXT
001700*             INTO MESSAGES.  IF THE LE FDBK IS NOT PASSED
001800*             AND THE MESSAGE SEVERITY >= 2 THEN CALL LE
001900*             MODULE CEESGL TO SIGNAL THE CONDITION.  IF
002000*             THE LE FDBK IS PASSED THEN CALL LE MODULE
002100*             CEEMSG TO DISPATCH THE MESSAGE(S).
002200*
002300* ------------------------------------------------------------ *
002400***************************************************************
002500*  BCT CODE REVISION LIST
002600*     DATE     PROGRAMMER  DESCRIPTION
002700*--------------------------------------------------------------
002800*  2021/04/22   LKS  (CHG) FOLLOW LE MESSAGEING STANDARDS
002801*  2021/09/29   LKS  (CHG) ADD DEBUGGING LOGIC
002900***************************************************************
003000     SKIP2
003100 DATA DIVISION.
003200     SKIP2
003300 WORKING-STORAGE SECTION.
003400 01  FILLER.
003500     03  WS-EYE-CATCHER PIC X(25)
003600              VALUE "BUZZARD CREEK TECH, INC. ".
003700     03  WS-PGMID       PIC X(08) VALUE "ASUMETXT".
003800     SKIP2
003900     COPY AS5CTOK.
004000     SKIP2
004100 LOCAL-STORAGE SECTION.
004200 01  FILLER.
004300     03  LS-LEMSGDEST   PIC S9(9) BINARY SYNC.
004400     03  LS-LEISISEQ    PIC S9(9) BINARY SYNC.
004500     03  LS-QDATA       PIC S9(9) BINARY SYNC.
004600     03  LS-SUB1        PIC S9(4) BINARY SYNC.
004700     03  LS-SUB2        PIC S9(4) BINARY SYNC.
004800     SKIP2
004900 LINKAGE SECTION.
005000     COPY AS5CA.
005100     SKIP1
005200     COPY AS5MSGRB.
005300     SKIP1
005400     COPY AS5FDBK.
005500     EJECT
005600 PROCEDURE DIVISION USING
005700     ASCA-COMMAREA
005800     AS5MSGRB-REQUEST-BLOCK
005900     AS5FDBK-COND-AREA.
006000     SKIP2
006100 DECLARATIVES.
006200 0010-00-DEBUG SECTION.
006300     USE FOR DEBUGGING ON ALL PROCEDURES.
006400     SKIP1
006500 0010-10-DEBUG.
006600     DISPLAY DEBUG-ITEM
006700     SKIP1
006800     CONTINUE.
006900*0020-00-DEBUG SECTION.
007000**   USE FOR DEBUGGING ON PARAGRAPH_NAME
007100     SKIP1
007200*0020-10-DEBUG.
007300*    STATEMENTS ...
007400     SKIP1
007500     CONTINUE.
007600*0030-00-DEBUG SECTION.
007700**   USE FOR DEBUGGING ON ALL VARIABLE_NAME
007800     SKIP1
007900*0030-10-DEBUG.
008000*    STATEMENTS ...
008100     SKIP2
008200     CONTINUE.
008300 END DECLARATIVES.
008400     SKIP2
008500     CONTINUE.
008600 0100-00-MAINLINE SECTION.
008700     CONTINUE.
008800 0100-10-INITIAL.
008900     MOVE +2 TO LS-LEMSGDEST
009000     MOVE ZERO TO LS-LEISISEQ
009100     SKIP2
009200     CONTINUE.
009300 0200-00-MAINLINE.
009400     PERFORM
009500          VARYING AS5MSGRB-CTOK-NDX FROM +1 BY +1
009600          UNTIL AS5MSGRB-CTOK-NDX > 3
009700          OR AS5MSGRB-COND (AS5MSGRB-CTOK-NDX) = LOW-VALUE
009800       MOVE ZERO TO AS5MSGRB-ISI (AS5MSGRB-CTOK-NDX)
009900       PERFORM
010000            VARYING AS5MSGRB-ISI-NDX FROM +1 BY +1
010100            UNTIL AS5MSGRB-ISI-NDX > 8
010200*        INSERT MESSAGE VARIABLE DATA
010300         IF AS5MSGRB-ISI-VLEN
010400              (AS5MSGRB-CTOK-NDX AS5MSGRB-ISI-NDX)
010500              > ZERO
010600           SET LS-LEISISEQ TO AS5MSGRB-ISI-NDX
010700D          DISPLAY WS-PGMID
010800D               ":  SEV= " AS5MSGRB-SEVNBR
010900D               (AS5MSGRB-CTOK-NDX)
011000D               "  MSG= " AS5MSGRB-MSGNBR
011100D               (AS5MSGRB-CTOK-NDX)
011200D          SET LS-SUB1 TO AS5MSGRB-CTOK-NDX
011300D          SET LS-SUB2 TO AS5MSGRB-ISI-NDX
011400D          DISPLAY WS-PGMID
011500D               ":  ROW= " LS-SUB1
011600D               "  COL= " LS-SUB2
011700D               "  SEQ= " LS-LEISISEQ
011800D               "  VSTR= " AS5MSGRB-ISI-VSTR (AS5MSGRB-CTOK-NDX
011900D               AS5MSGRB-ISI-NDX)
012000           CALL 'CEECMI'
012100                USING AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
012200                      LS-LEISISEQ
012300                      AS5MSGRB-ISI-VSTR (AS5MSGRB-CTOK-NDX
012400                           AS5MSGRB-ISI-NDX)
012500                      AS5CTOK-OCTOKEN
012600**                    OMITTED
012700         END-IF
012800       END-PERFORM
012900       IF ADDRESS OF AS5FDBK-COND-AREA = NULL
013000            AND AS5MSGRB-SEVNBR (AS5MSGRB-CTOK-NDX) > 1
013100*        SIGNAL MESSAGE
013200D        DISPLAY WS-PGMID
013300D             ":  NO FDBK AREA PASSED, SIGNAL MSG"
013400         MOVE ZERO TO LS-QDATA
013500         CALL 'CEESGL'
013600              USING AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
013700                    LS-QDATA
013800                    AS5CTOK-OCTOKEN
013900**                  OMITTED
014000       END-IF
014100       IF ADDRESS OF AS5FDBK-COND-AREA = NULL
014200         CONTINUE
014300       ELSE
014400*        DISPATCH MESSAGE
014500D        DISPLAY WS-PGMID
014600D             ":  FDBK AREA PASSED, DISPATCH MSG"
014700         CALL 'CEEMSG'
014800              USING AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
014900                    LS-LEMSGDEST
015000                    AS5CTOK-OCTOKEN
015100**                  OMITTED
015200       END-IF
015300       IF AS5MSGRB-SEVNBR (AS5MSGRB-CTOK-NDX) > ZERO
015400D        DISPLAY WS-PGMID
015500D             ":  ASCA CURRENT MSG TOKEN BEFORE UPDATE = x"
015600D             FUNCTION HEX-OF(ASCA-CUR-CTOKN)
015700D        DISPLAY WS-PGMID
015800D             ":  COPY MSG TOKEN TO ASCA CURRENT TOKEN"
015900         MOVE AS5MSGRB-CTOKEN (AS5MSGRB-CTOK-NDX)
016000              TO ASCA-CUR-CTOKN
016100D        DISPLAY WS-PGMID
016200D             ":  ASCA CURRENT MSG TOKEN AFTER UPDATE = x"
016300D             FUNCTION HEX-OF(ASCA-CUR-CTOKN)
016400         IF ASCA-CUR-CTOKN (1:2) >= ASCA-MAX-CTOKN (1:2)
016500*          CURRENT SEVERITY >= MAX SEVERITY
016600D          DISPLAY WS-PGMID
016700D               ":  ASCA MAXIMUM MSG TOKEN BEFORE UPDATE = x"
016800D               FUNCTION HEX-OF(ASCA-MAX-CTOKN)
016900D          DISPLAY WS-PGMID
017000D               ":  COPY MSG TOKEN TO ASCA MAXIMUM TOKEN"
017100           MOVE ASCA-CUR-CTOKN TO ASCA-MAX-CTOKN
017200D          DISPLAY WS-PGMID
017300D               ":  ASCA MAXIMUM MSG TOKEN AFTER UPDATE = x"
017400D               FUNCTION HEX-OF(ASCA-MAX-CTOKN)
017500         END-IF
017600       END-IF
017700     END-PERFORM
017800     MOVE LOW-VALUE TO AS5MSGRB-REQUEST-BLOCK
017900     SKIP2
018000     CONTINUE.
018100 9000-00-RETURN.
018200*    * ------------------------------------------------------- *
018300*    * RETURN TO CALLER
018400*    * ------------------------------------------------------- *
018500     EXIT PROGRAM.
018600     GOBACK.
./ ADD NAME=ASUMVHEX 0147-16012-21188-0909-00310-00298-00000-APLKS   12
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. ASUMVHEX.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUMVHEX
000900*    APPL: Architecture Services Utility
001000*    DESC: Subroutine to dump storage to LE message file.
001100* PURPOSE: Subroutine to receive a request block, data and
001200*          length from caller.  Call subroutine ASUDVHEX to
001300*          convert the data to vertical hex format.  Then
001400*          call LE subroutine CEEMOUT to direct output to
001500*          LE message file.
001600*
001700* Called Routine(s):
001800*    ASUDVHEX
001900*    CEEMOUT
002000*
002100* INPUT: CALL 'ASUMVHEX'
002200*             USING ASCA-COMMAREA
002300*                   AS5DMPRB-REQUEST-BLOCK
002400*                   XS-DATA
002500*
002600*--------------------------------------------------------------*
002700     SKIP2
002800*--------------------------------------------------------------*
002900*               ** HISTORY OF REVISIONS **                     *
003000* DESCRIPTION                                           CHNGID *
003100* ____________________________________________________  _______*
003200*                                                              *
003300* 2016/08/25 New                                               *
003400*                                                              *
003500*--------------------------------------------------------------*
003600     SKIP2
003700 DATA DIVISION.
003800     SKIP2
003900 WORKING-STORAGE SECTION.
004000     SKIP1
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC.".
004400     03  WS-PGMID       PIC X(08) VALUE 'ASUMVHEX'.
004500     SKIP1
004600 01  WS-VERT-HEX.
004700     03  WS-VH-LINE-1.
004800         05  FILLER          PIC X(10)  VALUE 'ASUMVHEX: '.
004900         05  FILLER          PIC X(07)  VALUE 'NUMBER('.
005000         05  WS-VHL1-NBR     PIC Z(5)9(1).
005100         05  FILLER          PIC X(03)  VALUE ')'.
005200         05  FILLER          PIC X(07)  VALUE 'LENGTH('.
005300         05  WS-VHL1-LEN     PIC Z(4)9(1).
005400         05  FILLER          PIC X(03)  VALUE ')'.
005500         05  WS-VHL1-ADDR    PIC X(08)  VALUE SPACE.
005600         05  FILLER          PIC X(02)  VALUE SPACE.
005700         05  WS-VHL1-TITLE   PIC X(44)  VALUE SPACE.
005800         05  FILLER          PIC X(25)  VALUE SPACE.
005900     03  WS-VH-LINE-2.
006000         05  FILLER          PIC X(10)  VALUE SPACE.
006100         05  FILLER          PIC X(05)  VALUE 'CHAR'.
006200         05  WS-VHL2-DATA    PIC X(100) VALUE SPACE.
006300         05  FILLER          PIC X(05)  VALUE SPACE.
006400     03  WS-VH-LINE-3.
006500         05  FILLER          PIC X(10)  VALUE SPACE.
006600         05  FILLER          PIC X(05)  VALUE 'ZONE'.
006700         05  WS-VHL3-DATA    PIC X(100) VALUE SPACE.
006800         05  FILLER          PIC X(05)  VALUE SPACE.
006900     03  WS-VH-LINE-4.
007000         05  FILLER          PIC X(10)  VALUE SPACE.
007100         05  FILLER          PIC X(05)  VALUE 'NUMR'.
007200         05  WS-VHL4-DATA    PIC X(100) VALUE SPACE.
007300         05  FILLER          PIC X(05)  VALUE SPACE.
007400     03  WS-VH-LINE-5.
007500         05  FILLER          PIC X(11)  VALUE SPACE.
007600         05  WS-VHL5-POS     PIC Z(3)9(2).
007700         05  FILLER     PIC X(19) VALUE  '---+----1----+----2'.
007800         05  FILLER     PIC X(20) VALUE '----+----3----+----4'.
007900         05  FILLER     PIC X(20) VALUE '----+----5----+----6'.
008000         05  FILLER     PIC X(20) VALUE '----+----7----+----8'.
008100         05  FILLER     PIC X(20) VALUE '----+----9----+----0'.
008200         05  FILLER     PIC X(05) VALUE SPACE.
008300     SKIP1
008400 01  WS-HEX-VALUES      PIC X(16) VALUE '0123456789ABCDEF'.
008500     SKIP2
008600 LOCAL-STORAGE SECTION.
008700     SKIP1
008800 01  LS-AS-MODULE       PIC X(08) VALUE SPACE.
008900 01  FILLER.
009000     03  LS-LE-MSG-DEST      PIC S9(9) BINARY SYNC.
009100     SKIP1
009200     03  LS-DATA-LEN         PIC S9(9) BINARY SYNC.
009300     03  LS-DATA-POS         PIC S9(5) COMP-3.
009400     SKIP1
009500 01  LS-USER-VSTR.
009600     03  LS-USER-VLEN   PIC S9(4) BINARY SYNC.
009700     03  LS-USER-VTXT.
009800         05  LS-USER-FTXT    PIC X(80).
009900         05  FILLER          PIC X(40).
010000     SKIP1
010100 01  LS-CONVERT-TO-HEX.
010200     03  LS-C2H-PTR     POINTER.
010300     03  LS-C2H-NBR     REDEFINES LS-C2H-PTR
010400                        PIC 9(9) BINARY SYNC.
010500     03  LS-C2H-HEXADDR REDEFINES LS-C2H-PTR
010600                        PIC X(04).
010700     03  LS-C2H-HWD     PIC S9(4) BINARY SYNC.
010800     03  FILLER REDEFINES LS-C2H-HWD.
010900         05  FILLER     PIC X(01).
011000         05  LS-C2H-LAST-BYTE     PIC X(01).
011100     03  LS-C2H-I       PIC S9(9) BINARY SYNC.
011200     03  LS-C2H-J       PIC S9(9) BINARY SYNC.
011300     03  LS-C2H-JP1     PIC S9(9) BINARY SYNC.
011400     03  LS-C2H-Q       PIC S9(9) BINARY SYNC.
011500     03  LS-C2H-QP1     PIC S9(9) BINARY SYNC.
011600     03  LS-C2H-R       PIC S9(9) BINARY SYNC.
011700     03  LS-C2H-RP1     PIC S9(9) BINARY SYNC.
011800     03  LS-C2H-STRING  PIC X(08).
011900     SKIP1
012000     COPY AS5LAREQ.
012100     SKIP1
012200     COPY AS5FDBK.
012300     SKIP2
012400 LINKAGE SECTION.
012500     SKIP1
012600     COPY AS5CA.
012700     SKIP1
012800     COPY AS5DMPRB.
012900 01  XS-DATA            PIC X(32767).
013000     EJECT
013100 PROCEDURE DIVISION USING
013200     ASCA-COMMAREA
013300     AS5DMPRB-REQUEST-BLOCK
013400     XS-DATA.
013500     SKIP2
013600     CONTINUE.
013700 0100-00-INIT.
013800     MOVE 'ASUDVHEX' TO LS-AS-MODULE
013900     MOVE +1         TO LS-DATA-POS
014000     MOVE +2         TO LS-LE-MSG-DEST
014100
014200     INITIALIZE AS5LAREQ-OPTIONS
014300     INITIALIZE AS5LAREQ-SOURCE
014400
014500     IF AS5DMPRB-NUMBER = ZERO
014600       MOVE +1 TO AS5DMPRB-NUMBER
014700     END-IF
014800     IF AS5DMPRB-TITLE <= SPACE
014900       MOVE 'DUMP STORAGE' TO AS5DMPRB-TITLE
015000     END-IF
015100
015200*    convert address to printable hex
015300     SET LS-C2H-PTR TO ADDRESS OF XS-DATA
015400     MOVE ZERO TO LS-C2H-HWD
015500     PERFORM
015600          VARYING LS-C2H-I FROM 1 BY 1 UNTIL LS-C2H-I > 4
015700       COMPUTE LS-C2H-J = 2 * LS-C2H-I - 1
015800       MOVE LS-C2H-HEXADDR (LS-C2H-I:1) TO LS-C2H-LAST-BYTE
015900       DIVIDE LS-C2H-HWD BY 16
016000            GIVING LS-C2H-Q
016100            REMAINDER LS-C2H-R
016200       COMPUTE LS-C2H-JP1 = LS-C2H-J + 1
016300       COMPUTE LS-C2H-QP1 = LS-C2H-Q + 1
016400       COMPUTE LS-C2H-RP1 = LS-C2H-R + 1
016500       MOVE WS-HEX-VALUES (LS-C2H-QP1:1)
016600            TO LS-C2H-STRING (LS-C2H-J:1)
016700       MOVE WS-HEX-VALUES (LS-C2H-RP1:1)
016800            TO LS-C2H-STRING (LS-C2H-JP1:1)
016900     END-PERFORM
017000     SKIP2
017100     CONTINUE.
017200 1000-00-MAINLINE.
017300*    print blank line
017400     MOVE +1                TO LS-USER-VLEN
017500     MOVE SPACE             TO LS-USER-VTXT
017600     PERFORM 8100-00-MESSAGE THRU 8100-99-END
017700
017800*    print heading line
017900     MOVE AS5DMPRB-NUMBER   TO WS-VHL1-NBR
018000     MOVE AS5DMPRB-DATA-LEN TO WS-VHL1-LEN
018100     MOVE AS5DMPRB-TITLE    TO WS-VHL1-TITLE
018200     MOVE LS-C2H-STRING     TO WS-VHL1-ADDR
018300     MOVE +120              TO LS-USER-VLEN
018400     MOVE WS-VH-LINE-1      TO LS-USER-VTXT
018500     PERFORM 8100-00-MESSAGE THRU 8100-99-END
018600
018700*    print blank line
018800     MOVE +1                TO LS-USER-VLEN
018900     MOVE SPACE             TO LS-USER-VTXT
019000     PERFORM 8100-00-MESSAGE THRU 8100-99-END
019100
019200     IF AS5DMPRB-DATA-LEN <= ZERO
019300       GO TO 1000-99-END
019400     END-IF
019500
019600*    initialize ASUDVHEX source field
019700     SET AS5LAREQ-SRC-PTR   TO ADDRESS OF XS-DATA
019800
019900*    make length (-) so that src fld is treated as addr
020000     COMPUTE AS5LAREQ-SRC-LEN = AS5DMPRB-DATA-LEN * -1
020100
020200     MOVE LS-DATA-POS TO WS-VHL5-POS
020300     MOVE AS5DMPRB-DATA-LEN TO LS-DATA-LEN
020400     MOVE +3                TO AS5LAREQ-TEMPLATE-CNT
020500*    initialize ASUDVHEX result templates
020600     MOVE +100  TO AS5LAREQ-RSLT-STR-SIZE (1)
020700                   AS5LAREQ-RSLT-STR-SIZE (2)
020800                   AS5LAREQ-RSLT-STR-SIZE (3)
020900     MOVE SPACE TO AS5LAREQ-RSLT-STR-FLD (1)
021000                   AS5LAREQ-RSLT-STR-FLD (2)
021100                   AS5LAREQ-RSLT-STR-FLD (3)
021200
021300     MOVE +1 TO AS5LAREQ-START
021400     PERFORM
021500          UNTIL LS-DATA-LEN <= ZERO
021600*      convert data area to vertical hex 100-bytes at a time
021700       PERFORM 7000-00-CALL-ASUDVHEX THRU 7000-99-END
021800       ADD +100 TO AS5LAREQ-START
021900       MOVE SPACE TO WS-VHL2-DATA
022000                     WS-VHL3-DATA
022100                     WS-VHL4-DATA
022200*      print vertical hex char line
022300       MOVE AS5LAREQ-RSLT-STR-FLD (1)
022400            TO WS-VHL2-DATA
022500       MOVE +120 TO LS-USER-VLEN
022600       IF LS-DATA-LEN < 100
022700         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
022800       END-IF
022900       MOVE WS-VH-LINE-2 TO LS-USER-VTXT
023000       PERFORM 8100-00-MESSAGE THRU 8100-99-END
023100       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (1)
023200*      print vertical hex zone line
023300       MOVE AS5LAREQ-RSLT-STR-FLD (2)
023400            TO WS-VHL3-DATA
023500       MOVE +120         TO LS-USER-VLEN
023600       IF LS-DATA-LEN < 100
023700         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
023800       END-IF
023900       MOVE WS-VH-LINE-3 TO LS-USER-VTXT
024000       PERFORM 8100-00-MESSAGE THRU 8100-99-END
024100       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (2)
024200*      print vertical hex numbr line
024300       MOVE AS5LAREQ-RSLT-STR-FLD (3)
024400            TO WS-VHL4-DATA
024500       MOVE +120         TO LS-USER-VLEN
024600       IF LS-DATA-LEN < 100
024700         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
024800       END-IF
024900       MOVE WS-VH-LINE-4 TO LS-USER-VTXT
025000       PERFORM 8100-00-MESSAGE THRU 8100-99-END
025100       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (3)
025200*      print vertical hex scale line
025300       MOVE +120         TO LS-USER-VLEN
025400       IF LS-DATA-LEN < 100
025500         COMPUTE LS-USER-VLEN = LS-DATA-LEN + 15
025600       END-IF
025700       MOVE WS-VH-LINE-5 TO LS-USER-VTXT
025800       PERFORM 8100-00-MESSAGE THRU 8100-99-END
025900       MOVE ZERO TO AS5LAREQ-RSLT-STR-LEN (4)
026000*      do the bump
026100       ADD +100          TO LS-DATA-POS
026200       MOVE LS-DATA-POS  TO WS-VHL5-POS
026300       SUBTRACT +100 FROM LS-DATA-LEN
026400     END-PERFORM
026500     SKIP1
026600     CONTINUE.
026700 1000-99-END.
026800     EXIT.
026900
027000     GO TO 9000-00-TERMINATE
027100     SKIP2
027200     CONTINUE.
027300 7000-00-CALL-ASUDVHEX.
027400     CALL LS-AS-MODULE
027500          USING ASCA-COMMAREA
027600                AS5LAREQ-OPTIONS
027700                AS5LAREQ-SOURCE
027800                AS5LAREQ-TEMPLATE-CNT
027900                AS5LAREQ-RESULT-TEMPLATE (1)
028000                AS5LAREQ-RESULT-TEMPLATE (2)
028100                AS5LAREQ-RESULT-TEMPLATE (3)
028200**              AS5FDBK-COND-AREA
028300                OMITTED
028400     END-CALL
028500     SKIP1
028600     CONTINUE.
028700 7000-99-END.
028800     EXIT.
028900     SKIP2
029000     CONTINUE.
029100 8100-00-MESSAGE.
029200     CALL 'CEEMOUT'
029300          USING LS-USER-VSTR
029400                LS-LE-MSG-DEST
029500**              AS5FDBK-COND-AREA
029600                OMITTED
029700     END-CALL
029800
029900     INITIALIZE LS-USER-VSTR
030000     SKIP1
030100     CONTINUE.
030200 8100-99-END.
030300     EXIT.
030400     SKIP2
030500 9000-00-TERMINATE.
030600     GOBACK
030700     SKIP1
030800     CONTINUE.
030900 9000-99-END.
031000     EXIT.
./ ADD NAME=ASUP2DSB 0104-18186-18295-1431-00271-00269-00000-APLKS   01
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID.  ASUP2DSB.
000400 ENVIRONMENT DIVISION.
000500*--------------------------------------------------------------*
000600*               ** PROGRAM DESCRIPTION **
000700*
000800*    NAME: ASUP2DSB
000900*    APPL: Architecture Services Utility
001000*    DESC: Copy PARM statement to DD SYSUT2
001100* PURPOSE: Create control cards with resolved symbolic variables
001200*
001300* Called Routine(s):
001400*    CEEMOUT
001500*    CEE3ABD
001600*    CEE3PR2
001700*
001800* INPUT: PARM=(stmts)
001900*        Format: 'crdsep','card1...crdsep','card2...crdsep'
002000*
002100*--------------------------------------------------------------*
002200     SKIP2
002300*--------------------------------------------------------------*
002400*               ** HISTORY OF REVISIONS **                     *
002500* DESCRIPTION                                           CHNGID *
002600* ____________________________________________________  _______*
002700*                                                              *
002800* 2016/01/15 New                                               *
002900* 2017/03/20 LKS increase max output card count to 20          *
003000*                                                              *
003100*--------------------------------------------------------------*
003200     SKIP2
003300 INPUT-OUTPUT SECTION.
003400 FILE-CONTROL.
003500     SELECT CARD-FILE ASSIGN TO SYSUT2.
003600     SKIP2
003700 DATA DIVISION.
003800 FILE SECTION.
003900 FD  CARD-FILE
004000     BLOCK  CONTAINS 0 RECORDS
004100     RECORD CONTAINS 80 CHARACTERS.
004200 01  CARD-RECORD        PIC X(80).
004300     SKIP2
004400 WORKING-STORAGE SECTION.
004500 01  FILLER.
004600     03  WS-EYE-CATCHER PIC X(25)
004700              VALUE "BUZZARD CREEK TECH, INC. ".
004800     03  WS-PGMID       PIC X(08) VALUE "ASUP2DSB".
004900     SKIP1
005000 01  WS-LE-MSG-DEST     PIC S9(9) BINARY SYNC.
005100 01  WS-LE-ABEND        PIC S9(9) BINARY SYNC.
005200 01  WS-LE-CLEANUP      PIC S9(9) BINARY SYNC.
005300     SKIP1
005400 01  WS-MISC-STORAGE.
005500     03  WS-PARM-LENGTH      PIC S9(9) BINARY.
005600     03  WS-PARM-STMT.
005700         05  WS-PARM-LEN     PIC  9(4) BINARY.
005800         05  WS-PARM-TEXT    PIC X(256).
005900     03  WS-PARM-POS         PIC  9(4) BINARY.
006000     03  WS-STR-LEN          PIC  9(4) BINARY.
006100     03  WS-CARD-COUNT       PIC  9(4) BINARY.
006200     03  WS-CARD-SEP         PIC X(01).
006300     03  WS-CARD-OUT         PIC X(256)
006400         OCCURS 20
006500         INDEXED BY WS-CARD-IDX.
006600     SKIP1
006700 01  WS-USER-MSG-VSTRING.
006800     03  WS-USER-MSG-LEN     PIC S9(4) BINARY.
006900     03  WS-USER-MSG-TEXT    PIC X(120).
007000     SKIP1
007100 01  WS-LE-FDBK.
007200     02  WS-LE-COND-TOKEN-VALUE.
007300     COPY CEEIGZCT.
007400         03  WS-COND-ID.
007500             05  WS-LE-COND-SEV   PIC S9(4) BINARY.
007600             05  WS-LE-COND-MSGNO PIC S9(4) BINARY.
007700         03  WS-COND-SEV-CTL      PIC X.
007800         03  WS-COND-FACID        PIC X(03).
007900     02  WS-LE-I-S-INFO           PIC S9(9) BINARY.
008000     EJECT
008100 PROCEDURE DIVISION.
008200     SKIP2
008300     CONTINUE.
008400 0100-00-MAINLINE.
008500     MOVE +2 TO WS-LE-MSG-DEST
008600     INITIALIZE WS-MISC-STORAGE
008700                WS-USER-MSG-VSTRING
008800                WS-LE-FDBK
008900
009000*    CALL CEE3PR2 - Query PARM string long
009100     MOVE +258      TO WS-PARM-LENGTH
009200     CALL 'CEE3PR2'
009300          USING WS-PARM-LENGTH
009400                WS-PARM-STMT
009500**              WS-LE-FDBK
009600                OMITTED
009700     END-CALL
009800
009900     IF WS-PARM-LENGTH = ZERO
010000       STRING WS-PGMID DELIMITED SIZE
010100            " - PARM STATEMENT NOT SPECIFIED ON EXEC"
010200            DELIMITED SIZE
010300            INTO WS-USER-MSG-TEXT
010400       END-STRING
010500       PERFORM 8100-00-MESSAGE
010600            THRU 8100-99-END
010700       MOVE +101 TO WS-LE-ABEND
010800       PERFORM 8200-00-ABEND
010900            THRU 8200-99-END
011000     END-IF
011100
011200     STRING WS-PGMID DELIMITED SIZE
011300          " - PARM:"
011400          DELIMITED SIZE
011500          WS-PARM-TEXT(1:WS-PARM-LEN) DELIMITED SIZE
011600          INTO WS-USER-MSG-TEXT
011700     END-STRING
011800     PERFORM 8100-00-MESSAGE
011900          THRU 8100-99-END
012000
012100     PERFORM 2100-00-PARSE-PARMSTMT
012200          THRU 2100-99-END
012300
012400     PERFORM 3100-00-WRITE
012500          THRU 3100-99-END
012600
012700     STRING WS-PGMID DELIMITED SIZE
012800            " - ACTION SUCCESSFUL" DELIMITED SIZE
012900          INTO WS-USER-MSG-TEXT
013000     END-STRING
013100     PERFORM 8100-00-MESSAGE
013200          THRU 8100-99-END
013300
013400     GOBACK
013500     SKIP2
013600     CONTINUE.
013700 2100-00-PARSE-PARMSTMT.
013800     SET WS-CARD-IDX TO +1
013900     MOVE +1         TO WS-PARM-POS
014000
014100*    EXTRACT CARD DELIMITER CHARACTER FOR LATER PARSING
014200     UNSTRING WS-PARM-TEXT DELIMITED ","
014300          INTO WS-CARD-OUT (WS-CARD-IDX)
014400          COUNT WS-STR-LEN
014500          POINTER WS-PARM-POS
014600     END-UNSTRING
014700
014800     IF WS-STR-LEN > +1
014900       STRING WS-PGMID DELIMITED SIZE
015000            " - 1ST POSITION OF PARM IS NOT A DELIMITER"
015100            DELIMITED SIZE
015200            INTO WS-USER-MSG-TEXT
015300       END-STRING
015400       PERFORM 8100-00-MESSAGE
015500            THRU 8100-99-END
015600       MOVE +102 TO WS-LE-ABEND
015700       PERFORM 8200-00-ABEND
015800            THRU 8200-99-END
015900     END-IF
016000
016100     MOVE WS-PARM-TEXT(1:1)  TO WS-CARD-SEP
016200     MOVE SPACE              TO WS-CARD-OUT (WS-CARD-IDX)
016300
016400     CONTINUE.
016500 2100-20-PARSE.
016600*    SCAN FOR CARD DELIMITER CHARACTER
016700     UNSTRING WS-PARM-TEXT DELIMITED WS-CARD-SEP
016800          INTO WS-CARD-OUT (WS-CARD-IDX)
016900          COUNT WS-STR-LEN
017000          POINTER WS-PARM-POS
017100     END-UNSTRING
017200
017300     IF WS-STR-LEN > 80
017400       STRING WS-PGMID DELIMITED SIZE
017500            " - CARD LENGTH > 80"
017600            DELIMITED SIZE
017700            INTO WS-USER-MSG-TEXT
017800       END-STRING
017900       PERFORM 8100-00-MESSAGE
018000            THRU 8100-99-END
018100       MOVE +103 TO WS-LE-ABEND
018200       PERFORM 8200-00-ABEND
018300            THRU 8200-99-END
018400     END-IF
018500
018600     ADD +1 TO WS-CARD-COUNT
018700
018800     IF WS-PARM-POS >= WS-PARM-LEN
018900       GO TO 2100-99-END
019000     END-IF
019100
019200     SET WS-CARD-IDX UP BY +1
019300
019400*    PARSE PAST FOLLOWING COMMA
019500     UNSTRING WS-PARM-TEXT DELIMITED ","
019600          INTO WS-CARD-OUT (WS-CARD-IDX)
019700          COUNT WS-STR-LEN
019800          POINTER WS-PARM-POS
019900     END-UNSTRING
020000
020100     IF WS-PARM-POS >= WS-PARM-LEN
020200       GO TO 2100-99-END
020300     END-IF
020400
020500     IF WS-CARD-IDX > 20
020600       STRING WS-PGMID DELIMITED SIZE
020700            " - CAN NOT PROCESS MORE THAN 20 CONTROL CARDS"
020800            DELIMITED SIZE
020900            INTO WS-USER-MSG-TEXT
021000       END-STRING
021100       PERFORM 8100-00-MESSAGE
021200            THRU 8100-99-END
021300       MOVE +104 TO WS-LE-ABEND
021400       PERFORM 8200-00-ABEND
021500            THRU 8200-99-END
021600     END-IF
021700
021800     GO TO 2100-20-PARSE
021900
022000     CONTINUE.
022100 2100-99-END.
022200     EXIT.
022300     SKIP2
022400     CONTINUE.
022500 3100-00-WRITE.
022600     IF WS-CARD-COUNT = ZERO
022700       GO TO 3100-99-END
022800     END-IF
022900
023000     OPEN OUTPUT CARD-FILE
023100
023200     PERFORM
023300          VARYING WS-CARD-IDX FROM +1 BY +1
023400          UNTIL WS-CARD-IDX > WS-CARD-COUNT
023500       WRITE CARD-RECORD FROM WS-CARD-OUT (WS-CARD-IDX)
023600     END-PERFORM
023700
023800     CLOSE CARD-FILE
023900
024000     CONTINUE.
024100 3100-99-END.
024200     EXIT.
024300     SKIP2
024400     CONTINUE.
024500 8100-00-MESSAGE.
024600     MOVE +120 TO WS-USER-MSG-LEN
024700     CALL 'CEEMOUT'
024800          USING WS-USER-MSG-VSTRING
024900                WS-LE-MSG-DEST
025000**              WS-LE-FDBK
025100                OMITTED
025200     END-CALL
025300
025400     MOVE SPACE TO WS-USER-MSG-TEXT
025500
025600     CONTINUE.
025700 8100-99-END.
025800     EXIT.
025900     SKIP2
026000 8200-00-ABEND.
026100     MOVE +3        TO WS-LE-CLEANUP
026200     CALL 'CEE3ABD'
026300          USING WS-LE-ABEND
026400                WS-LE-CLEANUP
026500**              WS-LE-FDBK
026600                OMITTED
026700     END-CALL
026800
026900     CONTINUE.
027000 8200-99-END.
027100     EXIT.
./ ADD NAME=AS5CA    0123-15061-19289-1333-00051-00064-00000-APLKS   06
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5CA
000600*    *         TITLE: AS COMMUNICATION AREA
000700*    *          DATE: 2007/01/01
000800*    *          DESC:
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2007/01/01 CREATE
001200*    * 2017/09/22 CHANGE SOME LABELS, ADDED COMMENTS
001300*    * 2019/10/16 ADDED  SOME LABELS
001400*    * ------------------------------------------------------- *
001500 01  ASCA-COMMAREA.
001600     03  ASCA-DSLEN          PIC  9(4)  BINARY SYNC.
001700*                            MINIMUM LENGTH (9*4)=36
001800     03  ASCA-DSID           PIC  9(4)  BINARY SYNC.
001900       88  ASCA              VALUE 2562.
002000     03  ASCA-EYECATHER      PIC  X(8) VALUE "**ASCA**".
002100*    APPLICATION LE CONDITION TOKEN(S)
002200     03  ASCA-CUR-CTOKN      PIC X(12).
002300     03  ASCA-MAX-CTOKN      PIC X(12).
002400*    PLATFORM DEFAULTS
002500     03  ASCA-CUR-DOWNBR     PIC S9(9)  BINARY SYNC.
002600     03  ASCA-GMT-LSEC       COMP-2.
002700     03  ASCA-CUR-LSEC       COMP-2.
002800     03  ASCA-GMT-LDAYS      PIC S9(9)  BINARY SYNC.
002900     03  ASCA-CUR-LDAYS      PIC S9(9)  BINARY SYNC.
003000     03  ASCA-CUR-DTTM       PIC  X(17).
003100*                            GREGORIAN YYYYMMDDHHMISS999
003200     03  FILLER              PIC  X(13).
003300     03  ASCA-NATL-LANG      PIC  X(3).
003400     03  ASCA-CNTRY          PIC  X(2).
003500     03  ASCA-CNTRY-MDS      PIC  X(2).
003600*                            COUNTRY MONETARY DECIMAL SEPARATOR
003700     03  ASCA-CNTRY-MTS      PIC  X(2).
003800*                            COUNTRY MONETARY THOUSANDS SEPARATOR
003900     03  ASCA-CNTRY-MCS      PIC  X(4).
004000*                            COUNTRY MONETARY SYMBOL
004100     03  ASCA-INTL-MCS       PIC  X(3).
004200*                            INTL MONETARY SYMBOL
004300     03  ASCA-TIMESTAMP.
004400         05  ASCA-TS-LEN     PIC S9(4)  BINARY.
004500         05  ASCA-TS-FORMAT  PIC  X(80).
004600*    POINTERS TO CONTROL BLOCKS
004700     03  ASCA-ASAB-PTR       POINTER SYNC.
004800     03  FILLER              POINTER SYNC OCCURS 15 TIMES.
004900*    MISC. INFORMATION
005000     03  ASCA-INIT-SCRPT     PIC X(16).
005100     03  ASCA-INIT-PGM       PIC X(8).
./ ADD NAME=AS5CFDTA 0108-19247-20244-1012-00097-00014-00000-APLKS   16
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * CPYBK ID: AS5CFDTA
000600*    *    TITLE: MAP C/C++ FILEDATA
000700*    *     DATE: 2020/08/24
000800*    *
000900*    *     DESC: THIS COPYBOOK IS USED TO MAP THE
001000*    *           C/C++ FILEDATA RETURNED FROM FLDATA()
001100*    *
001200*    * ------------------------------------------------------- *
001300 01  AS5CFDTA-DATA-AREA.
001400     03  AS5CFDTA-ATTR1           PIC X(1).
001500*      MULTIPLE BITS MAY BE ON (FOLLOWING)
001600       88  AS5CFDTA-RECFM-F           VALUE X'80'.
001700       88  AS5CFDTA-RECFM-V           VALUE X'40'.
001800       88  AS5CFDTA-RECFM-U           VALUE X'20'.
001900       88  AS5CFDTA-RECFM-S           VALUE X'10'.
002000       88  AS5CFDTA-RECFM-B           VALUE X'08'.
002100       88  AS5CFDTA-RECFM-A           VALUE X'04'.
002200       88  AS5CFDTA-RECFM-M           VALUE X'02'.
002300       88  AS5CFDTA-DSORG-PO          VALUE X'01'.
002400*      MULTIPLE BITS MAY BE ON (PREVIOUS)
002500     03  AS5CFDTA-ATTR2           PIC X(1).
002600       88  AS5CFDTA-DSORG-PDSMEM      VALUE X'80'.
002700       88  AS5CFDTA-DSORG-PDSDIR      VALUE X'40'.
002800       88  AS5CFDTA-DSORG-PS          VALUE X'20'.
002900       88  AS5CFDTA-DSORG-CONCAT      VALUE X'10'.
003000       88  AS5CFDTA-DSORG-MEMORY      VALUE X'08'.
003100       88  AS5CFDTA-DSORG-HIPER       VALUE X'04'.
003200       88  AS5CFDTA-DSORG-TEMP        VALUE X'02'.
003300       88  AS5CFDTA-DSORG-VSAM        VALUE X'01'.
003400     03  AS5CFDTA-ATTR3           PIC X(1).
003500       88  AS5CFDTA-DSORG-HFS         VALUE X'80'.
003600*      MULTIPLE BITS MAY BE ON (FOLLOWING)
003700       88  AS5CFDTA-OPEN-BLOCK        VALUE X'60'.
003800       88  AS5CFDTA-OPEN-RECORD       VALUE X'40'.
003900       88  AS5CFDTA-OPEN-BINARY       VALUE X'20'.
004000*      88  AS5CFDTA-OPEN-TEXT         VALUE NOT X'60'.
004100       88  AS5CFDTA-MODE-UPDATE       VALUE X'10'.
004200       88  AS5CFDTA-MODE-APPEND       VALUE X'08'.
004300       88  AS5CFDTA-MODE-WRITE        VALUE X'04'.
004400       88  AS5CFDTA-MODE-READ         VALUE X'02'.
004500       88  AS5CFDTA-DSORG-PDSE        VALUE X'01'.
004600*      MULTIPLE BITS MAY BE ON (PREVIOUS)
004700     03  AS5CFDTA-ATTR4           PIC X(1).
004800       88  AS5CFDTA-VSAM-NORLS        VALUE X'80'.
004900       88  AS5CFDTA-VSAM-RLS          VALUE X'40'.
005000       88  AS5CFDTA-VSAM-TVS          VALUE X'20'.
005100       88  AS5CFDTA-VSAM-EA           VALUE X'10'.
005200       88  AS5CFDTA-ALLOC-B           VALUE X'08'.
005300       88  AS5CFDTA-NULL45            VALUE X'04'.
005400       88  AS5CFDTA-NULL46            VALUE X'02'.
005500       88  AS5CFDTA-NULL47            VALUE X'01'.
005600     03  AS5CFDTA-DEVICE          PIC X(1).
005700       88  AS5CFDTA-DEVICE-DISK       VALUE X'00'.
005800       88  AS5CFDTA-DEVICE-TERMINAL   VALUE X'01'.
005900       88  AS5CFDTA-DEVICE-PRINT      VALUE X'02'.
006000       88  AS5CFDTA-DEVICE-TAPE       VALUE X'03'.
006100       88  AS5CFDTA-DEVICE-TDQ        VALUE X'05'.
006200       88  AS5CFDTA-DEVICE-DUMMY      VALUE X'06'.
006300       88  AS5CFDTA-DEVICE-MSGFILE    VALUE X'07'.
006400       88  AS5CFDTA-DEVICE-MEMORY     VALUE X'08'.
006500       88  AS5CFDTA-DEVICE-HFS        VALUE X'09'.
006600       88  AS5CFDTA-DEVICE-HIPERSPACE VALUE X'0A'.
006700       88  AS5CFDTA-DEVICE-MSGRTN     VALUE X'0B'.
006800       88  AS5CFDTA-DEVICE-OTHER      VALUE HIGH-VALUE.
006900     03  AS5CFDTA-BLKSZ           PIC 9(9) COMP-5 SYNC.
007000     03  AS5CFDTA-LRECL           PIC 9(9) COMP-5 SYNC.
007100     03  AS5CFDTA-AMORG           PIC 9(2) COMP-5 SYNC.
007200       88  AS5CFDTA-AMORG-NOTVSAM     VALUE 0.
007300       88  AS5CFDTA-AMORG-ESDS        VALUE 1.
007400       88  AS5CFDTA-AMORG-KSDS        VALUE 2.
007500       88  AS5CFDTA-AMORG-RRDS        VALUE 3.
007600       88  AS5CFDTA-AMORG-PATHESDS    VALUE 4.
007700       88  AS5CFDTA-AMORG-PATHKSDS    VALUE 5.
007800*    ONLY VALID FOR DSORG=PS|PO (FOLLOWING)
007900     03  AS5CFDTA-ACCMTHD         PIC X(1).
008000       88  AS5CFDTA-AM-UNSPEC         VALUE X'00'.
008100       88  AS5CFDTA-AM-BSAM           VALUE X'01'.
008200       88  AS5CFDTA-AM-QSAM           VALUE X'02'.
008300     03  AS5CFDTA-SEEK-SW         PIC X(1).
008400       88  AS5CFDTA-AM-BSAM-NOSW      VALUE X'00'.
008500       88  AS5CFDTA-AM-BSAM-UPDATE    VALUE X'01'.
008600       88  AS5CFDTA-AM-BSAM-WRITE     VALUE X'02'.
008700       88  AS5CFDTA-AM-BSAM-FBSAPND   VALUE X'03'.
008800       88  AS5CFDTA-AM-BSAM-LRECLX    VALUE X'04'.
008900       88  AS5CFDTA-AM-BSAM-PODIR     VALUE X'05'.
009000       88  AS5CFDTA-AM-BSAM-POINDIR   VALUE X'06'.
009100*    ONLY VALID FOR DSORG=PS|PO (PREVIOUS)
009200*    ONLY VALID FOR DSORG=VSAM (FOLLOWING)
009300     03  AS5CFDTA-VSAM-KEYLEN     PIC 9(9) COMP-5 SYNC.
009400     03  AS5CFDTA-VSAM-RKP        PIC 9(9) COMP-5 SYNC.
009500*    ONLY VALID FOR DSORG=VSAM (PREVIOUS)
009600     03  AS5CFDTA-DSNAME-PTR      POINTER SYNC.
009700     03  FILLER                   PIC X(4).
./ ADD NAME=AS5CTOK  0113-15062-17242-1356-00039-00017-00000-APLKS   26
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5CTOK
000600*    *         TITLE: LE CONDITION TOKEN WORK AREA
000700*    *          DATE: 2015/03/02
000800*    *          DESC: INPUT DATA FOR LE CEENCOD MODULE
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2015/03/02 CREATE
001200*    * 2017/08/30 REMOVED SOME FIELDS
001300*    * ------------------------------------------------------- *
001400 01  AS5CTOK-WORK-AREA.
001500     03  AS5CTOK-ICONDTOK.
001600         05  AS5CTOK-ICONDID.
001700             07  AS5CTOK-ISEVNBR  PIC S9(4) BINARY.
001800             07  AS5CTOK-IMSGNBR  PIC S9(4) BINARY.
001900         05  AS5CTOK-ICASE        PIC S9(4) BINARY.
002000         05  AS5CTOK-ISEVERITY    PIC S9(4) BINARY.
002100           88 AS5CTOK-ISEV-I          VALUE ZERO.
002200           88 AS5CTOK-ISEV-W          VALUE +1.
002300           88 AS5CTOK-ISEV-E          VALUE +2.
002400           88 AS5CTOK-ISEV-S          VALUE +3.
002500           88 AS5CTOK-ISEV-C          VALUE +4.
002600         05  AS5CTOK-ICONTROL     PIC S9(4) BINARY.
002700           88 AS5CTOK-ICTL-USER       VALUE ZERO.
002800           88 AS5CTOK-ICTL-IBM        VALUE +1.
002900         05  AS5CTOK-IFACILITY    PIC X(03).
003000         05  AS5CTOK-IISINFO      PIC S9(9) BINARY.
003100     03  AS5CTOK-OCTOKEN.
003200         05  AS5CTOK-COND-VALUE.
003300             07  AS5CTOK-COND          PIC  X(08).
003400             07  FILLER REDEFINES AS5CTOK-COND.
003500                 09  AS5CTOK-SEVNBR    PIC S9(4) BINARY.
003600                 09  AS5CTOK-MSGNBR    PIC S9(4) BINARY.
003700                 09  AS5CTOK-CASE      PIC  X(01).
003800                 09  AS5CTOK-FACID     PIC  X(03).
003900         05  AS5CTOK-ISI               PIC S9(9) BINARY.
./ ADD NAME=AS5DMPRB 0101-16243-17158-1346-00004-00004-00000-APLKS   53
017600 01  AS5DMPRB-REQUEST-BLOCK.
017700     03  AS5DMPRB-DATA-LEN    PIC 9(9) BINARY.
017800     03  AS5DMPRB-NUMBER      PIC 9(9) BINARY.
017900     03  AS5DMPRB-TITLE       PIC X(44).
./ ADD NAME=AS5ENVCA 0119-17242-20276-1532-00881-00684-00000-APLKS   22
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * CPYBK ID: AS5ENVCA
000600*    *    TITLE: MAP QUERY ENVIRONMENT COMMUNICATION AREA
000700*    *     DATE: 2017/08/31
000800*    *
000900*    *     DESC: THIS COPYBOOK IS USED TO MAP THE COMM AREA
001000*    *           FOR PROGRAM(S) ASU3QEIB
001100*    *
001200*    * ------------------------------------------------------- *
001300***************************************************************
001400*     BCT CUSTOM CODE REVISION LIST
001500*     DATE     PROGRAMMER  DESCRIPTION
001600*--------------------------------------------------------------
001700*  YYYY/MM/DD   XXXXXXXX
001800*  2018/09/20   lks        z/OS 1.13
001900*  2019/08/26   lks        z/OS 2.2
002000*  2020/10/02   lks  add JSCB
002100***************************************************************
002200 01  AS5ENVCA-COMMAREA.
002300     03  AS5ENVCA-PSA-AREA.
002400         05  AS5ENVCA-PSA-ARCH.
002500             07  AS5ENVCA-PSA-ARCH-BYTE0.
002600                 09  AS5ENVCA-ARCB0-HEX     PIC X(01).
002700                 09  FILLER                 PIC X(07).
002800                 09  AS5ENVCA-ARCB0-X01     PIC X(01).
002900     03  FILLER              COMP-2 SYNC.
003000     03  AS5ENVCA-PSAE-AREA.
003100         05  AS5ENVCA-PSAE-FACLST.
003200*            FACILITY BYTES 0:15
003300             07  AS5ENVCA-PSAE-FAC-BYTE0.
003400                 09  AS5ENVCA-FACB0-HEX     PIC X(01).
003500                 09  AS5ENVCA-FACB0-X80     PIC X(01).
003600                 09  AS5ENVCA-FACB0-X40     PIC X(01).
003700                 09  AS5ENVCA-FACB0-X20     PIC X(01).
003800                 09  AS5ENVCA-FACB0-X10     PIC X(01).
003900                 09  AS5ENVCA-FACB0-X08     PIC X(01).
004000                 09  AS5ENVCA-FACB0-X04     PIC X(01).
004100                 09  AS5ENVCA-FACB0-X02     PIC X(01).
004200                 09  AS5ENVCA-FACB0-X01     PIC X(01).
004300             07  AS5ENVCA-PSAE-BYTE1.
004400                 09  AS5ENVCA-FACB1-HEX     PIC X(01).
004500                 09  AS5ENVCA-FACB1-X80     PIC X(01).
004600                 09  AS5ENVCA-FACB1-X40     PIC X(01).
004700                 09  AS5ENVCA-FACB1-X20     PIC X(01).
004800                 09  AS5ENVCA-FACB1-X10     PIC X(01).
004900                 09  AS5ENVCA-FACB1-X08     PIC X(01).
005000                 09  AS5ENVCA-FACB1-X04     PIC X(01).
005100                 09  AS5ENVCA-FACB1-X02     PIC X(01).
005200                 09  AS5ENVCA-FACB1-X01     PIC X(01).
005300             07  AS5ENVCA-PSAE-BYTE2.
005400                 09  AS5ENVCA-FACB2-HEX     PIC X(01).
005500                 09  AS5ENVCA-FACB2-X80     PIC X(01).
005600                 09  AS5ENVCA-FACB2-X40     PIC X(01).
005700                 09  AS5ENVCA-FACB2-X20     PIC X(01).
005800                 09  AS5ENVCA-FACB2-X10     PIC X(01).
005900                 09  AS5ENVCA-FACB2-X08     PIC X(01).
006000                 09  AS5ENVCA-FACB2-X04     PIC X(01).
006100                 09  AS5ENVCA-FACB2-X02     PIC X(01).
006200                 09  AS5ENVCA-FACB2-X01     PIC X(01).
006300             07  AS5ENVCA-PSAE-BYTE3.
006400                 09  AS5ENVCA-FACB3-HEX     PIC X(01).
006500                 09  AS5ENVCA-FACB3-X80     PIC X(01).
006600                 09  AS5ENVCA-FACB3-X40     PIC X(01).
006700                 09  AS5ENVCA-FACB3-X20     PIC X(01).
006800                 09  AS5ENVCA-FACB3-X10     PIC X(01).
006900                 09  AS5ENVCA-FACB3-X08     PIC X(01).
007000                 09  AS5ENVCA-FACB3-X04     PIC X(01).
007100                 09  AS5ENVCA-FACB3-X02     PIC X(01).
007200                 09  AS5ENVCA-FACB3-X01     PIC X(01).
007300             07  AS5ENVCA-PSAE-BYTE4.
007400                 09  AS5ENVCA-FACB4-HEX     PIC X(01).
007500                 09  AS5ENVCA-FACB4-X80     PIC X(01).
007600                 09  AS5ENVCA-FACB4-X40     PIC X(01).
007700                 09  AS5ENVCA-FACB4-X20     PIC X(01).
007800                 09  AS5ENVCA-FACB4-X10     PIC X(01).
007900                 09  AS5ENVCA-FACB4-X08     PIC X(01).
008000                 09  AS5ENVCA-FACB4-X04     PIC X(01).
008100                 09  AS5ENVCA-FACB4-X02     PIC X(01).
008200                 09  AS5ENVCA-FACB4-X01     PIC X(01).
008300             07  AS5ENVCA-PSAE-BYTE5.
008400                 09  AS5ENVCA-FACB5-HEX     PIC X(01).
008500                 09  AS5ENVCA-FACB5-X80     PIC X(01).
008600                 09  AS5ENVCA-FACB5-X40     PIC X(01).
008700                 09  AS5ENVCA-FACB5-X20     PIC X(01).
008800                 09  AS5ENVCA-FACB5-X10     PIC X(01).
008900                 09  AS5ENVCA-FACB5-X08     PIC X(01).
009000                 09  AS5ENVCA-FACB5-X04     PIC X(01).
009100                 09  AS5ENVCA-FACB5-X02     PIC X(01).
009200                 09  AS5ENVCA-FACB5-X01     PIC X(01).
009300             07  AS5ENVCA-PSAE-BYTE6.
009400                 09  AS5ENVCA-FACB6-HEX     PIC X(01).
009500                 09  AS5ENVCA-FACB6-X80     PIC X(01).
009600                 09  AS5ENVCA-FACB6-X40     PIC X(01).
009700                 09  AS5ENVCA-FACB6-X20     PIC X(01).
009800                 09  AS5ENVCA-FACB6-X10     PIC X(01).
009900                 09  AS5ENVCA-FACB6-X08     PIC X(01).
010000                 09  AS5ENVCA-FACB6-X04     PIC X(01).
010100                 09  AS5ENVCA-FACB6-X02     PIC X(01).
010200                 09  AS5ENVCA-FACB6-X01     PIC X(01).
010300             07  AS5ENVCA-PSAE-BYTE7.
010400                 09  AS5ENVCA-FACB7-HEX     PIC X(01).
010500                 09  AS5ENVCA-FACB7-X80     PIC X(01).
010600                 09  AS5ENVCA-FACB7-X40     PIC X(01).
010700                 09  AS5ENVCA-FACB7-X20     PIC X(01).
010800                 09  AS5ENVCA-FACB7-X10     PIC X(01).
010900                 09  AS5ENVCA-FACB7-X08     PIC X(01).
011000                 09  AS5ENVCA-FACB7-X04     PIC X(01).
011100                 09  AS5ENVCA-FACB7-X02     PIC X(01).
011200                 09  AS5ENVCA-FACB7-X01     PIC X(01).
011300             07  AS5ENVCA-PSAE-BYTE8.
011400                 09  AS5ENVCA-FACB8-HEX     PIC X(01).
011500                 09  AS5ENVCA-FACB8-X80     PIC X(01).
011600                 09  AS5ENVCA-FACB8-X40     PIC X(01).
011700                 09  AS5ENVCA-FACB8-X20     PIC X(01).
011800                 09  AS5ENVCA-FACB8-X10     PIC X(01).
011900                 09  AS5ENVCA-FACB8-X08     PIC X(01).
012000                 09  AS5ENVCA-FACB8-X04     PIC X(01).
012100                 09  AS5ENVCA-FACB8-X02     PIC X(01).
012200                 09  AS5ENVCA-FACB8-X01     PIC X(01).
012300             07  AS5ENVCA-PSAE-BYTE9.
012400                 09  AS5ENVCA-FACB9-HEX     PIC X(01).
012500                 09  AS5ENVCA-FACB9-X80     PIC X(01).
012600                 09  AS5ENVCA-FACB9-X40     PIC X(01).
012700                 09  AS5ENVCA-FACB9-X20     PIC X(01).
012800                 09  AS5ENVCA-FACB9-X10     PIC X(01).
012900                 09  AS5ENVCA-FACB9-X08     PIC X(01).
013000                 09  AS5ENVCA-FACB9-X04     PIC X(01).
013100                 09  AS5ENVCA-FACB9-X02     PIC X(01).
013200                 09  AS5ENVCA-FACB9-X01     PIC X(01).
013300             07  AS5ENVCA-PSAE-BYTEA.
013400                 09  AS5ENVCA-FACBA-HEX     PIC X(01).
013500                 09  AS5ENVCA-FACBA-X80     PIC X(01).
013600                 09  AS5ENVCA-FACBA-X40     PIC X(01).
013700                 09  AS5ENVCA-FACBA-X20     PIC X(01).
013800                 09  AS5ENVCA-FACBA-X10     PIC X(01).
013900                 09  AS5ENVCA-FACBA-X08     PIC X(01).
014000                 09  AS5ENVCA-FACBA-X04     PIC X(01).
014100                 09  AS5ENVCA-FACBA-X02     PIC X(01).
014200                 09  AS5ENVCA-FACBA-X01     PIC X(01).
014300             07  AS5ENVCA-PSAE-BYTEB.
014400                 09  AS5ENVCA-FACBB-HEX     PIC X(01).
014500                 09  AS5ENVCA-FACBB-X80     PIC X(01).
014600                 09  AS5ENVCA-FACBB-X40     PIC X(01).
014700                 09  AS5ENVCA-FACBB-X20     PIC X(01).
014800                 09  AS5ENVCA-FACBB-X10     PIC X(01).
014900                 09  AS5ENVCA-FACBB-X08     PIC X(01).
015000                 09  AS5ENVCA-FACBB-X04     PIC X(01).
015100                 09  AS5ENVCA-FACBB-X02     PIC X(01).
015200                 09  AS5ENVCA-FACBB-X01     PIC X(01).
015300             07  AS5ENVCA-PSAE-BYTEC.
015400                 09  AS5ENVCA-FACBC-HEX     PIC X(01).
015500                 09  AS5ENVCA-FACBC-X80     PIC X(01).
015600                 09  AS5ENVCA-FACBC-X40     PIC X(01).
015700                 09  AS5ENVCA-FACBC-X20     PIC X(01).
015800                 09  AS5ENVCA-FACBC-X10     PIC X(01).
015900                 09  AS5ENVCA-FACBC-X08     PIC X(01).
016000                 09  AS5ENVCA-FACBC-X04     PIC X(01).
016100                 09  AS5ENVCA-FACBC-X02     PIC X(01).
016200                 09  AS5ENVCA-FACBC-X01     PIC X(01).
016300             07  AS5ENVCA-PSAE-BYTED.
016400                 09  AS5ENVCA-FACBD-HEX     PIC X(01).
016500                 09  AS5ENVCA-FACBD-X80     PIC X(01).
016600                 09  AS5ENVCA-FACBD-X40     PIC X(01).
016700                 09  AS5ENVCA-FACBD-X20     PIC X(01).
016800                 09  AS5ENVCA-FACBD-X10     PIC X(01).
016900                 09  AS5ENVCA-FACBD-X08     PIC X(01).
017000                 09  AS5ENVCA-FACBD-X04     PIC X(01).
017100                 09  AS5ENVCA-FACBD-X02     PIC X(01).
017200                 09  AS5ENVCA-FACBD-X01     PIC X(01).
017300             07  AS5ENVCA-PSAE-BYTEE.
017400                 09  AS5ENVCA-FACBE-HEX     PIC X(01).
017500                 09  AS5ENVCA-FACBE-X80     PIC X(01).
017600                 09  AS5ENVCA-FACBE-X40     PIC X(01).
017700                 09  AS5ENVCA-FACBE-X20     PIC X(01).
017800                 09  AS5ENVCA-FACBE-X10     PIC X(01).
017900                 09  AS5ENVCA-FACBE-X08     PIC X(01).
018000                 09  AS5ENVCA-FACBE-X04     PIC X(01).
018100                 09  AS5ENVCA-FACBE-X02     PIC X(01).
018200                 09  AS5ENVCA-FACBE-X01     PIC X(01).
018300             07  AS5ENVCA-PSAE-BYTEF.
018400                 09  AS5ENVCA-FACBF-HEX     PIC X(01).
018500                 09  AS5ENVCA-FACBF-X80     PIC X(01).
018600                 09  AS5ENVCA-FACBF-X40     PIC X(01).
018700                 09  AS5ENVCA-FACBF-X20     PIC X(01).
018800                 09  AS5ENVCA-FACBF-X10     PIC X(01).
018900                 09  AS5ENVCA-FACBF-X08     PIC X(01).
019000                 09  AS5ENVCA-FACBF-X04     PIC X(01).
019100                 09  AS5ENVCA-FACBF-X02     PIC X(01).
019200                 09  AS5ENVCA-FACBF-X01     PIC X(01).
019300         05  AS5ENVCA-PSAE-FACLST1.
019400*            FACILITY BYTES 16:31
019500             07  AS5ENVCA-PSAE-FAC-BYTEG.
019600                 09  AS5ENVCA-FACBG-HEX     PIC X(01).
019700                 09  AS5ENVCA-FACBG-X80     PIC X(01).
019800                 09  AS5ENVCA-FACBG-X40     PIC X(01).
019900                 09  AS5ENVCA-FACBG-X20     PIC X(01).
020000                 09  AS5ENVCA-FACBG-X10     PIC X(01).
020100                 09  AS5ENVCA-FACBG-X08     PIC X(01).
020200                 09  AS5ENVCA-FACBG-X04     PIC X(01).
020300                 09  AS5ENVCA-FACBG-X02     PIC X(01).
020400                 09  AS5ENVCA-FACBG-X01     PIC X(01).
020500             07  AS5ENVCA-PSAE-FAC-BYTEH.
020600                 09  AS5ENVCA-FACBH-HEX     PIC X(01).
020700                 09  AS5ENVCA-FACBH-X80     PIC X(01).
020800                 09  AS5ENVCA-FACBH-X40     PIC X(01).
020900                 09  AS5ENVCA-FACBH-X20     PIC X(01).
021000                 09  AS5ENVCA-FACBH-X10     PIC X(01).
021100                 09  AS5ENVCA-FACBH-X08     PIC X(01).
021200                 09  AS5ENVCA-FACBH-X04     PIC X(01).
021300                 09  AS5ENVCA-FACBH-X02     PIC X(01).
021400                 09  AS5ENVCA-FACBH-X01     PIC X(01).
021500             07  AS5ENVCA-PSAE-FAC-BYTEI.
021600                 09  AS5ENVCA-FACBI-HEX     PIC X(01).
021700                 09  FILLER                 PIC X(08).
021800             07  AS5ENVCA-PSAE-FAC-BYTEJ.
021900                 09  AS5ENVCA-FACBJ-HEX     PIC X(01).
022000                 09  FILLER                 PIC X(08).
022100             07  AS5ENVCA-PSAE-FAC-BYTEK.
022200                 09  AS5ENVCA-FACBK-HEX     PIC X(01).
022300                 09  FILLER                 PIC X(08).
022400             07  AS5ENVCA-PSAE-FAC-BYTEL.
022500                 09  AS5ENVCA-FACBL-HEX     PIC X(01).
022600                 09  FILLER                 PIC X(08).
022700             07  AS5ENVCA-PSAE-FAC-BYTEM.
022800                 09  AS5ENVCA-FACBM-HEX     PIC X(01).
022900                 09  FILLER                 PIC X(08).
023000             07  AS5ENVCA-PSAE-FAC-BYTEN.
023100                 09  AS5ENVCA-FACBN-HEX     PIC X(01).
023200                 09  FILLER                 PIC X(08).
023300             07  AS5ENVCA-PSAE-FAC-BYTEO.
023400                 09  AS5ENVCA-FACBO-HEX     PIC X(01).
023500                 09  FILLER                 PIC X(08).
023600             07  AS5ENVCA-PSAE-FAC-BYTEP.
023700                 09  AS5ENVCA-FACBP-HEX     PIC X(01).
023800                 09  FILLER                 PIC X(08).
023900             07  AS5ENVCA-PSAE-FAC-BYTEQ.
024000                 09  AS5ENVCA-FACBQ-HEX     PIC X(01).
024100                 09  FILLER                 PIC X(08).
024200             07  AS5ENVCA-PSAE-FAC-BYTER.
024300                 09  AS5ENVCA-FACBR-HEX     PIC X(01).
024400                 09  FILLER                 PIC X(08).
024500             07  AS5ENVCA-PSAE-FAC-BYTES.
024600                 09  AS5ENVCA-FACBS-HEX     PIC X(01).
024700                 09  FILLER                 PIC X(08).
024800             07  AS5ENVCA-PSAE-FAC-BYTET.
024900                 09  AS5ENVCA-FACBT-HEX     PIC X(01).
025000                 09  FILLER                 PIC X(08).
025100             07  AS5ENVCA-PSAE-FAC-BYTEU.
025200                 09  AS5ENVCA-FACBU-HEX     PIC X(01).
025300                 09  FILLER                 PIC X(08).
025400             07  AS5ENVCA-PSAE-FAC-BYTEV.
025500                 09  AS5ENVCA-FACBV-HEX     PIC X(01).
025600                 09  FILLER                 PIC X(08).
025700     03  FILLER              COMP-2 SYNC.
025800     03  AS5ENVCA-CVT-AREA.
025900         05  AS5ENVCA-CVT-PNAME   PIC X(08).
026000         05  AS5ENVCA-CVT-FMID    PIC X(08).
026100         05  AS5ENVCA-CVT-UVID    PIC X(16).
026200         05  AS5ENVCA-CVT-CPU     PIC 9(04).
026300         05  AS5ENVCA-CVT-RELNO   PIC X(04).
026400         05  AS5ENVCA-CVT-DCB-BYTE0.
026500             07  AS5ENVCA-DCBB0-HEX    PIC X(01).
026600             07  AS5ENVCA-DCBB0-X80    PIC X(01).
026700             07  AS5ENVCA-DCBB0-X40    PIC X(01).
026800             07  AS5ENVCA-DCBB0-X20    PIC X(01).
026900             07  AS5ENVCA-DCBB0-X10    PIC X(01).
027000             07  AS5ENVCA-DCBB0-X08    PIC X(01).
027100             07  AS5ENVCA-DCBB0-X04    PIC X(01).
027200             07  AS5ENVCA-DCBB0-X02    PIC X(01).
027300             07  AS5ENVCA-DCBB0-X01    PIC X(01).
027400         05  AS5ENVCA-CVT-OPTA-BYTE0.
027500             07  AS5ENVCA-OPTAB0-HEX   PIC X(01).
027600             07  AS5ENVCA-OPTAB0-X80   PIC X(01).
027700             07  AS5ENVCA-OPTAB0-X40   PIC X(01).
027800             07  AS5ENVCA-OPTAB0-X20   PIC X(01).
027900             07  AS5ENVCA-OPTAB0-X10   PIC X(01).
028000             07  AS5ENVCA-OPTAB0-X08   PIC X(01).
028100             07  AS5ENVCA-OPTAB0-X04   PIC X(01).
028200             07  AS5ENVCA-OPTAB0-X02   PIC X(01).
028300             07  AS5ENVCA-OPTAB0-X01   PIC X(01).
028400         05  AS5ENVCA-CVT-OPTB-BYTE0.
028500             07  AS5ENVCA-OPTBB0-HEX   PIC X(01).
028600             07  AS5ENVCA-OPTBB0-X80   PIC X(01).
028700             07  AS5ENVCA-OPTBB0-X40   PIC X(01).
028800             07  AS5ENVCA-OPTBB0-X20   PIC X(01).
028900             07  AS5ENVCA-OPTBB0-X10   PIC X(01).
029000             07  AS5ENVCA-OPTBB0-X08   PIC X(01).
029100             07  AS5ENVCA-OPTBB0-X04   PIC X(01).
029200             07  AS5ENVCA-OPTBB0-X02   PIC X(01).
029300             07  AS5ENVCA-OPTBB0-X01   PIC X(01).
029400         05  AS5ENVCA-CVT-FLG1-BYTE0.
029500             07  AS5ENVCA-FLG1B0-HEX   PIC X(01).
029600             07  AS5ENVCA-FLG1B0-X80   PIC X(01).
029700             07  AS5ENVCA-FLG1B0-X40   PIC X(01).
029800             07  AS5ENVCA-FLG1B0-X20   PIC X(01).
029900             07  AS5ENVCA-FLG1B0-X10   PIC X(01).
030000             07  AS5ENVCA-FLG1B0-X08   PIC X(01).
030100             07  AS5ENVCA-FLG1B0-X04   PIC X(01).
030200             07  AS5ENVCA-FLG1B0-X02   PIC X(01).
030300             07  AS5ENVCA-FLG1B0-X01   PIC X(01).
030400         05  AS5ENVCA-CVT-FLG2-BYTE0.
030500             07  AS5ENVCA-FLG2B0-HEX   PIC X(01).
030600             07  AS5ENVCA-FLG2B0-X80   PIC X(01).
030700             07  AS5ENVCA-FLG2B0-X40   PIC X(01).
030800             07  AS5ENVCA-FLG2B0-X20   PIC X(01).
030900             07  AS5ENVCA-FLG2B0-X10   PIC X(01).
031000             07  AS5ENVCA-FLG2B0-X08   PIC X(01).
031100             07  AS5ENVCA-FLG2B0-X04   PIC X(01).
031200             07  AS5ENVCA-FLG2B0-X02   PIC X(01).
031300             07  AS5ENVCA-FLG2B0-X01   PIC X(01).
031400         05  AS5ENVCA-CVT-FLG3-BYTE0.
031500             07  AS5ENVCA-FLG3B0-HEX   PIC X(01).
031600             07  AS5ENVCA-FLG3B0-X80   PIC X(01).
031700             07  AS5ENVCA-FLG3B0-X40   PIC X(01).
031800             07  AS5ENVCA-FLG3B0-X20   PIC X(01).
031900             07  AS5ENVCA-FLG3B0-X10   PIC X(01).
032000             07  AS5ENVCA-FLG3B0-X08   PIC X(01).
032100             07  AS5ENVCA-FLG3B0-X04   PIC X(01).
032200             07  AS5ENVCA-FLG3B0-X02   PIC X(01).
032300             07  AS5ENVCA-FLG3B0-X01   PIC X(01).
032400         05  AS5ENVCA-CVT-FLG4-BYTE0.
032500             07  AS5ENVCA-FLG4B0-HEX   PIC X(01).
032600             07  AS5ENVCA-FLG4B0-X80   PIC X(01).
032700             07  AS5ENVCA-FLG4B0-X40   PIC X(01).
032800             07  AS5ENVCA-FLG4B0-X20   PIC X(01).
032900             07  AS5ENVCA-FLG4B0-X10   PIC X(01).
033000             07  AS5ENVCA-FLG4B0-X08   PIC X(01).
033100             07  AS5ENVCA-FLG4B0-X04   PIC X(01).
033200             07  AS5ENVCA-FLG4B0-X02   PIC X(01).
033300             07  AS5ENVCA-FLG4B0-X01   PIC X(01).
033400         05  AS5ENVCA-CVT-FLG5-BYTE0.
033500             07  AS5ENVCA-FLG5B0-HEX   PIC X(01).
033600             07  AS5ENVCA-FLG5B0-X80   PIC X(01).
033700             07  AS5ENVCA-FLG5B0-X40   PIC X(01).
033800             07  AS5ENVCA-FLG5B0-X20   PIC X(01).
033900             07  AS5ENVCA-FLG5B0-X10   PIC X(01).
034000             07  AS5ENVCA-FLG5B0-X08   PIC X(01).
034100             07  AS5ENVCA-FLG5B0-X04   PIC X(01).
034200             07  AS5ENVCA-FLG5B0-X02   PIC X(01).
034300             07  AS5ENVCA-FLG5B0-X01   PIC X(01).
034400         05  AS5ENVCA-CVT-FLG6-BYTE0.
034500             07  AS5ENVCA-FLG6B0-HEX   PIC X(01).
034600             07  AS5ENVCA-FLG6B0-X80   PIC X(01).
034700             07  AS5ENVCA-FLG6B0-X40   PIC X(01).
034800             07  AS5ENVCA-FLG6B0-X20   PIC X(01).
034900             07  AS5ENVCA-FLG6B0-X10   PIC X(01).
035000             07  AS5ENVCA-FLG6B0-X08   PIC X(01).
035100             07  AS5ENVCA-FLG6B0-X04   PIC X(01).
035200             07  AS5ENVCA-FLG6B0-X02   PIC X(01).
035300             07  AS5ENVCA-FLG6B0-X01   PIC X(01).
035400         05  AS5ENVCA-CVT-FLG7-BYTE0.
035500             07  AS5ENVCA-FLG7B0-HEX   PIC X(01).
035600             07  AS5ENVCA-FLG7B0-X80   PIC X(01).
035700             07  AS5ENVCA-FLG7B0-X40   PIC X(01).
035800             07  AS5ENVCA-FLG7B0-X20   PIC X(01).
035900             07  AS5ENVCA-FLG7B0-X10   PIC X(01).
036000             07  AS5ENVCA-FLG7B0-X08   PIC X(01).
036100             07  AS5ENVCA-FLG7B0-X04   PIC X(01).
036200             07  AS5ENVCA-FLG7B0-X02   PIC X(01).
036300             07  AS5ENVCA-FLG7B0-X01   PIC X(01).
036400         05  AS5ENVCA-CVT-FLG8-BYTE0.
036500             07  AS5ENVCA-FLG8B0-HEX   PIC X(01).
036600             07  AS5ENVCA-FLG8B0-X80   PIC X(01).
036700             07  AS5ENVCA-FLG8B0-X40   PIC X(01).
036800             07  AS5ENVCA-FLG8B0-X20   PIC X(01).
036900             07  AS5ENVCA-FLG8B0-X10   PIC X(01).
037000             07  AS5ENVCA-FLG8B0-X08   PIC X(01).
037100             07  AS5ENVCA-FLG8B0-X04   PIC X(01).
037200             07  AS5ENVCA-FLG8B0-X02   PIC X(01).
037300             07  AS5ENVCA-FLG8B0-X01   PIC X(01).
037400         05  AS5ENVCA-CVT-LDTOFF  PIC S9(9) BINARY SYNC.
037500         05  AS5ENVCA-CVT-GMTOFF  PIC X(06).
037600         05  AS5ENVCA-CVT-OSLVL.
037700             07  AS5ENVCA-CVT-OSLVL-BYTE0.
037800                 09  AS5ENVCA-OSLB0-HEX     PIC X(01).
037900                 09  AS5ENVCA-OSLB0-X80     PIC X(01).
038000                 09  AS5ENVCA-OSLB0-X40     PIC X(01).
038100                 09  AS5ENVCA-OSLB0-X20     PIC X(01).
038200                 09  AS5ENVCA-OSLB0-X10     PIC X(01).
038300                 09  AS5ENVCA-OSLB0-X08     PIC X(01).
038400                 09  AS5ENVCA-OSLB0-X04     PIC X(01).
038500                 09  AS5ENVCA-OSLB0-X02     PIC X(01).
038600                 09  AS5ENVCA-OSLB0-X01     PIC X(01).
038700             07  AS5ENVCA-CVT-OSLVL-BYTE1.
038800                 09  AS5ENVCA-OSLB1-HEX     PIC X(01).
038900                 09  AS5ENVCA-OSLB1-X80     PIC X(01).
039000                 09  AS5ENVCA-OSLB1-X40     PIC X(01).
039100                 09  AS5ENVCA-OSLB1-X20     PIC X(01).
039200                 09  AS5ENVCA-OSLB1-X10     PIC X(01).
039300                 09  AS5ENVCA-OSLB1-X08     PIC X(01).
039400                 09  AS5ENVCA-OSLB1-X04     PIC X(01).
039500                 09  AS5ENVCA-OSLB1-X02     PIC X(01).
039600                 09  AS5ENVCA-OSLB1-X01     PIC X(01).
039700             07  AS5ENVCA-CVT-OSLVL-BYTE2.
039800                 09  AS5ENVCA-OSLB2-HEX     PIC X(01).
039900                 09  AS5ENVCA-OSLB2-X80     PIC X(01).
040000                 09  AS5ENVCA-OSLB2-X40     PIC X(01).
040100                 09  AS5ENVCA-OSLB2-X20     PIC X(01).
040200                 09  AS5ENVCA-OSLB2-X10     PIC X(01).
040300                 09  AS5ENVCA-OSLB2-X08     PIC X(01).
040400                 09  AS5ENVCA-OSLB2-X04     PIC X(01).
040500                 09  AS5ENVCA-OSLB2-X02     PIC X(01).
040600                 09  AS5ENVCA-OSLB2-X01     PIC X(01).
040700             07  AS5ENVCA-CVT-OSLVL-BYTE3.
040800                 09  AS5ENVCA-OSLB3-HEX     PIC X(01).
040900                 09  AS5ENVCA-OSLB3-X80     PIC X(01).
041000                 09  AS5ENVCA-OSLB3-X40     PIC X(01).
041100                 09  AS5ENVCA-OSLB3-X20     PIC X(01).
041200                 09  AS5ENVCA-OSLB3-X10     PIC X(01).
041300                 09  AS5ENVCA-OSLB3-X08     PIC X(01).
041400                 09  AS5ENVCA-OSLB3-X04     PIC X(01).
041500                 09  AS5ENVCA-OSLB3-X02     PIC X(01).
041600                 09  AS5ENVCA-OSLB3-X01     PIC X(01).
041700             07  AS5ENVCA-CVT-OSLVL-BYTE4.
041800                 09  AS5ENVCA-OSLB4-HEX     PIC X(01).
041900                 09  AS5ENVCA-OSLB4-X80     PIC X(01).
042000                 09  AS5ENVCA-OSLB4-X40     PIC X(01).
042100                 09  AS5ENVCA-OSLB4-X20     PIC X(01).
042200                 09  AS5ENVCA-OSLB4-X10     PIC X(01).
042300                 09  AS5ENVCA-OSLB4-X08     PIC X(01).
042400                 09  AS5ENVCA-OSLB4-X04     PIC X(01).
042500                 09  AS5ENVCA-OSLB4-X02     PIC X(01).
042600                 09  AS5ENVCA-OSLB4-X01     PIC X(01).
042700             07  AS5ENVCA-CVT-OSLVL-BYTE5.
042800                 09  AS5ENVCA-OSLB5-HEX     PIC X(01).
042900                 09  AS5ENVCA-OSLB5-X80     PIC X(01).
043000                 09  AS5ENVCA-OSLB5-X40     PIC X(01).
043100                 09  AS5ENVCA-OSLB5-X20     PIC X(01).
043200                 09  AS5ENVCA-OSLB5-X10     PIC X(01).
043300                 09  AS5ENVCA-OSLB5-X08     PIC X(01).
043400                 09  AS5ENVCA-OSLB5-X04     PIC X(01).
043500                 09  AS5ENVCA-OSLB0-X02     PIC X(01).
043600                 09  AS5ENVCA-OSLB0-X01     PIC X(01).
043700             07  AS5ENVCA-CVT-OSLVL-BYTE6.
043800                 09  AS5ENVCA-OSLB6-HEX     PIC X(01).
043900                 09  AS5ENVCA-OSLB6-X80     PIC X(01).
044000                 09  AS5ENVCA-OSLB6-X40     PIC X(01).
044100                 09  AS5ENVCA-OSLB6-X20     PIC X(01).
044200                 09  AS5ENVCA-OSLB6-X10     PIC X(01).
044300                 09  AS5ENVCA-OSLB6-X08     PIC X(01).
044400                 09  AS5ENVCA-OSLB6-X04     PIC X(01).
044500                 09  AS5ENVCA-OSLB6-X02     PIC X(01).
044600                 09  AS5ENVCA-OSLB6-X01     PIC X(01).
044700             07  AS5ENVCA-CVT-OSLVL-BYTE7.
044800                 09  AS5ENVCA-OSLB7-HEX     PIC X(01).
044900                 09  FILLER                 PIC X(08).
045000             07  AS5ENVCA-CVT-OSLVL-BYTE8.
045100                 09  AS5ENVCA-OSLB8-HEX     PIC X(01).
045200                 09  AS5ENVCA-OSLB8-X80     PIC X(01).
045300                 09  AS5ENVCA-OSLB8-X40     PIC X(01).
045400                 09  AS5ENVCA-OSLB8-X20     PIC X(01).
045500                 09  AS5ENVCA-OSLB8-X10     PIC X(01).
045600                 09  AS5ENVCA-OSLB8-X08     PIC X(01).
045700                 09  AS5ENVCA-OSLB8-X04     PIC X(01).
045800                 09  AS5ENVCA-OSLB8-X02     PIC X(01).
045900                 09  AS5ENVCA-OSLB8-X01     PIC X(01).
046000             07  AS5ENVCA-CVT-OSLVL-BYTE9.
046100                 09  AS5ENVCA-OSLB9-HEX     PIC X(01).
046200                 09  FILLER                 PIC X(08).
046300             07  AS5ENVCA-CVT-OSLVL-BYTEA.
046400                 09  AS5ENVCA-OSLBA-HEX     PIC X(01).
046500                 09  FILLER                 PIC X(08).
046600             07  AS5ENVCA-CVT-OSLVL-BYTEB.
046700                 09  AS5ENVCA-OSLBB-HEX     PIC X(01).
046800                 09  FILLER                 PIC X(08).
046900             07  AS5ENVCA-CVT-OSLVL-BYTEC.
047000                 09  AS5ENVCA-OSLBC-HEX     PIC X(01).
047100                 09  FILLER                 PIC X(08).
047200             07  AS5ENVCA-CVT-OSLVL-BYTED.
047300                 09  AS5ENVCA-OSLBD-HEX     PIC X(01).
047400                 09  FILLER                 PIC X(08).
047500             07  AS5ENVCA-CVT-OSLVL-BYTEE.
047600                 09  AS5ENVCA-OSLBD-HEX     PIC X(01).
047700                 09  FILLER                 PIC X(08).
047800             07  AS5ENVCA-CVT-OSLVL-BYTEF.
047900                 09  AS5ENVCA-OSLBF-HEX     PIC X(01).
048000                 09  FILLER                 PIC X(08).
048100     03  FILLER              COMP-2 SYNC.
048200     03  AS5ENVCA-ECVT-AREA.
048300         05  AS5ENVCA-ECVT-SYSPLEX     PIC X(08).
048400         05  AS5ENVCA-ECVT-HWNAME      PIC X(08).
048500         05  AS5ENVCA-ECVT-LPAR        PIC X(08).
048600         05  AS5ENVCA-ECVT-VMID        PIC X(08).
048700         05  AS5ENVCA-ECVT-PID         PIC X(08).
048800         05  AS5ENVCA-ECVT-PRODNBR     PIC  9(8).
048900         05  AS5ENVCA-ECVT-PRODOWN     PIC X(16).
049000         05  AS5ENVCA-ECVT-PRODNME     PIC X(16).
049100         05  AS5ENVCA-ECVT-PRODVRM     PIC X(06).
049200         05  AS5ENVCA-ECVT-CLONE       PIC X(02).
049300         05  AS5ENCVA-ECVT-LOADPRM     PIC X(08).
049400         05  AS5ENCVA-ECVT-CACHESZ     PIC S9(4) BINARY SYNC.
049500         05  AS5ENCVA-ECVT-GRSMODE     PIC S9(4) BINARY SYNC.
049600*            0-none 1-ring 2-star
049700         05  AS5ENCVA-ECVT-OMVSIND     PIC X(01).
049800     03  FILLER              COMP-2 SYNC.
049900     03  AS5ENVCA-ASCB-AREA.
050000         05  AS5ENVCA-ASCB-LCPUID      PIC S9(4) BINARY SYNC.
050100         05  AS5ENVCA-ASCB-ASID        PIC S9(4) BINARY SYNC.
050200         05  AS5ENVCA-ASCB-DPRI        PIC S9(4) BINARY SYNC.
050300         05  AS5ENVCA-ASCB-LEVEL       PIC S9(4) BINARY SYNC.
050400         05  AS5ENVCA-ASXB-USERID      PIC X(08).
050500     03  AS5ENVCA-ACEE-AREA.
050600         05  AS5ENVCA-ACEE-USERID      PIC X(08).
050700         05  AS5ENVCA-ACEE-GROUP       PIC X(08).
050800         05  AS5ENVCA-ACEE-APPLNM      PIC X(08).
050900         05  AS5ENVCA-ACEE-TERMID      PIC X(08).
051000         05  AS5ENVCA-ACEE-USERNAME    PIC X(24).
051100     03  AS5ENVCA-JSAB-AREA.
051200         05  AS5ENVCA-JSAB-CODELVL     PIC S9(4) BINARY SYNC.
051300         05  AS5ENVCA-JSAB-SCID        PIC X(04).
051400         05  FILLER                    PIC X(08).
051500         05  AS5ENVCA-JSAB-NTRYTS      PIC X(24).
051600         05  FILLER                    PIC X(08).
051700         05  AS5ENVCA-JSAB-EXECTS      PIC X(24).
051800         05  AS5ENVCA-JSAB-JBID        PIC X(08).
051900         05  AS5ENVCA-JSAB-JBNM        PIC X(08).
052000         05  AS5ENVCA-JSAB-EXECLVL     PIC S9(4) BINARY SYNC.
052100         05  AS5ENVCA-JSAB-SSNM        PIC X(04).
052200         05  AS5ENVCA-JSAB-USERID      PIC X(08).
052300         05  AS5ENVCA-JSAB-GROUP       PIC X(08).
052400     03  FILLER              COMP-2 SYNC.
052500     03  AS5ENVCA-DFA-AREA.
052600         05  FILLER               PIC X(02).
052700         05  AS5ENVCA-DFA-P0REL   PIC X(04).
052800         05  FILLER               PIC X(04).
052900         05  AS5ENVCA-DFA-PRELX   PIC X(08).
053000         05  AS5ENVCA-DFA-PRELS.
053100             07  AS5ENVCA-DFA-PPROD    PIC  9(2).
053200             07  AS5ENVCA-DFA-PVER     PIC  9(2).
053300             07  AS5ENVCA-DFA-PREL     PIC  9(2).
053400             07  AS5ENVCA-DFA-PMOD     PIC  9(2).
053500         05  AS5ENVCA-DFA-FEATLST.
053600             07  AS5ENVCA-DFA-FEATURE-BYTE0.
053700                 09  AS5ENVCA-FEAB0-HEX     PIC X(01).
053800                 09  AS5ENVCA-FEAB0-X80     PIC X(01).
053900                 09  AS5ENVCA-FEAB0-X40     PIC X(01).
054000                 09  AS5ENVCA-FEAB0-X20     PIC X(01).
054100                 09  AS5ENVCA-FEAB0-X10     PIC X(01).
054200                 09  AS5ENVCA-FEAB0-X08     PIC X(01).
054300                 09  AS5ENVCA-FEAB0-X04     PIC X(01).
054400                 09  AS5ENVCA-FEAB0-X02     PIC X(01).
054500                 09  AS5ENVCA-FEAB0-X01     PIC X(01).
054600             07  AS5ENVCA-DFA-FEATURE-BYTE1.
054700                 09  AS5ENVCA-FEAB1-HEX     PIC X(01).
054800                 09  AS5ENVCA-FEAB1-X80     PIC X(01).
054900                 09  AS5ENVCA-FEAB1-X40     PIC X(01).
055000                 09  AS5ENVCA-FEAB1-X20     PIC X(01).
055100                 09  AS5ENVCA-FEAB1-X10     PIC X(01).
055200                 09  AS5ENVCA-FEAB1-X08     PIC X(01).
055300                 09  AS5ENVCA-FEAB1-X04     PIC X(01).
055400                 09  AS5ENVCA-FEAB1-X02     PIC X(01).
055500                 09  AS5ENVCA-FEAB1-X01     PIC X(01).
055600             07  AS5ENVCA-DFA-FEATURE-BYTE2.
055700                 09  AS5ENVCA-FEAB2-HEX     PIC X(01).
055800                 09  AS5ENVCA-FEAB2-X80     PIC X(01).
055900                 09  AS5ENVCA-FEAB2-X40     PIC X(01).
056000                 09  AS5ENVCA-FEAB2-X20     PIC X(01).
056100                 09  AS5ENVCA-FEAB2-X10     PIC X(01).
056200                 09  AS5ENVCA-FEAB2-X08     PIC X(01).
056300                 09  AS5ENVCA-FEAB2-X04     PIC X(01).
056400                 09  AS5ENVCA-FEAB2-X02     PIC X(01).
056500                 09  AS5ENVCA-FEAB2-X01     PIC X(01).
056600             07  AS5ENVCA-DFA-FEATURE-BYTE3.
056700                 09  AS5ENVCA-FEAB3-HEX     PIC X(01).
056800                 09  AS5ENVCA-FEAB3-X80     PIC X(01).
056900                 09  AS5ENVCA-FEAB3-X40     PIC X(01).
057000                 09  AS5ENVCA-FEAB3-X20     PIC X(01).
057100                 09  AS5ENVCA-FEAB3-X10     PIC X(01).
057200                 09  AS5ENVCA-FEAB3-X08     PIC X(01).
057300                 09  AS5ENVCA-FEAB3-X04     PIC X(01).
057400                 09  AS5ENVCA-FEAB3-X02     PIC X(01).
057500                 09  AS5ENVCA-FEAB3-X01     PIC X(01).
057600             07  AS5ENVCA-DFA-FEATURE-BYTE4.
057700                 09  AS5ENVCA-FEAB4-HEX     PIC X(01).
057800                 09  AS5ENVCA-FEAB4-X80     PIC X(01).
057900                 09  AS5ENVCA-FEAB4-X40     PIC X(01).
058000                 09  AS5ENVCA-FEAB4-X20     PIC X(01).
058100                 09  AS5ENVCA-FEAB4-X10     PIC X(01).
058200                 09  AS5ENVCA-FEAB4-X08     PIC X(01).
058300                 09  AS5ENVCA-FEAB4-X04     PIC X(01).
058400                 09  AS5ENVCA-FEAB4-X02     PIC X(01).
058500                 09  AS5ENVCA-FEAB4-X01     PIC X(01).
058600             07  AS5ENVCA-DFA-FEATURE-BYTE5.
058700                 09  AS5ENVCA-FEAB5-HEX     PIC X(01).
058800                 09  AS5ENVCA-FEAB5-X80     PIC X(01).
058900                 09  AS5ENVCA-FEAB5-X40     PIC X(01).
059000                 09  AS5ENVCA-FEAB5-X20     PIC X(01).
059100                 09  AS5ENVCA-FEAB5-X10     PIC X(01).
059200                 09  AS5ENVCA-FEAB5-X08     PIC X(01).
059300                 09  AS5ENVCA-FEAB5-X04     PIC X(01).
059400                 09  AS5ENVCA-FEAB5-X02     PIC X(01).
059500                 09  AS5ENVCA-FEAB5-X01     PIC X(01).
059600             07  AS5ENVCA-DFA-FEATURE-BYTE6.
059700                 09  AS5ENVCA-FEAB6-HEX     PIC X(01).
059800                 09  AS5ENVCA-FEAB6-X80     PIC X(01).
059900                 09  AS5ENVCA-FEAB6-X40     PIC X(01).
060000                 09  AS5ENVCA-FEAB6-X20     PIC X(01).
060100                 09  AS5ENVCA-FEAB6-X10     PIC X(01).
060200                 09  AS5ENVCA-FEAB6-X08     PIC X(01).
060300                 09  AS5ENVCA-FEAB6-X04     PIC X(01).
060400                 09  AS5ENVCA-FEAB6-X02     PIC X(01).
060500                 09  AS5ENVCA-FEAB6-X01     PIC X(01).
060600             07  AS5ENVCA-DFA-FEATURE-BYTE7.
060700                 09  AS5ENVCA-FEAB7-HEX     PIC X(01).
060800                 09  AS5ENVCA-FEAB7-X80     PIC X(01).
060900                 09  AS5ENVCA-FEAB7-X40     PIC X(01).
061000                 09  AS5ENVCA-FEAB7-X20     PIC X(01).
061100                 09  AS5ENVCA-FEAB7-X10     PIC X(01).
061200                 09  AS5ENVCA-FEAB7-X08     PIC X(01).
061300                 09  AS5ENVCA-FEAB7-X04     PIC X(01).
061400                 09  AS5ENVCA-FEAB7-X02     PIC X(01).
061500                 09  AS5ENVCA-FEAB7-X01     PIC X(01).
061600             07  AS5ENVCA-DFA-FEATURE-BYTE8.
061700                 09  AS5ENVCA-FEAB8-HEX     PIC X(01).
061800                 09  AS5ENVCA-FEAB8-X80     PIC X(01).
061900                 09  AS5ENVCA-FEAB8-X40     PIC X(01).
062000                 09  AS5ENVCA-FEAB8-X20     PIC X(01).
062100                 09  AS5ENVCA-FEAB8-X10     PIC X(01).
062200                 09  AS5ENVCA-FEAB8-X08     PIC X(01).
062300                 09  AS5ENVCA-FEAB8-X04     PIC X(01).
062400                 09  AS5ENVCA-FEAB8-X02     PIC X(01).
062500                 09  AS5ENVCA-FEAB8-X01     PIC X(01).
062600             07  AS5ENVCA-DFA-FEATURE-BYTE9.
062700                 09  AS5ENVCA-FEAB9-HEX     PIC X(01).
062800                 09  AS5ENVCA-FEAB9-X80     PIC X(01).
062900                 09  AS5ENVCA-FEAB9-X40     PIC X(01).
063000                 09  AS5ENVCA-FEAB9-X20     PIC X(01).
063100                 09  AS5ENVCA-FEAB9-X10     PIC X(01).
063200                 09  AS5ENVCA-FEAB9-X08     PIC X(01).
063300                 09  AS5ENVCA-FEAB9-X04     PIC X(01).
063400                 09  AS5ENVCA-FEAB9-X02     PIC X(01).
063500                 09  AS5ENVCA-FEAB9-X01     PIC X(01).
063600         05  AS5ENVCA-DFA-HPFFEATLST.
063700             07  AS5ENVCA-DFA-HPFFEAT-BYTE1.
063800                 09  AS5ENVCA-HPFB1-HEX     PIC X(01).
063900                 09  AS5ENVCA-HPFB1-X80     PIC X(01).
064000                 09  AS5ENVCA-HPFB1-X40     PIC X(01).
064100                 09  AS5ENVCA-HPFB1-X20     PIC X(01).
064200                 09  AS5ENVCA-HPFB1-X10     PIC X(01).
064300                 09  AS5ENVCA-HPFB1-X08     PIC X(01).
064400                 09  AS5ENVCA-HPFB1-X04     PIC X(01).
064500                 09  AS5ENVCA-HPFB1-X02     PIC X(01).
064600                 09  AS5ENVCA-HPFB1-X01     PIC X(01).
064700             07  AS5ENVCA-DFA-HPFFEAT-BYTE2.
064800                 09  AS5ENVCA-HPFB2-HEX     PIC X(01).
064900                 09  AS5ENVCA-HPFB2-X80     PIC X(01).
065000                 09  AS5ENVCA-HPFB2-X40     PIC X(01).
065100                 09  AS5ENVCA-HPFB2-X20     PIC X(01).
065200                 09  AS5ENVCA-HPFB2-X10     PIC X(01).
065300                 09  AS5ENVCA-HPFB2-X08     PIC X(01).
065400                 09  AS5ENVCA-HPFB2-X04     PIC X(01).
065500                 09  AS5ENVCA-HPFB2-X02     PIC X(01).
065600                 09  AS5ENVCA-HPFB2-X01     PIC X(01).
065700             07  AS5ENVCA-DFA-HPFFEAT-BYTE3.
065800                 09  AS5ENVCA-HPFB3-HEX     PIC X(01).
065900                 09  AS5ENVCA-HPFB3-X80     PIC X(01).
066000                 09  AS5ENVCA-HPFB3-X40     PIC X(01).
066100                 09  AS5ENVCA-HPFB3-X20     PIC X(01).
066200                 09  AS5ENVCA-HPFB3-X10     PIC X(01).
066300                 09  AS5ENVCA-HPFB3-X08     PIC X(01).
066400                 09  AS5ENVCA-HPFB3-X04     PIC X(01).
066500                 09  AS5ENVCA-HPFB3-X02     PIC X(01).
066600                 09  AS5ENVCA-HPFB3-X01     PIC X(01).
066700             07  AS5ENVCA-DFA-HPFFEAT-BYTE4.
066800                 09  AS5ENVCA-HPFB4-HEX     PIC X(01).
066900                 09  AS5ENVCA-HPFB4-X80     PIC X(01).
067000                 09  AS5ENVCA-HPFB4-X40     PIC X(01).
067100                 09  AS5ENVCA-HPFB4-X20     PIC X(01).
067200                 09  AS5ENVCA-HPFB4-X10     PIC X(01).
067300                 09  AS5ENVCA-HPFB4-X08     PIC X(01).
067400                 09  AS5ENVCA-HPFB4-X04     PIC X(01).
067500                 09  AS5ENVCA-HPFB4-X02     PIC X(01).
067600                 09  AS5ENVCA-HPFB4-X01     PIC X(01).
067700         05  FILLER     PIC X(02).
067800         05  AS5ENVCA-DFA-CMPTYPE      PIC S9(4) BINARY SYNC.
067900*            0-generic 1-tailored 2-zEDC req 3-zEDC prefered
068000         05  AS5ENVCA-DFA-PDSEMAXGEN   PIC S9(9) BINARY SYNC.
068100     03  FILLER              COMP-2 SYNC.
068200     03  AS5ENVCA-JSCB-AREA.
068300         05  AS5ENVCA-JSCB-PGMNAME     PIC X(08).
068400         05  AS5ENVCA-JSCB-STEPNBR     PIC S9(4) BINARY SYNC.
068500         05  AS5ENVCA-JSCB-DDNCNT      PIC S9(4) BINARY SYNC.
068600     03  FILLER              COMP-2 SYNC.
068700     03  AS5ENVCA-TIOT-AREA.
068800         05  AS5ENVCA-TIOT-JOBNAME     PIC X(08).
068900         05  AS5ENVCA-TIOT-JOBSTEP     PIC X(08).
069000         05  AS5ENVCA-TIOT-PROCSTEP    PIC X(08).
069100         05  AS5ENVCA-TIOT-DDNCNT      PIC S9(4) BINARY SYNC.
069200         05  AS5ENVCA-TIOTE-DDNTRY
069300                        OCCURS 30 TIMES
069400                        INDEXED BY AS5ENVCA-DDNTRY-NDX.
069500             07  AS5ENVCA-TIOTE-DDNAME      PIC X(08).
069600             07  AS5ENVCA-TIOTE-DSNCNT      PIC S9(4) BINARY SYNC.
069700     03  FILLER              COMP-2 SYNC.
069800     03  AS5ENVCA-LE-AREA.
069900         05  FILLER               PIC X(04).
070000         05  AS5ENVCA-LE-PGPID    PIC X(08).
070100         05  AS5ENVCA-LE-PTEXT    PIC X(16).
070200         05  AS5ENVCA-LE-LEVEL    PIC S9(4) BINARY SYNC.
070300*            1:28 CEECAALEVEL
070400         05  AS5ENVCA-LE-HW       PIC S9(4) BINARY SYNC.
070500*            0:4 CEECAAHRDWR
070600*            2- S/370 NON-XA      3- S/370 XA
070700*            4- S/370 ESA
070800         05  AS5ENVCA-LE-OPSYS    PIC S9(4) BINARY SYNC.
070900*            0:4 CEECAASYSTM
071000*            2- VM/ESA            3- MVS OR Z/OS
071100*            4- VSE
071200         05  AS5ENVCA-LE-SUBSYS   PIC S9(4) BINARY SYNC.
071300*            0:5 CEECAASBSYS
071400*            2- NO                3- TSO
071500*            4- IMS               5- CICS
071600         05  AS5ENVCA-LE-ARCH     PIC S9(9) BINARY SYNC.
071700         05  AS5ENVCA-LE-SYSTEM.
071800             07  AS5ENVCA-SYSTEM-BYTE0.
071900                 09  AS5ENVCA-SYSB0-HEX     PIC X(01).
072000                 09  AS5ENVCA-SYSB0-X80     PIC X(01).
072100                 09  AS5ENVCA-SYSB0-X40     PIC X(01).
072200                 09  AS5ENVCA-SYSB0-X20     PIC X(01).
072300                 09  AS5ENVCA-SYSB0-X10     PIC X(01).
072400                 09  AS5ENVCA-SYSB0-X08     PIC X(01).
072500                 09  AS5ENVCA-SYSB0-X04     PIC X(01).
072600                 09  AS5ENVCA-SYSB0-X02     PIC X(01).
072700                 09  AS5ENVCA-SYSB0-X01     PIC X(01).
072800             07  AS5ENVCA-SYSTEM-BYTE1.
072900                 09  AS5ENVCA-SYSB1-HEX     PIC X(01).
073000                 09  FILLER                 PIC X(08).
073100             07  AS5ENVCA-SYSTEM-BYTE2.
073200                 09  AS5ENVCA-SYSB2-HEX     PIC X(01).
073300                 09  FILLER                 PIC X(08).
073400             07  AS5ENVCA-SYSTEM-BYTE3.
073500                 09  AS5ENVCA-SYSB3-HEX     PIC X(01).
073600                 09  AS5ENVCA-SYSB3-X80     PIC X(01).
073700                 09  AS5ENVCA-SYSB3-X40     PIC X(01).
073800                 09  AS5ENVCA-SYSB3-X20     PIC X(01).
073900                 09  AS5ENVCA-SYSB3-X10     PIC X(01).
074000                 09  AS5ENVCA-SYSB3-X08     PIC X(01).
074100                 09  AS5ENVCA-SYSB3-X04     PIC X(01).
074200                 09  AS5ENVCA-SYSB3-X02     PIC X(01).
074300                 09  AS5ENVCA-SYSB3-X01     PIC X(01).
074400         05  AS5ENVCA-LE-ENV.
074500             07  AS5ENVCA-ENV-BYTE0.
074600                 09  AS5ENVCA-ENVB0-HEX     PIC X(01).
074700                 09  AS5ENVCA-ENVB0-X80     PIC X(01).
074800                 09  AS5ENVCA-ENVB0-X40     PIC X(01).
074900                 09  AS5ENVCA-ENVB0-X20     PIC X(01).
075000                 09  AS5ENVCA-ENVB0-X10     PIC X(01).
075100                 09  AS5ENVCA-ENVB0-X08     PIC X(01).
075200                 09  AS5ENVCA-ENVB0-X04     PIC X(01).
075300                 09  AS5ENVCA-ENVB0-X02     PIC X(01).
075400                 09  AS5ENVCA-ENVB0-X01     PIC X(01).
075500             07  AS5ENVCA-ENV-BYTE1.
075600                 09  AS5ENVCA-ENVB1-HEX     PIC X(01).
075700                 09  AS5ENVCA-ENVB1-X80     PIC X(01).
075800                 09  AS5ENVCA-ENVB1-X40     PIC X(01).
075900                 09  AS5ENVCA-ENVB1-X20     PIC X(01).
076000                 09  AS5ENVCA-ENVB1-X10     PIC X(01).
076100                 09  AS5ENVCA-ENVB1-X08     PIC X(01).
076200                 09  AS5ENVCA-ENVB1-X04     PIC X(01).
076300                 09  AS5ENVCA-ENVB1-X02     PIC X(01).
076400                 09  AS5ENVCA-ENVB1-X01     PIC X(01).
076500             07  AS5ENVCA-ENV-BYTE2.
076600                 09  AS5ENVCA-ENVB2-HEX     PIC X(01).
076700                 09  FILLER                 PIC X(08).
076800             07  AS5ENVCA-ENV-BYTE3.
076900                 09  AS5ENVCA-ENVB3-HEX     PIC X(01).
077000                 09  FILLER                 PIC X(08).
077100         05  AS5ENVCA-LE-OCBVER   PIC S9(4) BINARY SYNC.
077200         05  AS5ENVCA-LE-OCBVTXT  PIC X(16).
077300         05  AS5ENVCA-LE-FORMAT.
077400             07  AS5ENVCA-FMT-BYTE0.
077500                 09  AS5ENVCA-FMTB0-HEX     PIC X(01).
077600                 09  FILLER                 PIC X(07).
077700                 09  AS5ENVCA-FMTB0-X01     PIC X(01).
077800         05  AS5ENVCA-LE-ORIGIN.
077900             07  AS5ENVCA-ORG-BYTE0.
078000                 09  AS5ENVCA-ORGB0-HEX     PIC X(01).
078100                 09  AS5ENVCA-ORGB0-X80     PIC X(01).
078200                 09  FILLER                 PIC X(07).
078300         05  AS5ENVCA-LE-OPTAIX.
078400             07  AS5ENVCA-AIX-BYTE0.
078500                 09  AS5ENVCA-AIXB0-HEX     PIC X(01).
078600                 09  AS5ENVCA-AIXB0-X80     PIC X(01).
078700         05  AS5ENVCA-LE-OPTA31.
078800             07  AS5ENVCA-A31-BYTE0.
078900                 09  AS5ENVCA-A31B0-HEX     PIC X(01).
079000                 09  AS5ENVCA-A31B0-X80     PIC X(01).
079100         05  AS5ENVCA-LE-OPTCBL.
079200             07  AS5ENVCA-CBL-BYTE0.
079300                 09  AS5ENVCA-CBLB0-HEX     PIC X(01).
079400                 09  AS5ENVCA-CBLB0-X80     PIC X(01).
079500         05  AS5ENVCA-LE-OPTQDA.
079600             07  AS5ENVCA-QDA-BYTE0.
079700                 09  AS5ENVCA-QDAB0-HEX     PIC X(01).
079800                 09  AS5ENVCA-QDAB0-X80     PIC X(01).
079900         05  AS5ENVCA-LE-OPTCHK.
080000             07  AS5ENVCA-CHK-BYTE0.
080100                 09  AS5ENVCA-CHKB0-HEX     PIC X(01).
080200                 09  AS5ENVCA-CHKB0-X80     PIC X(01).
080300         05  AS5ENVCA-LE-OPTDBG.
080400             07  AS5ENVCA-DBG-BYTE0.
080500                 09  AS5ENVCA-DBGB0-HEX     PIC X(01).
080600                 09  AS5ENVCA-DBGB0-X80     PIC X(01).
080700         05  AS5ENVCA-LE-OPTHEAP.
080800             07  AS5ENVCA-HEAP-BYTE0.
080900                 09  AS5ENVCA-HEAB0-HEX     PIC X(01).
081000                 09  AS5ENVCA-HEAB0-X80     PIC X(01).
081100             07  AS5ENVCA-HEAP-BYTE1.
081200                 09  AS5ENVCA-HEAB1-HEX     PIC X(01).
081300                 09  AS5ENVCA-HEAB1-X80     PIC X(01).
081400                 09  AS5ENVCA-HEAB1-X40     PIC X(01).
081500             07  AS5ENVCA-HEAP-LOC     PIC X(05).
081600             07  AS5ENVCA-HEAP-DISP    PIC X(04).
081700         05  AS5ENVCA-LE-OPTSTACK.
081800             07  AS5ENVCA-STACK-BYTE0.
081900                 09  AS5ENVCA-STKB0-HEX     PIC X(01).
082000                 09  AS5ENVCA-STKB0-X80     PIC X(01).
082100             07  AS5ENVCA-STACK-BYTE1.
082200                 09  AS5ENVCA-STKB1-HEX     PIC X(01).
082300                 09  AS5ENVCA-STKB1-X80     PIC X(01).
082400                 09  AS5ENVCA-STKB1-X40     PIC X(01).
082500             07  AS5ENVCA-STACK-LOC    PIC X(05).
082600             07  AS5ENVCA-STACK-DISP   PIC X(04).
082700         05  AS5ENVCA-LE-OPTSTG.
082800             07  AS5ENVCA-STG-BYTE0.
082900                 09  AS5ENVCA-STGB0-HEX     PIC X(01).
083000                 09  AS5ENVCA-STGB0-X80     PIC X(01).
083100             07  AS5ENVCA-STG-BYTE1.
083200                 09  AS5ENVCA-STGB1-HEX     PIC X(01).
083300                 09  AS5ENVCA-STGB1-X80     PIC X(01).
083400                 09  AS5ENVCA-STGB1-X40     PIC X(01).
083500                 09  AS5ENVCA-STGB1-X20     PIC X(01).
083600                 09  FILLER                 PIC X(05).
083700             07  AS5ENVCA-HAVAL      PIC X(01).
083800             07  AS5ENVCA-HFVAL      PIC X(01).
083900             07  AS5ENVCA-SAVAL      PIC X(01).
084000         05  AS5ENVCA-LE-OPTTTA.
084100             07  AS5ENVCA-TTA-BYTE0.
084200                 09  AS5ENVCA-TTAB0-HEX     PIC X(01).
084300                 09  AS5ENVCA-TTAB0-X80     PIC X(01).
084400             07  AS5ENVCA-TTA-LEVEL         PIC  9(9) COMP.
084500             07  AS5ENVCA-TTA-VALUE         PIC X(08).
084600     03  FILLER              COMP-2 SYNC.
084700     03  AS5ENVCA-CSV-AREA.
084800         05  AS5ENVCA-CSV-IPGM    PIC X(08).
084900         05  AS5ENVCA-CSV-ATRBLST.
085000             07  AS5ENVCA-CSV-ATRB-BYTE1.
085100                 09  AS5ENVCA-ATRBB1-HEX    PIC X(01).
085200                 09  AS5ENVCA-ATRBB1-X80    PIC X(01).
085300                 09  AS5ENVCA-ATRBB1-X40    PIC X(01).
085400                 09  AS5ENVCA-ATRBB1-X20    PIC X(01).
085500                 09  AS5ENVCA-ATRBB1-X10    PIC X(01).
085600                 09  AS5ENVCA-ATRBB1-X08    PIC X(01).
085700                 09  AS5ENVCA-ATRBB1-X04    PIC X(01).
085800                 09  AS5ENVCA-ATRBB1-X02    PIC X(01).
085900                 09  AS5ENVCA-ATRBB1-X01    PIC X(01).
086000             07  AS5ENVCA-CSV-ATRB-BYTE2.
086100                 09  AS5ENVCA-ATRBB2-HEX    PIC X(01).
086200                 09  AS5ENVCA-ATRBB2-X80    PIC X(01).
086300                 09  AS5ENVCA-ATRBB2-X40    PIC X(01).
086400                 09  AS5ENVCA-ATRBB2-X20    PIC X(01).
086500                 09  AS5ENVCA-ATRBB2-X10    PIC X(01).
086600                 09  AS5ENVCA-ATRBB2-X08    PIC X(01).
086700                 09  AS5ENVCA-ATRBB2-X04    PIC X(01).
086800                 09  AS5ENVCA-ATRBB2-X02    PIC X(01).
086900                 09  AS5ENVCA-ATRBB2-X01    PIC X(01).
087000             07  AS5ENVCA-CSV-ATRB-BYTE3.
087100                 09  AS5ENVCA-ATRBB3-HEX    PIC X(01).
087200                 09  AS5ENVCA-ATRBB3-X80    PIC X(01).
087300                 09  AS5ENVCA-ATRBB3-X40    PIC X(01).
087400                 09  AS5ENVCA-ATRBB3-X20    PIC X(01).
087500                 09  AS5ENVCA-ATRBB3-X10    PIC X(01).
087600                 09  AS5ENVCA-ATRBB3-X08    PIC X(01).
087700                 09  AS5ENVCA-ATRBB3-X04    PIC X(01).
087800                 09  AS5ENVCA-ATRBB3-X02    PIC X(01).
087900                 09  AS5ENVCA-ATRBB3-X01    PIC X(01).
088000         05  AS5ENVCA-CSV-LOADER  PIC X(04).
088100         05  AS5ENVCA-CSV-PDATA   PIC X(32).
./ ADD NAME=AS5FDBK  0109-16238-17243-1546-00019-00024-00000-APLKS   15
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5FDBK
000600*    *         TITLE: LE FEEDBACK DATA STRUCTURE
000700*    *          DATE: 03/09/2015
000800*    * ------------------------------------------------------- *
000900*    *
001000*    * 2015/03/09 CREATE
001100*    * ------------------------------------------------------- *
001200 01  AS5FDBK-COND-AREA.
001300     03  AS5FDBK-COND        PIC X(08).
001400     03  FILLER REDEFINES AS5FDBK-COND.
001500         05  AS5FDBK-SEVNBR  PIC S9(4) BINARY.
001600         05  AS5FDBK-MSGNBR  PIC S9(4) BINARY.
001700         05  FILLER          PIC X(01).
001800         05  AS5FDBK-FACID   PIC X(03).
001900     03  AS5FDBK-ISI         PIC S9(9) BINARY.
./ ADD NAME=AS5LAIT1 0106-18275-18295-1457-00022-00011-00000-APLKS   34
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAIT1
000600*    *         TITLE: LEXICAL ANALYSIS INPUT TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LAIT1-INPUT-TEMPLATE.
001500     03  AS5LAIT1-INP-PATTYPE PIC X(01).
001600*        additional      input value x'01'
001700*        string pattern  input value x'02'
001800*        numeric pattern input value x'03'
001900     03  AS5LAIT1-INP-STR-LEN PIC S9(4) BINARY.
002000     03  AS5LAIT1-INP-STR-FLD PIC X(256).
002100     03  FILLER REDEFINES AS5LAIT1-INP-STR-FLD.
002200         05  AS5LAIT1-INP-STR-PTR  POINTER.
./ ADD NAME=AS5LAREQ 0118-17242-18295-1511-00117-00073-00000-APLKS   35
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAREQ
000600*    *         TITLE: LEXICAL ANALYSIS REQUEST PARAMETERS
000700*    *          DATE: 2017/08/30
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2017/08/30 CREATE
001300*    * 2018/10/09 ADD
001400*    * ------------------------------------------------------- *
001500 01  AS5LAREQ-ACTION         PIC S9(9) BINARY VALUE ZERO.
001600   88  AS5LAREQ-APPEND            VALUE +5.
001700   88  AS5LAREQ-CENTER            VALUE +6.
001800   88  AS5LAREQ-KOUNT             VALUE +7.
001900   88  AS5LAREQ-DEEDIT            VALUE +8.
002000   88  AS5LAREQ-UNK1              VALUE +9.
002100   88  AS5LAREQ-JUSTIFY           VALUE +10.
002200   88  AS5LAREQ-LEFT              VALUE +11.
002300   88  AS5LAREQ-LEX               VALUE +12.
002400   88  AS5LAREQ-RIGHT             VALUE +13.
002500   88  AS5LAREQ-SPACE             VALUE +14.
002600   88  AS5LAREQ-STRDEL            VALUE +15.
002700   88  AS5LAREQ-STRFPOS           VALUE +16.
002800   88  AS5LAREQ-STRIP             VALUE +17.
002900   88  AS5LAREQ-STRISRT           VALUE +18.
003000   88  AS5LAREQ-STRLPOS           VALUE +19.
003100   88  AS5LAREQ-STRBPOS           VALUE +20.
003200   88  AS5LAREQ-STRREPL           VALUE +21.
003300   88  AS5LAREQ-SUBSTR            VALUE +22.
003400   88  AS5LAREQ-VAR               VALUE +23.
003500   88  AS5LAREQ-VHEX              VALUE +24.
003600   88  AS5LAREQ-WORDDEL           VALUE +25.
003700   88  AS5LAREQ-UNK2              VALUE +26.
003800   88  AS5LAREQ-WORDPOS           VALUE +27.
003900   88  AS5LAREQ-HHEX              VALUE +28.
004000     SKIP1
004100 01  AS5LAREQ-OPTIONS.
004200     03  AS5LAREQ-STRIP-CHR  PIC X(01) VALUE SPACE.
004300     03  AS5LAREQ-DELIM-CHR  PIC X(01) VALUE SPACE.
004400     03  AS5LAREQ-PAD-CHR    PIC X(01) VALUE SPACE.
004500     03  AS5LAREQ-OPT-FLAG   PIC X(01) VALUE LOW-VALUE.
004600       88  AS5LAREQ-ALLOFF        VALUE X'00'.
004700       88  AS5LAREQ-UCXLATE       VALUE X'80'.
004800       88  AS5LAREQ-CASEISM       VALUE X'40'.
004900       88  AS5LAREQ-STRIP-B       VALUE X'30'.
005000       88  AS5LAREQ-STRIP-L       VALUE X'20'.
005100       88  AS5LAREQ-STRIP-T       VALUE X'10'.
005200       88  AS5LAREQ-CONTREQ       VALUE X'01'.
005300*      OPTION(S) FOR NBR TO TEXT ONLY
005400*      check format input value x'30' off
005500       88  AS5LAREQ-NBR2WRD       VALUE X'20'.
005600       88  AS5LAREQ-NBR2CUR       VALUE X'10'.
005700     03  FILLER              PIC X(03).
005800     03  AS5LAREQ-PSTATE     PIC X(01) VALUE LOW-VALUE.
005900     03  AS5LAREQ-START      PIC 9(04) BINARY VALUE ZERO.
006000     03  AS5LAREQ-COUNT      PIC 9(04) BINARY VALUE ZERO.
006100     03  FILLER              PIC X(06).
006200     03  AS5LAREQ-PSA-LEN    PIC 9(04) BINARY VALUE ZERO.
006300     03  AS5LAREQ-PSA        PIC X(32).
006400     03  FILLER              PIC X(256) VALUE LOW-VALUE.
006500     SKIP1
006600 01  AS5LAREQ-SOURCE.
006700     03  AS5LAREQ-SRC-LEN    PIC S9(4) BINARY VALUE ZERO.
006800     03  AS5LAREQ-SRC-FLD    PIC X(256).
006900     03  FILLER REDEFINES AS5LAREQ-SRC-FLD.
007000         05  AS5LAREQ-SRC-PTR     POINTER.
007100     SKIP1
007200 01  AS5LAREQ-TEMPLATE-CNT   PIC S9(9) BINARY VALUE ZERO.
007300     SKIP1
007400 01  FILLER.
007500     03  AS5LAREQ-INPUT-TEMPLATE
007600                   OCCURS 9
007700                   INDEXED BY AS5LAREQ-INP-NDX.
007800         05  AS5LAREQ-INP-PATTYPE PIC X(01) VALUE LOW-VALUE.
007900*            additional      input value x'01'
008000*            string pattern  input value x'02'
008100*            numeric pattern input value x'03'
008200         05  AS5LAREQ-INP-STR-LEN PIC S9(4) BINARY VALUE ZERO.
008300         05  AS5LAREQ-INP-STR-FLD PIC X(256).
008400         05  FILLER REDEFINES AS5LAREQ-INP-STR-FLD.
008500             07  AS5LAREQ-INP-STR-PTR  POINTER.
008600     SKIP1
008700 01  FILLER.
008800     03  AS5LAREQ-RESULT-TEMPLATE
008900                   OCCURS 16
009000                   INDEXED BY AS5LAREQ-RSLT-NDX.
009100         05  AS5LAREQ-RSLT-PATTYPE     PIC X(01) VALUE X'04'.
009200         05  AS5LAREQ-RSLT-STR-SIZE
009300                        PIC S9(4) BINARY VALUE ZERO.
009400         05  AS5LAREQ-RSLT-STR-LEN
009500                        PIC S9(4) BINARY VALUE ZERO.
009600         05  AS5LAREQ-RSLT-STR-FLD     PIC X(256)
009700                   VALUE LOW-VALUE.
009800         05  FILLER REDEFINES AS5LAREQ-RSLT-STR-FLD.
009900             07  AS5LAREQ-RSLT-TOKEN-TYPE   PIC X(01).
010000*                floating point value c'F'
010100*                real           value c'R'
010200*                integer        value c'Z'
010300             07  AS5LAREQ-RSLT-TOKEN-STYPE  PIC X(01).
010400             07  AS5LAREQ-RSLT-TOKEN-LEN
010500                        PIC S9(4) BINARY.
010600             07  AS5LAREQ-RSLT-TOKEN-INFO.
010700                 09  AS5LAREQ-RSLT-TOKEN-DIGITS
010800                        PIC S9(4) BINARY.
010900                 09  AS5LAREQ-RSLT-TOKEN-SCALES
011000                        PIC S9(4) BINARY.
011100                 09  AS5LAREQ-RSLT-TOKEN-EXPS
011200                        PIC S9(4) BINARY.
011300                 09  AS5LAREQ-RSLT-TOKEN-NBR     PIC X(40).
011400*                    integer - 31 digits max
011500*                    real - 31 digits max
011600*                    floating point - 35 digits max
011700*                    + floating point exponent - 5 digits max
./ ADD NAME=AS5LARO1 0105-18275-18295-1502-00037-00013-00000-APLKS   34
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LARO1
000600*    *         TITLE: LEXICAL ANALYSIS REQUEST OPTIONS
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LARO1-OPTIONS.
001500     03  AS5LARO1-STRIP-CHR  PIC X(01).
001600     03  AS5LARO1-DELIM-CHR  PIC X(01).
001700     03  AS5LARO1-PAD-CHR    PIC X(01).
001800     03  AS5LARO1-OPT-FLAG   PIC X(01).
001900       88  AS5LARO1-ALLOFF        VALUE X'00'.
002000       88  AS5LARO1-UCXLATE       VALUE X'80'.
002100       88  AS5LARO1-CASEISM       VALUE X'40'.
002200       88  AS5LARO1-STRIP-B       VALUE X'30'.
002300       88  AS5LARO1-STRIP-L       VALUE X'20'.
002400       88  AS5LARO1-STRIP-T       VALUE X'10'.
002500       88  AS5LARO1-CONTREQ       VALUE X'01'.
002600*      OPTION(S) FOR NBR TO TEXT ONLY
002700*      CHECK FORMAT INPUT VALUE X'30' OFF
002800       88  AS5LARO1-NBR2WRD       VALUE X'20'.
002900       88  AS5LARO1-NBR2CUR       VALUE X'10'.
003000     03  FILLER              PIC X(03).
003100     03  AS5LARO1-PSTATE     PIC X(01).
003200     03  AS5LARO1-START      PIC 9(04) COMP-5.
003300     03  AS5LARO1-COUNT      PIC 9(04) COMP-5.
003400     03  FILLER              PIC X(06).
003500     03  AS5LARO1-PSA-LEN    PIC 9(04) BINARY.
003600     03  AS5LARO1-PSA        PIC X(32).
003700     03  FILLER              PIC X(256).
./ ADD NAME=AS5LART1 0106-18275-18295-1503-00019-00009-00000-APLKS   14
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART1
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LART1-RESULT-TEMPLATE.
001500     05  AS5LART1-RSLT-PATTYPE    PIC X(01).
001600     05  AS5LART1-RSLT-STR-SIZE   PIC S9(4) BINARY.
001700     05  AS5LART1-RSLT.
001800         07  AS5LART1-RSLT-STR-LEN     PIC S9(4) BINARY.
001900         07  AS5LART1-RSLT-STR-FLD     PIC X(256).
./ ADD NAME=AS5LART2 0103-18275-18295-1452-00039-00019-00000-APLKS   33
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART2
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR DE-EDITED NUMBER
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART2-RESULT-TEMPLATE.
001600     03  AS5LART2-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART2-RSLT-STR-SIZE   PIC S9(4) BINARY.
001800     03  AS5LART2-RSLT.
001900         05  AS5LART2-RSLT-STR-LEN     PIC S9(4) BINARY.
002000         05  AS5LART2-RSLT-STR-FLD     PIC X(50).
002100         05  FILLER REDEFINES AS5LART2-RSLT-STR-FLD.
002200             07  AS5LART2-RSLT-TOKEN-TYPE   PIC X(01).
002300*                F=floating point
002400*                R=real
002500*                Z=integer
002600             07  AS5LART2-RSLT-TOKEN-STYPE  PIC X(01).
002700             07  AS5LART2-RSLT-TOKEN-LEN    PIC S9(4) BINARY.
002800             07  AS5LART2-RSLT-TOKEN-INFO.
002900                 09  AS5LART2-RSLT-TOKEN-DIGIT#
003000                                  PIC S9(4) BINARY.
003100                 09  AS5LART2-RSLT-TOKEN-SCALE#
003200                                  PIC S9(4) BINARY.
003300                 09  AS5LART2-RSLT-TOKEN-EXP#
003400                                  PIC S9(4) BINARY.
003500                 09  AS5LART2-RSLT-TOKEN-NBR     PIC X(40).
003600*                    integer - 31 digits max
003700*                    real - 31 digits max
003800*                    floating point - 35 digits max
003900*                    + floating point exponent - 5 digits max
./ ADD NAME=AS5LART3 0103-18295-18298-1333-00020-00039-00000-APLKS   58
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART3
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR MEDIUM RESULTS
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART3-RESULT-TEMPLATE.
001600     03  AS5LART3-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART3-RSLT-STR-SIZE   PIC S9(4) BINARY.
001800     03  AS5LART3-RSLT.
001900         05  AS5LART3-RSLT-STR-LEN     PIC S9(4) BINARY.
002000         05  AS5LART3-RSLT-STR-FLD     PIC X(512).
./ ADD NAME=AS5LART4 0101-18296-18296-1159-00020-00020-00000-APLKS   31
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LART4
000600*    *         TITLE: LEXICAL ANALYSIS RESULT TEMPLATE
000700*    *                FOR LARGE RESULTS
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LART4-RESULT-TEMPLATE.
001600     03  AS5LART4-RSLT-PATTYPE    PIC X(01).
001700     03  AS5LART4-RSLT-STR-SIZE   PIC S9(4) COMP-5.
001800     03  AS5LART4-RSLT.
001900         05  AS5LART4-RSLT-STR-LEN     PIC S9(4) COMP-5.
002000         05  AS5LART4-RSLT-STR-FLD     PIC X(32767).
./ ADD NAME=AS5LAST1 0103-18275-18295-1453-00018-00005-00000-APLKS   54
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAST1
000600*    *         TITLE: LEXICAL ANALYSIS SOURCE TEMPLATE
000700*    *          DATE: 2018/10/02
000800*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
000900*    *                SERVICE(S)
001000*    * ------------------------------------------------------- *
001100*    *
001200*    * 2018/10/02 CREATE
001300*    * ------------------------------------------------------- *
001400 01  AS5LAST1-SOURCE.
001500     03  AS5LAST1-SRC-LEN    PIC S9(4) BINARY.
001600     03  AS5LAST1-SRC-FLD    PIC X(256).
001700     03  FILLER REDEFINES AS5LAST1-SRC-FLD.
001800         05  AS5LAST1-SRC-PTR     POINTER.
./ ADD NAME=AS5LAST2 0102-18295-18295-1515-00019-00018-00000-APLKS   24
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5LAST2
000600*    *         TITLE: LEXICAL ANALYSIS SOURCE TEMPLATE
000700*    *                FOR LARGE SOURCE
000800*    *          DATE: 2018/10/02
000900*    *          DESC: INPUT/OUTPUT DATA AREAS FOR STRING
001000*    *                SERVICE(S)
001100*    * ------------------------------------------------------- *
001200*    *
001300*    * 2018/10/02 CREATE
001400*    * ------------------------------------------------------- *
001500 01  AS5LAST2-SOURCE.
001600     03  AS5LAST2-SRC-LEN    PIC S9(4) COMP-5.
001700     03  AS5LAST2-SRC-FLD    PIC X(32756).
001800     03  FILLER REDEFINES AS5LAST2-SRC-FLD.
001900         05  AS5LAST2-SRC-PTR     POINTER.
./ ADD NAME=AS5MSGRB 0106-17242-17264-1444-00048-00019-00000-APLKS   49
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5MSGRB
000600*    *         TITLE: LE ERROR MESSAGE REQUEST BLOCK
000700*    *          DATE: 2017/08/30
000800*    *          DESC: INPUT DATA FOR AS ERROR MESSAGE MODULE
000900*    * ------------------------------------------------------- *
001000*    *
001100*    * 2017/08/30 CREATE
001200*    * ------------------------------------------------------- *
001300 01  AS5MSGRB-REQUEST-BLOCK.
001400     03  FILLER.
001500         05  FILLER     OCCURS 03 TIMES
001600                        INDEXED BY AS5MSGRB-CTOK-NDX.
001700*            * ------------------------------------------------ *
001800*            *   1ST OCCURANCE: PRIMARY LE CONDITION TOKEN
001900*            *   2ND OCCURANCE: INFO MESSAGE TIED TO 1ST
002000*            *   3RD OCCURANCE: INFO MESSAGE TIED TO 1ST
002100*            * ------------------------------------------------ *
002200             07  AS5MSGRB-CTOKEN.
002300                 09  AS5MSGRB-COND-VALUE.
002400                   88  CEE000     VALUE X'0000000000000000'.
002500**                     COPY CEEIGZCT.
002600**                     COPY IGZIGZCT.
002700                       COPY ASUIGZCT.
002800                     11  AS5MSGRB-COND PIC X(08).
002900                     11  FILLER REDEFINES AS5MSGRB-COND.
003000                         13  AS5MSGRB-SEVNBR PIC S9(4) BINARY.
003100                         13  AS5MSGRB-MSGNBR PIC S9(4) BINARY.
003200                         13  FILLER          PIC X(04).
003300                 09  AS5MSGRB-ISI      PIC S9(9) BINARY.
003400             07  FILLER      OCCURS 08 TIMES
003500                             INDEXED BY AS5MSGRB-ISI-NDX.
003600*                * -------------------------------------------- *
003700*                *   1ST OCCURANCE: COMPONENT ISSUEING MESSAGE
003800*                *   2ND OCCURANCE: COMPONENT TYPE
003900*                *   3RD OCCURANCE: COMPONENT NAME OF 2ND
004000*                *   4TH OCCURANCE: ACTION
004100*                *   5TH OCCURANCE: NUMBER STRING
004200*                *   6TH OCCURANCE: NUMBER STRING
004300*                *   7TH OCCURANCE: TEXT STRING
004400*                *   8TH OCCURANCE: TEXT STRING
004500*                * -------------------------------------------- *
004600                 09  AS5MSGRB-ISI-VSTR.
004700                     11  AS5MSGRB-ISI-VLEN  PIC S9(4) BINARY.
004800                     11  AS5MSGRB-ISI-VTXT  PIC X(44).
./ ADD NAME=AS5PODIR 0105-20240-20244-0950-00035-00013-00000-APLKS   40
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * CPYBK ID: AS5PODIR
000600*    *    TITLE: MAP Z/OS PDS/PDSE DIRECTORY
000700*    *     DATE: 2020/08/27
000800*    *
000900*    *     DESC: THIS COPYBOOK IS USED TO MAP THE
001000*    *           Z/OS PDS/PDSE DIRECTORY
001100*    *
001200*    * ------------------------------------------------------- *
001300 01  AS5PODIR-DATA-AREA.
001400     03  AS5PODIR-MBR        PIC X(08).
001500     03  AS5PODIR-TTR        PIC X(03).
001600     03  AS5PODIR-INDC       PIC X(01).
001700     03  AS5PODIR-USER       PIC X(62).
001800     03  AS5PODIR-ISPF REDEFINES AS5PODIR-USER.
001900         05  AS5PODIR-VER    PIC X(01).
002000         05  AS5PODIR-REL    PIC X(01).
002100         05  FILLER          PIC X(02).
002200         05  AS5PODIR-CRDTE  PIC 9(7) COMP-3.
002300*            0cyydddF form of Julian, add 1900000
002400         05  AS5PODIR-LCDTE  PIC 9(7) COMP-3.
002500*            0cyydddF form of Julian, add 1900000
002600         05  AS5PODIR-LCTME  PIC X(02).
002700*            pack-decimal without sign hhmm
002800         05  AS5PODIR-SIZE   PIC 9(4) COMP-5.
002900         05  AS5PODIR-CRSZ   PIC 9(4) COMP-5.
003000         05  AS5PODIR-MODROW PIC 9(4) COMP-5.
003100         05  AS5PODIR-USERID PIC X(8).
003200         05  FILLER          PIC X(2).
003300         05  FILLER          PIC X(32).
003400     03  AS5PODIR-LMOD REDEFINES AS5PODIR-USER.
003500         05  FILLER          PIC X(62).
./ ADD NAME=AS5RECA  0106-19249-19249-1121-00074-00074-00000-APLKS   26
000100*    * ------------------------------------------------------- *
000200*    * ARCHITECTURE SERVICES
000300*    * COBOL COPYBOOK, DATA
000400*    *
000500*    * COPYBOOK NAME: AS5RECA
000600*    *         TITLE: REGULAR EXPRESSION COMMUNICATION AREA
000700*    *                DATA GENERATED BY REGCOMP()
000800*    *                TO BE USED BY REGEXEC()
000900*    *          DATE: 2019/06/07
001000*    *          DESC: OUTPUT FOR REGCOMP()
001100*    *                INPUT  FOR REGEXEC()
001200*    * ------------------------------------------------------- *
001300*    *
001400*    * 2019/06/07 lks  create
001500*    * ------------------------------------------------------- *
001600     SKIP1
001700 01  AS5RECA-COMMAREA.
001800     03  AS5RECA-RE-NSUB     PIC 9(9) COMP-5.
001900*        number of expressions in RE pattern
002000     03  AS5RECA-RE-COMP     POINTER.
002100*        pointer to compiled RE, freed by REGFREE()
002200     03  AS5RECA-RE-CFLAGS   PIC S9(9) COMP-5.
002300*        saved flages for REGCOMP()
002400        88  USE-EXTENDED-RULES    VALUE +1.
002500        88  IGNORE-CASE-IN-MATCH  VALUE +2.
002600        88  CONVERT-TO-NEWLINE    VALUE +4.
002700        88  DONOT-REPORT-SUB-EXPRESSIONS    VALUE +8.
002800     03  AS5RECA-RE-ERROFF   PIC 9(9) COMP-5.
002900*        error offset for RE pattern
003000     03  AS5RECA-RE-LEN      PIC 9(9) COMP-5.
003100*        number of characters in compiled pattern
003200     03  AS5RECA-RE-UCOLL    PIC 9(4) COMP-5 OCCURS 2.
003300*        min/max unique collating values
003400     03  AS5RECA-RE-LSUB     POINTER OCCURS 10.
003500*        starting position of sub-expression
003600     03  AS5RECA-RE-ESUB     POINTER OCCURS 10.
003700*        ending position of sub-expression
003800     03  AS5RECA-RE-MAP      PIC X(256).
003900*        maps valid pattern characters
004000     03  AS5RECA-RE-SHIFT    PIC S9(4) COMP-5.
004100*        saved shift state
004200     03  AS5RECA-RE-DBCS     PIC S9(4) COMP-5.
004300*        may start with DBCS character
004400     SKIP1
004500 01  AS5RECA-RE-MATCH.
004600     03  AS5RECA-RE-MATCH-ENTRY OCCURS 10.
004700         05  AS5RECA-RE-MSOFFSET PIC S9(9) COMP-5.
004800         05  AS5RECA-RE-MSSTATE  PIC S9(9) COMP-5.
004900         05  AS5RECA-RE-MNOFFSET PIC S9(9) COMP-5.
005000         05  AS5RECA-RE-MNSTATE  PIC S9(9) COMP-5.
005100     SKIP1
005200 01  AS5RECA-RE-EFLAGS  PIC S9(9) COMP-5.
005300*   saved flages for REGEXEC()
005400    88  1ST-CHAR-NOT-BOL     VALUE +100.
005500    88  LST-CHAR-NOT-EOL     VALUE +200.
005600     SKIP1
005700 01  AS5RECA-RE-ECODE   PIC S9(9) COMP-5.
005800*   RE error codes
005900    88  PATTERN-NOT-FOUND    VALUE +1.
006000    88  BAD-PATTERN     VALUE +2.
006100    88  BAD-COLLATING-ELEMENT     VALUE +3.
006200    88  BAD-CHAR-CLASS  VALUE +4.
006300    88  LST-CHAR-ESCAPE VALUE +5.
006400    88  BAD-NUMBER      VALUE +6.
006500    88  IMBAL-BRACK     VALUE +7.
006600    88  IMBAL-PAREN     VALUE +8.
006700    88  IMBAL-BRACE     VALUE +9.
006800    88  BAD-BRACE       VALUE +10.
006900    88  BAD-RANGE       VALUE +11.
007000    88  OUT-OF-SPACE    VALUE +12.
007100    88  BAD-RPT         VALUE +13.
007200    88  BAD-CHAR        VALUE +14.
007300    88  BAD-BOL         VALUE +15.
007400    88  BAD-EOL         VALUE +16.
./ ADD NAME=DTEB2G   0123-20101-20118-1518-00152-00155-00000-APLKS   07
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEB2G.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT BASE DAY
000700* TO GREGORIAN DATE.
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEB2G'
001200*      USING XS-BDAY         /*INPUT BASE DAY*/
001300*            XS-GDATE        /*OUTPUT GREGORIAN DATE*/
001400*
001500* ALGORITHM: based on REXX DATE function
001600*
001700*       Arg bday . ;
001800*
001900*       a = bday;
002000*       b = a%365;           compute years
002100*    loop_back:
002200*       b = b-1;
002300*       c = b%400;           leap centuries
002400*       d = b%100;           centuries
002500*       e = b%4;             leap years
002600*       f = b*365+e-d+c;
002700*       If a < f Then;
002800*         Signal loop_back;
002900*       g = a-f+1;           nbr of days in current year
003000*       b = b+1;             current year
003100*       b = Right(b,4,'0');
003200*       n = Right(g,3,'0');
003300*
003400*       gdate = J2G(b||n);   julian date
003500*
003600*       Return gdate;
003700*
003800* RETURN CODE:
003900*              0 = successful
004000*              4 = invalid date
004100*              8 = invalid parameters
004200*
004300* ------------------------------------------------------* XXXXXXXX
004400 DATA DIVISION.
004500 WORKING-STORAGE SECTION.
004600 01  FILLER.
004700     03  WS-EYE-CATCHER PIC X(25)
004800              VALUE "BUZZARD CREEK TECH, INC. ".
004900     03  WS-PGMID       PIC X(08) VALUE "DTEB2G".
005000 01  WS-DTEJ2G          PIC X(08) VALUE "DTEJ2G".
005100
005200 LOCAL-STORAGE SECTION.
005300 01  LS-YEARS                PIC S9(9) BINARY.
005400 01  LS-DAYS                 PIC S9(9) BINARY.
005500 01  LS-NBR-LEAP-YEARS       PIC S9(9) BINARY.
005600 01  LS-NBR-CENTURIES        PIC S9(9) BINARY.
005700 01  LS-NBR-LEAP-CENTURIES   PIC S9(9) BINARY.
005800 01  LS-TEMP-F               PIC S9(9) BINARY.
005900 01  LS-BDAY                 PIC S9(9) BINARY.
006000 01  LS-GDATE                PIC 9(8).
006100 01  LS-JDATE.
006200     03  LS-YEAR        PIC 9(4).
006300     03  LS-DAY-OF-YR   PIC 9(3).
006400
006500 LINKAGE SECTION.
006600 01  XS-BDAY            PIC S9(9) BINARY.
006700 01  XS-GDATE.
006800     03  XS-YEAR        PIC 9(4).
006900     03  XS-MONTH       PIC 9(2).
007000     03  XS-DAY         PIC 9(2).
007100
007200 PROCEDURE DIVISION USING
007300     XS-BDAY
007400     XS-GDATE.
007500
007600     CONTINUE.
007700 INIT-ROUTINE.
007800
007900     MOVE ZERO TO RETURN-CODE
008000                  XS-GDATE
008100
008200*    INPUT DATE > ZERO
008300     IF NOT (XS-BDAY > ZERO)
008400       MOVE +4 TO RETURN-CODE
008500       GO TO RETURN-ROUTINE
008600     END-IF
008700
008800*    INPUT DATE VALID
008900     IF NOT (XS-BDAY >= 577735)
009000       MOVE +4 TO RETURN-CODE
009100       GO TO RETURN-ROUTINE
009200     END-IF
009300
009400     CONTINUE.
009500 MAINLINE-ROUTINE.
009600
009700*    a = bday;
009800     MOVE XS-BDAY TO LS-BDAY
009900*    b = a%365;         compute years
010000     DIVIDE LS-BDAY BY +365
010100          GIVING LS-YEARS
010200
010300     CONTINUE.
010400 MAINLINE-0020.
010500
010600*    b = b-1;
010700     SUBTRACT +1 FROM LS-YEARS
010800*    c = b%400;         leap centuries
010900     DIVIDE LS-YEARS BY +400
011000          GIVING LS-NBR-LEAP-CENTURIES
011100*    d = b%100;         centuries
011200     DIVIDE LS-YEARS BY +100
011300          GIVING LS-NBR-CENTURIES
011400*    e = b%4;           leap years
011500     DIVIDE LS-YEARS BY +4
011600          GIVING LS-NBR-LEAP-YEARS
011700*    f = b*365+e-d+c;
011800     COMPUTE LS-TEMP-F = LS-YEARS * 365
011900          + LS-NBR-LEAP-YEARS
012000          - LS-NBR-CENTURIES
012100          + LS-NBR-LEAP-CENTURIES
012200
012300     IF LS-BDAY < LS-TEMP-F
012400       GO TO MAINLINE-0020
012500     END-IF
012600
012700*    g = a-f+1;         nbr of days in current year
012800     COMPUTE LS-DAYS = LS-BDAY - LS-TEMP-F + 1
012900*    b = b+1;           current year
013000     ADD +1 TO LS-YEARS
013100
013200     MOVE LS-YEARS TO LS-YEAR
013300     MOVE LS-DAYS TO LS-DAY-OF-YR
013400
013500     MOVE ZERO TO XS-GDATE
013600
013700     CALL WS-DTEJ2G
013800          USING LS-JDATE
013900                LS-GDATE
014000     IF RETURN-CODE > ZERO
014100       DISPLAY WS-PGMID " " WS-DTEJ2G
014200            " COBOL RETURN CODE = " RETURN-CODE
014300            " J DATE = " LS-JDATE
014400       GO TO RETURN-ROUTINE
014500     END-IF
014600
014700     MOVE LS-GDATE TO XS-GDATE
014800
014900     CONTINUE.
015000 RETURN-ROUTINE.
015100
015200     GOBACK.
./ ADD NAME=DTEDOW1  0130-20101-20157-1726-00219-00136-00000-APLKS   12
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEDOW1.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT GREGORIAN DATE
000700* TO DAY OF WEEK (1:7,SUN:SAT)
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEDOW1'
001200*      USING XS-GDATE        /*INPUT GREGORIAN DATE*/
001300*            XS-DOW-NBR      /*OUTPUT DAY OF WEEK NUMBER*/
001400*            XS-DOW-TXT      /*OUTPUT DAY OF WEEK TEXT*/
001500*
001600* ALGORITHM: developed by C. Zeller (1887) modified
001700*
001800*       Arg gdate . ;   /* i.e. 20160101 */
001900*       Parse VAR gdate yr 5 mo 7 da . ;
002000*
002100*       If mo <= 2 Then;
002200*         Do;
002300*           mo = mo+12;
002400*           yr = yr-1;
002500*         End;
002600*
002700*       c = yr%100;
002800*       yr = yr//100;
002900*       wt = (da+13*(mo+1)%5+yr+yr%4+c%4-2*c)//7;
003000*       If wt <= 0 Then;
003100*         wt = wt+7;
003200*       wt = wt*1;
003300*
003400*       dow = wt Word("Sun Mon Tue Wed Thu Fri Sat",wt);
003500*
003600*       Return dow;
003700*
003800* RETURN CODE:
003900*              0 = successful
004000*              4 = invalid date
004100*              8 = invalid parameters
004200*
004300* ------------------------------------------------------* XXXXXXXX
004400 DATA DIVISION.
004500 WORKING-STORAGE SECTION.
004600 01  FILLER.
004700     03  WS-EYE-CATCHER PIC X(25)
004800              VALUE "BUZZARD CREEK TECH, INC. ".
004900     03  WS-PGMID       PIC X(08) VALUE "DTEDOW1".
005000
005100 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
005200
005300 01  WS-DAYS-IN-MONTH-VECTOR.
005400     03  FILLER         PIC 9(4) BINARY VALUE 31.
005500     03  FILLER         PIC 9(4) BINARY VALUE 28.
005600     03  FILLER         PIC 9(4) BINARY VALUE 31.
005700     03  FILLER         PIC 9(4) BINARY VALUE 30.
005800     03  FILLER         PIC 9(4) BINARY VALUE 31.
005900     03  FILLER         PIC 9(4) BINARY VALUE 30.
006000     03  FILLER         PIC 9(4) BINARY VALUE 31.
006100     03  FILLER         PIC 9(4) BINARY VALUE 31.
006200     03  FILLER         PIC 9(4) BINARY VALUE 30.
006300     03  FILLER         PIC 9(4) BINARY VALUE 31.
006400     03  FILLER         PIC 9(4) BINARY VALUE 30.
006500     03  FILLER         PIC 9(4) BINARY VALUE 31.
006600 01  FILLER REDEFINES WS-DAYS-IN-MONTH-VECTOR.
006700     03  WS-DIM-ENTRIES OCCURS 12 TIMES.
006800         05  WS-DIM     PIC 9(4) BINARY.
006900
007000 01  WS-DAY-OF-WEEK-VECTOR.
007100     03  FILLER         PIC X(09) VALUE "SUNDAY".
007200     03  FILLER         PIC X(09) VALUE "MONDAY".
007300     03  FILLER         PIC X(09) VALUE "TUESDAY".
007400     03  FILLER         PIC X(09) VALUE "WEDNESDAY".
007500     03  FILLER         PIC X(09) VALUE "THURSDAY".
007600     03  FILLER         PIC X(09) VALUE "FRIDAY".
007700     03  FILLER         PIC X(09) VALUE "SATURDAY".
007800 01  FILLER REDEFINES WS-DAY-OF-WEEK-VECTOR.
007900     03  WS-DOW-ENTRIES OCCURS 7 TIMES.
008000         05  WS-DOW-TXT PIC X(09).
008100
008200 LOCAL-STORAGE SECTION.
008300
008400*    QUOTIENT OR ANSWER
008500 01  LS-QUOTIENT        PIC S9(9) BINARY.
008600*    REMAINDER
008700 01  LS-REMAINDER       PIC S9(9) BINARY.
008800
008900 01  LS-NBR-CENTURIES   PIC S9(9) BINARY.
009000 01  LS-TEMP-WT         PIC S9(9) BINARY.
009100 01  LS-GDATE.
009200     03  LS-GYEAR       PIC S9(9) BINARY SYNC.
009300     03  LS-GMONTH      PIC S9(9) BINARY SYNC.
009400     03  LS-GDAY        PIC S9(9) BINARY SYNC.
009500
009600 LINKAGE SECTION.
009700 01  XS-GDATE.
009800     03  XS-YEAR        PIC 9(4).
009900     03  XS-MONTH       PIC 9(2).
010000     03  XS-DAY         PIC 9(2).
010100 01  XS-DOW-NBR         PIC S9(4) BINARY.
010200 01  XS-DOW-TXT         PIC X(9).
010300
010400 PROCEDURE DIVISION USING
010500     XS-GDATE
010600     XS-DOW-NBR
010700     XS-DOW-TXT.
010800
010900     CONTINUE.
011000 INIT-ROUTINE.
011100
011200     MOVE ZERO TO  RETURN-CODE
011300                   XS-DOW-NBR
011400     MOVE SPACE TO XS-DOW-TXT
011500
011600*    INPUT DATE NUMERIC
011700     IF XS-GDATE NOT NUMERIC
011800       MOVE +8 TO RETURN-CODE
011900       GO TO RETURN-ROUTINE
012000     END-IF
012100
012200     MOVE XS-YEAR TO LS-GYEAR
012300     MOVE XS-MONTH TO LS-GMONTH
012400     MOVE XS-DAY TO LS-GDAY
012500
012600     IF LS-GYEAR < 100
012700       COMPUTE LS-GYEAR = FUNCTION YEAR-TO-YYYY
012800            (LS-GYEAR WS-HIBND-100YR)
012900     END-IF
013000
013100*    INPUT DATE VALID
013200     IF LS-GYEAR < 1582
013300       MOVE +4 TO RETURN-CODE
013400       GO TO RETURN-ROUTINE
013500     END-IF
013600
013700     IF NOT (LS-GMONTH > ZERO AND < 13)
013800       MOVE +4 TO RETURN-CODE
013900       GO TO RETURN-ROUTINE
014000     END-IF
014100
014200     IF NOT (LS-GDAY > ZERO AND < 32)
014300       MOVE +4 TO RETURN-CODE
014400       GO TO RETURN-ROUTINE
014500     END-IF
014600
014700     IF LS-GYEAR = 1582
014800       IF NOT ((LS-GMONTH > 9 AND < 13)
014900            AND (LS-GDAY > 14 AND < 32))
015000         MOVE +4 TO RETURN-CODE
015100         GO TO RETURN-ROUTINE
015200       END-IF
015300     END-IF
015400
015500     IF LS-GDAY <= WS-DIM (XS-MONTH)
015600       GO TO MAINLINE-ROUTINE
015700     END-IF
015800
015900     IF NOT (LS-GMONTH = 2)
016000       MOVE +4 TO RETURN-CODE
016100       GO TO RETURN-ROUTINE
016200     END-IF
016300
016400     IF LS-GDAY > 29
016500       MOVE +4 TO RETURN-CODE
016600       GO TO RETURN-ROUTINE
016700     END-IF
016800
016900     DIVIDE LS-GYEAR BY 100
017000          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
017100     IF LS-REMAINDER = ZERO
017200       DIVIDE LS-GYEAR BY 400
017300          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
017400       IF LS-REMAINDER NOT = ZERO
017500         MOVE +4 TO RETURN-CODE
017600         GO TO RETURN-ROUTINE
017700       END-IF
017800     ELSE
017900       DIVIDE LS-GYEAR BY 4
018000            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
018100       IF LS-REMAINDER NOT = ZERO
018200         MOVE +4 TO RETURN-CODE
018300         GO TO RETURN-ROUTINE
018400       END-IF
018500     END-IF
018600
018700     CONTINUE.
018800 MAINLINE-ROUTINE.
018900
019000     IF LS-GMONTH <= 2
019100       ADD +12 TO LS-GMONTH
019200       SUBTRACT +1 FROM LS-GYEAR
019300     END-IF
019400
019500*    c = yr%100; yr = yr//100;
019600     DIVIDE LS-GYEAR BY 100
019700          GIVING LS-NBR-CENTURIES REMAINDER LS-REMAINDER
019800*    wt = (da+13*(mo+1)%5+yr+yr%4+c%4-2*c)//7;
019900     COMPUTE LS-TEMP-WT = (LS-GDAY + (13 * (LS-GMONTH + 1) / 5)
020000          + LS-REMAINDER
020100          + (LS-REMAINDER / 4)
020200          + (LS-NBR-CENTURIES / 4)
020300          - (2 * LS-NBR-CENTURIES))
020400     DIVIDE LS-TEMP-WT BY 7
020500          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
020600
020700     IF LS-REMAINDER <= ZERO
020800       ADD +7 TO LS-REMAINDER
020900     END-IF
021000
021100*    dow = wt Word("Sun Mon Tue Wed Thu Fri Sat",wt);
021200     MOVE LS-REMAINDER TO XS-DOW-NBR
021300     MOVE WS-DOW-TXT (XS-DOW-NBR)
021400          TO XS-DOW-TXT
021500
021600     CONTINUE.
021700 RETURN-ROUTINE.
021800
021900     GOBACK.
./ ADD NAME=DTEDOW2  0128-20101-20160-1002-00202-00160-00000-APLKS   53
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEDOW2.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT GREGORIAN DATE
000700* TO DAY OF WEEK (1:7,MON:SUN) ISO-8601 STANDARD
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEDOW2'
001200*      USING XS-GDATE        /*INPUT GREGORIAN DATE*/
001300*            XS-DOW-NBR      /*OUTPUT DAY OF WEEK NUMBER*/
001400*            XS-DOW-TXT      /*OUTPUT DAY OF WEEK TEXT*/
001500*
001600* ALGORITHM:
001700*
001800*       Arg gdate . ;   /* i.e. 20160101 */
001900*       Parse VAR gdate yr 5 mo 7 da . ;
002000*
002100*       wt = Date("B",gdate,"S")//7+1;
002200*       dow = wt Word("Mon Tue Wed Thu Fri Sat Sun",wt);
002300*
002400*       Return dow;
002500*
002600* RETURN CODE:
002700*              0 = successful
002800*              4 = invalid date
002900*              8 = invalid parameters
003000*
003100* ------------------------------------------------------* XXXXXXXX
003200 DATA DIVISION.
003300 WORKING-STORAGE SECTION.
003400 01  FILLER.
003500     03  WS-EYE-CATCHER PIC X(25)
003600              VALUE "BUZZARD CREEK TECH, INC. ".
003700     03  WS-PGMID       PIC X(08) VALUE "DTEDOW2".
003800 01  WS-DTEG2B          PIC X(08) VALUE "DTEG2B".
003900
004000 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
004100
004200 01  WS-DAYS-IN-MONTH-VECTOR.
004300     03  FILLER         PIC 9(4) BINARY VALUE 31.
004400     03  FILLER         PIC 9(4) BINARY VALUE 28.
004500     03  FILLER         PIC 9(4) BINARY VALUE 31.
004600     03  FILLER         PIC 9(4) BINARY VALUE 30.
004700     03  FILLER         PIC 9(4) BINARY VALUE 31.
004800     03  FILLER         PIC 9(4) BINARY VALUE 30.
004900     03  FILLER         PIC 9(4) BINARY VALUE 31.
005000     03  FILLER         PIC 9(4) BINARY VALUE 31.
005100     03  FILLER         PIC 9(4) BINARY VALUE 30.
005200     03  FILLER         PIC 9(4) BINARY VALUE 31.
005300     03  FILLER         PIC 9(4) BINARY VALUE 30.
005400     03  FILLER         PIC 9(4) BINARY VALUE 31.
005500 01  FILLER REDEFINES WS-DAYS-IN-MONTH-VECTOR.
005600     03  WS-DIM-ENTRIES OCCURS 12 TIMES.
005700         05  WS-DIM     PIC 9(4) BINARY.
005800
005900 01  WS-DAY-OF-WEEK-VECTOR.
006000     03  FILLER         PIC X(09) VALUE "MONDAY".
006100     03  FILLER         PIC X(09) VALUE "TUESDAY".
006200     03  FILLER         PIC X(09) VALUE "WEDNESDAY".
006300     03  FILLER         PIC X(09) VALUE "THURSDAY".
006400     03  FILLER         PIC X(09) VALUE "FRIDAY".
006500     03  FILLER         PIC X(09) VALUE "SATURDAY".
006600     03  FILLER         PIC X(09) VALUE "SUNDAY".
006700 01  FILLER REDEFINES WS-DAY-OF-WEEK-VECTOR.
006800     03  WS-DOW-ENTRIES OCCURS 7 TIMES.
006900         05  WS-DOW-TXT PIC X(09).
007000
007100 LOCAL-STORAGE SECTION.
007200
007300*    QUOTIENT OR ANSWER
007400 01  LS-QUOTIENT        PIC S9(9) BINARY.
007500*    REMAINDER
007600 01  LS-REMAINDER       PIC S9(9) BINARY.
007700
007800 01  LS-TEMP-WT         PIC S9(4) BINARY.
007900 01  LS-BDAY            PIC S9(9) BINARY.
008000 01  LS-GDATE.
008100     03  LS-GYEAR       PIC S9(9) BINARY SYNC.
008200     03  LS-GMONTH      PIC S9(9) BINARY SYNC.
008300     03  LS-GDAY        PIC S9(9) BINARY SYNC.
008400
008500 LINKAGE SECTION.
008600 01  XS-GDATE.
008700     03  XS-YEAR        PIC 9(4).
008800     03  XS-MONTH       PIC 9(2).
008900     03  XS-DAY         PIC 9(2).
009000 01  XS-DOW-NBR         PIC S9(4) BINARY.
009100 01  XS-DOW-TXT         PIC X(9).
009200
009300 PROCEDURE DIVISION USING
009400     XS-GDATE
009500     XS-DOW-NBR
009600     XS-DOW-TXT.
009700
009800     CONTINUE.
009900 INIT-ROUTINE.
010000
010100     MOVE ZERO TO RETURN-CODE
010200                  XS-DOW-NBR
010300     MOVE SPACE TO XS-DOW-TXT
010400
010500*    INPUT DATE NUMERIC
010600     IF XS-GDATE NOT NUMERIC
010700       MOVE +8 TO RETURN-CODE
010800       GO TO RETURN-ROUTINE
010900     END-IF
011000
011100     MOVE XS-YEAR TO LS-GYEAR
011200     MOVE XS-MONTH TO LS-GMONTH
011300     MOVE XS-DAY TO LS-GDAY
011400
011500     IF LS-GYEAR < 100
011600       COMPUTE LS-GYEAR = FUNCTION YEAR-TO-YYYY
011700            (LS-GYEAR WS-HIBND-100YR)
011800     END-IF
011900
012000*    INPUT DATE VALID
012100     IF LS-GYEAR < 1582
012200       MOVE +4 TO RETURN-CODE
012300       GO TO RETURN-ROUTINE
012400     END-IF
012500
012600     IF NOT (LS-GMONTH > ZERO AND < 13)
012700       MOVE +4 TO RETURN-CODE
012800       GO TO RETURN-ROUTINE
012900     END-IF
013000
013100     IF NOT (LS-GDAY > ZERO AND < 32)
013200       MOVE +4 TO RETURN-CODE
013300       GO TO RETURN-ROUTINE
013400     END-IF
013500
013600     IF LS-GYEAR = 1582
013700       IF NOT ((LS-GMONTH > 9 AND < 13)
013800            AND (LS-GDAY > 14 AND < 32))
013900         MOVE +4 TO RETURN-CODE
014000         GO TO RETURN-ROUTINE
014100       END-IF
014200     END-IF
014300
014400     IF LS-GDAY <= WS-DIM (XS-MONTH)
014500       GO TO MAINLINE-ROUTINE
014600     END-IF
014700
014800     IF NOT (LS-GMONTH = 2)
014900       MOVE +4 TO RETURN-CODE
015000       GO TO RETURN-ROUTINE
015100     END-IF
015200
015300     IF LS-GDAY > 29
015400       MOVE +4 TO RETURN-CODE
015500       GO TO RETURN-ROUTINE
015600     END-IF
015700
015800     DIVIDE LS-GYEAR BY 100
015900          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016000     IF LS-REMAINDER = ZERO
016100       DIVIDE LS-GYEAR BY 400
016200          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016300       IF LS-REMAINDER NOT = ZERO
016400         MOVE +4 TO RETURN-CODE
016500         GO TO RETURN-ROUTINE
016600       END-IF
016700     ELSE
016800       DIVIDE LS-GYEAR BY 4
016900            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
017000       IF LS-REMAINDER NOT = ZERO
017100         MOVE +4 TO RETURN-CODE
017200         GO TO RETURN-ROUTINE
017300       END-IF
017400     END-IF
017500
017600     CONTINUE.
017700 MAINLINE-ROUTINE.
017800
017900     CALL WS-DTEG2B
018000          USING XS-GDATE
018100                LS-BDAY
018200     IF RETURN-CODE > ZERO
018300       DISPLAY WS-PGMID " " WS-DTEG2B
018400            " COBOL RETURN CODE = " RETURN-CODE
018500            " G DATE = " XS-GDATE
018600       GO TO RETURN-ROUTINE
018700     END-IF
018800
018900*    wt = bday//7+1;
019000     DIVIDE LS-BDAY BY 7
019100          GIVING LS-QUOTIENT REMAINDER LS-TEMP-WT
019200     ADD +1 TO LS-TEMP-WT
019300
019400*    dow = wt Word("Mon Tue Wed Thu Fri Sat Sun",wt);
019500     MOVE LS-TEMP-WT TO XS-DOW-NBR
019600     MOVE WS-DOW-TXT (LS-TEMP-WT)
019700          TO XS-DOW-TXT
019800
019900     CONTINUE.
020000 RETURN-ROUTINE.
020100
020200     GOBACK.
./ ADD NAME=DTEG2B   0131-20101-20160-0950-00224-00143-00000-APLKS   59
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEG2B.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT GREGORIAN DATE
000700* TO BASE DAY.
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEG2B'
001200*      USING XS-GDATE        /*INPUT GREGORIAN DATE*/
001300*            XS-BDAY         /*OUTPUT BASE DAY*/
001400*
001500* ALGORITHM: based on REXX DATE function
001600*
001700*       Arg gdate . ;   /* i.e. 20160101 */
001800*       Parse VAR gdate yr 5 mo 7 da . ;
001900*
002000*       jdate = G2J(gdate);
002100*       yr = Substr(jdate,1,4);
002200*       a = yr-1;
002300*       da = Substr(jdate,5,3);
002400*       b = da-1;
002500*       c = a%400;           leap centuries
002600*       d = a%100;           centuries
002700*       e = a%4;             leap years
002800*       f = a*365;           nbr of days in previous years
002900*       bday = f+e-d+c+b     base days
003000*
003100*       Return bday;
003200*
003300* RETURN CODE:
003400*              0 = successful
003500*              4 = invalid date
003600*              8 = invalid parameters
003700*
003800* ------------------------------------------------------* XXXXXXXX
003900 DATA DIVISION.
004000 WORKING-STORAGE SECTION.
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC. ".
004400     03  WS-PGMID       PIC X(08) VALUE "DTEG2B".
004500 01  WS-DTEG2J          PIC X(08) VALUE "DTEG2J".
004600
004700 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
004800
004900 01  WS-DAYS-IN-MONTH-VECTOR.
005000     03  FILLER         PIC 9(4) BINARY VALUE 31.
005100     03  FILLER         PIC 9(4) BINARY VALUE 28.
005200     03  FILLER         PIC 9(4) BINARY VALUE 31.
005300     03  FILLER         PIC 9(4) BINARY VALUE 30.
005400     03  FILLER         PIC 9(4) BINARY VALUE 31.
005500     03  FILLER         PIC 9(4) BINARY VALUE 30.
005600     03  FILLER         PIC 9(4) BINARY VALUE 31.
005700     03  FILLER         PIC 9(4) BINARY VALUE 31.
005800     03  FILLER         PIC 9(4) BINARY VALUE 30.
005900     03  FILLER         PIC 9(4) BINARY VALUE 31.
006000     03  FILLER         PIC 9(4) BINARY VALUE 30.
006100     03  FILLER         PIC 9(4) BINARY VALUE 31.
006200 01  FILLER REDEFINES WS-DAYS-IN-MONTH-VECTOR.
006300     03  WS-DIM-ENTRIES OCCURS 12 TIMES.
006400         05  WS-DIM     PIC 9(4) BINARY.
006500
006600 LOCAL-STORAGE SECTION.
006700
006800*    QUOTIENT OR ANSWER
006900 01  LS-QUOTIENT             PIC S9(9) BINARY.
007000*    REMAINDER
007100 01  LS-REMAINDER            PIC S9(9) BINARY.
007200
007300 01  LS-YEARS                PIC S9(9) BINARY.
007400 01  LS-DAYS                 PIC S9(9) BINARY.
007500 01  LS-NBR-LEAP-YEARS       PIC S9(9) BINARY.
007600 01  LS-NBR-CENTURIES        PIC S9(9) BINARY.
007700 01  LS-NBR-LEAP-CENTURIES   PIC S9(9) BINARY.
007800 01  LS-TEMP-F               PIC S9(9) BINARY.
007900 01  LS-BDAY                 PIC S9(9) BINARY.
008000 01  LS-GDATE.
008100     03  LS-GYEAR       PIC S9(9) BINARY SYNC.
008200     03  LS-GMONTH      PIC S9(9) BINARY SYNC.
008300     03  LS-GDAY        PIC S9(9) BINARY SYNC.
008400 01  LS-JDATE.
008500     03  LS-JYEAR       PIC 9(4).
008600     03  LS-JDAYS       PIC 9(3).
008700
008800 LINKAGE SECTION.
008900 01  XS-GDATE.
009000     03  XS-YEAR        PIC 9(4).
009100     03  XS-MONTH       PIC 9(2).
009200     03  XS-DAY         PIC 9(2).
009300 01  XS-BDAY            PIC S9(9) BINARY.
009400
009500 PROCEDURE DIVISION USING
009600     XS-GDATE
009700     XS-BDAY.
009800
009900     CONTINUE.
010000 INIT-ROUTINE.
010100
010200     MOVE ZERO TO RETURN-CODE
010300                  XS-BDAY
010400
010500*    INPUT DATE NUMERIC
010600     IF XS-GDATE NOT NUMERIC
010700       MOVE +8 TO RETURN-CODE
010800       GO TO RETURN-ROUTINE
010900     END-IF
011000
011100     MOVE XS-YEAR TO LS-GYEAR
011200     MOVE XS-MONTH TO LS-GMONTH
011300     MOVE XS-DAY TO LS-GDAY
011400
011500     IF LS-GYEAR < 100
011600       COMPUTE LS-GYEAR = FUNCTION YEAR-TO-YYYY
011700            (LS-GYEAR WS-HIBND-100YR)
011800     END-IF
011900
012000*    INPUT DATE VALID
012100     IF LS-GYEAR < 1582
012200       MOVE +4 TO RETURN-CODE
012300       GO TO RETURN-ROUTINE
012400     END-IF
012500
012600     IF NOT (LS-GMONTH > ZERO AND < 13)
012700       MOVE +4 TO RETURN-CODE
012800       GO TO RETURN-ROUTINE
012900     END-IF
013000
013100     IF NOT (LS-GDAY > ZERO AND < 32)
013200       MOVE +4 TO RETURN-CODE
013300       GO TO RETURN-ROUTINE
013400     END-IF
013500
013600     IF LS-GYEAR = 1582
013700       IF NOT ((LS-GMONTH > 9 AND < 13)
013800            AND (LS-GDAY > 14 AND < 32))
013900         MOVE +4 TO RETURN-CODE
014000         GO TO RETURN-ROUTINE
014100       END-IF
014200     END-IF
014300
014400     IF LS-GDAY <= WS-DIM (XS-MONTH)
014500       GO TO MAINLINE-ROUTINE
014600     END-IF
014700
014800     IF NOT (LS-GMONTH = 2)
014900       MOVE +4 TO RETURN-CODE
015000       GO TO RETURN-ROUTINE
015100     END-IF
015200
015300     IF LS-GDAY > 29
015400       MOVE +4 TO RETURN-CODE
015500       GO TO RETURN-ROUTINE
015600     END-IF
015700
015800     DIVIDE LS-GYEAR BY 100
015900          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016000     IF LS-REMAINDER = ZERO
016100       DIVIDE LS-GYEAR BY 400
016200          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016300       IF LS-REMAINDER NOT = ZERO
016400         MOVE +4 TO RETURN-CODE
016500         GO TO RETURN-ROUTINE
016600       END-IF
016700     ELSE
016800       DIVIDE LS-GYEAR BY 4
016900            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
017000       IF LS-REMAINDER NOT = ZERO
017100         MOVE +4 TO RETURN-CODE
017200         GO TO RETURN-ROUTINE
017300       END-IF
017400     END-IF
017500
017600     CONTINUE.
017700 MAINLINE-ROUTINE.
017800
017900     CALL WS-DTEG2J
018000          USING XS-GDATE
018100                LS-JDATE
018200     IF RETURN-CODE > ZERO
018300       DISPLAY WS-PGMID " " WS-DTEG2J
018400            " COBOL RETURN CODE = " RETURN-CODE
018500            " G DATE = " XS-GDATE
018600       GO TO RETURN-ROUTINE
018700     END-IF
018800
018900     MOVE LS-JYEAR TO LS-YEARS
019000*    a = yr-1;
019100     SUBTRACT +1 FROM LS-YEARS
019200
019300     MOVE LS-JDAYS TO LS-DAYS
019400*    b = da-1;
019500     SUBTRACT +1 FROM LS-DAYS
019600
019700*    c = a%400;         leap centuries
019800     DIVIDE LS-YEARS BY 400
019900          GIVING LS-NBR-LEAP-CENTURIES
020000
020100*    d = a%100;         centuries
020200     DIVIDE LS-YEARS BY 100
020300          GIVING LS-NBR-CENTURIES
020400
020500*    e = a%4;           leap years
020600     DIVIDE LS-YEARS BY 4
020700          GIVING LS-NBR-LEAP-YEARS
020800
020900*    f = a*365;         nbr of days in previous years
021000     COMPUTE LS-TEMP-F = LS-YEARS * 365
021100
021200*    g = f+e-d+c+b      base days
021300     COMPUTE LS-BDAY = LS-TEMP-F
021400          + LS-NBR-LEAP-YEARS
021500          - LS-NBR-CENTURIES
021600          + LS-NBR-LEAP-CENTURIES
021700          + LS-DAYS
021800
021900     MOVE LS-BDAY TO XS-BDAY
022000
022100     CONTINUE.
022200 RETURN-ROUTINE.
022300
022400     GOBACK.
./ ADD NAME=DTEG2J   0135-20100-20160-0948-00209-00169-00000-APLKS   48
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEG2J.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT GREGORIAN DATE
000700* TO JULIAN DATE.
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEG2J'
001200*      USING XS-GDATE        /*INPUT GREGORIAN DATE*/
001300*            XS-JDATE        /*OUTPUT JULIAN DATE*/
001400*
001500* ALGORITHM: developed by J. D. Robertson
001600*
001700*       Arg gdate . ;              /* i.e. 20160101 */
001800*       Parse VAR gdate yr 5 mo 7 da . ;
001900*
002000*       a = yr//4;
002100*       b = yr//100;
002200*       c = yr//400;
002300*       d = (mo+10)%13;
002400*       e = 3055*(mo+2)%100;
002500*       f = da+e-2*d-91;
002600*       n = f+(1-(a+3)%4+(b+99)%100-(c+399)%400)*d;
002700*       n = Right(n,3,'0');
002800*
002900*       jdate = yr||n;
003000*
003100*       Return jdate;
003200*
003300* RETURN CODE:
003400*              0 = successful
003500*              4 = invalid date
003600*              8 = invalid parameters
003700*
003800* ------------------------------------------------------* XXXXXXXX
003900 DATA DIVISION.
004000 WORKING-STORAGE SECTION.
004100 01  FILLER.
004200     03  WS-EYE-CATCHER PIC X(25)
004300              VALUE "BUZZARD CREEK TECH, INC. ".
004400     03  WS-PGMID       PIC X(08) VALUE "DTEG2J".
004500
004600 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
004700
004800 01  WS-DAYS-IN-MONTH-VECTOR.
004900     03  FILLER         PIC 9(4) BINARY VALUE 31.
005000     03  FILLER         PIC 9(4) BINARY VALUE 28.
005100     03  FILLER         PIC 9(4) BINARY VALUE 31.
005200     03  FILLER         PIC 9(4) BINARY VALUE 30.
005300     03  FILLER         PIC 9(4) BINARY VALUE 31.
005400     03  FILLER         PIC 9(4) BINARY VALUE 30.
005500     03  FILLER         PIC 9(4) BINARY VALUE 31.
005600     03  FILLER         PIC 9(4) BINARY VALUE 31.
005700     03  FILLER         PIC 9(4) BINARY VALUE 30.
005800     03  FILLER         PIC 9(4) BINARY VALUE 31.
005900     03  FILLER         PIC 9(4) BINARY VALUE 30.
006000     03  FILLER         PIC 9(4) BINARY VALUE 31.
006100 01  FILLER REDEFINES WS-DAYS-IN-MONTH-VECTOR.
006200     03  WS-DIM-ENTRIES OCCURS 12 TIMES.
006300         05  WS-DIM     PIC 9(4) BINARY.
006400
006500 LOCAL-STORAGE SECTION.
006600
006700*    QUOTIENT OR ANSWER
006800 01  LS-QUOTIENT             PIC S9(9) BINARY.
006900*    REMAINDER
007000 01  LS-REMAINDER            PIC S9(9) BINARY.
007100
007200 01  LS-NBR-LEAP-YEARS       PIC S9(9) BINARY.
007300 01  LS-NBR-CENTURIES        PIC S9(9) BINARY.
007400 01  LS-NBR-LEAP-CENTURIES   PIC S9(9) BINARY.
007500 01  LS-TEMP-D               PIC S9(9) BINARY.
007600 01  LS-TEMP-E               PIC S9(9) BINARY.
007700 01  LS-TEMP-F               PIC S9(9) BINARY.
007800 01  LS-TEMP-N               PIC S9(9) BINARY.
007900 01  LS-GDATE.
008000     03  LS-GYEAR       PIC S9(9) BINARY SYNC.
008100     03  LS-GMONTH      PIC S9(9) BINARY SYNC.
008200     03  LS-GDAY        PIC S9(9) BINARY SYNC.
008300 01  LS-JDATE.
008400     03  LS-JYEAR       PIC 9(4).
008500     03  LS-JDAYS       PIC 9(3).
008600
008700 LINKAGE SECTION.
008800 01  XS-GDATE.
008900     03  XS-YEAR        PIC 9(4).
009000     03  XS-MONTH       PIC 9(2).
009100     03  XS-DAY         PIC 9(2).
009200 01  XS-JDATE           PIC 9(7).
009300
009400 PROCEDURE DIVISION USING
009500     XS-GDATE
009600     XS-JDATE.
009700
009800     CONTINUE.
009900 INIT-ROUTINE.
010000
010100     MOVE ZERO TO RETURN-CODE
010200                  XS-JDATE
010300
010400*    INPUT DATE NUMERIC
010500     IF XS-GDATE NOT NUMERIC
010600       MOVE +8 TO RETURN-CODE
010700       GO TO RETURN-ROUTINE
010800     END-IF
010900
011000     MOVE XS-YEAR TO LS-GYEAR
011100     MOVE XS-MONTH TO LS-GMONTH
011200     MOVE XS-DAY TO LS-GDAY
011300
011400     IF LS-GYEAR < 100
011500       COMPUTE LS-GYEAR = FUNCTION YEAR-TO-YYYY
011600            (LS-GYEAR WS-HIBND-100YR)
011700     END-IF
011800
011900*    INPUT DATE VALID
012000     IF LS-GYEAR < 1582
012100       MOVE +4 TO RETURN-CODE
012200       GO TO RETURN-ROUTINE
012300     END-IF
012400
012500     IF NOT (LS-GMONTH > ZERO AND < 13)
012600       MOVE +4 TO RETURN-CODE
012700       GO TO RETURN-ROUTINE
012800     END-IF
012900
013000     IF NOT (LS-GDAY > ZERO AND < 32)
013100       MOVE +4 TO RETURN-CODE
013200       GO TO RETURN-ROUTINE
013300     END-IF
013400
013500     IF LS-GYEAR = 1582
013600       IF NOT ((LS-GMONTH > 9 AND < 13)
013700            AND (LS-GDAY > 14 AND < 32))
013800         MOVE +4 TO RETURN-CODE
013900         GO TO RETURN-ROUTINE
014000       END-IF
014100     END-IF
014200
014300     IF LS-GDAY <= WS-DIM (XS-MONTH)
014400       GO TO MAINLINE-ROUTINE
014500     END-IF
014600
014700     IF NOT (LS-GMONTH = 2)
014800       MOVE +4 TO RETURN-CODE
014900       GO TO RETURN-ROUTINE
015000     END-IF
015100
015200     IF LS-GDAY > 29
015300       MOVE +4 TO RETURN-CODE
015400       GO TO RETURN-ROUTINE
015500     END-IF
015600
015700     DIVIDE LS-GYEAR BY 100
015800          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
015900     IF LS-REMAINDER = ZERO
016000       DIVIDE LS-GYEAR BY 400
016100            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016200       IF LS-REMAINDER NOT = ZERO
016300         MOVE +4 TO RETURN-CODE
016400         GO TO RETURN-ROUTINE
016500       END-IF
016600     ELSE
016700       DIVIDE LS-GYEAR BY 4
016800            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016900       IF LS-REMAINDER NOT = ZERO
017000         MOVE +4 TO RETURN-CODE
017100         GO TO RETURN-ROUTINE
017200       END-IF
017300     END-IF
017400
017500     CONTINUE.
017600 MAINLINE-ROUTINE.
017700
017800*    a = yr//4;
017900     DIVIDE LS-GYEAR BY 4
018000          GIVING LS-QUOTIENT REMAINDER LS-NBR-LEAP-YEARS
018100*    b = yr//100;
018200     DIVIDE LS-GYEAR BY 100
018300          GIVING LS-QUOTIENT REMAINDER LS-NBR-CENTURIES
018400*    c = yr//400;
018500     DIVIDE LS-GYEAR BY 400
018600          GIVING LS-QUOTIENT REMAINDER LS-NBR-LEAP-CENTURIES
018700*    d = (mo+10)%13;
018800     COMPUTE LS-TEMP-D = (LS-GMONTH + 10) / 13
018900*    e = 3055*(mo+2)%100;
019000     COMPUTE LS-TEMP-E = 3055 * (LS-GMONTH + 2) / 100
019100*    f = da+e-2*d-91;
019200     COMPUTE LS-TEMP-F =
019300          LS-GDAY + LS-TEMP-E - (2 * LS-TEMP-D) - 91
019400*    n = f+(1-(a+3)%4+(b+99)%100-(c+399)%400)*d;
019500     COMPUTE LS-TEMP-N = LS-TEMP-F + (1 -
019600          (LS-NBR-LEAP-YEARS + 3) / 4 +
019700          (LS-NBR-CENTURIES + 99) / 100 -
019800          (LS-NBR-LEAP-CENTURIES + 399) / 400)
019900          * LS-TEMP-D
020000
020100     MOVE LS-GYEAR TO LS-JYEAR
020200     MOVE LS-TEMP-N TO LS-JDAYS
020300
020400     MOVE LS-JDATE TO XS-JDATE
020500
020600     CONTINUE.
020700 RETURN-ROUTINE.
020800
020900     GOBACK.
./ ADD NAME=DTEG2W   0131-20104-20160-1024-00253-00155-00000-APLKS   07
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEG2W.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT GREGORIAN DATE
000700* TO ISO-8601 WORK WEEK (yyyy-Www-d)
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEG2W'
001200*      USING XS-GDATE        /*INPUT GREGORIAN DATE*/
001300*            XS-WEEK         /*OUTPUT ISO-8601 WORK WEEK*/
001400*
001500* RETURN CODE:
001600*              0 = successful
001700*              4 = invalid date
001800*              8 = invalid parameters
001900*
002000* ------------------------------------------------------* XXXXXXXX
002100 DATA DIVISION.
002200 WORKING-STORAGE SECTION.
002300 01  FILLER.
002400     03  WS-EYE-CATCHER PIC X(25)
002500              VALUE "BUZZARD CREEK TECH, INC. ".
002600     03  WS-PGMID       PIC X(08) VALUE "DTEG2W".
002700 01  WS-DTEG2B          PIC X(08) VALUE "DTEG2B".
002800
002900 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
003000
003100 01  WS-DAYS-IN-MONTH-VECTOR.
003200     03  FILLER         PIC 9(4) BINARY VALUE 31.
003300     03  FILLER         PIC 9(4) BINARY VALUE 28.
003400     03  FILLER         PIC 9(4) BINARY VALUE 31.
003500     03  FILLER         PIC 9(4) BINARY VALUE 30.
003600     03  FILLER         PIC 9(4) BINARY VALUE 31.
003700     03  FILLER         PIC 9(4) BINARY VALUE 30.
003800     03  FILLER         PIC 9(4) BINARY VALUE 31.
003900     03  FILLER         PIC 9(4) BINARY VALUE 31.
004000     03  FILLER         PIC 9(4) BINARY VALUE 30.
004100     03  FILLER         PIC 9(4) BINARY VALUE 31.
004200     03  FILLER         PIC 9(4) BINARY VALUE 30.
004300     03  FILLER         PIC 9(4) BINARY VALUE 31.
004400 01  FILLER REDEFINES WS-DAYS-IN-MONTH-VECTOR.
004500     03  WS-DIM-ENTRIES OCCURS 12 TIMES.
004600         05  WS-DIM     PIC 9(4) BINARY.
004700
004800 LOCAL-STORAGE SECTION.
004900
005000*    QUOTIENT OR ANSWER
005100 01  LS-QUOTIENT             PIC S9(9) BINARY.
005200*    REMAINDER
005300 01  LS-REMAINDER            PIC S9(9) BINARY.
005400
005500 01  LS-N                    PIC S9(9) BINARY.
005600 01  LS-BDAY                 PIC S9(9) BINARY.
005700 01  LS-BDAY-DOW             PIC S9(9) BINARY.
005800 01  LS-BDAY-1STDAOFYR       PIC S9(9) BINARY.
005900 01  LS-BDAY-1STDAOFYR-DOW   PIC S9(9) BINARY.
006000 01  LS-BDAY-1STWW01         PIC S9(9) BINARY.
006100 01  LS-GDATE.
006200     03  LS-GYEAR       PIC S9(9) BINARY SYNC.
006300     03  LS-GMONTH      PIC S9(9) BINARY SYNC.
006400     03  LS-GDAY        PIC S9(9) BINARY SYNC.
006500 01  LS-G1DATE.
006600     03  LS-G1YEAR      PIC 9(4).
006700     03  LS-G1MONTH     PIC 9(2).
006800     03  LS-G1DAY       PIC 9(2).
006900 01  LS-WORK-WEEK.
007000     03  LS-WYEAR       PIC 9(4).
007100     03  LS-WLIT1       PIC X(2).
007200     03  LS-WWEEK       PIC 9(2).
007300     03  LS-WLIT2       PIC X(1).
007400     03  LS-WDOW        PIC 9(1).
007500
007600 LINKAGE SECTION.
007700 01  XS-GDATE.
007800     03  XS-YEAR        PIC 9(4).
007900     03  XS-MONTH       PIC 9(2).
008000     03  XS-DAY         PIC 9(2).
008100 01  XS-WEEK            PIC X(10).
008200
008300 PROCEDURE DIVISION USING
008400     XS-GDATE
008500     XS-WEEK.
008600
008700     CONTINUE.
008800 INIT-ROUTINE.
008900
009000     MOVE ZERO TO RETURN-CODE
009100     MOVE SPACE TO XS-WEEK
009200
009300*    INPUT DATE NUMERIC
009400     IF XS-GDATE NOT NUMERIC
009500       MOVE +8 TO RETURN-CODE
009600       GO TO RETURN-ROUTINE
009700     END-IF
009800
009900     MOVE XS-YEAR TO LS-GYEAR
010000     MOVE XS-MONTH TO LS-GMONTH
010100     MOVE XS-DAY TO LS-GDAY
010200
010300     IF LS-GYEAR < 100
010400       COMPUTE LS-GYEAR = FUNCTION YEAR-TO-YYYY
010500            (LS-GYEAR WS-HIBND-100YR)
010600     END-IF
010700
010800*    INPUT DATE VALID
010900     IF NOT (LS-GYEAR > 1582)
011000       MOVE +4 TO RETURN-CODE
011100       GO TO RETURN-ROUTINE
011200     END-IF
011300
011400     IF NOT (LS-GMONTH > ZERO AND < 13)
011500       MOVE +4 TO RETURN-CODE
011600       GO TO RETURN-ROUTINE
011700     END-IF
011800
011900     IF NOT (LS-GDAY > ZERO AND < 32)
012000       MOVE +4 TO RETURN-CODE
012100       GO TO RETURN-ROUTINE
012200     END-IF
012300
012400     IF LS-GDAY <= WS-DIM (XS-MONTH)
012500       GO TO MAINLINE-ROUTINE
012600     END-IF
012700
012800     IF NOT (LS-GMONTH = 2)
012900       MOVE +4 TO RETURN-CODE
013000       GO TO RETURN-ROUTINE
013100     END-IF
013200
013300     IF LS-GDAY > 29
013400       MOVE +4 TO RETURN-CODE
013500       GO TO RETURN-ROUTINE
013600     END-IF
013700
013800     DIVIDE LS-GYEAR BY 100
013900          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
014000     IF LS-REMAINDER = ZERO
014100       DIVIDE LS-GYEAR BY 400
014200          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
014300       IF LS-REMAINDER NOT = ZERO
014400         MOVE +4 TO RETURN-CODE
014500         GO TO RETURN-ROUTINE
014600       END-IF
014700     ELSE
014800       DIVIDE LS-GYEAR BY 4
014900            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
015000       IF LS-REMAINDER NOT = ZERO
015100         MOVE +4 TO RETURN-CODE
015200         GO TO RETURN-ROUTINE
015300       END-IF
015400     END-IF
015500
015600     CONTINUE.
015700 MAINLINE-ROUTINE.
015800
015900     CALL WS-DTEG2B
016000          USING XS-GDATE
016100                LS-BDAY
016200     IF RETURN-CODE > ZERO
016300       DISPLAY WS-PGMID " " WS-DTEG2B " 1"
016400            " COBOL RETURN CODE = " RETURN-CODE
016500            " G DATE = " XS-GDATE
016600       GO TO RETURN-ROUTINE
016700     END-IF
016800
016900     DIVIDE LS-BDAY BY +7
017000          GIVING LS-QUOTIENT REMAINDER LS-BDAY-DOW
017100     ADD +1 TO LS-BDAY-DOW
017200
017300     MOVE LS-GYEAR TO LS-G1YEAR
017400     MOVE 01 TO LS-G1MONTH
017500                LS-G1DAY
017600     CALL WS-DTEG2B
017700          USING LS-G1DATE
017800                LS-BDAY-1STDAOFYR
017900     IF RETURN-CODE > ZERO
018000       DISPLAY WS-PGMID " " WS-DTEG2B " 2"
018100            " COBOL RETURN CODE = " RETURN-CODE
018200            " G DATE = " LS-G1DATE
018300       GO TO RETURN-ROUTINE
018400     END-IF
018500
018600     DIVIDE LS-BDAY-1STDAOFYR BY +7
018700          GIVING LS-QUOTIENT REMAINDER LS-BDAY-1STDAOFYR-DOW
018800     ADD +1 TO LS-BDAY-1STDAOFYR-DOW
018900
019000     MOVE ZERO TO LS-N
019100     IF LS-BDAY-1STDAOFYR-DOW > +4
019200       EVALUATE LS-BDAY-1STDAOFYR-DOW
019300         WHEN 5
019400           MOVE +2 TO LS-N
019500         WHEN 6
019600           MOVE +1 TO LS-N
019700         WHEN OTHER
019800           CONTINUE
019900       END-EVALUATE
020000       IF LS-BDAY > (LS-BDAY-1STDAOFYR + LS-N)
020100         CONTINUE
020200       ELSE
020300         SUBTRACT 1 FROM LS-G1YEAR
020400         CALL WS-DTEG2B
020500              USING LS-G1DATE
020600                    LS-BDAY-1STDAOFYR
020700         IF RETURN-CODE > ZERO
020800           DISPLAY WS-PGMID " " WS-DTEG2B " 3"
020900                " COBOL RETURN CODE = " RETURN-CODE
021000                " G DATE = " LS-G1DATE
021100           GO TO RETURN-ROUTINE
021200         END-IF
021300         DIVIDE LS-BDAY-1STDAOFYR BY +7
021400              GIVING LS-QUOTIENT REMAINDER LS-BDAY-1STDAOFYR-DOW
021500         ADD +1 TO LS-BDAY-1STDAOFYR-DOW
021600       END-IF
021700     END-IF
021800
021900     MOVE LS-BDAY-1STDAOFYR TO LS-BDAY-1STWW01
022000
022100     EVALUATE LS-BDAY-1STDAOFYR-DOW
022200       WHEN +1
022300         CONTINUE
022400       WHEN +2
022500         SUBTRACT +1 FROM LS-BDAY-1STWW01
022600       WHEN +3
022700         SUBTRACT +2 FROM LS-BDAY-1STWW01
022800       WHEN +4
022900         SUBTRACT +3 FROM LS-BDAY-1STWW01
023000       WHEN +5
023100         ADD +3 TO LS-BDAY-1STWW01
023200       WHEN +6
023300         ADD +2 TO LS-BDAY-1STWW01
023400       WHEN +7
023500         ADD +1 TO LS-BDAY-1STWW01
023600       WHEN OTHER
023700         CONTINUE
023800     END-EVALUATE
023900
024000     COMPUTE LS-N = (LS-BDAY - LS-BDAY-1STWW01) / 7 + 1
024100
024200     MOVE LS-G1YEAR TO LS-WYEAR
024300     MOVE "-W" TO LS-WLIT1
024400     MOVE LS-N TO LS-WWEEK
024500     MOVE "-" TO LS-WLIT2
024600     MOVE LS-BDAY-DOW TO LS-WDOW
024700
024800     MOVE LS-WORK-WEEK TO XS-WEEK
024900
025000     CONTINUE.
025100 RETURN-ROUTINE.
025200
025300     GOBACK.
./ ADD NAME=DTEJ2G   0128-20100-20160-0923-00202-00134-00000-APLKS   20
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEJ2G.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT JULIAN DATE
000700* TO GREGORIAN DATE.
000800*
000900* COBOL CALL STATEMENT:
001000*
001100* CALL 'DTEJ2G'
001200*      USING XS-JDATE        /*INPUT JULIAN DATE*/
001300*            XS-GDATE        /*OUTPUT GREGORIAN DATE*/
001400*
001500* ALGORITHM: developed by R. A. Stone
001600*
001700*       Arg jdate . ;              /* i.e. 2016001 */
001800*       Parse VAR jdate yr 5 da . ;
001900*
002000*       a = 0;
002100*       Select;    /* formula correction lks 20200325 */
002200*         When yr//100 = 0 Then;
002300*           If yr//400 = 0 Then;
002400*             If da > 59 Then;
002500*               a = 1;
002600*         When yr//4 = 0 Then;
002700*           If da > 59 Then;
002800*             a = 1;
002900*         Otherwise;
003000*           Nop;
003100*       End;
003200*
003300*       h = 0;
003400*       If da > 59 Then;
003500*         h = 1;
003600*
003700*       b = 0;
003800*       If a+h > 0 Then
003900*         b = 2-a;
004000*
004100*       c = da+b+91;
004200*       m = c*100%3055;
004300*       t = c-3055*m%100;
004400*       m = m-2;
004500*
004600*       If m = 2 Then;  /* formula correction lks 20200305 */
004700*         If t > 28 Then;
004800*           t = t - 1;
004900*
005000*       t = Right(t,2,'0');
005100*       m = Right(m,2,'0');
005200*
005300*       gdate = yr||m||t;
005400*
005500*       Return gdate;
005600*
005700* RETURN CODE:
005800*              0 = successful
005900*              4 = invalid date
006000*              8 = invalid parameters
006100*
006200* ------------------------------------------------------* XXXXXXXX
006300 DATA DIVISION.
006400 WORKING-STORAGE SECTION.
006500 01  FILLER.
006600     03  WS-EYE-CATCHER PIC X(25)
006700              VALUE "BUZZARD CREEK TECH, INC. ".
006800     03  WS-PGMID       PIC X(08) VALUE "DTEJ2G".
006900
007000 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
007100
007200 LOCAL-STORAGE SECTION.
007300
007400*    QUOTIENT OR ANSWER
007500 01  LS-QUOTIENT             PIC S9(9) BINARY SYNC.
007600*    REMAINDER
007700 01  LS-REMAINDER            PIC S9(9) BINARY SYNC.
007800
007900 01  LS-TEMP-A               PIC S9(9) BINARY SYNC.
008000 01  LS-TEMP-B               PIC S9(9) BINARY SYNC.
008100 01  LS-TEMP-C               PIC S9(9) BINARY SYNC.
008200 01  LS-TEMP-H               PIC S9(9) BINARY SYNC.
008300 01  LS-TEMP-M               PIC S9(9) BINARY SYNC.
008400 01  LS-TEMP-T               PIC S9(9) BINARY SYNC.
008500 01  LS-JDATE.
008600     03  LS-JYEAR       PIC 9(9) BINARY SYNC.
008700     03  LS-JDAYS       PIC 9(9) BINARY SYNC.
008800 01  LS-GDATE.
008900     03  LS-GYEAR       PIC 9(4).
009000     03  LS-GMONTH      PIC 9(2).
009100     03  LS-GDAY        PIC 9(2).
009200
009300 LINKAGE SECTION.
009400 01  XS-JDATE.
009500     03  XS-YEAR        PIC 9(4).
009600     03  XS-DAYS        PIC 9(3).
009700 01  XS-GDATE           PIC 9(8).
009800
009900 PROCEDURE DIVISION USING
010000     XS-JDATE
010100     XS-GDATE.
010200
010300     CONTINUE.
010400 INIT-ROUTINE.
010500
010600     MOVE ZERO TO RETURN-CODE
010700                  XS-GDATE
010800
010900*    INPUT DATE NUMERIC
011000     IF XS-JDATE NOT NUMERIC
011100       MOVE +8 TO RETURN-CODE
011200       GO TO RETURN-ROUTINE
011300     END-IF
011400
011500     MOVE XS-YEAR TO LS-JYEAR
011600     MOVE XS-DAYS TO LS-JDAYS
011700
011800     IF LS-JYEAR < 100
011900       COMPUTE LS-JYEAR = FUNCTION YEAR-TO-YYYY
012000            (LS-JYEAR WS-HIBND-100YR)
012100     END-IF
012200
012300*    INPUT DATE VALID
012400     IF LS-JYEAR < 1582
012500       MOVE +4 TO RETURN-CODE
012600       GO TO RETURN-ROUTINE
012700     END-IF
012800
012900     IF NOT (LS-JDAYS > ZERO AND < 367)
013000       MOVE +4 TO RETURN-CODE
013100       GO TO RETURN-ROUTINE
013200     END-IF
013300
013400     IF LS-JYEAR = 1582
013500       IF NOT (LS-JDAYS > 287 AND < 366)
013600         MOVE +4 TO RETURN-CODE
013700         GO TO RETURN-ROUTINE
013800       END-IF
013900     END-IF
014000
014100     CONTINUE.
014200 MAINLINE-ROUTINE.
014300
014400     MOVE ZERO TO LS-TEMP-A
014500                  LS-TEMP-B
014600                  LS-TEMP-H
014700
014800     DIVIDE LS-JYEAR BY 100
014900          GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
015000     IF LS-REMAINDER = 0
015100       DIVIDE LS-JYEAR BY 400
015200            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
015300       IF LS-REMAINDER = 0
015400         IF LS-JDAYS > 59
015500           MOVE +1 TO LS-TEMP-A
015600         END-IF
015700       END-IF
015800     ELSE
015900       DIVIDE LS-JYEAR BY 4
016000            GIVING LS-QUOTIENT REMAINDER LS-REMAINDER
016100       IF LS-REMAINDER = 0
016200         IF LS-JDAYS > 59
016300           MOVE +1 TO LS-TEMP-A
016400         END-IF
016500       END-IF
016600     END-IF
016700
016800     IF LS-JDAYS > 59
016900       MOVE +1 TO LS-TEMP-H
017000     END-IF
017100
017200     IF (LS-TEMP-A + LS-TEMP-H) > ZERO
017300       COMPUTE LS-TEMP-B = 2 - LS-TEMP-A
017400     END-IF
017500
017600*    c = da+b+91;
017700     COMPUTE LS-TEMP-C = LS-JDAYS + LS-TEMP-B + 91
017800*    m = c*100%3055;
017900     COMPUTE LS-TEMP-M = (LS-TEMP-C * 100) / 3055
018000*    t = c-3055*m%100;
018100     COMPUTE LS-TEMP-T = LS-TEMP-C - ((3055 * LS-TEMP-M) / 100)
018200*    m = m-2;
018300     SUBTRACT 2 FROM LS-TEMP-M
018400     IF LS-TEMP-M = +2
018500*    if month = feburary
018600       IF LS-TEMP-T > 28
018700*      if day > 28
018800*        t = t - 1;
018900         SUBTRACT 1 FROM LS-TEMP-T
019000       END-IF
019100     END-IF
019200
019300     MOVE LS-JYEAR TO LS-GYEAR
019400     MOVE LS-TEMP-M TO LS-GMONTH
019500     MOVE LS-TEMP-T TO LS-GDAY
019600
019700     MOVE LS-GDATE TO XS-GDATE
019800
019900     CONTINUE.
020000 RETURN-ROUTINE.
020100
020200     GOBACK.
./ ADD NAME=DTEW2G   0127-20104-20160-0959-00153-00188-00000-APLKS   43
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. DTEW2G.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* DATE ROUTINE USED TO CONVERT A YEAR AND
000700* ISO-8601 WORK WEEK TO GREGORIAN DATE
000800* (1ST DAY OF WORK WEEK)
000900*
001000* COBOL CALL STATEMENT:
001100*
001200* CALL 'DTEW2G'
001300*      USING XS-YEAR         /*INPUT YEAR*/
001400*            XS-WEEK         /*INPUT ISO-8601 WORK WEEK*/
001500*            XS-GDATE        /*OUTPUT GREGORIAN DATE*/
001600*
001700* RETURN CODE:
001800*              0 = successful
001900*              4 = invalid date
002000*              8 = invalid parameters
002100*
002200* ------------------------------------------------------* XXXXXXXX
002300 DATA DIVISION.
002400 WORKING-STORAGE SECTION.
002500 01  FILLER.
002600     03  WS-EYE-CATCHER PIC X(25)
002700              VALUE "BUZZARD CREEK TECH, INC. ".
002800     03  WS-PGMID       PIC X(08) VALUE "DTEW2G".
002900 01  WS-DTEG2B          PIC X(08) VALUE "DTEG2B".
003000 01  WS-DTEB2G          PIC X(08) VALUE "DTEB2G".
003100
003200 01  WS-HIBND-100YR     PIC S9(9) BINARY VALUE +31.
003300
003400 LOCAL-STORAGE SECTION.
003500
003600*    QUOTIENT OR ANSWER
003700 01  LS-QUOTIENT             PIC S9(9) BINARY.
003800 01  LS-BDAY                 PIC S9(9) BINARY.
003900 01  LS-BDAY-1STDAOFYR       PIC S9(9) BINARY.
004000 01  LS-BDAY-1STDAOFYR-DOW   PIC S9(9) BINARY.
004100 01  LS-BDAY-1STWW01         PIC S9(9) BINARY.
004200 01  LS-YEAR                 PIC S9(9) BINARY.
004300 01  LS-GDATE.
004400     03  LS-GYEAR       PIC 9(4).
004500     03  LS-GMONTH      PIC 9(2).
004600     03  LS-GDAY        PIC 9(2).
004700
004800 LINKAGE SECTION.
004900 01  XS-YEAR            PIC 9(4).
005000 01  XS-WEEK            PIC 9(2).
005100 01  XS-GDATE           PIC 9(8).
005200
005300 PROCEDURE DIVISION USING
005400     XS-YEAR
005500     XS-WEEK
005600     XS-GDATE.
005700
005800     CONTINUE.
005900 INIT-ROUTINE.
006000
006100     MOVE ZERO TO RETURN-CODE
006200                  XS-GDATE
006300
006400*    INPUT DATE NUMERIC
006500     IF XS-YEAR NOT NUMERIC
006600       MOVE +8 TO RETURN-CODE
006700       GO TO RETURN-ROUTINE
006800     END-IF
006900
007000     MOVE XS-YEAR TO LS-YEAR
007100
007200     IF LS-YEAR < 100
007300       COMPUTE LS-YEAR = FUNCTION YEAR-TO-YYYY
007400            (LS-YEAR WS-HIBND-100YR)
007500     END-IF
007600
007700*    INPUT WEEK NUMERIC
007800     IF XS-WEEK NOT NUMERIC
007900       MOVE +8 TO RETURN-CODE
008000       GO TO RETURN-ROUTINE
008100     END-IF
008200
008300*    INPUT YEAR VALID
008400     IF NOT (LS-YEAR > 1582)
008500       MOVE +4 TO RETURN-CODE
008600       GO TO RETURN-ROUTINE
008700     END-IF
008800
008900*    INPUT WEEK VALID
009000     IF NOT (XS-WEEK > ZERO AND < 54)
009100       MOVE +4 TO RETURN-CODE
009200       GO TO RETURN-ROUTINE
009300     END-IF
009400
009500     CONTINUE.
009600 MAINLINE-ROUTINE.
009700
009800     MOVE LS-YEAR TO LS-GYEAR
009900     MOVE 01 TO LS-GMONTH
010000                LS-GDAY
010100     CALL WS-DTEG2B
010200          USING LS-GDATE
010300                LS-BDAY-1STDAOFYR
010400     IF RETURN-CODE > ZERO
010500       DISPLAY WS-PGMID  " " WS-DTEG2B
010600            " COBOL RETURN CODE = " RETURN-CODE
010700            " G DATE = " LS-GDATE
010800       GO TO RETURN-ROUTINE
010900     END-IF
011000
011100     DIVIDE LS-BDAY-1STDAOFYR BY +7
011200          GIVING LS-QUOTIENT REMAINDER LS-BDAY-1STDAOFYR-DOW
011300     ADD +1 TO LS-BDAY-1STDAOFYR-DOW
011400
011500     MOVE LS-BDAY-1STDAOFYR TO LS-BDAY-1STWW01
011600
011700     EVALUATE LS-BDAY-1STDAOFYR-DOW
011800       WHEN +1
011900         CONTINUE
012000       WHEN +2
012100         SUBTRACT +1 FROM LS-BDAY-1STWW01
012200       WHEN +3
012300         SUBTRACT +2 FROM LS-BDAY-1STWW01
012400       WHEN +4
012500         SUBTRACT +3 FROM LS-BDAY-1STWW01
012600       WHEN +5
012700         ADD +3 TO LS-BDAY-1STWW01
012800       WHEN +6
012900         ADD +2 TO LS-BDAY-1STWW01
013000       WHEN +7
013100         ADD +1 TO LS-BDAY-1STWW01
013200       WHEN OTHER
013300         CONTINUE
013400     END-EVALUATE
013500
013600     COMPUTE LS-BDAY = (XS-WEEK - 1) * 7 + LS-BDAY-1STWW01
013700
013800     CALL WS-DTEB2G
013900          USING LS-BDAY
014000                LS-GDATE
014100     IF RETURN-CODE > ZERO
014200       DISPLAY WS-PGMID " " WS-DTEB2G
014300            " COBOL RETURN CODE = " RETURN-CODE
014400            " B DAY = " LS-BDAY
014500       GO TO RETURN-ROUTINE
014600     END-IF
014700
014800     MOVE LS-GDATE TO XS-GDATE
014900
015000     CONTINUE.
015100 RETURN-ROUTINE.
015200
015300     GOBACK.
./ ADD NAME=VBINSRCH 0114-18196-20119-1348-00172-00156-00000-APLKS   45
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VBINSRCH.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* BINARY SEARCH ROUTINE USED FOR PROCESSING VECTORS.
000700* WILL HANDLE NON-UNIQUE KEYS.  IT WILL RETURN THE
000800* SUBSCRIPT OF THE 1ST MATCHING KEY OCCURANCE.
000900*
001000* COBOL SEARCH ALL DOES NOT HAVE SPECIAL CODE TO HANDLE
001100* NON-UNIQUE KEYS.
001200*
001300* COBOL CALL STATEMENT:
001400*
001500* CALL 'VBINSRCH'
001600*      USING XS-NTRY-SUB     /*SUB OF MATCHING ENTRY OR 0*/
001700*            XS-NTRY-COUNT   /*NBR OF VECTOR ENTRIES*/
001800*            XS-NTRY-LEN     /*ENTRY LENGTH*/
001900*            XS-SRCHKEY-POS  /*SEARCH KEY POSITION IN ENTRY*/
002000*            XS-SRCHKEY-LEN  /*SEARCH KEY LENGTH*/
002100*            XS-SRCHARG      /*SEARCH ARGUMENT TO LOOK FOR*/
002200*            XS-VECTOR       /*1ST ENTRY OF VECTOR TO SEARCH*/
002300*
002400* IF RETURN-CODE > ZERO
002500*   ***ERROR***
002600* END-IF
002700*
002800*    INITIALIZE XS-NTRY-SUB TO -1 ON FIRST CALL FOR A NEW
002900*    VECTOR.  NEEDED TO RECOMPUTE NEW VALUES.
003000*
003100* ALGORITHM: PROGRAMMING PEARLS 2ND ED. BY JON BENTLEY
003200*
003300*       lbnds = 0;
003400*       ubnds = n;      /* nbr of vector entries */
003500*       Do While lbnds+1 <> ubnds;
003600*         mid = (lbnds+ubnds)%2;
003700*         If v(mid) < srcharg Then;
003800*           lbnds = mid;
003900*         Else
004000*           ubnds = mid;
004100*       End;
004200*       If ubnds > n | v(ubnds) <> srcharg Then;
004300*         Do;
004400*           sub = 0;
004500*           RC = +4;
004600*         End;
004700*       Else;
004800*         Do;
004900*           sub = ubnds;
005000*           RC = 0;
005100*         End;
005200*
005300* RETURN CODE:
005400*              0 = entry found
005500*              4 = entry not found
005600*              8 = invalid parameters
005700*
005800* ------------------------------------------------------* XXXXXXXX
005900 DATA DIVISION.
006000 WORKING-STORAGE SECTION.
006100 01  FILLER.
006200     03  WS-EYE-CATCHER PIC X(25)
006300              VALUE "BUZZARD CREEK TECH, INC. ".
006400     03  WS-PGMID       PIC X(08) VALUE "VBINSRCH".
006500
006600 LOCAL-STORAGE SECTION.
006700 01  LS-BNDS-LO         PIC S9(9) BINARY SYNC.
006800 01  LS-BNDS-HI         PIC S9(9) BINARY SYNC.
006900 01  LS-BNDS-MID        PIC S9(9) BINARY SYNC.
007000 01  LS-KEY-POS         PIC S9(9) BINARY SYNC.
007100
007200 LINKAGE SECTION.
007300 01  XS-NTRY-SUB        PIC S9(9) BINARY.
007400 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007500 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007600 01  XS-SRCHKEY-POS     PIC S9(9) BINARY.
007700 01  XS-SRCHKEY-LEN     PIC S9(9) BINARY.
007800 01  XS-SRCHARG         PIC X(256).
007900 01  XS-VECTOR          PIC X(8388608).
008000
008100 PROCEDURE DIVISION USING
008200     XS-NTRY-SUB
008300     XS-NTRY-COUNT
008400     XS-NTRY-LEN
008500     XS-SRCHKEY-POS
008600     XS-SRCHKEY-LEN
008700     XS-SRCHARG
008800     XS-VECTOR.
008900
009000     CONTINUE.
009100 INIT-ROUTINE.
009200
009300     MOVE ZERO TO RETURN-CODE
009400
009500*    IF INITIAL SEARCH, WE NEED TO COMPUTE SOME VALUES
009600*    OTHERWISE GO TO MAINLINE AND DO THE SEARCH
009700     IF XS-NTRY-SUB >= ZERO
009800       GO TO MAINLINE-ROUTINE
009900     END-IF
010000
010100*    VECTOR HAVE ANY ENTRIES
010200     IF NOT (XS-NTRY-COUNT > ZERO)
010300       MOVE +4 TO RETURN-CODE
010400       GO TO RETURN-ROUTINE
010500     END-IF
010600
010700*    VECTOR BIGGER THAN 8M BYTES
010800     IF (XS-NTRY-COUNT * XS-NTRY-LEN) > LENGTH OF XS-VECTOR
010900       MOVE +8 TO RETURN-CODE
011000       GO TO RETURN-ROUTINE
011100     END-IF
011200
011300*    VECTOR HAVE MORE THAN 32767 ENTRIES
011400     IF NOT (XS-NTRY-COUNT <= 32767)
011500       MOVE +8 TO RETURN-CODE
011600       GO TO RETURN-ROUTINE
011700     END-IF
011800
011900*    SEARCH KEY LONGER THAN 256 BYTES
012000     IF NOT (XS-SRCHKEY-LEN > ZERO
012100          AND XS-SRCHKEY-LEN <= 256)
012200       MOVE +8 TO RETURN-CODE
012300       GO TO RETURN-ROUTINE
012400     END-IF
012500
012600*    SEARCH KEY LONGER THAN VECTOR ENTRY
012700     IF NOT (XS-NTRY-LEN > ZERO
012800          AND XS-NTRY-LEN >= XS-SRCHKEY-LEN)
012900       MOVE +8 TO RETURN-CODE
013000       GO TO RETURN-ROUTINE
013100     END-IF
013200
013300     CONTINUE.
013400 MAINLINE-ROUTINE.
013500
013600     MOVE XS-NTRY-COUNT TO LS-BNDS-HI
013700     MOVE ZERO TO LS-BNDS-LO
013800                  XS-NTRY-SUB
013900
014000     PERFORM
014100          UNTIL (LS-BNDS-LO + 1) >= LS-BNDS-HI
014200       COMPUTE LS-BNDS-MID = (LS-BNDS-LO + LS-BNDS-HI) / 2
014300       COMPUTE LS-KEY-POS =
014400            (LS-BNDS-MID - 1) * XS-NTRY-LEN + 1
014500            + XS-SRCHKEY-POS - 1
014600       IF XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
014700             < XS-SRCHARG (1:XS-SRCHKEY-LEN)
014800         MOVE LS-BNDS-MID TO LS-BNDS-LO
014900       ELSE
015000         MOVE LS-BNDS-MID TO LS-BNDS-HI
015100       END-IF
015200     END-PERFORM
015300
015400     COMPUTE LS-KEY-POS =
015500          (LS-BNDS-HI - 1) * XS-NTRY-LEN + 1
015600          + XS-SRCHKEY-POS - 1
015700     IF LS-BNDS-HI > XS-NTRY-COUNT
015800          OR XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
015900               NOT = XS-SRCHARG (1:XS-SRCHKEY-LEN)
016000*      EVENT NOT FOUND
016100       MOVE ZERO TO XS-NTRY-SUB
016200       MOVE +4 TO RETURN-CODE
016300       GO TO RETURN-ROUTINE
016400     END-IF
016500
016600*    EVENT FOUND
016700     MOVE LS-BNDS-HI TO XS-NTRY-SUB
016800
016900     CONTINUE.
017000 RETURN-ROUTINE.
017100
017200     GOBACK.
./ ADD NAME=VBINSRH1 0117-18197-20119-1354-00172-00164-00000-APLKS   04
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VBINSRH1.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------* XXXXXXXX
000600* BINARY SEARCH ROUTINE USED FOR PROCESSING VECTORS.
000700* DOES NO SPECIAL HANDLING OF NON-UNIQUE KEYS.
000800* IT WILL RETURN THE SUBSCRIPT OF A MATCHING KEY OR
000900* THE SMALLEST KEY GREATER THAN THE SEARCH ARGUMENT.
001000*
001100* COBOL CALL STATEMENT:
001200*
001300* CALL 'VBINSRH1'
001400*      USING XS-NTRY-SUB     /*SUB OF ENTRY >= SEARCH ARGUMENT
001500*            XS-NTRY-COUNT   /*NBR OF VECTOR ENTRIES*/
001600*            XS-NTRY-LEN     /*ENTRY LENGTH*/
001700*            XS-SRCHKEY-POS  /*SEARCH KEY POSITION IN ENTRY*/
001800*            XS-SRCHKEY-LEN  /*SEARCH KEY LENGTH*/
001900*            XS-SRCHARG      /*SEARCH ARGUMENT TO LOOK FOR*/
002000*            XS-VECTOR       /*1ST ENTRY OF VECTOR TO SEARCH*/
002100*
002200* IF RETURN-CODE > ZERO
002300*   ***ERROR***
002400* END-IF
002500*
002600*    INITIALIZE XS-NTRY-SUB TO -1 ON FIRST CALL FOR A NEW
002700*    VECTOR.  NEEDED TO RECOMPUTE NEW VALUES.
002800*
002900* ALGORITHM:
003000*
003100*      lbnds = 1;
003200*      ubnds = n;      /* nbr of vector entries */
003300*      gteq = 0;       /* >= subscript */
003400*      Do While lbnds <= ubnds;
003500*        mid = (lbnds+ubnds)%2;
003600*        Select;
003700*          When srcharg < v(mid) Then;
003800*            Do;
003900*              ubnds = mid-1;
004000*              gteq = mid;
004100*            End;
004200*          When srcharg > v(mid) Then;
004300*            lbnds = mid+1;
004400*          Otherwise;
004500*            Do;
004600*              RC = 0;
004700*              Return mid;
004800*            End;
004900*        End;
005000*      End;
005100*
005200*      RC = 0;
005300*      Return gteq;
005400*
005500* RETURN CODE:
005600*              0 = entry found
005700*              4 = entry not found
005800*              8 = invalid parameters
005900*
006000* ------------------------------------------------------* XXXXXXXX
006100 DATA DIVISION.
006200 WORKING-STORAGE SECTION.
006300 01  FILLER.
006400     03  WS-EYE-CATCHER PIC X(25)
006500              VALUE "BUZZARD CREEK TECH, INC. ".
006600     03  WS-PGMID       PIC X(08) VALUE "VBINSRH1".
006700
006800 LOCAL-STORAGE SECTION.
006900 01  LS-BNDS-LO         PIC S9(9) BINARY SYNC.
007000 01  LS-BNDS-HI         PIC S9(9) BINARY SYNC.
007100 01  LS-BNDS-MID        PIC S9(9) BINARY SYNC.
007200 01  LS-GTEQ-SUB        PIC S9(9) BINARY SYNC.
007300 01  LS-KEY-POS         PIC S9(9) BINARY SYNC.
007400
007500 LINKAGE SECTION.
007600 01  XS-NTRY-SUB        PIC S9(9) BINARY.
007700 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007800 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007900 01  XS-SRCHKEY-POS     PIC S9(9) BINARY.
008000 01  XS-SRCHKEY-LEN     PIC S9(9) BINARY.
008100 01  XS-SRCHARG         PIC X(256).
008200 01  XS-VECTOR          PIC X(8388608).
008300
008400 PROCEDURE DIVISION USING
008500     XS-NTRY-SUB
008600     XS-NTRY-COUNT
008700     XS-NTRY-LEN
008800     XS-SRCHKEY-POS
008900     XS-SRCHKEY-LEN
009000     XS-SRCHARG
009100     XS-VECTOR.
009200
009300     CONTINUE.
009400 INIT-ROUTINE.
009500
009600     MOVE ZERO TO RETURN-CODE
009700
009800*    IF INITIAL SEARCH, WE NEED TO COMPUTE SOME VALUES
009900*    OTHERWISE GO TO MAINLINE AND DO THE SEARCH
010000     IF XS-NTRY-SUB >= ZERO
010100       GO TO MAINLINE-ROUTINE
010200     END-IF
010300
010400*    VECTOR HAVE ANY ENTRIES
010500     IF NOT (XS-NTRY-COUNT > ZERO)
010600       MOVE +4 TO RETURN-CODE
010700       GO TO RETURN-ROUTINE
010800     END-IF
010900
011000*    VECTOR BIGGER THAN 8M BYTES
011100     IF (XS-NTRY-COUNT * XS-NTRY-LEN) > LENGTH OF XS-VECTOR
011200       MOVE +8 TO RETURN-CODE
011300       GO TO RETURN-ROUTINE
011400     END-IF
011500
011600*    VECTOR HAVE MORE THAN 32767 ENTRIES
011700     IF NOT (XS-NTRY-COUNT <= 32767)
011800       MOVE +8 TO RETURN-CODE
011900       GO TO RETURN-ROUTINE
012000     END-IF
012100
012200*    SEARCH KEY LONGER THAN 256 BYTES
012300     IF NOT (XS-SRCHKEY-LEN > ZERO
012400          AND XS-SRCHKEY-LEN <= 256)
012500       MOVE +8 TO RETURN-CODE
012600       GO TO RETURN-ROUTINE
012700     END-IF
012800
012900*    SEARCH KEY LONGER THAN VECTOR ENTRY
013000     IF NOT (XS-NTRY-LEN > ZERO
013100          AND XS-NTRY-LEN >= XS-SRCHKEY-LEN)
013200       MOVE +8 TO RETURN-CODE
013300       GO TO RETURN-ROUTINE
013400     END-IF
013500
013600     CONTINUE.
013700 MAINLINE-ROUTINE.
013800
013900     MOVE XS-NTRY-COUNT TO LS-BNDS-HI
014000     MOVE +1 TO LS-BNDS-LO
014100     MOVE ZERO TO LS-GTEQ-SUB
014200                  XS-NTRY-SUB
014300
014400     PERFORM
014500          UNTIL LS-BNDS-LO > LS-BNDS-HI
014600       COMPUTE LS-BNDS-MID = (LS-BNDS-LO + LS-BNDS-HI) / 2
014700       COMPUTE LS-KEY-POS =
014800            (LS-BNDS-MID - 1) * XS-NTRY-LEN + 1
014900            + XS-SRCHKEY-POS - 1
015000       EVALUATE TRUE
015100         WHEN XS-SRCHARG (1:XS-SRCHKEY-LEN)
015200              < XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
015300           COMPUTE LS-BNDS-HI = LS-BNDS-MID - 1
015400           MOVE LS-BNDS-MID TO LS-GTEQ-SUB
015500         WHEN XS-SRCHARG (1:XS-SRCHKEY-LEN)
015600              > XS-VECTOR (LS-KEY-POS:XS-SRCHKEY-LEN)
015700           COMPUTE LS-BNDS-LO = LS-BNDS-MID + 1
015800         WHEN OTHER
015900           MOVE LS-BNDS-MID TO XS-NTRY-SUB
016000           GO TO RETURN-ROUTINE
016100       END-EVALUATE
016200     END-PERFORM
016300
016400     MOVE LS-GTEQ-SUB TO XS-NTRY-SUB
016500     IF XS-NTRY-SUB = ZERO
016600       MOVE +4 TO RETURN-CODE
016700     END-IF
016800
016900     CONTINUE.
017000 RETURN-ROUTINE.
017100
017200     GOBACK.
./ ADD NAME=VHEAPSRT 0118-18196-20119-1359-00299-00328-00000-APLKS   52
000100 PROCESS NODYN,NUMPROC(PFD),TRUNC(OPT)
000200 IDENTIFICATION DIVISION.
000300 PROGRAM-ID. VHEAPSRT.
000400 ENVIRONMENT DIVISION.
000500* ------------------------------------------------------*
000600* SORT ROUTINE.  USED FOR SORTING VECTORS IN
000700* (COBOL W-S, LOCAL-STORAGE, OR LINKAGE).
000800*
000900* HEAP SORT ALGORITHM IS THE METHOD IMPLEMENTED
001000* IN-PLACE SORT, RUNS IN (n LN n) TIME
001100* NOT A STABLE SORT (VECTOR ENTRIES WITH THE SAME KEY
001200*   WILL NOT MAINTAIN THE SAME ORDER)
001300* ORDERS ONE SORT KEY IN ASCENDING ORDER
001400*
001500* CALL 'VHEAPSRT'
001600*      USING NTRY-COUNT
001700*            NTRY-LEN
001800*            SRTKEY-POS
001900*            SRTKEY-LEN
002000*            VECTOR
002100*
002200* IF RETURN-CODE > ZERO
002300*   ***ERROR***
002400* END-IF
002500*
002600* ------------------------------------------------------*
002700 DATA DIVISION.
002800 WORKING-STORAGE SECTION.
002900 01  FILLER.
003000     03  WS-EYE-CATCHER PIC X(25)
003100              VALUE "BUZZARD CREEK TECH, INC. ".
003200     03  WS-PGMID       PIC X(08) VALUE "VHEAPSRT".
003300
003400 LOCAL-STORAGE SECTION.
003500 01  LS-TERM-FLAG       PIC X(01).
003600
003700*    LOOP CONTROL VARIABLES
003800 01  I                  PIC S9(9) BINARY SYNC.
003900
004000*    CURRENT NODE - SUBSCRIPT, ENTRY POS, KEY POS
004100 01  LS-CURRENT-NODE.
004200     03  LS-SUB-C       PIC S9(9) BINARY SYNC.
004300     03  LS-NPOS-C      PIC S9(9) BINARY SYNC.
004400     03  LS-KPOS-C      PIC S9(9) BINARY SYNC.
004500
004600*    PARENT  NODE - SUBSCRIPT, ENTRY POS, KEY POS
004700 01  LS-PARENT-NODE.
004800     03  LS-SUB-P       PIC S9(9) BINARY SYNC.
004900     03  LS-NPOS-P      PIC S9(9) BINARY SYNC.
005000     03  LS-KPOS-P      PIC S9(9) BINARY SYNC.
005100
005200*    SIBLING NODE - SUBSCRIPT, ENTRY POS, KEY POS,
005300*    LEFT/RIGHT/MAXMIN
005400 01  LS-LEFT-SIBLING-NODE.
005500     03  LS-SUB-LS      PIC S9(9) BINARY SYNC.
005600     03  LS-NPOS-LS     PIC S9(9) BINARY SYNC.
005700     03  LS-KPOS-LS     PIC S9(9) BINARY SYNC.
005800 01  LS-RIGHT-SIBLING-NODE.
005900     03  LS-SUB-RS      PIC S9(9) BINARY SYNC.
006000     03  LS-NPOS-RS     PIC S9(9) BINARY SYNC.
006100     03  LS-KPOS-RS     PIC S9(9) BINARY SYNC.
006200 01  LS-MAXMIN-SIBLING-NODE.
006300     03  LS-SUB-MS      PIC S9(9) BINARY SYNC.
006400     03  LS-NPOS-MS     PIC S9(9) BINARY SYNC.
006500     03  LS-KPOS-MS     PIC S9(9) BINARY SYNC.
006600
006700*    LAST NODE - SUBSCRIPT, ENTRY POS, KEY POS
006800 01  LS-LAST-NODE.
006900     03  LS-SUB-L       PIC S9(9) BINARY SYNC.
007000     03  LS-NPOS-L      PIC S9(9) BINARY SYNC.
007100     03  LS-KPOS-L      PIC S9(9) BINARY SYNC.
007200
007300 01  LS-WORK-NODE       PIC X(256).
007400
007500 LINKAGE SECTION.
007600 01  XS-NTRY-COUNT      PIC S9(9) BINARY.
007700 01  XS-NTRY-LEN        PIC S9(9) BINARY.
007800 01  XS-SRTKEY-POS      PIC S9(9) BINARY.
007900 01  XS-SRTKEY-LEN      PIC S9(9) BINARY.
008000 01  XS-VECTOR          PIC X(8388608).
008100
008200 PROCEDURE DIVISION USING
008300     XS-NTRY-COUNT
008400     XS-NTRY-LEN
008500     XS-SRTKEY-POS
008600     XS-SRTKEY-LEN
008700     XS-VECTOR.
008800
008900     CONTINUE.
009000 INIT-ROUTINE.
009100
009200     MOVE ZERO TO RETURN-CODE
009300
009400*    VECTOR HAVE 1 ENTRY (ALREADY SORTED)
009500     IF XS-NTRY-COUNT = 1
009600       GO TO RETURN-ROUTINE
009700     END-IF
009800
009900*    VECTOR HAVE MORE THAN ZERO ENTRIES
010000     IF NOT (XS-NTRY-COUNT > ZERO)
010100*      SORT - NBR OF TABLE ENTRIES = ZERO
010200       MOVE +4 TO RETURN-CODE
010300       GO TO RETURN-ROUTINE
010400     END-IF
010500
010600*    VECTOR ENTRY LENGTH GREATER THAN ZERO
010700     IF XS-NTRY-LEN NOT > ZERO
010800*      SORT - TABLE ENTRY LENGTH = ZERO
010900       MOVE +8 TO RETURN-CODE
011000       GO TO RETURN-ROUTINE
011100     END-IF
011200
011300*    VECTOR ENTRY LENGTH GREATER THAN 256 BYTES
011400     IF XS-NTRY-LEN > 256
011500*      SORT - TABLE ENTRY LENGTH > 256
011600       MOVE +8 TO RETURN-CODE
011700       GO TO RETURN-ROUTINE
011800     END-IF
011900
012000*    SORT KEY = ZERO BYTES
012100     IF XS-SRTKEY-LEN = ZERO
012200*      SORT - KEY LENGTH = 0
012300       MOVE +8 TO RETURN-CODE
012400       GO TO RETURN-ROUTINE
012500     END-IF
012600
012700*    SORT KEY + POS LONGER THAN VECTOR ENTRY
012800     IF (XS-SRTKEY-LEN + XS-SRTKEY-POS - 1)
012900          > XS-NTRY-LEN
013000*      SORT - KEY LENGTH TOO LONG
013100       MOVE +8 TO RETURN-CODE
013200       GO TO RETURN-ROUTINE
013300     END-IF
013400
013500     CONTINUE.
013600 MAINLINE-ROUTINE.
013700
013800*    TRANSFORM THE VECTOR INTO A HEAP
013900     PERFORM 00100-PERCUP-HI
014000          THRU 00100-PERCUP-HI-END
014100        VARYING I FROM 2 BY +1
014200        UNTIL I > XS-NTRY-COUNT
014300
014400*    SORT THE VECTOR USING THE HEAP SORT METHOD
014500     PERFORM
014600        VARYING I FROM XS-NTRY-COUNT BY -1
014700        UNTIL I < 1
014800*      COMPUTE POSITION OF LAST NODE IN HEAP
014900       COMPUTE LS-NPOS-L = (I - 1) * XS-NTRY-LEN + 1
015000*      SWAP ROOT NODE AND LAST NODE IN HEAP
015100*      MOVE ROOT NODE TO SAVE AREA
015200       MOVE XS-VECTOR (1:XS-NTRY-LEN)
015300            TO LS-WORK-NODE
015400*      MOVE LAST NODE TO ROOT NODE
015500       MOVE XS-VECTOR (LS-NPOS-L:XS-NTRY-LEN)
015600            TO XS-VECTOR (1:XS-NTRY-LEN)
015700*      MOVE SAVE AREA TO LAST NODE
015800       MOVE LS-WORK-NODE
015900            TO XS-VECTOR (LS-NPOS-L:XS-NTRY-LEN)
016000*      REESTABLISH HEAP PROPERTY
016100       PERFORM 00200-PERCDOWN-LO
016200            THRU 00200-PERCDOWN-LO-END
016300     END-PERFORM
016400
016500     CONTINUE.
016600 RETURN-ROUTINE.
016700
016800     GOBACK.
016900                                                                        00
017000     EJECT.
017100* ------------------------------------------------------*
017200* PERFORMED ROUTINES
017300* ------------------------------------------------------*
017400
017500     CONTINUE.
017600 00100-PERCUP-HI.
017700     MOVE SPACE TO LS-TERM-FLAG
017800     MOVE I     TO LS-SUB-C
017900     PERFORM 00110-PERCUP-HI
018000          THRU 00110-PERCUP-HI-END
018100        UNTIL LS-TERM-FLAG = 'Y'
018200
018300     CONTINUE.
018400 00100-PERCUP-HI-END.
018500     EXIT.
018600
018700     CONTINUE.
018800 00110-PERCUP-HI.
018900*    CHECK SUBSCRIPT OF CURRENT NODE IN VECTOR
019000     IF LS-SUB-C = +1
019100       MOVE 'Y' TO LS-TERM-FLAG
019200       GO TO 00110-PERCUP-HI-END
019300     END-IF
019400
019500*    COMPUTE SUBSCRIPT OF PARENT NODE IN VECTOR
019600     COMPUTE LS-SUB-P = LS-SUB-C / 2
019700
019800*    COMPUTE POSITION OF CURRENT NODE IN VECTOR
019900     COMPUTE LS-NPOS-C = (LS-SUB-C - 1) * XS-NTRY-LEN + 1
020000     COMPUTE LS-KPOS-C = LS-NPOS-C + XS-SRTKEY-POS - 1
020100
020200*    COMPUTE POSITION OF PARENT NODE IN VECTOR
020300     COMPUTE LS-NPOS-P = (LS-SUB-P - 1) * XS-NTRY-LEN + 1
020400     COMPUTE LS-KPOS-P = LS-NPOS-P + XS-SRTKEY-POS - 1
020500
020600*    IF PARENT NODE > CURRENT NODE (NO NEED TO SWAP)
020700     IF XS-VECTOR (LS-KPOS-P:XS-SRTKEY-LEN)
020800          > XS-VECTOR (LS-KPOS-C:XS-SRTKEY-LEN)
020900       MOVE 'Y' TO LS-TERM-FLAG
021000       GO TO 00110-PERCUP-HI-END
021100     END-IF
021200
021300*    SWAP PARENT NODE AND CURRENT NODE IN VECTOR
021400*    MOVE PARENT NODE TO SAVE AREA
021500     MOVE XS-VECTOR (LS-NPOS-P:XS-NTRY-LEN)
021600          TO LS-WORK-NODE
021700*    MOVE CURRENT NODE TO PARENT NODE
021800     MOVE XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
021900          TO XS-VECTOR (LS-NPOS-P:XS-NTRY-LEN)
022000*    MOVE SAVE AREA TO CURRENT NODE
022100     MOVE LS-WORK-NODE
022200          TO XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
022300
022400     MOVE LS-SUB-P TO LS-SUB-C
022500
022600     CONTINUE.
022700 00110-PERCUP-HI-END.
022800     EXIT.
022900
023000     CONTINUE.
023100 00200-PERCDOWN-LO.
023200     MOVE SPACE TO LS-TERM-FLAG
023300     MOVE +1    TO LS-SUB-C
023400     PERFORM 00210-PERCDOWN-LO
023500          THRU 00210-PERCDOWN-LO-END
023600        UNTIL LS-TERM-FLAG = 'Y'
023700
023800     CONTINUE.
023900 00200-PERCDOWN-LO-END.
024000     EXIT.
024100
024200     CONTINUE.
024300 00210-PERCDOWN-LO.
024400*    COMPUTE SUBSCRIPT OF LEFT SIBLING NODE IN VECTOR
024500     COMPUTE LS-SUB-LS = LS-SUB-C * 2
024600
024700*    COMPUTE SUBSCRIPT OF RIGHT SIBLING NODE IN VECTOR
024800     COMPUTE LS-SUB-RS = LS-SUB-LS + 1
024900
025000*    CHECK SUBSCRIPT OF LEFT SIBLING NODE IN VECTOR
025100     IF LS-SUB-LS > (I - 1)
025200       MOVE 'Y' TO LS-TERM-FLAG
025300       GO TO 00210-PERCDOWN-LO-END
025400     END-IF
025500
025600*    COMPUTE POSITION OF CURRENT NODE IN VECTOR
025700     COMPUTE LS-NPOS-C = (LS-SUB-C - 1) * XS-NTRY-LEN + 1
025800     COMPUTE LS-KPOS-C = LS-NPOS-C + XS-SRTKEY-POS - 1
025900
026000*    COMPUTE POSITION OF LEFT SIBLING NODE IN VECTOR
026100     COMPUTE LS-NPOS-LS = (LS-SUB-LS - 1) * XS-NTRY-LEN + 1
026200     COMPUTE LS-KPOS-LS = LS-NPOS-LS + XS-SRTKEY-POS - 1
026300     MOVE LS-LEFT-SIBLING-NODE TO LS-MAXMIN-SIBLING-NODE
026400
026500*    CHECK SUBSCRIPT OF RIGHT SIBLING NODE IN VECTOR
026600     IF LS-SUB-RS <= (I - 1)
026700*      COMPUTE POSITION OF RIGHT SIBLING NODE IN VECTOR
026800       COMPUTE LS-NPOS-RS = LS-NPOS-LS + XS-NTRY-LEN
026900       COMPUTE LS-KPOS-RS = LS-NPOS-RS + XS-SRTKEY-POS - 1
027000*      IF RIGHT SIBLING NODE > LEFT SIBLING NODE
027100       IF XS-VECTOR (LS-KPOS-RS:XS-SRTKEY-LEN)
027200            > XS-VECTOR (LS-KPOS-LS:XS-SRTKEY-LEN)
027300         MOVE LS-RIGHT-SIBLING-NODE TO LS-MAXMIN-SIBLING-NODE
027400       END-IF
027500     END-IF
027600
027700*    IF CURRENT NODE > MAX SIBLING NODE IN VECTOR
027800     IF XS-VECTOR (LS-KPOS-C:XS-SRTKEY-LEN)
027900          > XS-VECTOR (LS-KPOS-MS:XS-SRTKEY-LEN)
028000       MOVE 'Y' TO LS-TERM-FLAG
028100       GO TO 00210-PERCDOWN-LO-END
028200     END-IF
028300
028400*    SWAP SIBLING NODE AND CURRENT NODE IN VECTOR
028500*    MOVE SIBLING NODE TO SAVE AREA
028600     MOVE XS-VECTOR (LS-NPOS-MS:XS-NTRY-LEN)
028700          TO LS-WORK-NODE
028800*    MOVE CURRENT NODE TO SIBLING NODE
028900     MOVE XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
029000          TO XS-VECTOR (LS-NPOS-MS:XS-NTRY-LEN)
029100*    MOVE SAVE AREA TO CURRENT NODE
029200     MOVE LS-WORK-NODE
029300          TO XS-VECTOR (LS-NPOS-C:XS-NTRY-LEN)
029400
029500     MOVE LS-SUB-MS TO LS-SUB-C
029600
029700     CONTINUE.
029800 00210-PERCDOWN-LO-END.
029900     EXIT.
